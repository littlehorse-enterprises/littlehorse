plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '6.20.0'
}

sourceCompatibility=17
targetCompatibility=17

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = 'littlehorse-server'
            version = version
            from components.java
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.0.0'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
    testImplementation 'net.datafaker:datafaker:1.9.0'
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0'

    // Stuff for Kafka
    implementation "org.apache.kafka:kafka-clients:${kafkaVersion}"
    implementation "org.apache.kafka:kafka-streams:${kafkaVersion}"
    testImplementation "org.apache.kafka:kafka-streams-test-utils:${kafkaVersion}"

    // Auth
    implementation 'com.nimbusds:oauth2-oidc-sdk:10.9.2'

    // Utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'com.google.guava:guava:32.0.1-jre'

    // gRPC and Protobuf now included in lh-sdk
    implementation project(':sdk-java')

    // Prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus:1.11.2'
    implementation 'io.javalin:javalin:5.6.0'

    // Lombok stuff
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation project(":test-utils")

    // JSON and YAML processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'
    implementation 'com.jayway.jsonpath:json-path:2.9.0'

    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.junit.platform:junit-platform-console-standalone:1.11.0-M2'

}


application {
    // Define the main class for the application.
    mainClass = 'io.littlehorse.App'
    executableDir = 'server'
}

compileJava {
    options.compilerArgs << '-parameters'
}

shadowJar {
    mergeServiceFiles()
}

test {
    useJUnitPlatform()
    filter {
        includeTestsMatching "io.littlehorse.**"
        excludeTestsMatching "e2e.**"
    }
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    jvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '--add-opens', 'java.base/java.util=ALL-UNNAMED']
}

task e2e(type: Test, dependsOn: compileJava){
    useJUnitPlatform()
    filter {
        includeTestsMatching "e2e.**"
        excludeTestsMatching "io.littlehorse.**"
    }
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    jvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '-Xms4096m', '-Xmx4096m', '-Xss2m', '-XX:+UseParallelGC', '--add-opens', 'java.base/java.util=ALL-UNNAMED']

    // TODO: Enable parallelism once we find the problem
    // // maxParallelForks = 2
    // // systemProperty "junit.jupiter.execution.parallel.enabled", "true"
}

spotless {
    java {
        target('**/*.java')
        targetExclude('**/proto/*.java')
        palantirJavaFormat()
    }
}

task testJar(type: Jar) {
    from sourceSets.test.output
    archiveClassifier.set('tests')
    description = 'Assembles a jar archive containing the test classes.'
    group = 'build'
    manifest {
        attributes(
                'Class-Path': configurations.testRuntimeClasspath.files.collect { it.name }.join(' '),
                'Main-Class': 'org.junit.platform.console.ConsoleLauncher'
        )
    }

    dependsOn configurations.testRuntimeClasspath
    from {
        configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}





