syntax = "proto3";
package littlehorse;

option java_multiple_files = true;
option java_package = "io.littlehorse.common.proto";

import "google/protobuf/timestamp.proto";
import "service.proto";
import "object_id.proto";
import "common_wfspec.proto";
import "user_tasks.proto";
import "common_enums.proto";
import "variable.proto";
import "storage.proto";
import "acls.proto";
import "job.proto";


// This is the schema of everything that flows through the Central Command topic.
message Command {
    google.protobuf.Timestamp time = 1;
    optional string command_id = 2;

    oneof command {
        ReportTaskRun report_task_run = 4;
        TaskClaimEventPb task_claim_event = 5;
        RunWfRequest run_wf = 6;
        PutExternalEventRequest put_external_event = 7;
        StopWfRunRequest stop_wf_run = 8;
        ResumeWfRunRequest resume_wf_run = 9;
        SleepNodeMaturedPb sleep_node_matured = 10;
        DeleteWfRunRequest delete_wf_run = 11;
        ExternalEventNodeTimeoutPb external_event_timeout = 12;
        TaskWorkerHeartBeatRequest task_worker_heart_beat = 13;
        DeleteExternalEventRequest delete_external_event = 14;
        AssignUserTaskRunRequest assign_user_task_run = 15;
        CompleteUserTaskRunRequest complete_user_task_run = 16;
        TriggeredTaskRunPb triggered_task_run = 17;
        DeadlineReassignUserTask reassigned_user_task = 18;
        CancelUserTaskRunRequest cancel_user_task = 19;
        BulkUpdateJob bulk_job = 20;
        TaskAttemptRetryReady task_attempt_retry_ready = 21;
        RescueThreadRunRequest rescue_thread_run = 22;
        DeleteTaskWorkerGroupRequest delete_task_worker_group = 23;
        ScheduleWfRun schedule_wf_run = 24;
        ScheduleWfRequest schedule_wf_run_request = 25;
        DeleteScheduledWfRunRequest delete_scheduled_wf_run = 26;
        SaveUserTaskRunProgressRequest save_user_task_run_progress = 27;
    }
}

// Schedule a workflow run in the timer topology.
message ScheduleWfRun {
    ScheduledWfRunId scheduled_id = 1;
    // The name of the WfSpec to run.
    string wf_spec_name = 2;

    // Optionally specify the major version of the WfSpec to run. This guarantees that
    // the "signature" of the WfSpec (i.e. the required input variables, and searchable
    // variables) will not change for this app.
    optional int32 major_version = 3;

    // Optionally specify the specific revision of the WfSpec to run. It is not recommended
    // to use this in practice, as the WfSpec logic should be de-coupled from the applications
    // that run WfRun's.
    optional int32 revision = 4;
    // A map from Variable Name to Values for those variables. The provided variables are
    // passed as input to the Entrypoint ThreadRun.
    map<string, VariableValue> variables = 5;
    // Parent WfRunId associated with all the generated WfRuns
    optional WfRunId parent_wf_run_id = 6;
    // UNIX expression used to specify the schedule for executing WfRuns
    string cron_expression = 7;
}

// This flows through the Metadata Command Topic
message MetadataCommand {
    google.protobuf.Timestamp time = 1;
    optional string command_id = 2;

    oneof metadata_command {
        PutWfSpecRequest put_wf_spec = 4;
        PutTaskDefRequest put_task_def = 5;
        PutExternalEventDefRequest put_external_event_def = 6;
        DeleteWfSpecRequest delete_wf_spec = 7;
        DeleteTaskDefRequest delete_task_def = 8;
        DeleteExternalEventDefRequest delete_external_event_def = 9;
        PutUserTaskDefRequest put_user_task_def = 10;
        DeleteUserTaskDefRequest delete_user_task_def = 11;

        PutPrincipalRequest put_principal = 12;
        DeletePrincipalRequest delete_principal = 13;
        PutTenantRequest put_tenant = 14;
        PutWorkflowEventDefRequest workflow_event_def = 15;
        // TODO: DeleteTenant

        DeleteWorkflowEventDefRequest delete_workflow_event_def = 16;
    }
}

// Repartition subcommand
message AggregateWfMetrics {
    WfSpecId wf_spec_id = 1;
    TenantId tenant_id = 2;
    repeated WfMetricUpdate metric_updates = 3;
}

message AggregateTaskMetrics {
    TaskDefId task_def_id = 1;
    TenantId tenant_id = 2;
    repeated TaskMetricUpdate metric_updates = 3;
}

message WfMetricUpdate {
    google.protobuf.Timestamp window_start = 1;
    MetricsWindowLength type = 2;
    WfSpecId wf_spec_id = 3;
    int64 num_entries = 4;
    int64 start_to_complete_max = 5;
    int64 start_to_complete_total = 6;
    int64 total_completed = 7;
    int64 total_errored = 8;
    int64 total_started = 9;
}

message PartitionMetrics {
    repeated MetricsByTenant metrics_by_tenant = 1;
}

message MetricsByTenant {
    TenantId tenant_id = 1;
    // workflow runs status changes
    map<string, StatusChanges> lh_status_changes = 2;
    // task run status changes
    map<string, StatusChanges> task_status_changes = 3;
}

message StatusChanges {
    repeated StatusChanged changes = 1;
}

message StatusChanged {
    google.protobuf.Timestamp time = 1;
    oneof status {
        LHStatusChanged lh_status = 2;
        TaskStatusChanged task_status = 3;
    }
    int64 first_event_to_last_delay = 9;
}

message LHStatusChanged {
    optional LHStatus previous_status = 1;
    LHStatus new_status = 2;
}

message TaskStatusChanged {
    optional TaskStatus previous_status = 1;
    TaskStatus new_status = 2;
}

// This is the repartition command
message RepartitionCommandPb {
    google.protobuf.Timestamp time = 1;
    optional string command_id = 2;

    oneof repartition_command {
        CreateRemoteTagPb create_remote_tag = 5;
        RemoveRemoteTagPb remove_remote_tag = 6;
        AggregateWfMetrics aggregate_wf_metrics = 7;
        AggregateTaskMetrics aggregate_task_metrics = 8;
    }
}

message TaskMetricUpdate {
    TaskDefId task_def_id = 1;
    google.protobuf.Timestamp window_start = 2;
    MetricsWindowLength type = 3;

    int64 num_entries = 4;
    int64 schedule_to_start_max = 5;
    int64 schedule_to_start_total = 6;
    int64 start_to_complete_max = 7;
    int64 start_to_complete_total = 8;
    int64 total_completed = 9;
    int64 total_errored = 10;
    int64 total_started = 11;
    int64 total_scheduled = 12;

}

message CreateRemoteTagPb {
    TagPb tag = 1;
}

message RemoveRemoteTagPb {
    string store_key = 1;
    string partition_key = 2;
}

// These are internal commands that are sent by the LH Server itself but don't
// show up in the public api
message TaskClaimEventPb {
    TaskRunId task_run_id = 1;
    google.protobuf.Timestamp time = 2;
    string task_worker_id = 3;
    optional string task_worker_version = 4;
}

message ExternalEventNodeTimeoutPb {
    NodeRunId node_run_id = 1;
}

// This section contains commands that originate from the gRPC api. Perhaps they
// could also go in service.proto...?

message SleepNodeMaturedPb {
    NodeRunId node_run_id = 1;
}

// This is currently used by the UserTaskRun ActionTrigger, it could be potentially
// extended in the future to allow scheduling one-off tasks.
message TriggeredTaskRunPb {
    TaskNode task_to_schedule = 1;
    NodeRunId source = 2;
}

message TaskAttemptRetryReady {
    TaskRunId id = 1;
}

message DeadlineReassignUserTask {
    optional VariableAssignment new_user_id = 1;
    optional VariableAssignment new_user_group = 2;
    UserTaskRunId user_task = 4;
    int64 epoch = 5;
}


// Timer doesn't warrant its own file, and it is closely related to a Command
// anyways.
message LHTimerPb {
    google.protobuf.Timestamp maturation_time = 1;
    string key = 2;
    string topic = 3;
    bytes payload = 4;
    optional TenantId tenant_id = 5; // default if not set
    optional PrincipalId principal_id = 6; // anonymous if not set
}

message DeleteTaskWorkerGroupRequest {
    TaskDefId id = 1;
}
