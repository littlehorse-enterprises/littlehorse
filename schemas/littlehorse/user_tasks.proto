syntax = "proto3";

package littlehorse;

import "google/protobuf/timestamp.proto";
import "common_enums.proto";
import "object_id.proto";
import "variable.proto";

option go_package = ".;lhproto";
option java_multiple_files = true;
option java_package = "io.littlehorse.sdk.common.proto";
option csharp_namespace = "LittleHorse.Sdk.Common.Proto";

// UserTaskDef is the metadata blueprint for UserTaskRuns.
message UserTaskDef {
  // The name of the `UserTaskDef`
  string name = 1;

  // The version of the `UserTaskDef`. Only simple versioning is supported.
  int32 version = 2;

  // Metadata field that does not impact WfRun execution. Useful for providing
  // context on the UserTaskRun, for example when displaying it on a general-purpose
  // task manager application.
  optional string description = 3;

  // These are the fields comprise the User Task. A User Task Manager application, or
  // any application used to complete a UserTaskRun, should inspect these fields and
  // display form entries for each one.
  repeated UserTaskField fields = 4;

  // The time the UserTaskRun was created.
  google.protobuf.Timestamp created_at = 5;
}

// A UserTaskField is a specific field of data to be entered into a UserTaskRun.
message UserTaskField {
  // The name of the field. When a UserTaskRun is completed, the NodeOutput is a
  // single-level JSON_OBJ. Each key is the name of the field. Must be unique.
  string name = 1;

  // The type of the output. Must be a basic primitive type (STR, BOOL, INT, DOUBLE).
  VariableType type = 2;

  // Optional description which can be displayed by the User Task UI application.
  // Does not affect WfRun execution.
  optional string description = 3;

  // The name to be displayed by the User Task UI application. Does not affect
  // WfRun execution.
  string display_name = 4;

  // Whether this field is required for UserTaskRun completion.
  bool required = 5;

  // Later versions will allow stuff such as:
  // 1. Validation (eg. email address, integer between 1-10, etc)
  // 2. Nested object structures
  // 3. Multi-Page forms (survey-js style)
  // 4. Conditional rendering of forms based on input (surveyjs style)
  // 5. Default values and optional fields
}

// A UserTaskRun is a running instance of a UserTaskDef. It is created when a
// ThreadRun arrives at a Node of type `USER_TASK`.
message UserTaskRun {
  // The ID of the UserTaskRun.
  UserTaskRunId id = 1;

  // The ID of the UserTaskDef that this UserTaskRun comes from.
  UserTaskDefId user_task_def_id = 2;

  // Denotes the UserTaskRun as belonging to a specific User Group.
  //
  // The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
  // is the responsibility of the application to keep track of user/group identity and ensure
  // that the user_group does indeed exist.
  //
  // Either `user_id` or `user_group` or both are set at any time.
  optional string user_group = 3;

  // Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
  // the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
  //
  // The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
  // is the responsibility of the application to keep track of user identity and ensure
  // that the user_id does indeed exist.
  //
  // Either `user_id` or `user_group` or both are set at any time.
  optional string user_id = 4;

  // The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
  // Each key in this map is the `name` of a corresponding `UserTaskField` on the
  // UserTaskDef.
  map<string, VariableValue> results = 6;

  // Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
  UserTaskRunStatus status = 7;

  // A list of events that have happened. Used for auditing information.
  repeated UserTaskEvent events = 8;

  // Notes about this UserTaskRun that are **specific to the WfRun**. These notes
  // are set by the WfSpec based on variables inside the specific `WfRun` and are
  // intended to be displayed on the User Task Manager application. They do not
  // affect WfRun execution.
  optional string notes = 9;

  // The time that the UserTaskRun was created/scheduled.
  google.protobuf.Timestamp scheduled_time = 10;

  // The NodeRun with which the UserTaskRun is associated.
  NodeRunId node_run_id = 11;

  // Current observed epoch of the UserTaskRun, related to the number of times it has been
  // updated or re-assigned. Used internally to implement automated reassignment and reminder
  // tasks.
  int32 epoch = 12;

}

// Re-Assigns a UserTaskRun to a specific userId or userGroup.
message AssignUserTaskRunRequest {
  // The UserTaskRun to assign to a new user_id or user_group.
  UserTaskRunId user_task_run_id = 1;

  // If override_claim is set to false and the UserTaskRun is already assigned to
  // a user_id, then the request throws a FAILED_PRECONDITION error. If set to
  // true, then the old claim is overriden and the UserTaskRun is assigned to
  // the new user.
  bool override_claim = 2;

  // The new user_group to which the UserTaskRun is assigned. If not set, then
  // the user_group of the UserTaskRun is actively unset by this request. At least
  // one of the user_group and user_id must be set.
  optional string user_group = 3;

  // The new user_id to which the UserTaskRun is assigned. If not set, then
  // the user_id of the UserTaskRun is actively unset by this request. At least
  // one of the user_group and user_id must be set.
  optional string user_id = 4;
}

// Completes a UserTaskRun with provided values.
message CompleteUserTaskRunRequest {
  // The id of UserTaskRun to complete.
  UserTaskRunId user_task_run_id = 1;

  // A map from UserTaskField.name to a VariableValue containing the results of the
  // user filling out the form.
  map<string, VariableValue> results = 2;

  // The ID of the user who executed the task.
  string user_id = 3;
}

// Saves the results of a UserTaskRun and logs who saved the content.<br/>
//
// <li> Throws FAILED_PRECONDITION if the UserTaskRun is in the `DONE` or `CANCELLED` state.</li>
// <li> If `policy` is set to `FAIL_IF_CLAIMED_BY_OTHER`, returns `FAILED_PRECONDITION` if the
// `user_id` field of the `UserTaskRun` does not match the `user_id` of the request.</li>
message SaveUserTaskRunProgressRequest {
  // The id of UserTaskRun to save.
  UserTaskRunId user_task_run_id = 1;

  // A map from UserTaskField.name to a VariableValue containing the results of the
  // user filling out the form.
  map<string, VariableValue> results = 2;

  // The ID of the user who saved the task.
  string user_id = 3;

  // Configures how to handle `UserTaskRun` ownership when saving it.
  enum SaveUserTaskRunAssignmentPolicy {
    // If the UserTaskRun is already assigned to a user_id, then the request throws a
    // FAILED_PRECONDITION error.
    FAIL_IF_CLAIMED_BY_OTHER = 0;

    // If the UserTaskRun is already assigned to a user_id, then the request will
    // leave the `UserTaskRun` assigned to the current user but still update the
    // `results` and log in the `events` who updated the results.
    IGNORE_CLAIM = 1;
  }

  // Configures how to handle `UserTaskRun` ownership when saving it.
  SaveUserTaskRunAssignmentPolicy policy = 4;
}


// Cancels a UserTaskRun.
message CancelUserTaskRunRequest {
  // The id of the `UserTaskRun` to cancel.
  UserTaskRunId user_task_run_id = 1;
}

// Adds a comment to a UserTaskRun.
message PutUserTaskRunCommentRequest {
  // The id of `UserTaskRun` to save.
  UserTaskRunId user_task_run_id = 1;

  // The author of the comment being made on a `UserTaskRun`
  string user_id = 2;

  // The comment being made on a `UserTaskRun`
  string comment = 3;
}

// Edits an existing comment on a UserTaskRun
message EditUserTaskRunCommentRequest {
  // This is the unique identifier for a comment
  int32 user_comment_id = 1;

  // The id of `UserTaskRun`
  UserTaskRunId user_task_run_id = 2;

  // The author of the comment being made on a `UserTaskRun`
  string user_id = 3;

  // The comment being made on a `UserTaskRun`
  string comment = 4;
}

// Deletes a comment on a UserTaskRun
message DeleteUserTaskRunCommentRequest {
  
  // The id of `UserTaskRun`
  UserTaskRunId user_task_run_id = 1;

  // The id of the comment you are deleting
  int32 user_comment_id = 2;

  // The id of the user who deleted the comment
  string user_id = 3;
}

// All TaskRun's have a "trigger reference" which refers to the WfRun Element that
// caused the TaskRun to be scheduled. For example, a TaskRun on a regular TASK_NODE
// has a TaskNodeReference.
//
// The UserTaskTriggerReference serves as the "Trigger Reference" for a TaskRun that
// was scheduled by a lifecycle hook on a UserTaskRun (eg. a reminder task).
//
// The UserTaskTriggerReference is most useful in the WorkerContext of the Task Worker
// SDK, which allows the Task Method to determine where the TaskRun comes from.
message UserTaskTriggerReference {
  // Is the NodeRun that the UserTaskRun belongs to.
  NodeRunId node_run_id = 1;

  // Is the index in the `events` field of the UserTaskRun that the TaskRun corresponds
  // to.
  int32 user_task_event_number = 2;

  // Is the user_id that the UserTaskRun is assigned to. Unset if UserTaskRun is not
  // asigned to a specific user_id.
  optional string user_id = 3;

  // Is the user_group that the UserTaskRun is assigned to. Unset if UserTaskRun is not
  // asigned to a specific user_group.
  optional string user_group = 4;
}

// The status that a UserTaskRun can be in.
enum UserTaskRunStatus {
  // Not assigned to a specific user yet.
  UNASSIGNED = 0;

  // Assigned to a specific user, but not completed or cancelled yet.
  ASSIGNED = 1;

  // Done.
  DONE = 3;

  // Cancelled.
  CANCELLED = 4;
}

// This is an event stored in the audit log of a `UserTaskRun` purely for observability
// purposes.
message UserTaskEvent {
  // the time the event occurred.
  google.protobuf.Timestamp time = 1;

  // Empty message used to denote that the `UserTaskRun` was cancelled.
  message UTECancelled {
    string message = 1;
  }

  // Message to denote that a `TaskRun` was scheduled by a trigger for this UserTaskRun.
  message UTETaskExecuted {
    // The `TaskRunId` of the scheduled `TaskRun`
    TaskRunId task_run = 1;
  }

  // Message to denote that the `UserTaskRun` was saved.
  message UTESaved {
    // The user_id of the user who saved the UserTaskRun.
    string user_id = 1;

    // The results that were saved.
    map<string, VariableValue> results = 2;
  }

  // Message denoting that the UserTaskRun was assigned.
  message UTEAssigned {
    // The user_id before the ownership change, if set.
    optional string old_user_id = 1;
    // The user_group before the ownership change, if set.
    optional string old_user_group = 2;

    // The user_id after the ownership change, if set.
    optional string new_user_id = 3;
    // The user_group after the ownership change, if set.
    optional string new_user_group = 4;
  }

  // Message to denote that a comment has been added or edited on a userTaskRun
  message UTECommented {
    // The id of the user comment
    int32 user_comment_id = 1;
    // This is the id of the user 
    string user_id = 2;
    // This is the specific note/comment that a user wants to make 
    // on a `UserTask`
    string comment = 3; 
  }

  // Message to denote that a userTaskRun has been deleted
  message UTECommentDeleted {
  // The id of the comment that will be deleted
  int32 user_comment_id = 1;

  // The id of the user who deleted the comment
  string user_id = 2;
  }

  // Empty message denoting a `userTaskRunCompleted`
  message UTECompleted {}

  // The event that occurred.
  oneof event {
    // Denotes that a TaskRun was scheduled via a trigger.
    UTETaskExecuted task_executed = 2;

    // Denotes that the UserTaskRun was assigned.
    UTEAssigned assigned = 3;

    // Denotes that the UserTaskRun was cancelled.
    UTECancelled cancelled = 4;

    // Denotes that the `UserTaskRun` was saved.
    UTESaved saved = 5;

    // Denotes that there was a comment on a `userTaskRun`
    UTECommented comment_added = 6;

    // Denotes that a comment on a `userTaskRun` has been edited
    UTECommented comment_edited = 7;

    // Denotes that a comment on a `userTaskRun` was deleted
    UTECommentDeleted comment_deleted = 8;

    // Denotes that a `userTaskRun` has been completed
    UTECompleted completed = 9 ;
  }
}
