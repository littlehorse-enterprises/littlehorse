syntax = "proto3";

package littlehorse;

import "google/protobuf/timestamp.proto";
import "common_enums.proto";

option go_package = ".;model";
option java_multiple_files = true;
option java_package = "io.littlehorse.sdk.common.proto";
option csharp_namespace = "LittleHorse.Common.Proto";

// The ID of a WfSpec.
message WfSpecId {
  // Name of the WfSpec.
  string name = 1;

  // Major Version of a WfSpec.
  //
  // Note that WfSpec's are versioned. Creating a new WfSpec with the same name
  // and no breaking changes to the public Variables API results in a new WfSpec
  // being created with the same MajorVersion and a new revision. Creating a
  // WfSpec with a breaking change to the public Variables API results in a
  // new WfSpec being created with the same name, an incremented major_version,
  // and revision = 0.
  int32 major_version = 2;

  // Revision of a WfSpec.
  //
  // Note that WfSpec's are versioned. Creating a new WfSpec with the same name
  // and no breaking changes to the public Variables API results in a new WfSpec
  // being created with the same MajorVersion and a new revision. Creating a
  // WfSpec with a breaking change to the public Variables API results in a
  // new WfSpec being created with the same name, an incremented major_version,
  // and revision = 0.
  int32 revision = 3;
}

// ID for a TaskDef.
message TaskDefId {
  // TaskDef's are uniquely identified by their name.
  string name = 1;
}

// ID for ExternalEventDef
message ExternalEventDefId {
  // ExternalEventDef's are uniquedly identified by their name.
  string name = 1;
}

// ID for a UserTaskDef
message UserTaskDefId {
  // The name of a UserTaskDef
  string name = 1;

  // Note that UserTaskDef's use simple versioning.
  int32 version = 2;
}

// ID for a WorkflowEventDef.
message WorkflowEventDefId {
    // The name of the WorkflowEventDef
    string name = 1;
}

// ID for a TaskWorkerGroup.
message TaskWorkerGroupId {
  // TaskWorkerGroups are uniquely identified by their TaskDefId.
  TaskDefId task_def_id = 1;
}

// Id for a Variable.
message VariableId {
  // WfRunId for the variable. Note that every Variable is associated with
  // a WfRun.
  WfRunId wf_run_id = 1;

  // Each Variable is owned by a specific ThreadRun inside the WfRun it belongs
  // to. This is that ThreadRun's number.
  int32 thread_run_number = 2;

  // The name of the variable.
  string name = 3;
}

// ID for an ExternalEvent.
message ExternalEventId {
  // WfRunId for the ExternalEvent. Note that every ExternalEvent is associated
  // with a WfRun.
  WfRunId wf_run_id = 1;

  // The ExternalEventDef for this ExternalEvent.
  ExternalEventDefId external_event_def_id = 2;

  // A unique guid allowing for distinguishing this ExternalEvent from other events
  // of the same ExternalEventDef and WfRun.
  string guid = 3;
}

// ID for a WfRun
message WfRunId {
  // The ID for this WfRun instance.
  string id = 1;

  // A WfRun may have a parent WfRun. If so, this field is set to the parent's ID.
  optional WfRunId parent_wf_run_id = 2;
}

// ID for a NodeRun.
message NodeRunId {
  // ID of the WfRun for this NodeRun. Note that every NodeRun is associated with
  // a WfRun.
  WfRunId wf_run_id = 1;

  // ThreadRun of this NodeRun. Note that each NodeRun belongs to a ThreadRun.
  int32 thread_run_number = 2;

  // Position of this NodeRun within its ThreadRun.
  int32 position = 3;
}

// An ID for a WorkflowEvent.
message WorkflowEventId {
  // The Id of the WfRun that threw the event.
  WfRunId wf_run_id = 1;

  // The ID of the WorkflowEventDef that this WorkflowEvent is a member of.
  WorkflowEventDefId workflow_event_def_id = 2;

  // A sequence number that makes the WorkflowEventId unique among all WorkflowEvent's of the
  // same type thrown by the WfRun. This field starts at zero and is incremented every
  // time a WorkflowEvent of the same type is thrown by the same WfRun.
  int32 number = 3;
}

// ID for a TaskRun.
message TaskRunId {
  // WfRunId for this TaskRun. Note that every TaskRun is associated with
  // a WfRun.
  WfRunId wf_run_id = 1;

  // Unique identifier for this TaskRun. Unique among the WfRun.
  string task_guid = 2;
}

// ID for a UserTaskRun
message UserTaskRunId {
  // WfRunId for this UserTaskRun. Note that every UserTaskRun is associated
  // with a WfRun.
  WfRunId wf_run_id = 1;

  // Unique identifier for this UserTaskRun.
  string user_task_guid = 2;
}

// ID for a specific window of TaskDef metrics.
message TaskDefMetricsId {
  // The timestamp at which this metrics window starts.
  google.protobuf.Timestamp window_start = 1;

  // The length of this window.
  MetricsWindowLength window_type = 2;

  // The TaskDefId that this metrics window reports on.
  TaskDefId task_def_id = 3;
}

// ID for a specific window of WfSpec metrics.
message WfSpecMetricsId {
  // The timestamp at which this metrics window starts.
  google.protobuf.Timestamp window_start = 1;

  // The length of this window.
  MetricsWindowLength window_type = 2;

  // The WfSpecId that this metrics window reports on.
  WfSpecId wf_spec_id = 3;
}

// ID for a Principal.
message PrincipalId {
  // The id of this principal. In OAuth, this is the OAuth Client ID (for
  // machine principals) or the OAuth User Id (for human principals).
  string id = 1;
}

// ID for a Tenant.
message TenantId {
  // The Tenant ID.
  string id = 1;
}
