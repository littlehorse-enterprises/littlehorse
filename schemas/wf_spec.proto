syntax = "proto3";

package littlehorse;

import "google/protobuf/timestamp.proto";
import "common_enums.proto";
import "common_wfspec.proto";
import "object_id.proto";

option go_package = ".;model";
option java_multiple_files = true;
option java_package = "io.littlehorse.sdk.common.proto";
option csharp_namespace = "LittleHorse.Common.Proto";

message WfSpec {
  WfSpecId id = 1;
  google.protobuf.Timestamp created_at = 2;
  repeated ThreadVarDef frozen_variables = 3;

  // to be used for WfSpec Status, i.e. ACTIVE/TERMINATING/ARCHIVED
  MetadataStatus status = 4;

  map<string, ThreadSpec> thread_specs = 5;
  string entrypoint_thread_name = 6;

  optional WorkflowRetentionPolicy retention_policy = 7;
  optional WfSpecVersionMigration migration = 8;
}

message WorkflowRetentionPolicy {
  oneof wf_gc_policy {
    // Delete all WfRun's X seconds after they terminate, regardless of
    // status.
    int64 seconds_after_wf_termination = 1;

    // Future versions can allow different retention based on WfRun status.
  }
}

message JsonIndex {
  string field_path = 1;
  VariableType field_type = 2;
}

message SearchableVariableDef {
  VariableDef var_def = 1;
  // Future: Add index information (local/remote/etc)
}

message ThreadVarDef {
  VariableDef var_def = 1;
  bool required = 2;
  bool searchable = 3;
  repeated JsonIndex json_indexes = 4;
}

message ThreadSpec {
  map<string, Node> nodes = 1;
  repeated ThreadVarDef variable_defs = 2;
  repeated InterruptDef interrupt_defs = 3;

  optional ThreadRetentionPolicy retention_policy = 4;
}

message ThreadRetentionPolicy {
  oneof thread_gc_policy {
    // Delete associated ThreadRun's X seconds after they terminate, regardless
    // of status.
    int64 seconds_after_thread_termination = 1;

    // Future versions can allow different policies based on ThreadRun status.
  }
}

message InterruptDef {
  ExternalEventDefId external_event_def_id = 1;
  string handler_spec_name = 2;
}

message StartThreadNode {
  string thread_spec_name = 1;
  map<string, VariableAssignment> variables = 2;
}

message StartMultipleThreadsNode {
  string thread_spec_name = 1;
  map<string, VariableAssignment> variables = 2;
  VariableAssignment iterable = 3;
}

message FailureHandlerDef {
  string handler_spec_name = 2;
  enum LHFailureType {
    FAILURE_TYPE_ERROR = 0;
    FAILURE_TYPE_EXCEPTION = 1;
  }
  oneof failure_to_catch {
    string specific_failure = 1;
    LHFailureType any_failure_of_type = 3;
  }
}

message WaitForThreadsNode {
  message ThreadToWaitFor {
    VariableAssignment thread_run_number = 1;
  }

  // Either 1 or 3 is set. Cannot put `repeated` into a oneof, and
  // for compatibility reasons, we cannot wrap it into a separate message.
  repeated ThreadToWaitFor threads = 1;
  optional VariableAssignment thread_list = 3;

  WaitForThreadsPolicy policy = 2;
}

message ExternalEventNode {
  ExternalEventDefId external_event_def_id = 1;
  VariableAssignment timeout_seconds = 2;
}

message EntrypointNode {

}

message ExitNode {
  optional FailureDef failure_def = 1;
}

message FailureDef {
  string failure_name = 1;
  string message = 2;
  optional VariableAssignment content = 3;
}

message Node {
  repeated Edge outgoing_edges = 1;
  repeated FailureHandlerDef failure_handlers = 4;

  oneof node {
    EntrypointNode entrypoint = 5;
    ExitNode exit = 6;
    TaskNode task = 7;
    ExternalEventNode external_event = 8;
    StartThreadNode start_thread = 9;
    WaitForThreadsNode wait_for_threads = 10;
    NopNode nop = 11;
    SleepNode sleep = 12;
    UserTaskNode user_task = 13;
    StartMultipleThreadsNode start_multiple_threads = 15;
  }
}

message UserTaskNode {
  string user_task_def_name = 1;

  // to whom should the User Task Run be assigned?
  optional VariableAssignment user_group = 2;
  optional VariableAssignment user_id = 3;

  // This is used to, for example, send a push notification to a mobile app
  // to remind someone that they need to fill out a task, or to re-assign
  // the task to another group of people
  repeated UTActionTrigger actions = 4;

  // So, once the WfSpec is created, this will be pinned to a version. Customer
  // can optionally specify a specific version or can leave it null, in which
  // case we just use the latest
  optional int32 user_task_def_version = 5;

  // Allow WfRun-specific notes for this User Task.
  optional VariableAssignment notes = 6;
}

message EdgeCondition {
  Comparator comparator = 1;
  VariableAssignment left = 2;
  VariableAssignment right = 3;
}

message Edge {
  string sink_node_name = 1;
  optional EdgeCondition condition = 2;
  repeated VariableMutation variable_mutations = 3;
}

message NopNode {
}

message SleepNode {
  oneof sleep_length {
    VariableAssignment raw_seconds = 1;
    VariableAssignment timestamp = 2;
    VariableAssignment iso_date = 3;
  }
}

message WfSpecVersionMigration {
  int32 new_major_version = 1;
  int32 new_revision = 2;
  map<string, ThreadSpecMigration> thread_spec_migrations = 3;
}

message ThreadSpecMigration {
  string new_thread_spec_name = 1;
  map<string, NodeMigration> node_migrations = 2;

  // Future work:
  // - allow changing Variable names
  // - allow overriding default values for new variables
  // - any other feature request that comes up in the field
}

message NodeMigration {
  string new_node_name = 1;

  // Future work:
  // - allow one-time task executions during migration
  // - allow iniatialization of Variables to special values
}
