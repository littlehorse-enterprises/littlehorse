// Timer-related stuff
syntax = "proto3";
package littlehorse;

option java_multiple_files = true;
option java_package = "io.littlehorse.common.proto";

import "google/protobuf/timestamp.proto";
import "service.proto";


// This section contains data structures used internally for sending the results of
// processing Commands. As a refresher, we need to send the result of processing
// over the network because, if Server A receives a request to idempotently run a
// WfRun with id='foo', but id='foo' partition is assigned to Server B, we need
// to do the processing on server B. Therefore, Server A sends the request over
// Kafka to Server B's partition, and then waits for Server B to process the
// request. Server B uses the data structures below to communicate that result
// back to server A.

message CommandResultPb {
    string command_id = 1;
    google.protobuf.Timestamp result_time = 2;
    bytes result = 3;
}

// The section below contains the protocol for inter-broker communication
enum StoreQueryStatusPb {
    RSQ_OK = 0; // If OK and bytes is empty, means that the key is not found.
    RSQ_NOT_AVAILABLE = 2; // Can't query store, eg. during a rebalance or if migrated.
}

message CentralStoreQueryResponse {
    StoreQueryStatusPb code = 1;
    optional bytes result = 2;
    int64 approximate_lag = 3;
}

message CentralStoreQueryPb {
    message CentralStoreSubQueryPb {
        oneof query {
            string key = 1;
            string last_from_prefix = 2;
        }
    }
    bool enable_stale_stores = 1;
    optional int32 specific_partition = 2;
    CentralStoreSubQueryPb query = 3;
    string store = 4;
}

message WaitForCommandPb {
    string command_id = 1;
}

message WaitForCommandResponse {
    StoreQueryStatusPb code = 1;
    optional CommandResultPb result = 2;
    optional string message = 3;
}


// This section defines structures used for paginated scan interactive queries. This
// is useful when we want to do things like "Get all nodeRuns for a given wfRun" or
// "find all Variable objects with type=STR, name='email', and value='foo@bar.com'"

enum ScanResultTypePb {
    // Just return the IDs of the objects.
    OBJECT_ID = 0;

    // Return the objects themselves. This can only be done for the object id prefix
    // scan type.
    OBJECT = 1;
}

message PartitionBookmarkPb { // used for paginated responses
    int32 parttion = 1;
    optional string last_key = 2;
}

message BookmarkPb { // Used for paginated responses
    map<int32, PartitionBookmarkPb> in_progress_partitions = 1;
    repeated int32 completed_partitions = 2;
}

message InternalScanPb {
    message TagScanPb {
        optional google.protobuf.Timestamp earliest_create_time = 1;
        optional google.protobuf.Timestamp latest_create_time = 2;
        string key_prefix = 3;
    }

    message BoundedObjectIdScanPb {
        string start_object_id = 1;
        optional string end_object_id = 2;
    }

    ScanResultTypePb result_type = 1;
    int32 limit = 2;
    optional BookmarkPb bookmark = 3;
    GetableClassEnum object_type = 4;
    string store_name = 5;

    // If this is set: Remote Tag Scan
    // Else: Local Tag Scan
    optional string partition_key = 6;

    oneof scan_boundary {
        BoundedObjectIdScanPb bounded_object_id_scan = 7;
        TagScanPb tag_scan = 8;
    }
}

message InternalScanResponse {
    StoreQueryStatusPb code = 1;

    // The type of 'result' depends on the query.
    repeated bytes results = 2;

    // If there are more results (i.e. we hit the limit), then updated_bookmark
    // is set. Otherwise, it is null.
    BookmarkPb updated_bookmark = 3;

    optional string message = 4;
}

// This is used to communicate about different available listeners. Kafka Streams
// provides a way to get info about the host for each other Streams instance.
// However, that Host:
// a) is internal to Kubernetes and
// b) points to the internal listener, not the public listener.
//
// When a Task Worker connects to one LH Server via the bootstrap url (i.e. the
// K8s service that points to all LH Servers), it needs to discover individual
// endpoints for each LH Server.
//
// Each LH Server has multiple advertised listeners for Task Workers. For example,
// the general configuration will have one external listener, which can be accessed
// over Ingress (eg. via Istio Ingressgateway and DNS), and one internal listener,
// which only works for clients in the same kubernetes cluster.
//
// Each listener (eg public/k8s-internal) has a name assigned to it. The Task Worker
// is configured to use a certain listener name based on which network it's in.
// The LHPublicApi grpc method 'registerTaskWorkerPb' takes in a Listener Name
// and returns listeners for all LH Servers.
//
// This endpoint is used to help the LHPublicApi get info about each of the LH
// Servers so that it can formulate the response described above.
message InternalGetAdvertisedHostsPb {}

message InternalGetAdvertisedHostsResponse {
    map<string, HostInfo> hosts = 1;
}

service LHInternals {
    rpc CentralStoreQuery(CentralStoreQueryPb) returns (CentralStoreQueryResponse) {}
    rpc InternalScan(InternalScanPb) returns (InternalScanResponse) {}

    rpc waitForCommand(WaitForCommandPb) returns (WaitForCommandResponse) {}

    rpc GetAdvertisedHosts(InternalGetAdvertisedHostsPb) returns (InternalGetAdvertisedHostsResponse) {}

    rpc TopologyInstancesState(TopologyInstanceStatePb) returns (TopologyInstanceStateResponse) {}

    rpc LocalTasks(LocalTasksPb) returns (LocalTasksResponse) {}

    // rpc TagScan(TagScanPb) returns (TagScanResponse) {}
}

// Stuff for the metrics topology
message TaskMetricUpdatePb {
    google.protobuf.Timestamp window_start = 1;
    MetricsWindowLength type = 2;
    int64 num_entries = 3;
    int64 schedule_to_start_max = 4;
    int64 schedule_to_start_total = 5;
    int64 start_to_complete_max = 6;
    int64 start_to_complete_total = 7;
    int64 total_completed = 8;
    int64 total_errored = 9;
    int64 total_started = 10;

    string task_def_name = 11;
    int64 total_scheduled = 12;
}


message CreateRemoteTagPb {
    TagPb tag = 1;
}

message RemoveRemoteTagPb {
    string store_key = 1;
    string partition_key = 2;
}

message WfMetricUpdatePb {
    google.protobuf.Timestamp window_start = 1;
    MetricsWindowLength type = 2;
    int64 num_entries = 3;
    int64 start_to_complete_max = 6;
    int64 start_to_complete_total = 7;
    int64 total_completed = 8;
    int64 total_errored = 9;
    int64 total_started = 10;

    string wf_spec_name = 11;
    int32 wf_spec_version = 12;
}

message RepartitionCommandPb {
    google.protobuf.Timestamp time = 1;
    optional string command_id = 2;
    oneof repartition_command {
        TaskMetricUpdatePb task_metric_update = 3;
        WfMetricUpdatePb wf_metric_update = 4;
        CreateRemoteTagPb create_remote_tag = 5;
        RemoveRemoteTagPb remove_remote_tag = 6;
    }
}

// Stuff for Index (internal to the store)
enum GetableClassEnum {
    TASK_DEF = 0;
    EXTERNAL_EVENT_DEF = 1;
    WF_SPEC = 2;
    WF_RUN = 3;
    NODE_RUN = 4;
    VARIABLE = 5;
    EXTERNAL_EVENT = 6;
    TASK_DEF_METRICS = 7;
    WF_SPEC_METRICS = 8;
    TASK_WORKER_GROUP = 9;
    USER_TASK_DEF = 10;
    TASK_RUN = 11;
    USER_TASK_RUN = 12;
}

message AttributePb {
    string key = 1;
    string val = 2;
}

enum TagStorageType {
    LOCAL = 0;
    REMOTE = 1;
}

message TagPb {
    // The following info is also stored in the key of the Tag in the store.
    GetableClassEnum object_type = 1;
    repeated AttributePb attributes = 2;
    string described_object_id = 3;
    google.protobuf.Timestamp created = 4;

    // The following is not stored in the key.
    TagStorageType tag_type = 5;

    string store_key = 7;

    // Observation: it's possible that we could optimize by removing fields 1-4
    // and only relying upon the store key. However, that would complicate
    // the code a bit and may just be premature optimization.
}

message TagsCachePb {
    message CachedTagPb {
        string id = 1;
        bool is_remote = 2;
    }
    repeated CachedTagPb cached_tags = 1;
}

message StoredGetablePb {
    TagsCachePb index_cache = 1;
    bytes getable_payload = 2;
    GetableClassEnum type = 3;
}

// This section defines the "Command"
message WfRunRequestPb {
    optional string wf_run_id = 1;
    string wf_spec_id = 2;
    map<string, VariableValue> variables = 3;
}

message TaskClaimEventPb {
    TaskRunId task_run_id = 1;
    google.protobuf.Timestamp time = 2;
    string task_worker_id = 3;
    optional string task_worker_version = 4;
}

message ExternalEventNodeTimeoutPb {
    string wf_run_id = 1;
    int32 thread_run_number = 2;
    int32 node_run_position = 3;
    google.protobuf.Timestamp time = 4;
}

// This section contains commands that originate from the gRPC api. Perhaps they
// could also go in service.proto...?

message SleepNodeMaturedPb {
    string wf_run_id = 1;
    int32 thread_run_number = 2;
    int32 node_run_position = 3;
}

// This is currently used by the UserTaskRun ActionTrigger, it could be potentially
// extended in the future to allow scheduling one-off tasks.
message TriggeredTaskRunPb {
    TaskNode task_to_schedule = 1;
    NodeRunId source = 2;
}

message ReassignedUserTaskPb {
    oneof assign_to {
        string user_id = 1;
        string user_group = 2;
    }
    int32 delay_in_seconds = 3;
    NodeRunId source = 4;
}

// This is the schema of everything that flows through the Central Command topic.
message CommandPb {
    google.protobuf.Timestamp time = 1;
    optional string command_id = 2;
    oneof command {
        ReportTaskRun report_task_run = 3;
        TaskClaimEventPb task_claim_event = 4;
        PutWfSpecRequest put_wf_spec = 6;
        PutTaskDefRequest put_task_def = 7;
        PutExternalEventDefRequest put_external_event_def = 8;
        RunWfRequest run_wf = 9;
        PutExternalEventRequest put_external_event = 10;
        StopWfRunRequest stop_wf_run = 11;
        ResumeWfRunRequest resume_wf_run = 12;
        SleepNodeMaturedPb sleep_node_matured = 13;
        DeleteWfRunRequest delete_wf_run = 14;
        DeleteWfSpecRequest delete_wf_spec = 15;
        DeleteTaskDefRequest delete_task_def = 16;
        DeleteExternalEventDefRequest delete_external_event_def = 17;
        ExternalEventNodeTimeoutPb external_event_timeout = 18;
        TaskWorkerHeartBeatRequest task_worker_heart_beat = 19;
        DeleteExternalEventRequest delete_external_event = 20;
        AssignUserTaskRunRequest assign_user_task_run = 21;
        CompleteUserTaskRunRequest complete_user_task_run = 22;
        PutUserTaskDefRequest put_user_task_def = 23;
        TriggeredTaskRunPb triggered_task_run = 24;
        DeleteUserTaskDefRequest delete_user_task_def = 25;
        ReassignedUserTaskPb reassigned_user_task = 26;
        CancelUserTaskRunRequest cancel_user_task = 27;
        // TODO: Add SaveUserTask
    }
}


// This is for LHTimers.

message LHTimerPb {
    google.protobuf.Timestamp maturation_time = 1;
    string key = 2;
    string topic = 3;
    bytes payload = 4;
}

message TopologyInstanceStateResponse {
    repeated ServerStatePb servers_core = 1;
    repeated ServerStatePb servers_timer = 2;
}

enum ServerStatusPb {
    HOST_UP = 0;
    HOST_DOWN = 1;
}

message ServerStatePb {
    repeated TaskStatePb active_tasks = 1;
    repeated StandByTaskStatePb standby_tasks = 2;
    string host = 3;
    int32 port = 4;
    string topology_name = 5;
    ServerStatusPb server_status = 6;
    optional string error_message = 7;
}

message TaskStatePb {
    string host = 1;
    string task_id = 2;
    string topic = 3;
    int32 partition = 4;
    int64 current_offset = 5;
    int32 port = 6;
    int64 lag = 7;
    string rack_id = 8;
}

message StandByTaskStatePb {
    string host = 1;
    string task_id = 2;
    int32 port = 3;
    int64 current_offset = 4;
    int64 lag = 5;
    string rack_id = 6;
}

message TopologyInstanceStatePb {
}

message LocalTasksPb {
}

message LocalTasksResponse {
    repeated TaskStatePb active_tasks = 1;
    repeated StandByTaskStatePb standby_tasks = 2;
}
