syntax = "proto3";

package littlehorse;

import "google/protobuf/timestamp.proto";

option go_package = ".;model";
option java_multiple_files = true;
option java_package = "io.littlehorse.sdk.common.proto";

enum LHResponseCode {
  OK = 0;
  CONNECTION_ERROR = 1;
  NOT_FOUND_ERROR = 2;
  BAD_REQUEST_ERROR = 3;
  VALIDATION_ERROR = 4;
  ALREADY_EXISTS_ERROR = 5;
  REPORTED_BUT_NOT_PROCESSED = 6;
}

enum LHStatus {
  STARTING = 0;
  RUNNING = 1;
  COMPLETED = 2;
  HALTING = 3;
  HALTED = 4;
  ERROR = 5;
}

enum TaskStatus {
  TASK_SCHEDULED = 0;
  TASK_RUNNING = 1;
  TASK_SUCCESS = 2;
  TASK_FAILED = 3;
  TASK_TIMEOUT = 4;
  TASK_OUTPUT_SERIALIZING_ERROR = 5;
  TASK_INPUT_VAR_SUB_ERROR = 6;
  TASK_CANCELLED = 7;
}

message WfSpecId {
  string name = 1;
  int32 version = 2;
}

message TaskDefId {
  string name = 1;
}

message ExternalEventDefId {
  string name = 1;
}

message GetLatestWfSpecRequest {
  string name = 1;
}

message GetLatestUserTaskDefRequest {
  string name = 1;
}

message GetWfSpecResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional WfSpec result = 3;
}

message PutWfSpecRequest {
  string name = 1;
  reserved 2, 3, 4;
  map<string, ThreadSpec> thread_specs = 5;
  string entrypoint_thread_name = 6;
  optional int32 retention_hours = 7;
}

message PutWfSpecResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional WfSpec result = 3;
}

message GetTaskDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional TaskDef result = 3;
}

message PutTaskDefRequest {
  string name = 1;
  repeated VariableDef input_vars = 2;
}

message PutTaskDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional TaskDef result = 3;
}

message CancelUserTaskRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
}

message PutUserTaskDefRequest {
  string name = 1;
  repeated UserTaskField fields = 2;
  optional string description = 3;
}

message PutUserTaskDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional UserTaskDef result = 3;
}

message GetUserTaskDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional UserTaskDef result = 3;
}

message PutExternalEventDefRequest {
  string name = 1;
  optional int32 retention_hours = 2;
}

message PutExternalEventDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional ExternalEventDef result = 3;
}

message GetExternalEventDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional ExternalEventDef result = 3;
}

message GetWfRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional WfRun result = 3;
}

message GetNodeRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional NodeRun result = 3;
}

message GetTaskRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional TaskRun result = 3;
}

message GetUserTaskRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional UserTaskRun result = 3;
}

message GetVariableResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional Variable result = 3;
}

message GetExternalEventResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional ExternalEvent result = 3;
}

message PutExternalEventRequest {
  string wf_run_id = 1;
  string external_event_def_name = 2;
  optional string guid = 3;
  VariableValue content = 5;
  optional int32 thread_run_number = 6;
  optional int32 node_run_position = 7;
  reserved 4, 8;
}

message DeleteExternalEventRequest {
  string wf_run_id = 1;
  string external_event_def_name = 2;
  string guid = 3;
}

message PutExternalEventResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional ExternalEvent result = 3;
}

message RunWfRequest {
  string wf_spec_name = 1;
  optional int32 wf_spec_version = 2;
  map<string, VariableValue> variables = 3;
  optional string id = 4;
}

message RunWfResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional int32 wf_spec_version = 3;
  optional string wf_run_id = 4;
}

message SearchWfRunRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  message StatusAndSpecRequest {
    string wf_spec_name = 1;
    LHStatus status = 2;
    int32 wf_spec_version = 3;
    optional google.protobuf.Timestamp earliest_start = 4;
    optional google.protobuf.Timestamp latest_start = 5;
  }
  message NameRequest {
    string wf_spec_name = 1;
    optional google.protobuf.Timestamp earliest_start = 2;
    optional google.protobuf.Timestamp latest_start = 3;
  }
  message StatusAndNameRequest {
    string wf_spec_name = 1;
    LHStatus status = 2;
    optional google.protobuf.Timestamp earliest_start = 3;
    optional google.protobuf.Timestamp latest_start = 4;
  }
  oneof wfrun_criteria {
    StatusAndSpecRequest status_and_spec = 3;
    NameRequest name = 4;
    StatusAndNameRequest status_and_name = 5;
  }
}

message SearchWfRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated WfRunId results = 3;

  // The bookmark is used internally by the backend implementation to enable
  // pagination. If you wish to do a multi-part paginated request, you should
  // pass in the bookmark (unaltered) to the next request.
  optional bytes bookmark = 4;
}

message SearchTaskRunRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  message StatusAndTaskDefRequest {
    TaskStatus status = 1;
    string task_def_name = 2;
    optional google.protobuf.Timestamp earliest_start = 3;
    optional google.protobuf.Timestamp latest_start = 4;
  }

  message ByTaskDefRequest {
    string task_def_name = 1;
    optional google.protobuf.Timestamp earliest_start = 2;
    optional google.protobuf.Timestamp latest_start = 3;
  }

  oneof task_run_criteria {
    StatusAndTaskDefRequest status_and_task_def = 3;
    ByTaskDefRequest task_def = 4;
  }
}

message SearchTaskRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated TaskRunId results = 3;
  optional bytes bookmark = 4;
}

message SearchNodeRunRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  oneof noderun_criteria {
    string wf_run_id = 3;
  }
}

message SearchNodeRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated NodeRunId results = 3;
  optional bytes bookmark = 4;
}

message SearchUserTaskRunRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  optional UserTaskRunStatus status = 3;
  optional string user_task_def_name = 4;

  oneof task_owner {
    User user = 5;
    UserGroup user_group = 6;
  }

  optional google.protobuf.Timestamp earliest_start = 7;
  optional google.protobuf.Timestamp latest_start = 8;
}

message SearchUserTaskRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated UserTaskRunId results = 3;
  optional bytes bookmark = 4;
}

message SearchVariableRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  message NameAndValueRequest {
    VariableValue value = 1;
    optional int32 wf_spec_version = 2;
    string var_name = 3;
    string wf_spec_name = 4;
  }

  oneof variable_criteria {
    string wf_run_id = 3;
    NameAndValueRequest value = 4;
  }
}

message SearchVariableResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated VariableId results = 3;
  optional bytes bookmark = 4;
}

message SearchTaskDefRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  optional string prefix = 3;
}

message SearchTaskDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated TaskDefId results = 3;
  optional bytes bookmark = 4;
}

message SearchUserTaskDefRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  oneof user_task_def_criteria {
    string prefix = 3;
    string name = 4;
  }
}

message SearchUserTaskDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated UserTaskDefId results = 3;
  optional bytes bookmark = 4;
}

message SearchWfSpecRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  oneof wf_spec_criteria {
    string name = 3;
    string prefix = 4;
    string task_def_name = 5;
  }
}

message SearchWfSpecResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated WfSpecId results = 3;
  optional bytes bookmark = 4;
}

message SearchExternalEventDefRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  optional string prefix = 3;
}

message SearchExternalEventDefResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated ExternalEventDefId results = 3;
  optional bytes bookmark = 4;
}

message SearchExternalEventRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  message ByExtEvtDefNameAndStatusRequest {
    string external_event_def_name = 1;
    optional bool is_claimed = 2;
  }

  oneof ext_evt_criteria {
    string wf_run_id = 3;
    ByExtEvtDefNameAndStatusRequest external_event_def_name_and_status = 4;
  }
}

message SearchExternalEventResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated ExternalEventId results = 3;
  optional bytes bookmark = 4;
}

message ListNodeRunsRequest {
  string wf_run_id = 1;
}

message ListNodeRunsResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated NodeRun results = 3;
}

message ListVariablesRequest {
  string wf_run_id = 1;
}

message ListVariablesResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated Variable results = 3;
}

message ListExternalEventsRequest {
  string wf_run_id = 1;
}

message ListExternalEventsResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated ExternalEvent results = 3;
}

message RegisterTaskWorkerRequest {
  string client_id = 1;
  string task_def_name = 2;
  string listener_name = 3;
}

message TaskWorkerHeartBeatRequest {
  string client_id = 1;
  string task_def_name = 2;
  string listener_name = 3;
}

message RegisterTaskWorkerResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated HostInfo your_hosts = 3;
}

message HostInfo {
  string host = 1;
  int32 port = 2;
}

message TaskWorkerMetadata {
  string client_id = 1;
  google.protobuf.Timestamp latest_heartbeat = 2;
  repeated HostInfo hosts = 3;
}

message TaskWorkerGroup {
  string task_def_name = 1;
  google.protobuf.Timestamp created_at = 2;
  map<string, TaskWorkerMetadata> task_workers = 3;
}

message TaskWorkerGroupId {
  string task_def_name = 1;
}

message PollTaskRequest {
  string task_def_name = 1;
  string client_id = 2;
  optional string task_worker_version = 3;
}

message ScheduledTask {
  TaskRunId task_run_id = 1;
  TaskDefId task_def_id = 2;
  int32 attempt_number = 3;
  repeated VarNameAndVal variables = 4;
  google.protobuf.Timestamp created_at = 5;
  TaskRunSource source = 6;
}

message TaskRunSource {
  oneof task_run_source {
    TaskNodeReference task_node = 1;
    UserTaskTriggerReference user_task_trigger = 2;
  }
}

message PollTaskResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional ScheduledTask result = 3;
}

message ReportTaskRun {
  TaskRunId task_run_id = 1;
  google.protobuf.Timestamp time = 2;
  TaskStatus status = 3;
  optional VariableValue output = 4;
  optional VariableValue log_output = 5;
  int32 attempt_number = 6;
}

message ReportTaskResponse {
  LHResponseCode code = 1;
  optional string message = 2;
}

message StopWfRunRequest {
  string wf_run_id = 1;
  int32 thread_run_number = 2;
}

message StopWfRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
}

message ResumeWfRunRequest {
  string wf_run_id = 1;
  int32 thread_run_number = 2;
}

message ResumeWfRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
}

message DeleteWfRunRequest {
  string wf_run_id = 1;
}

message DeleteTaskDefRequest {
  string name = 1;
}

message DeleteUserTaskDefRequest {
  string name = 1;
  int32 version = 2;
}

message DeleteWfSpecRequest {
  string name = 1;
  int32 version = 2;
}

message DeleteExternalEventDefRequest {
  string name = 1;
}

message DeleteObjectResponse {
  LHResponseCode code = 1;
  optional string message = 2;
}

message HealthCheckRequest {
}

enum LHHealthResult {
  LH_HEALTH_RUNNING = 0;
  LH_HEALTH_REBALANCING = 1;
  LH_HEALTH_ERROR = 2;
}

message HealthCheckResponse {
  LHHealthResult core_state = 1;
  LHHealthResult timer_state = 2;
}

message TaskDefMetricsQueryRequest {
  google.protobuf.Timestamp window_start = 1;
  MetricsWindowLength window_type = 2;
  optional string task_def_name = 3;
}

message TaskDefMetricsResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional TaskDefMetrics result = 3;
}

message ListTaskMetricsRequest {
  google.protobuf.Timestamp last_window_start = 1;
  int32 num_windows = 2;
  string task_def_name = 3;
  MetricsWindowLength window_length = 4;
}

message ListTaskMetricsResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated TaskDefMetrics results = 3;
}

message WfSpecMetricsQueryRequest {
  google.protobuf.Timestamp window_start = 1;
  MetricsWindowLength window_type = 2;
  string wf_spec_name = 3;
  int32 wf_spec_version = 4;
}

message WfSpecMetricsResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  optional WfSpecMetrics result = 3;
}

message ListWfMetricsRequest {
  google.protobuf.Timestamp last_window_start = 1;
  int32 num_windows = 2;
  string wf_spec_name = 3;
  int32 wf_spec_version = 4;
  MetricsWindowLength window_length = 5;
}

message ListWfMetricsResponse {
  LHResponseCode code = 1;
  optional string message = 2;
  repeated WfSpecMetrics results = 3;
}

service LHPublicApi {
  rpc PutTaskDef(PutTaskDefRequest) returns (PutTaskDefResponse) {}
  rpc GetTaskDef(TaskDefId) returns (GetTaskDefResponse) {}

  rpc PutExternalEventDef(PutExternalEventDefRequest) returns (PutExternalEventDefResponse) {}
  rpc GetExternalEventDef(ExternalEventDefId) returns (GetExternalEventDefResponse) {}

  rpc PutWfSpec(PutWfSpecRequest) returns (PutWfSpecResponse) {}
  rpc GetWfSpec(WfSpecId) returns (GetWfSpecResponse) {}
  rpc GetLatestWfSpec(GetLatestWfSpecRequest) returns (GetWfSpecResponse) {}

  rpc PutUserTaskDef(PutUserTaskDefRequest) returns (PutUserTaskDefResponse) {}
  rpc GetUserTaskDef(UserTaskDefId) returns (GetUserTaskDefResponse) {}
  rpc GetLatestUserTaskDef(GetLatestUserTaskDefRequest) returns (GetUserTaskDefResponse) {}
  rpc GetUserTaskRun(UserTaskRunId) returns (GetUserTaskRunResponse) {}

  rpc RunWf(RunWfRequest) returns (RunWfResponse) {}
  rpc GetWfRun(WfRunId) returns (GetWfRunResponse) {}

  rpc AssignUserTaskRun(AssignUserTaskRunRequest) returns (AssignUserTaskRunResponse) {}
  rpc CompleteUserTaskRun(CompleteUserTaskRunRequest) returns (CompleteUserTaskRunResponse) {}

  rpc GetNodeRun(NodeRunId) returns (GetNodeRunResponse) {}
  rpc ListNodeRuns(ListNodeRunsRequest) returns (ListNodeRunsResponse) {}

  rpc GetTaskRun(TaskRunId) returns (GetTaskRunResponse) {}

  rpc GetVariable(VariableId) returns (GetVariableResponse) {}
  rpc ListVariables(ListVariablesRequest) returns (ListVariablesResponse) {}

  rpc PutExternalEvent(PutExternalEventRequest) returns (PutExternalEventResponse) {}
  rpc GetExternalEvent(ExternalEventId) returns (GetExternalEventResponse) {}
  rpc ListExternalEvents(ListExternalEventsRequest) returns (ListExternalEventsResponse) {}

  rpc SearchWfRun(SearchWfRunRequest) returns (SearchWfRunResponse) {}
  rpc SearchNodeRun(SearchNodeRunRequest) returns (SearchNodeRunResponse) {}
  rpc SearchTaskRun(SearchTaskRunRequest) returns (SearchTaskRunResponse) {}
  rpc SearchUserTaskRun(SearchUserTaskRunRequest) returns (SearchUserTaskRunResponse) {}
  rpc SearchVariable(SearchVariableRequest) returns (SearchVariableResponse) {}
  rpc SearchTaskDef(SearchTaskDefRequest) returns (SearchTaskDefResponse) {}
  rpc SearchUserTaskDef(SearchUserTaskDefRequest) returns (SearchUserTaskDefResponse) {}
  rpc SearchWfSpec(SearchWfSpecRequest) returns (SearchWfSpecResponse) {}
  rpc SearchExternalEventDef(SearchExternalEventDefRequest) returns (SearchExternalEventDefResponse) {}
  rpc SearchExternalEvent(SearchExternalEventRequest) returns (SearchExternalEventResponse) {}

  rpc RegisterTaskWorker(RegisterTaskWorkerRequest) returns (RegisterTaskWorkerResponse) {}
  rpc PollTask(stream PollTaskRequest) returns (stream PollTaskResponse) {}
  rpc ReportTask(ReportTaskRun) returns (ReportTaskResponse) {}

  rpc StopWfRun(StopWfRunRequest) returns (StopWfRunResponse) {}
  rpc ResumeWfRun(ResumeWfRunRequest) returns (ResumeWfRunResponse) {}
  rpc DeleteWfRun(DeleteWfRunRequest) returns (DeleteObjectResponse) {}
  rpc DeleteTaskDef(DeleteTaskDefRequest) returns (DeleteObjectResponse) {}
  rpc DeleteWfSpec(DeleteWfSpecRequest) returns (DeleteObjectResponse) {}
  rpc DeleteUserTaskDef(DeleteUserTaskDefRequest) returns (DeleteObjectResponse) {}
  rpc DeleteExternalEventDef(DeleteExternalEventDefRequest) returns (DeleteObjectResponse) {}
  rpc CancelUserTaskRun(CancelUserTaskRunRequest) returns (CancelUserTaskRunResponse) {}

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}

  rpc TaskDefMetrics(TaskDefMetricsQueryRequest) returns (TaskDefMetricsResponse) {}
  rpc WfSpecMetrics(WfSpecMetricsQueryRequest) returns (WfSpecMetricsResponse) {}
  rpc ListTaskDefMetrics(ListTaskMetricsRequest) returns (ListTaskMetricsResponse) {}
  rpc ListWfSpecMetrics(ListWfMetricsRequest) returns (ListWfMetricsResponse) {}
}

// Variable
enum VariableType {
  JSON_OBJ = 0;
  JSON_ARR = 1;
  DOUBLE = 2;
  BOOL = 3;
  STR = 4;
  INT = 5;
  BYTES = 6;
  NULL = 7;
}

message VariableValue {
  VariableType type = 1;
  optional string json_obj = 2;
  optional string json_arr = 3;
  optional double double = 4;
  optional bool bool = 5;
  optional string str = 6;
  optional int64 int = 7;
  optional bytes bytes = 8;
}

message VariableId {
  string wf_run_id = 1;
  int32 thread_run_number = 2;
  string name = 3;
}

message Variable {
  VariableValue value = 1;
  string wf_run_id = 2;
  int32 thread_run_number = 3;
  string name = 4;
  google.protobuf.Timestamp date = 5;
}

message VarNameAndVal {
  string var_name = 1;
  VariableValue value = 2;
}

// External Event
message ExternalEventId {
  string wf_run_id = 1;
  string external_event_def_name = 2;
  string guid = 3;
}

message ExternalEvent {
  string wf_run_id = 1;
  string external_event_def_name = 2;
  string guid = 3;
  google.protobuf.Timestamp created_at = 4;
  VariableValue content = 5;
  optional int32 thread_run_number = 6;
  optional int32 node_run_position = 7;
  bool claimed = 8;
}

message WfRunId {
  string id = 1;
}

message WfRun {
  string id = 1;
  string wf_spec_name = 2;
  int32 wf_spec_version = 3;
  LHStatus status = 4;

  google.protobuf.Timestamp start_time = 6;
  optional google.protobuf.Timestamp end_time = 7;
  repeated ThreadRun thread_runs = 8;

  repeated PendingInterrupt pending_interrupts = 9;
  repeated PendingFailureHandler pending_failures = 10;
}

enum ThreadType {
  ENTRYPOINT = 0;
  CHILD = 1;
  INTERRUPT = 2;
  FAILURE_HANDLER = 3;
}

message ThreadRun {
  string wf_run_id = 1;
  int32 number = 2;

  LHStatus status = 3;
  string wf_spec_name = 4;
  int32 wf_spec_version = 5;
  string thread_spec_name = 6;

  google.protobuf.Timestamp start_time = 7;
  optional google.protobuf.Timestamp end_time = 8;

  optional string error_message = 9;

  repeated int32 child_thread_ids = 11;
  optional int32 parent_thread_id = 12;

  repeated ThreadHaltReason halt_reasons = 13;
  optional ExternalEventId interrupt_trigger_id = 14;
  optional FailureBeingHandled failure_being_handled = 15;

  int32 current_node_position = 16;
  repeated int32 handled_failed_children = 17;

  ThreadType type = 18;
}

message FailureBeingHandled {
  int32 thread_run_number = 1;
  int32 node_run_position = 2;
  int32 failure_number = 3;
}

message PendingInterrupt {
  ExternalEventId external_event_id = 1;
  string handler_spec_name = 2;
  int32 interrupted_thread_id = 3;
}

message PendingFailureHandler {
  int32 failed_thread_run = 1;
  string handler_spec_name = 2;
}

message PendingInterruptHaltReason {
  ExternalEventId external_event_id = 1;
}

message PendingFailureHandlerHaltReason {
  int32 node_run_position = 1;
}

message HandlingFailureHaltReason {
  int32 handler_thread_id = 1;
}

message ParentHalted {
  int32 parent_thread_id = 1;
}

message Interrupted {
  int32 interrupt_thread_id = 1;
}

message ManualHalt {
  // Nothing to store.
  bool meaning_of_life = 137;
}

message ThreadHaltReason {
  oneof reason {
    ParentHalted parent_halted = 1;
    Interrupted interrupted = 2;
    PendingInterruptHaltReason pending_interrupt = 3;
    PendingFailureHandlerHaltReason pending_failure = 4;
    HandlingFailureHaltReason handling_failure = 5;
    ManualHalt manual_halt = 6;
  }
}

message NodeRunId {
  string wf_run_id = 1;
  int32 thread_run_number = 2;
  int32 position = 3;
}

message TaskNodeRun {
  optional TaskRunId task_run_id = 1;
}

message UserTaskNodeRun {
  optional UserTaskRunId user_task_run_id = 1;
}

message NodeRun {
  string wf_run_id = 1;
  int32 thread_run_number = 2;
  int32 position = 3;

  LHStatus status = 6;

  google.protobuf.Timestamp arrival_time = 7;
  optional google.protobuf.Timestamp end_time = 8;
  WfSpecId wf_spec_id = 9;
  string thread_spec_name = 10;
  string node_name = 11;

  optional string error_message = 13;

  repeated Failure failures = 14;

  oneof node_type {
    TaskNodeRun task = 15;
    ExternalEventRun external_event = 16;
    EntrypointRun entrypoint = 17;
    ExitRun exit = 19;
    StartThreadRun start_thread = 20;
    WaitForThreadsRun wait_threads = 21;
    SleepNodeRun sleep = 22;
    UserTaskNodeRun user_task = 24;
  }
  repeated int32 failure_handler_ids = 23;
}

message Failure {
  string failure_name = 1;
  string message = 2;
  optional VariableValue content = 3;
}

message TaskAttempt {
  optional VariableValue output = 1;
  optional VariableValue log_output = 2;

  optional google.protobuf.Timestamp schedule_time = 3;
  optional google.protobuf.Timestamp start_time = 4;
  optional google.protobuf.Timestamp end_time = 5;
  string task_worker_id = 7;
  optional string task_worker_version = 8;

  TaskStatus status = 9;
}

message TaskRunId {
  string wf_run_id = 1;
  string task_guid = 2;
}

message TaskRun {
  TaskRunId id = 1;
  repeated TaskAttempt attempts = 2;
  int32 max_attempts = 3;
  string task_def_name = 4;
  repeated VarNameAndVal input_variables = 5;

  TaskRunSource source = 6;
  google.protobuf.Timestamp scheduled_at = 7;

  TaskStatus status = 8;

  int32 timeout_seconds = 9;
}

message TaskNodeReference {
  NodeRunId node_run_id = 1;
  WfSpecId wf_spec_id = 2;
}

message UserTaskTriggerContext {
  oneof owner {
    UserGroup user_group = 1;
    User user = 2;
  }
}

message UserTaskTriggerReference {
  NodeRunId node_run_id = 1;
  int32 user_task_event_number = 2;
  WfSpecId wf_spec_id = 3;
  optional UserTaskTriggerContext context = 4;
}

message EntrypointRun {
}

message ExitRun {
} // Later will have info once we add threads

message StartThreadRun {
  optional int32 child_thread_id = 1;
  string thread_spec_name = 2;
}

message WaitForThreadsRun {
  message WaitForThread {
    optional google.protobuf.Timestamp thread_end_time = 1;
    LHStatus thread_status = 2;
    int32 thread_run_number = 3;
  }

  repeated WaitForThread threads = 1;
}

message ExternalEventRun {
  string external_event_def_name = 1;
  optional google.protobuf.Timestamp event_time = 2;
  optional ExternalEventId external_event_id = 3;
}

message SleepNodeRun {
  google.protobuf.Timestamp maturation_time = 1;
}

// WfSpec stuff

enum Comparator {
  LESS_THAN = 0;
  GREATER_THAN = 1;
  LESS_THAN_EQ = 2;
  GREATER_THAN_EQ = 3;
  EQUALS = 4;
  NOT_EQUALS = 5;
  IN = 6;
  NOT_IN = 7;
}

message EdgeCondition {
  Comparator comparator = 1;
  VariableAssignment left = 2;
  VariableAssignment right = 3;
}

message Edge {
  string sink_node_name = 1;
  optional EdgeCondition condition = 2;
}

enum VariableMutationType {
  ASSIGN = 0;
  ADD = 1;
  EXTEND = 2;
  SUBTRACT = 3;
  MULTIPLY = 4;
  DIVIDE = 5;
  REMOVE_IF_PRESENT = 6;
  REMOVE_INDEX = 7;
  REMOVE_KEY = 8;
}

message VariableAssignment {
  message FormatString {
    VariableAssignment format = 1;
    repeated VariableAssignment args = 2;
  }

  optional string json_path = 1;
  oneof source {
    string variable_name = 2;
    VariableValue literal_value = 3;
    FormatString format_string = 4;
  }
}

message VariableMutation {
  message NodeOutputSource {
    optional string jsonpath = 10;
  }
  string lhs_name = 1;
  optional string lhs_json_path = 2;
  VariableMutationType operation = 3;
  oneof rhs_value {
    VariableAssignment source_variable = 4;
    VariableValue literal_value = 5;
    NodeOutputSource node_output = 6;
  }
}

message NopNode {
}

message SleepNode {
  oneof sleep_length {
    VariableAssignment raw_seconds = 1;
    VariableAssignment timestamp = 2;
    VariableAssignment iso_date = 3;
  }
}

message Node {
  repeated Edge outgoing_edges = 1;
  repeated VariableMutation variable_mutations = 2;
  repeated FailureHandlerDef failure_handlers = 4;
  oneof node {
    EntrypointNode entrypoint = 5;
    ExitNode exit = 6;
    TaskNode task = 7;
    ExternalEventNode external_event = 8;
    StartThreadNode start_thread = 9;
    WaitForThreadsNode wait_for_threads = 10;
    NopNode nop = 11;
    SleepNode sleep = 12;
    UserTaskNode user_task = 13;
  }
}

message UserTaskField {
  string name = 1;
  VariableType type = 2;
  optional string description = 3;
  string display_name = 4;
  bool required = 5;
  // Later versions will allow stuff such as:
  // 1. Validation (eg. email address, integer between 1-10, etc)
  // 2. Nested object structures
  // 3. Multi-Page forms (survey-js style)
  // 4. Conditional rendering of forms based on input (surveyjs style)
  // 5. Default values and optional fields
}

message UserTaskDefId {
  string name = 1;
  int32 version = 2;
}

message UserTaskDef {
  string name = 1;
  int32 version = 2;
  optional string description = 3;
  repeated UserTaskField fields = 4;
  google.protobuf.Timestamp created_at = 5;
}

message UTActionTrigger {
  message UTACancel {
  }

  message UTATask {
    TaskNode task = 1;
    repeated VariableMutation mutations = 2;
  }

  message UTAReassign {
    oneof assign_to {
      VariableAssignment user_id = 1;
      VariableAssignment user_group = 2;
    }
  }

  oneof action {
    UTATask task = 1;
    UTACancel cancel = 2;
    UTAReassign reassign = 3;
    // later on, might enable scheduling entire ThreadRuns
  }

  enum UTHook {
    ON_ARRIVAL = 0;
    ON_TASK_ASSIGNED = 1;
  }
  //Action's delay
  VariableAssignment delay_seconds = 5;
  UTHook hook = 6;
}

message UserTaskNode {
  string user_task_def_name = 1;

  message UserAssignment {
    VariableAssignment user_id = 1;
    optional VariableAssignment user_group = 2;
  }

  // to whom should the Node be assigned?
  oneof assignment {
    VariableAssignment user_group = 2;
    UserAssignment user = 3;
  }

  // This is used to, for example, send a push notification to a mobile app
  // to remind someone that they need to fill out a task, or to re-assign
  // the task to another group of people
  repeated UTActionTrigger actions = 4;

  // So, once the WfSpec is created, this will be pinned to a version. Customer
  // can optionally specify a specific version or can leave it null, in which
  // case we just use the latest
  optional int32 user_task_def_version = 5;

  // Allow WfRun-specific notes for this User Task.
  optional VariableAssignment notes = 6;
}

message UserTaskEvent {
  google.protobuf.Timestamp time = 1;

  message UTECancelled {
  }

  message UTETaskExecuted {
    TaskRunId task_run = 1;
  }

  message UTEReassigned {
    oneof old_owner {
      User old_user= 5;
      UserGroup old_user_group = 6;
    }
    oneof new_owner {
      User new_user = 7;
      UserGroup new_user_group = 8;
    }
  }

  oneof event {
    UTETaskExecuted task_executed = 2;
    UTEReassigned reassigned = 3;
    UTECancelled cancelled = 4;
    // TODO: Add "save user task" and "complete user task" to the
    // audit log
  }
}

enum UserTaskRunStatus {
  UNASSIGNED = 0;
  ASSIGNED = 1;
  DONE = 3;
  CANCELLED = 4;
}

message UserTaskRunId {
  string wf_run_id = 1;
  string user_task_guid = 2;
}

message UserGroup {
  string id = 1;
}

message User {
  string id = 1;
  optional UserGroup user_group = 2;
}

// This is a Getable
message UserTaskRun {
  UserTaskRunId id = 1;
  UserTaskDefId user_task_def_id = 2;

  repeated UserTaskFieldResult results = 6;
  UserTaskRunStatus status = 7;
  repeated UserTaskEvent events = 8;
  optional string notes = 9;
  google.protobuf.Timestamp scheduled_time = 10;

  // If we ever allow ad-hoc User Tasks, this will move to an optional
  // field, or a `oneof user_task_source` field. However, note that such
  // a change would be fine from the API Compatibility perspective.
  NodeRunId node_run_id = 11;

  oneof owner {
    UserGroup user_group = 12;
    User user = 13;
  }
}

message AssignUserTaskRunRequest {
  UserTaskRunId user_task_run_id = 1;

  bool override_claim = 2;

  oneof assignee {
    User user = 3;
    UserGroup user_group = 4;
  }
}

message AssignUserTaskRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;

  // TODO: Later on, add info about current assignee/status.
}

message CompleteUserTaskRunResponse {
  LHResponseCode code = 1;
  optional string message = 2;
}

message UserTaskFieldResult {
  string name = 1;
  optional VariableValue value = 2;
}

message UserTaskResult {
  repeated UserTaskFieldResult fields = 1;
}

message SaveUserTaskRun {
  UserTaskResult result = 1;
  string user_id = 2;
  repeated UserTaskFieldResult results = 3;
}

message CompleteUserTaskRunRequest {
  UserTaskRunId user_task_run_id = 1;

  UserTaskResult result = 2;
  string user_id = 3;
}

message CancelUserTaskRunRequest {
  UserTaskRunId user_task_run_id = 1;
}

message StartThreadNode {
  string thread_spec_name = 1;
  map<string, VariableAssignment> variables = 2;
}

message FailureHandlerDef {
  optional string specific_failure = 1;
  string handler_spec_name = 2;
}

message WaitForThreadsNode {
  message ThreadToWaitFor {
    VariableAssignment thread_run_number = 1;
  }
  repeated ThreadToWaitFor threads = 1;
}

message TaskNode {
  string task_def_name = 1;
  int32 timeout_seconds = 2;
  int32 retries = 3;
  repeated VariableAssignment variables = 4;
}

message ExternalEventNode {
  string external_event_def_name = 1;
  VariableAssignment timeout_seconds = 2;
}

message EntrypointNode {

}

message ExitNode {
  optional FailureDef failure_def = 1;
}

message FailureDef {
  string failure_name = 1;
  string message = 2;
  optional VariableAssignment content = 3;
}

enum IndexType {
  LOCAL_INDEX = 0;
  REMOTE_INDEX = 1;
}

message VariableDef {
  VariableType type = 1;
  string name = 2;
  optional IndexType index_type = 3;
  repeated JsonIndex json_indexes = 4;
  VariableValue default_value = 5;
}

message JsonIndex {
  string path = 1;
  IndexType index_type = 2;
}

message InterruptDef {
  string external_event_def_name = 1;
  string handler_spec_name = 2;
}

message ThreadSpec {
  map<string, Node> nodes = 1;
  repeated VariableDef variable_defs = 2;
  repeated InterruptDef interrupt_defs = 3;
}

message WfSpec {
  string name = 1;
  int32 version = 2;
  google.protobuf.Timestamp created_at = 3;
  LHStatus status = 4;

  map<string, ThreadSpec> thread_specs = 5;
  string entrypoint_thread_name = 6;
  int32 retention_hours = 7;
}

// TaskDef
message OutputSchema {
  VariableType output_type = 1;
}

message TaskDef {
  string name = 1;
  repeated VariableDef input_vars = 2;
  google.protobuf.Timestamp created_at = 3;
}

// ExternalEventDef
message ExternalEventDef {
  string name = 1;
  google.protobuf.Timestamp created_at = 2;
  int32 retention_hours = 3;

  // TODO: Add output schema.
  // TODO: Add ability to correlate to WfRun.
  // TODO: Add ability to auto-provision a webhook listener.
}

// Metrics
enum MetricsWindowLength {
  MINUTES_5 = 0;
  HOURS_2 = 1;
  DAYS_1 = 2;
}

message TaskDefMetricsId {
  google.protobuf.Timestamp window_start = 1;
  MetricsWindowLength window_type = 2;
  string task_def_name = 3;
}

message TaskDefMetrics {
  google.protobuf.Timestamp window_start = 1;
  MetricsWindowLength type = 2;
  string taskDefName = 3;
  int64 schedule_to_start_max = 4;
  int64 schedule_to_start_avg = 5;
  int64 start_to_complete_max = 6;
  int64 start_to_complete_avg = 7;
  int64 total_completed = 8;
  int64 total_errored = 9;
  int64 total_started = 10;
  int64 total_scheduled = 11;
}

message WfSpecMetricsId {
  google.protobuf.Timestamp window_start = 1;
  MetricsWindowLength window_type = 2;
  string wf_spec_name = 3;
  int32 wf_spec_version = 4;
}

message WfSpecMetrics {
  google.protobuf.Timestamp window_start = 1;
  MetricsWindowLength type = 2;
  string wfSpecName = 3;
  int32 wfSpecVersion = 4;
  int64 total_started = 5;
  int64 total_completed = 6;
  int64 total_errored = 7;
  int64 start_to_complete_max = 8;
  int64 start_to_complete_avg = 9;
}
