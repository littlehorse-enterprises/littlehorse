syntax = "proto3";

package littlehorse;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common_wfspec.proto";
import "common_enums.proto";
import "object_id.proto";
import "variable.proto";
import "external_event.proto";
import "wf_run.proto";
import "node_run.proto";
import "task_run.proto";
import "user_tasks.proto";
import "wf_spec.proto";
import "task_def.proto";
import "acls.proto";

option go_package = ".;model";
option java_multiple_files = true;
option java_package = "io.littlehorse.sdk.common.proto";
option csharp_namespace = "LittleHorse.Common.Proto";

// Returns the UserTaskDef with a given name and the highest version number.
message GetLatestUserTaskDefRequest {
  // The name of the UserTaskDef to search for.
  string name = 1;
}

// Creates a WfSpec. Generally, this request is generated by the Workflow object in
// our various SDK's.
message PutWfSpecRequest {
  // The name of the resulting WfSpec.
  string name = 1;
  reserved 2, 3, 4;

  // Map from name the ThreadSpec.
  map<string, ThreadSpec> thread_specs = 5;

  // The name of the ThreadSpec to be used as the workflow entrypoint.
  string entrypoint_thread_name = 6;

  // Optional policy to determine how long a WfRun is retained in the data store after
  // it is completed or terminated.
  optional WorkflowRetentionPolicy retention_policy = 8;
  reserved 9;

  // Configures the behavior of this individual request. Can be used to prevent
  // breaking changes to the WfSpec, prevent any changes to the WfSpec, or allow
  // all changes to the WfSpec.
  AllowedUpdateType allowed_updates = 10;
}

// This enum controls the behavior of a PutWfSpecRequest when a WfSpec with the same
// name previously exists.
enum AllowedUpdateType {
  // Allows any update: both minor (revsion) changes and breaking (majorVersion) changes
  // are accepted
  ALL_UPDATES = 0;

  // Allows only backwards-compatible changes that do not change the required input variables
  // or the searchable variables in the WfSpec.
  MINOR_REVISION_UPDATES = 1;

  // Rejects any changes to the WfSpec.
  NO_UPDATES = 2;
}

// Creates a TaskDef.
message PutTaskDefRequest {
  // The name of the TaskDef to create.
  string name = 1;

  // Variables required to execute the TaskDef. Normally, these are automatically
  // generated by the Task Worker SDK.
  repeated VariableDef input_vars = 2;
}

// Creates a UserTaskDef.
message PutUserTaskDefRequest {
  // The name of the UserTaskDef to create.
  string name = 1;

  // The fields that should be presented to the user on the screen in order to fill
  // out the User Task. Note that these fields also define a data contract for the
  // result of the UserTaskDef.
  repeated UserTaskField fields = 2;

  // Optional metadata field to store user-defined data. Does not impact workflow
  // execution.
  optional string description = 3;
}

// Field to create an ExternalEventDef.
message PutExternalEventDefRequest {
  // The name of the resulting ExternalEventDef.
  string name = 1;

  // Policy to determine how long an ExternalEvent is retained after creation if it
  // is not yet claimed by a WfRun.
  ExternalEventRetentionPolicy retention_policy = 2;
}

// Request used to create an ExternalEvent.
message PutExternalEventRequest {
  // The ID of the WfRun that this Event is sent to.
  WfRunId wf_run_id = 1;

  // The ID of the ExternalEventDef that this event implements.
  ExternalEventDefId external_event_def_id = 2;

  // Note that an ExternalEventDefId is a three-part ID:
  // 1. WfRunId
  // 2. ExternalEventDef Name
  // 3. A guid
  // The guid from part 3) can be optionally provided to the PutExternalEventRequest
  // in order to make it idempotent. It is a best practice to do so.
  optional string guid = 3;

  // The content of this event.
  VariableValue content = 5;

  // Optionally specify that this ExternalEvent may only be claimed by a specific ThreadRun.
  optional int32 thread_run_number = 6;

  // Optionally specify that this ExternalEvent may only be claimed by a specific NodeRun.
  // In order for this to be set, you must also set thread_run_number.
  optional int32 node_run_position = 7;
  reserved 4, 8;
}

// Deletes an ExternalEvent.
message DeleteExternalEventRequest {
  // The ID of the ExternalEvent to delete.
  ExternalEventId id = 1;
}

// Deletes a WfRun.
message DeleteWfRunRequest {
  // The ID of the WfRun to delete.
  WfRunId id = 1;
}

// Deletes a TaskDef.
message DeleteTaskDefRequest {
  // The ID of the TaskDef to delete.
  TaskDefId id = 1;
}

// Deletes a UserTaskDef.
message DeleteUserTaskDefRequest {
  // The ID of the UserTaskDef to delete.
  UserTaskDefId id = 1;
}

// Deletes a WfSpec
message DeleteWfSpecRequest {
  // The ID of the WfSpec to delete
  WfSpecId id = 1;
}

// Deletes an ExternalEventDef
message DeleteExternalEventDefRequest {
  // The ID of the ExternalEventDef to delete.
  ExternalEventDefId id = 1;
}

// Create a Workflow Run.
message RunWfRequest {
  // The name of the WfSpec to run.
  string wf_spec_name = 1;

  // Optionally specify the major version of the WfSpec to run. This guarantees that
  // the "signature" of the WfSpec (i.e. the required input variables, and searchable
  // variables) will not change for this app.
  optional int32 major_version = 2;

  // Optionally specify the specific revision of the WfSpec to run. It is not recommended
  // to use this in practice, as the WfSpec logic should be de-coupled from the applications
  // that run WfRun's.
  optional int32 revision = 3;

  // A map from Variable Name to Values for those variables. The provided variables are
  // passed as input to the Entrypoint ThreadRun.
  map<string, VariableValue> variables = 4;

  // You can optionally specify the ID of this WfRun. This is a recommended best practice
  // as it also makes your request idempotent and allows you to easily find the WfRun at
  // a later time.
  optional string id = 5;
}

// Used by a SearchWfRunRequest to filter WfRun's and only return those whose Variable's
// match a certain filter.
message VariableMatch {
    // The name of the variable to inspect.
    string var_name = 1;

    // The value that the Variable must have in order to satisfy this VariableMatch
    VariableValue value = 2;
}

// A request used to retrieve a list of WfRunId's by certain criteria.
message SearchWfRunRequest {
    // Bookmark for cursor-based pagination; pass if applicable.
    optional bytes bookmark = 1;
    
    // Maximum results to return in one request.
    optional int32 limit = 2;

    // The WfSpec whose WfRun's we are searching for. This is required.
    string wf_spec_name = 3;
    
    // Specifies to return only WfRun's from this WfSpec Major Version.
    optional int32 wf_spec_major_version = 4;

    // Specifies to return only WfRun's from this WfSpec Revision. Can only be set if
    // wf_spec_major_version is also set.
    optional int32 wf_spec_revision = 5;
    
    // Specifies to return only WfRun's matching this status.
    optional LHStatus status = 6;

    // Specifies to return only WfRun's that started after this time
    optional google.protobuf.Timestamp earliest_start = 7;

    // Specifies to return only WfRun's that started before this time
    optional google.protobuf.Timestamp latest_start = 8;

    // Allows filtering WfRun's based on the value of the Variables. This ONLY
    // works for the Variables in the entrypiont threadrun (that is, variables
    // where the threadRunNumber == 0).
    repeated VariableMatch variable_filters = 9;
}

// List of WfRun Id's
message WfRunIdList {
  // The resulting object id's.
  repeated WfRunId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

// Searches for TaskRuns by various criteria.
message SearchTaskRunRequest {
    // Bookmark for cursor-based pagination; pass if applicable.
    optional bytes bookmark = 1;

    // Maximum results to return in one request.
    optional int32 limit = 2;

    // Specifies the TaskDef of TaskRun's to return. This is required.
    string task_def_name = 3;

    // Specifies to only return TaskRun's matching this status.
    optional TaskStatus status = 4;

    // Specifies to only return TaskRun's that were scheduled after this time.
    optional google.protobuf.Timestamp earliest_start = 5;

    // Specifies to only return TaskRun's that were scheduled before this time.
    optional google.protobuf.Timestamp latest_start = 6;
}

// List of TaskRun ID's.
message TaskRunIdList {
  // The resulting object id's.
  repeated TaskRunId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

// Search for NodeRun's by certain criteria.
message SearchNodeRunRequest {
  // This enum denotes the type of a NodeRun.
  enum NodeType {
    // TASK node schedules a TaskRun
    TASK = 0;
    // EXTERNAL_EVENT blocks the ThreadRun until a specified ExternalEvent arrives
    EXTERNAL_EVENT = 1;
    // ENTRYPOINT kicks off a ThreadRun
    ENTRYPOINT = 2;
    // EXIT completes a ThreadRun
    EXIT = 3;
    // START_THREAD creates a Child ThreadRun
    START_THREAD = 4;
    // WAIT_THREADS waits for one or more child ThreadRuns to complete
    WAIT_THREADS = 5;
    // SLEEP makes the ThreadRun sleep for a specified time
    SLEEP = 6;
    // USER_TASK creates a UserTaskRun and blocks until the UserTaskRun is completed.
    USER_TASK = 7;
    // START_MULTIPLE_THREADS iterates over a list and starts a Child Thread for each item
    START_MULTIPLE_THREADS = 8;
  }

  // Bookmark for cursor-based pagination; pass if applicable.
  optional bytes bookmark = 1;

  // Maximum results to return in one request.
  optional int32 limit = 2;

  // Only return NodeRun's created after this time.
  optional google.protobuf.Timestamp earliest_start = 3;

  // Only return NodeRun's created before this time.
  optional google.protobuf.Timestamp latest_start = 4;

  // Specifies the type of NodeRun to search for.
  NodeType node_type = 5;

  // Specifies the status of NodeRun to search for.
  LHStatus status = 6;
}

// List of NodeRun Id's.
message NodeRunIdList {
  // The resulting object id's.
  repeated NodeRunId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

// Search for UserTaskRun's matching certain criteria.
message SearchUserTaskRunRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  optional UserTaskRunStatus status = 3;
  optional string user_task_def_name = 4;

  optional string user_id = 5;
  optional string user_group = 6;

  optional google.protobuf.Timestamp earliest_start = 7;
  optional google.protobuf.Timestamp latest_start = 8;
}

message UserTaskRunIdList {
  // The resulting object id's.
  repeated UserTaskRunId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

message SearchVariableRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  VariableValue value = 3;
  optional int32 wf_spec_major_version = 4;
  optional int32 wf_spec_revision = 5;
  string var_name = 6;
  string wf_spec_name = 7;
}

message VariableIdList {
  // The resulting object id's.
  repeated VariableId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

message SearchTaskDefRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  optional string prefix = 3;
}

message TaskDefIdList {
  // The resulting object id's.
  repeated TaskDefId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

message SearchUserTaskDefRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  oneof user_task_def_criteria {
    string prefix = 3;
    string name = 4;
  }
}

message UserTaskDefIdList {
  // The resulting object id's.
  repeated UserTaskDefId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

message SearchWfSpecRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  oneof wf_spec_criteria {
    string name = 3;
    string prefix = 4;
    string task_def_name = 5;
  }
}

message WfSpecIdList {
  // The resulting object id's.
  repeated WfSpecId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

message SearchExternalEventDefRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;
  optional string prefix = 3;
}

message ExternalEventDefIdList {
  // The resulting object id's.
  repeated ExternalEventDefId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

message SearchExternalEventRequest {
  optional bytes bookmark = 1;
  optional int32 limit = 2;

  message ByExtEvtDefNameAndStatusRequest {
    string external_event_def_name = 1;
    optional bool is_claimed = 2;
  }

  oneof ext_evt_criteria {
    WfRunId wf_run_id = 3;
    ByExtEvtDefNameAndStatusRequest external_event_def_name_and_status = 4;
  }
}

message ExternalEventIdList {
  // The resulting object id's.
  repeated ExternalEventId results = 1;

  // The bookmark can be used for cursor-based pagination. If it is null, the server
  // has returned all results. If it is set, you can pass it into your next request
  // to resume searching where your previous request left off.
  optional bytes bookmark = 2;
}

message ListNodeRunsRequest {
  WfRunId wf_run_id = 1;
}

message NodeRunList {
  repeated NodeRun results = 1;
}

message ListVariablesRequest {
  WfRunId wf_run_id = 1;
}

message VariableList {
  repeated Variable results = 1;
}

message ListExternalEventsRequest {
  WfRunId wf_run_id = 1;
}

message ExternalEventList {
  repeated ExternalEvent results = 1;
}

message RegisterTaskWorkerRequest {
  string client_id = 1;
  TaskDefId task_def_id = 2;
  string listener_name = 3;
}

message TaskWorkerHeartBeatRequest {
  string client_id = 1;
  TaskDefId task_def_id = 2;
  string listener_name = 3;
}

message RegisterTaskWorkerResponse {
  repeated LHHostInfo your_hosts = 1;
  optional bool is_cluster_healthy = 2;
}

message LHHostInfo {
  string host = 1;
  int32 port = 2;
}

message TaskWorkerMetadata {
  string client_id = 1;
  google.protobuf.Timestamp latest_heartbeat = 2;
  repeated LHHostInfo hosts = 3;
}

message TaskWorkerGroup {
  TaskWorkerGroupId id = 1;
  google.protobuf.Timestamp created_at = 2;
  map<string, TaskWorkerMetadata> task_workers = 3;
}

message PollTaskRequest {
  TaskDefId task_def_id = 1;
  string client_id = 2;
  optional string task_worker_version = 3;
}

message ScheduledTask {
  TaskRunId task_run_id = 1;
  TaskDefId task_def_id = 2;
  int32 attempt_number = 3;
  repeated VarNameAndVal variables = 4;
  google.protobuf.Timestamp created_at = 5;
  TaskRunSource source = 6;
}

message PollTaskResponse {
  optional ScheduledTask result = 1;
}

message ReportTaskRun {
  TaskRunId task_run_id = 1;
  google.protobuf.Timestamp time = 2;
  TaskStatus status = 3;
  optional VariableValue log_output = 5;
  int32 attempt_number = 6;
  oneof result {
    VariableValue output = 4;
    LHTaskError error = 7;
    LHTaskException exception = 8;
  }

}

message StopWfRunRequest {
  WfRunId wf_run_id = 1;
  int32 thread_run_number = 2;
}

message ResumeWfRunRequest {
  WfRunId wf_run_id = 1;
  int32 thread_run_number = 2;
}

enum LHHealthResult {
  LH_HEALTH_RUNNING = 0;
  LH_HEALTH_REBALANCING = 1;
  LH_HEALTH_ERROR = 2;
}

message TaskDefMetricsQueryRequest {
  google.protobuf.Timestamp window_start = 1;
  MetricsWindowLength window_type = 2;
  optional string task_def_name = 3;
}

message ListTaskMetricsRequest {
  TaskDefId task_def_id = 1;
  google.protobuf.Timestamp last_window_start = 2;
  MetricsWindowLength window_length = 3;
  int32 num_windows = 4;
}

message ListTaskMetricsResponse {
  repeated TaskDefMetrics results = 1;
}

message WfSpecMetricsQueryRequest {
  WfSpecId wf_spec_id = 1;
  google.protobuf.Timestamp window_start = 2;
  MetricsWindowLength window_length = 3;
}

message ListWfMetricsRequest {
  WfSpecId wf_spec_id = 1;
  google.protobuf.Timestamp last_window_start = 2;
  MetricsWindowLength window_length = 3;
  int32 num_windows = 4;
}

message ListWfMetricsResponse {
  repeated WfSpecMetrics results = 1;
}

message TaskDefMetrics {
  TaskDefId task_def_id = 1;
  google.protobuf.Timestamp window_start = 2;
  MetricsWindowLength type = 3;

  int64 schedule_to_start_max = 4;
  int64 schedule_to_start_avg = 5;
  int64 start_to_complete_max = 6;
  int64 start_to_complete_avg = 7;
  int64 total_completed = 8;
  int64 total_errored = 9;
  int64 total_started = 10;
  int64 total_scheduled = 11;
}

message WfSpecMetrics {
  WfSpecId wf_spec_id = 1;
  google.protobuf.Timestamp window_start = 2;
  MetricsWindowLength type = 3;

  int64 total_started = 4;
  int64 total_completed = 5;
  int64 total_errored = 6;
  int64 start_to_complete_max = 7;
  int64 start_to_complete_avg = 8;
}

message ListUserTaskRunRequest {
  WfRunId wf_run_id = 1;
}

message UserTaskRunList {
  repeated UserTaskRun results = 1;
}

message ListTaskRunsRequest {
  WfRunId wf_run_id = 1;
}

message TaskRunList {
  repeated TaskRun results = 1;
}

message MigrateWfSpecRequest {
  WfSpecId old_wf_spec = 1;
  WfSpecVersionMigration migration = 2;
}

message GetLatestWfSpecRequest {
  string name = 1;
  optional int32 major_version = 2;
}

message ServerVersionResponse {
  int32 major_version = 1;
  int32 minor_version = 2;
  int32 patch_version = 3;
  optional string pre_release_identifier = 4;
}

service LittleHorse {
  rpc PutTaskDef(PutTaskDefRequest) returns (TaskDef) {}
  rpc GetTaskDef(TaskDefId) returns (TaskDef) {}

  rpc PutExternalEventDef(PutExternalEventDefRequest) returns (ExternalEventDef) {}
  rpc GetExternalEventDef(ExternalEventDefId) returns (ExternalEventDef) {}

  rpc PutWfSpec(PutWfSpecRequest) returns (WfSpec) {}
  rpc GetWfSpec(WfSpecId) returns (WfSpec) {}
  rpc GetLatestWfSpec(GetLatestWfSpecRequest) returns (WfSpec) {}
  rpc MigrateWfSpec(MigrateWfSpecRequest) returns (WfSpec) {}

  rpc PutUserTaskDef(PutUserTaskDefRequest) returns (UserTaskDef) {}
  rpc GetUserTaskDef(UserTaskDefId) returns (UserTaskDef) {}
  rpc GetLatestUserTaskDef(GetLatestUserTaskDefRequest) returns (UserTaskDef) {}

  rpc RunWf(RunWfRequest) returns (WfRun) {}
  rpc GetWfRun(WfRunId) returns (WfRun) {}

  rpc GetUserTaskRun(UserTaskRunId) returns (UserTaskRun) {}
  rpc AssignUserTaskRun(AssignUserTaskRunRequest) returns (google.protobuf.Empty) {}
  rpc CompleteUserTaskRun(CompleteUserTaskRunRequest) returns (google.protobuf.Empty) {}
  rpc CancelUserTaskRun(CancelUserTaskRunRequest) returns (google.protobuf.Empty) {}
  rpc ListUserTaskRuns(ListUserTaskRunRequest) returns (UserTaskRunList) {}

  rpc GetNodeRun(NodeRunId) returns (NodeRun) {}
  rpc ListNodeRuns(ListNodeRunsRequest) returns (NodeRunList) {}

  rpc GetTaskRun(TaskRunId) returns (TaskRun) {}
  rpc ListTaskRuns(ListTaskRunsRequest) returns (TaskRunList) {}

  rpc GetVariable(VariableId) returns (Variable) {}
  rpc ListVariables(ListVariablesRequest) returns (VariableList) {}

  rpc PutExternalEvent(PutExternalEventRequest) returns (ExternalEvent) {}
  rpc GetExternalEvent(ExternalEventId) returns (ExternalEvent) {}
  rpc ListExternalEvents(ListExternalEventsRequest) returns (ExternalEventList) {}

  rpc SearchWfRun(SearchWfRunRequest) returns (WfRunIdList) {}
  rpc SearchNodeRun(SearchNodeRunRequest) returns (NodeRunIdList) {}
  rpc SearchTaskRun(SearchTaskRunRequest) returns (TaskRunIdList) {}
  rpc SearchUserTaskRun(SearchUserTaskRunRequest) returns (UserTaskRunIdList) {}
  rpc SearchVariable(SearchVariableRequest) returns (VariableIdList) {}
  rpc SearchExternalEvent(SearchExternalEventRequest) returns (ExternalEventIdList) {}

  rpc SearchTaskDef(SearchTaskDefRequest) returns (TaskDefIdList) {}
  rpc SearchUserTaskDef(SearchUserTaskDefRequest) returns (UserTaskDefIdList) {}
  rpc SearchWfSpec(SearchWfSpecRequest) returns (WfSpecIdList) {}
  rpc SearchExternalEventDef(SearchExternalEventDefRequest) returns (ExternalEventDefIdList) {}

  rpc RegisterTaskWorker(RegisterTaskWorkerRequest) returns (RegisterTaskWorkerResponse) {}
  rpc PollTask(stream PollTaskRequest) returns (stream PollTaskResponse) {}
  rpc ReportTask(ReportTaskRun) returns (google.protobuf.Empty) {}

  rpc StopWfRun(StopWfRunRequest) returns (google.protobuf.Empty) {}
  rpc ResumeWfRun(ResumeWfRunRequest) returns (google.protobuf.Empty) {}

  rpc DeleteWfRun(DeleteWfRunRequest) returns (google.protobuf.Empty) {}
  rpc DeleteTaskDef(DeleteTaskDefRequest) returns (google.protobuf.Empty) {}
  rpc DeleteWfSpec(DeleteWfSpecRequest) returns (google.protobuf.Empty) {}
  rpc DeleteUserTaskDef(DeleteUserTaskDefRequest) returns (google.protobuf.Empty) {}
  rpc DeleteExternalEventDef(DeleteExternalEventDefRequest) returns (google.protobuf.Empty) {}

  rpc GetTaskDefMetricsWindow(TaskDefMetricsQueryRequest) returns (TaskDefMetrics) {}
  rpc GetWfSpecMetricsWindow(WfSpecMetricsQueryRequest) returns (WfSpecMetrics) {}
  rpc ListTaskDefMetrics(ListTaskMetricsRequest) returns (ListTaskMetricsResponse) {}
  rpc ListWfSpecMetrics(ListWfMetricsRequest) returns (ListWfMetricsResponse) {}

  rpc PutTenant(PutTenantRequest) returns (Tenant) {}
  rpc PutPrincipal(PutPrincipalRequest) returns (Principal) {}
  rpc Whoami(google.protobuf.Empty) returns (Principal) {}

  rpc GetServerVersion(google.protobuf.Empty) returns (ServerVersionResponse) {}
}
