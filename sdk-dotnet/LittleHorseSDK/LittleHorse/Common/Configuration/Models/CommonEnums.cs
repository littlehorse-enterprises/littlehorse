// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common_enums.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LittleHorse.Common.Proto {

  /// <summary>Holder for reflection information generated from common_enums.proto</summary>
  public static partial class CommonEnumsReflection {

    #region Descriptor
    /// <summary>File descriptor for common_enums.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonEnumsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJjb21tb25fZW51bXMucHJvdG8SC2xpdHRsZWhvcnNlKmcKCExIU3RhdHVz",
            "EgwKCFNUQVJUSU5HEAASCwoHUlVOTklORxABEg0KCUNPTVBMRVRFRBACEgsK",
            "B0hBTFRJTkcQAxIKCgZIQUxURUQQBBIJCgVFUlJPUhAFEg0KCUVYQ0VQVElP",
            "ThAGKjsKDk1ldGFkYXRhU3RhdHVzEgoKBkFDVElWRRAAEgwKCEFSQ0hJVkVE",
            "EAESDwoLVEVSTUlOQVRJTkcQAirOAQoKVGFza1N0YXR1cxISCg5UQVNLX1ND",
            "SEVEVUxFRBAAEhAKDFRBU0tfUlVOTklORxABEhAKDFRBU0tfU1VDQ0VTUxAC",
            "Eg8KC1RBU0tfRkFJTEVEEAMSEAoMVEFTS19USU1FT1VUEAQSIQodVEFTS19P",
            "VVRQVVRfU0VSSUFMSVpJTkdfRVJST1IQBRIcChhUQVNLX0lOUFVUX1ZBUl9T",
            "VUJfRVJST1IQBhISCg5UQVNLX0VYQ0VQVElPThAIEhAKDFRBU0tfUEVORElO",
            "RxAJKj0KE01ldHJpY3NXaW5kb3dMZW5ndGgSDQoJTUlOVVRFU181EAASCwoH",
            "SE9VUlNfMhABEgoKBkRBWVNfMRACKl0KDFZhcmlhYmxlVHlwZRIMCghKU09O",
            "X09CShAAEgwKCEpTT05fQVJSEAESCgoGRE9VQkxFEAISCAoEQk9PTBADEgcK",
            "A1NUUhAEEgcKA0lOVBAFEgkKBUJZVEVTEAYqtgEKC0xIRXJyb3JUeXBlEhEK",
            "DUNISUxEX0ZBSUxVUkUQABIRCg1WQVJfU1VCX0VSUk9SEAESFgoSVkFSX01V",
            "VEFUSU9OX0VSUk9SEAISFwoTVVNFUl9UQVNLX0NBTkNFTExFRBADEgsKB1RJ",
            "TUVPVVQQBBIQCgxUQVNLX0ZBSUxVUkUQBRINCglWQVJfRVJST1IQBhIOCgpU",
            "QVNLX0VSUk9SEAcSEgoOSU5URVJOQUxfRVJST1IQCEJJCh9pby5saXR0bGVo",
            "b3JzZS5zZGsuY29tbW9uLnByb3RvUAFaCS47bGhwcm90b6oCGExpdHRsZUhv",
            "cnNlLkNvbW1vbi5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LittleHorse.Common.Proto.LHStatus), typeof(global::LittleHorse.Common.Proto.MetadataStatus), typeof(global::LittleHorse.Common.Proto.TaskStatus), typeof(global::LittleHorse.Common.Proto.MetricsWindowLength), typeof(global::LittleHorse.Common.Proto.VariableType), typeof(global::LittleHorse.Common.Proto.LHErrorType), }, null, null));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Status used for WfRun, ThreadRun, and NodeRun
  /// </summary>
  public enum LHStatus {
    /// <summary>
    /// The entity is starting.
    /// </summary>
    [pbr::OriginalName("STARTING")] Starting = 0,
    /// <summary>
    /// The entity is running.
    /// </summary>
    [pbr::OriginalName("RUNNING")] Running = 1,
    /// <summary>
    /// The entity is completed. This is a terminal state.
    /// </summary>
    [pbr::OriginalName("COMPLETED")] Completed = 2,
    /// <summary>
    /// The entity will move to `HALTED` as soon as all preconditions for halting are
    /// satisfied.
    /// </summary>
    [pbr::OriginalName("HALTING")] Halting = 3,
    /// <summary>
    /// The entity is halted, either by user intervention or by the workflow scheduler.
    /// </summary>
    [pbr::OriginalName("HALTED")] Halted = 4,
    /// <summary>
    /// The entity has failed due to a technical failure, such as a type conversion error,
    /// a task timeout due to network failure, or a task worker crash.
    /// </summary>
    [pbr::OriginalName("ERROR")] Error = 5,
    /// <summary>
    /// The entity has failed due to a business exception defined by the user.
    /// </summary>
    [pbr::OriginalName("EXCEPTION")] Exception = 6,
  }

  /// <summary>
  /// Status of a Metadata Object, such as WfSpec or TaskDef
  /// </summary>
  public enum MetadataStatus {
    /// <summary>
    /// ACTIVE means the object can be used.
    /// </summary>
    [pbr::OriginalName("ACTIVE")] Active = 0,
    /// <summary>
    /// An ARCHIVED WfSpec can no longer be used to create new WfRun's, but
    /// existing WfRun's will be allowed to run to completion.
    /// </summary>
    [pbr::OriginalName("ARCHIVED")] Archived = 1,
    /// <summary>
    /// A TERMINATING WfSpec is actively deleting all running WfRun's, and will
    /// self-destruct once all of its child WfRun's are terminated.
    /// </summary>
    [pbr::OriginalName("TERMINATING")] Terminating = 2,
  }

  /// <summary>
  /// Status of a TaskRun.
  /// </summary>
  public enum TaskStatus {
    /// <summary>
    /// Scheduled in the Task Queue but not yet picked up by a Task Worker.
    /// </summary>
    [pbr::OriginalName("TASK_SCHEDULED")] TaskScheduled = 0,
    /// <summary>
    /// Picked up by a Task Worker, but not yet reported or timed out.
    /// </summary>
    [pbr::OriginalName("TASK_RUNNING")] TaskRunning = 1,
    /// <summary>
    /// Successfully completed.
    /// </summary>
    [pbr::OriginalName("TASK_SUCCESS")] TaskSuccess = 2,
    /// <summary>
    /// Task Worker reported a technical failure while attempting to execute the TaskRun
    /// </summary>
    [pbr::OriginalName("TASK_FAILED")] TaskFailed = 3,
    /// <summary>
    /// Task Worker did not report a result in time.
    /// </summary>
    [pbr::OriginalName("TASK_TIMEOUT")] TaskTimeout = 4,
    /// <summary>
    /// Task Worker reported that it was unable to serialize the output of the TaskRun.
    /// </summary>
    [pbr::OriginalName("TASK_OUTPUT_SERIALIZING_ERROR")] TaskOutputSerializingError = 5,
    /// <summary>
    /// Task Worker was unable to deserialize the input variables into appropriate language-specific
    /// objects to pass into the Task Function
    /// </summary>
    [pbr::OriginalName("TASK_INPUT_VAR_SUB_ERROR")] TaskInputVarSubError = 6,
    /// <summary>
    /// Task Function business logic determined that there was a business exception.
    /// </summary>
    [pbr::OriginalName("TASK_EXCEPTION")] TaskException = 8,
    /// <summary>
    /// Refers to a TaskAttempt that is not yet scheduled. This happens when using retries
    /// with an ExponentialBackoffRetryPolicy: the TaskAttempt isn't supposed to be scheduled
    /// until it "matures", but it does already exist.
    /// </summary>
    [pbr::OriginalName("TASK_PENDING")] TaskPending = 9,
  }

  /// <summary>
  /// Metrics
  /// </summary>
  public enum MetricsWindowLength {
    [pbr::OriginalName("MINUTES_5")] Minutes5 = 0,
    [pbr::OriginalName("HOURS_2")] Hours2 = 1,
    [pbr::OriginalName("DAYS_1")] Days1 = 2,
  }

  /// <summary>
  /// Type of a Varaible in LittleHorse. Corresponds to the possible value type's of a
  /// VariableValue.
  /// </summary>
  public enum VariableType {
    /// <summary>
    /// An object represented as a json string. &lt;br/>
    ///
    /// The `JSON_OBJ` variable allows you to store complex objects in the JSON format.
    /// When using the Java and GoLang SDK's, the `JSON_OBJ` variable type is often
    /// used transparently to the user. For example, the Java Task Worker SDK can
    /// inspect your method signature and automatically deserialize an input variable
    /// into a POJO.
    /// </summary>
    [pbr::OriginalName("JSON_OBJ")] JsonObj = 0,
    /// <summary>
    /// The `JSON_ARR` variable allows you to store collections of objects as a JSON
    /// array. The behavior is similar to the `JSON_OBJ` variable type.
    /// </summary>
    [pbr::OriginalName("JSON_ARR")] JsonArr = 1,
    /// <summary>
    /// The `DOUBLE` variable type is a 64-bit floating point number. It can
    /// be cast to an `INT`.
    /// </summary>
    [pbr::OriginalName("DOUBLE")] Double = 2,
    /// <summary>
    /// Boolean denotes a simple boolean switch.
    /// </summary>
    [pbr::OriginalName("BOOL")] Bool = 3,
    /// <summary>
    /// The `STR` variable type is stored as a String. `INT`, `DOUBLE`,
    /// and `BOOL` variables can be cast to a `STR`.
    /// </summary>
    [pbr::OriginalName("STR")] Str = 4,
    /// <summary>
    /// The `INT` variable type is stored as a 64-bit integer. The
    /// `INT` can be cast to a `DOUBLE`.
    /// </summary>
    [pbr::OriginalName("INT")] Int = 5,
    /// <summary>
    /// The `BYTES` variable type allows you to store an arbitrary byte string.
    /// </summary>
    [pbr::OriginalName("BYTES")] Bytes = 6,
  }

  /// <summary>
  /// This enum is all of the types of technical failure that can occur in a WfRun.
  /// </summary>
  public enum LHErrorType {
    /// <summary>
    /// A child ThreadRun failed with a technical ERROR.
    /// </summary>
    [pbr::OriginalName("CHILD_FAILURE")] ChildFailure = 0,
    /// <summary>
    /// Failed substituting input variables into a NodeRun.
    /// </summary>
    [pbr::OriginalName("VAR_SUB_ERROR")] VarSubError = 1,
    /// <summary>
    /// Failed mutating variables after a NodeRun successfully completed.
    /// </summary>
    [pbr::OriginalName("VAR_MUTATION_ERROR")] VarMutationError = 2,
    /// <summary>
    /// A UserTaskRun was cancelled (EVOLVING: this will become a Business EXCEPTION)
    /// </summary>
    [pbr::OriginalName("USER_TASK_CANCELLED")] UserTaskCancelled = 3,
    /// <summary>
    /// A NodeRun failed due to a timeout.
    /// </summary>
    [pbr::OriginalName("TIMEOUT")] Timeout = 4,
    /// <summary>
    /// A TaskRun failed due to an unexpected error.
    /// </summary>
    [pbr::OriginalName("TASK_FAILURE")] TaskFailure = 5,
    /// <summary>
    /// Wrapper for VAR_SUB_ERROR and VAR_MUTATION_ERROR
    /// </summary>
    [pbr::OriginalName("VAR_ERROR")] VarError = 6,
    /// <summary>
    /// Wrapper for TASK_FALIURE and TIMEOUT
    /// </summary>
    [pbr::OriginalName("TASK_ERROR")] TaskError = 7,
    /// <summary>
    /// An unexpected LittleHorse Internal error occurred. This is not expected to happen.
    /// </summary>
    [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 8,
  }

  #endregion

}

#endregion Designer generated code
