// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: node_run.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LittleHorse.Common.Proto {

  /// <summary>Holder for reflection information generated from node_run.proto</summary>
  public static partial class NodeRunReflection {

    #region Descriptor
    /// <summary>File descriptor for node_run.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeRunReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5ub2RlX3J1bi5wcm90bxILbGl0dGxlaG9yc2UaH2dvb2dsZS9wcm90b2J1",
            "Zi90aW1lc3RhbXAucHJvdG8aEmNvbW1vbl9lbnVtcy5wcm90bxoOdmFyaWFi",
            "bGUucHJvdG8aD29iamVjdF9pZC5wcm90byKoBwoHTm9kZVJ1bhIiCgJpZBgB",
            "IAEoCzIWLmxpdHRsZWhvcnNlLk5vZGVSdW5JZBIpCgp3Zl9zcGVjX2lkGAQg",
            "ASgLMhUubGl0dGxlaG9yc2UuV2ZTcGVjSWQSGwoTZmFpbHVyZV9oYW5kbGVy",
            "X2lkcxgFIAMoBRIlCgZzdGF0dXMYBiABKA4yFS5saXR0bGVob3JzZS5MSFN0",
            "YXR1cxIwCgxhcnJpdmFsX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEjEKCGVuZF90aW1lGAggASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcEgBiAEBEhgKEHRocmVhZF9zcGVjX25hbWUYCSABKAkSEQoJ",
            "bm9kZV9uYW1lGAogASgJEhoKDWVycm9yX21lc3NhZ2UYCyABKAlIAogBARIm",
            "CghmYWlsdXJlcxgMIAMoCzIULmxpdHRsZWhvcnNlLkZhaWx1cmUSKAoEdGFz",
            "axgNIAEoCzIYLmxpdHRsZWhvcnNlLlRhc2tOb2RlUnVuSAASOwoOZXh0ZXJu",
            "YWxfZXZlbnQYDiABKAsyIS5saXR0bGVob3JzZS5FeHRlcm5hbEV2ZW50Tm9k",
            "ZVJ1bkgAEjAKCmVudHJ5cG9pbnQYDyABKAsyGi5saXR0bGVob3JzZS5FbnRy",
            "eXBvaW50UnVuSAASJAoEZXhpdBgQIAEoCzIULmxpdHRsZWhvcnNlLkV4aXRS",
            "dW5IABIzCgxzdGFydF90aHJlYWQYESABKAsyGy5saXR0bGVob3JzZS5TdGFy",
            "dFRocmVhZFJ1bkgAEjYKDHdhaXRfdGhyZWFkcxgSIAEoCzIeLmxpdHRsZWhv",
            "cnNlLldhaXRGb3JUaHJlYWRzUnVuSAASKgoFc2xlZXAYEyABKAsyGS5saXR0",
            "bGVob3JzZS5TbGVlcE5vZGVSdW5IABIxCgl1c2VyX3Rhc2sYFCABKAsyHC5s",
            "aXR0bGVob3JzZS5Vc2VyVGFza05vZGVSdW5IABJGChZzdGFydF9tdWx0aXBs",
            "ZV90aHJlYWRzGBUgASgLMiQubGl0dGxlaG9yc2UuU3RhcnRNdWx0aXBsZVRo",
            "cmVhZHNSdW5IABI1Cgt0aHJvd19ldmVudBgWIAEoCzIeLmxpdHRsZWhvcnNl",
            "LlRocm93RXZlbnROb2RlUnVuSABCCwoJbm9kZV90eXBlQgsKCV9lbmRfdGlt",
            "ZUIQCg5fZXJyb3JfbWVzc2FnZSJPCgtUYXNrTm9kZVJ1bhIwCgt0YXNrX3J1",
            "bl9pZBgBIAEoCzIWLmxpdHRsZWhvcnNlLlRhc2tSdW5JZEgAiAEBQg4KDF90",
            "YXNrX3J1bl9pZCJMChFUaHJvd0V2ZW50Tm9kZVJ1bhI3ChF3b3JrZmxvd19l",
            "dmVudF9pZBgBIAEoCzIcLmxpdHRsZWhvcnNlLldvcmtmbG93RXZlbnRJZCJh",
            "Cg9Vc2VyVGFza05vZGVSdW4SOQoQdXNlcl90YXNrX3J1bl9pZBgBIAEoCzIa",
            "LmxpdHRsZWhvcnNlLlVzZXJUYXNrUnVuSWRIAIgBAUITChFfdXNlcl90YXNr",
            "X3J1bl9pZCIPCg1FbnRyeXBvaW50UnVuIgkKB0V4aXRSdW4iXAoOU3RhcnRU",
            "aHJlYWRSdW4SHAoPY2hpbGRfdGhyZWFkX2lkGAEgASgFSACIAQESGAoQdGhy",
            "ZWFkX3NwZWNfbmFtZRgCIAEoCUISChBfY2hpbGRfdGhyZWFkX2lkIk0KF1N0",
            "YXJ0TXVsdGlwbGVUaHJlYWRzUnVuEhgKEHRocmVhZF9zcGVjX25hbWUYASAB",
            "KAkSGAoQY2hpbGRfdGhyZWFkX2lkcxgCIAMoBSKkBAoRV2FpdEZvclRocmVh",
            "ZHNSdW4SPQoHdGhyZWFkcxgBIAMoCzIsLmxpdHRsZWhvcnNlLldhaXRGb3JU",
            "aHJlYWRzUnVuLldhaXRGb3JUaHJlYWQawAIKDVdhaXRGb3JUaHJlYWQSOAoP",
            "dGhyZWFkX2VuZF90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcEgAiAEBEiwKDXRocmVhZF9zdGF0dXMYAiABKA4yFS5saXR0bGVob3Jz",
            "ZS5MSFN0YXR1cxIZChF0aHJlYWRfcnVuX251bWJlchgDIAEoBRJKCg53YWl0",
            "aW5nX3N0YXR1cxgEIAEoDjIyLmxpdHRsZWhvcnNlLldhaXRGb3JUaHJlYWRz",
            "UnVuLldhaXRpbmdUaHJlYWRTdGF0dXMSKgodZmFpbHVyZV9oYW5kbGVyX3Ro",
            "cmVhZF9ydW5faWQYBSABKAVIAYgBAUISChBfdGhyZWFkX2VuZF90aW1lQiAK",
            "Hl9mYWlsdXJlX2hhbmRsZXJfdGhyZWFkX3J1bl9pZCKMAQoTV2FpdGluZ1Ro",
            "cmVhZFN0YXR1cxIWChJUSFJFQURfSU5fUFJPR1JFU1MQABIbChdUSFJFQURf",
            "SEFORExJTkdfRkFJTFVSRRABEicKI1RIUkVBRF9DT01QTEVURURfT1JfRkFJ",
            "TFVSRV9IQU5ETEVEEAISFwoTVEhSRUFEX1VOU1VDQ0VTU0ZVTBADIoECChRF",
            "eHRlcm5hbEV2ZW50Tm9kZVJ1bhI+ChVleHRlcm5hbF9ldmVudF9kZWZfaWQY",
            "ASABKAsyHy5saXR0bGVob3JzZS5FeHRlcm5hbEV2ZW50RGVmSWQSMwoKZXZl",
            "bnRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAIgB",
            "ARI8ChFleHRlcm5hbF9ldmVudF9pZBgDIAEoCzIcLmxpdHRsZWhvcnNlLkV4",
            "dGVybmFsRXZlbnRJZEgBiAEBEhEKCXRpbWVkX291dBgEIAEoCEINCgtfZXZl",
            "bnRfdGltZUIUChJfZXh0ZXJuYWxfZXZlbnRfaWQiVAoMU2xlZXBOb2RlUnVu",
            "EjMKD21hdHVyYXRpb25fdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASDwoHbWF0dXJlZBgCIAEoCCLYAQoHRmFpbHVyZRIUCgxmYWls",
            "dXJlX25hbWUYASABKAkSDwoHbWVzc2FnZRgCIAEoCRIwCgdjb250ZW50GAMg",
            "ASgLMhoubGl0dGxlaG9yc2UuVmFyaWFibGVWYWx1ZUgAiAEBEhwKFHdhc19w",
            "cm9wZXJseV9oYW5kbGVkGAQgASgIEikKHGZhaWx1cmVfaGFuZGxlcl90aHJl",
            "YWRydW5faWQYBSABKAVIAYgBAUIKCghfY29udGVudEIfCh1fZmFpbHVyZV9o",
            "YW5kbGVyX3RocmVhZHJ1bl9pZEJJCh9pby5saXR0bGVob3JzZS5zZGsuY29t",
            "bW9uLnByb3RvUAFaCS47bGhwcm90b6oCGExpdHRsZUhvcnNlLkNvbW1vbi5Q",
            "cm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::LittleHorse.Common.Proto.CommonEnumsReflection.Descriptor, global::LittleHorse.Common.Proto.VariableReflection.Descriptor, global::LittleHorse.Common.Proto.ObjectIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.NodeRun), global::LittleHorse.Common.Proto.NodeRun.Parser, new[]{ "Id", "WfSpecId", "FailureHandlerIds", "Status", "ArrivalTime", "EndTime", "ThreadSpecName", "NodeName", "ErrorMessage", "Failures", "Task", "ExternalEvent", "Entrypoint", "Exit", "StartThread", "WaitThreads", "Sleep", "UserTask", "StartMultipleThreads", "ThrowEvent" }, new[]{ "NodeType", "EndTime", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.TaskNodeRun), global::LittleHorse.Common.Proto.TaskNodeRun.Parser, new[]{ "TaskRunId" }, new[]{ "TaskRunId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.ThrowEventNodeRun), global::LittleHorse.Common.Proto.ThrowEventNodeRun.Parser, new[]{ "WorkflowEventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.UserTaskNodeRun), global::LittleHorse.Common.Proto.UserTaskNodeRun.Parser, new[]{ "UserTaskRunId" }, new[]{ "UserTaskRunId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.EntrypointRun), global::LittleHorse.Common.Proto.EntrypointRun.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.ExitRun), global::LittleHorse.Common.Proto.ExitRun.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.StartThreadRun), global::LittleHorse.Common.Proto.StartThreadRun.Parser, new[]{ "ChildThreadId", "ThreadSpecName" }, new[]{ "ChildThreadId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.StartMultipleThreadsRun), global::LittleHorse.Common.Proto.StartMultipleThreadsRun.Parser, new[]{ "ThreadSpecName", "ChildThreadIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.WaitForThreadsRun), global::LittleHorse.Common.Proto.WaitForThreadsRun.Parser, new[]{ "Threads" }, null, new[]{ typeof(global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitForThread), global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitForThread.Parser, new[]{ "ThreadEndTime", "ThreadStatus", "ThreadRunNumber", "WaitingStatus", "FailureHandlerThreadRunId" }, new[]{ "ThreadEndTime", "FailureHandlerThreadRunId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.ExternalEventNodeRun), global::LittleHorse.Common.Proto.ExternalEventNodeRun.Parser, new[]{ "ExternalEventDefId", "EventTime", "ExternalEventId", "TimedOut" }, new[]{ "EventTime", "ExternalEventId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.SleepNodeRun), global::LittleHorse.Common.Proto.SleepNodeRun.Parser, new[]{ "MaturationTime", "Matured" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.Failure), global::LittleHorse.Common.Proto.Failure.Parser, new[]{ "FailureName", "Message", "Content", "WasProperlyHandled", "FailureHandlerThreadrunId" }, new[]{ "Content", "FailureHandlerThreadrunId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A NodeRun is a running instance of a Node in a ThreadRun. Note that a NodeRun
  /// is a Getable object, meaning it can be retried from the LittleHorse grpc API.
  /// </summary>
  public sealed partial class NodeRun : pb::IMessage<NodeRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeRun> _parser = new pb::MessageParser<NodeRun>(() => new NodeRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NodeRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeRun(NodeRun other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      wfSpecId_ = other.wfSpecId_ != null ? other.wfSpecId_.Clone() : null;
      failureHandlerIds_ = other.failureHandlerIds_.Clone();
      status_ = other.status_;
      arrivalTime_ = other.arrivalTime_ != null ? other.arrivalTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      threadSpecName_ = other.threadSpecName_;
      nodeName_ = other.nodeName_;
      errorMessage_ = other.errorMessage_;
      failures_ = other.failures_.Clone();
      switch (other.NodeTypeCase) {
        case NodeTypeOneofCase.Task:
          Task = other.Task.Clone();
          break;
        case NodeTypeOneofCase.ExternalEvent:
          ExternalEvent = other.ExternalEvent.Clone();
          break;
        case NodeTypeOneofCase.Entrypoint:
          Entrypoint = other.Entrypoint.Clone();
          break;
        case NodeTypeOneofCase.Exit:
          Exit = other.Exit.Clone();
          break;
        case NodeTypeOneofCase.StartThread:
          StartThread = other.StartThread.Clone();
          break;
        case NodeTypeOneofCase.WaitThreads:
          WaitThreads = other.WaitThreads.Clone();
          break;
        case NodeTypeOneofCase.Sleep:
          Sleep = other.Sleep.Clone();
          break;
        case NodeTypeOneofCase.UserTask:
          UserTask = other.UserTask.Clone();
          break;
        case NodeTypeOneofCase.StartMultipleThreads:
          StartMultipleThreads = other.StartMultipleThreads.Clone();
          break;
        case NodeTypeOneofCase.ThrowEvent:
          ThrowEvent = other.ThrowEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeRun Clone() {
      return new NodeRun(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.NodeRunId id_;
    /// <summary>
    /// The ID of the NodeRun. Note that the NodeRunId contains the WfRunId, the
    /// ThreadRun's number, and the position of the NodeRun within that ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.NodeRunId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "wf_spec_id" field.</summary>
    public const int WfSpecIdFieldNumber = 4;
    private global::LittleHorse.Common.Proto.WfSpecId wfSpecId_;
    /// <summary>
    /// The ID of the WfSpec that this NodeRun is from. This is not _always_ the same
    /// as the ThreadRun it belongs to because of the upcoming WfSpec Version Migration
    /// feature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.WfSpecId WfSpecId {
      get { return wfSpecId_; }
      set {
        wfSpecId_ = value;
      }
    }

    /// <summary>Field number for the "failure_handler_ids" field.</summary>
    public const int FailureHandlerIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_failureHandlerIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> failureHandlerIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// A list of all ThreadRun's that ran to handle a failure thrown by this NodeRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> FailureHandlerIds {
      get { return failureHandlerIds_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::LittleHorse.Common.Proto.LHStatus status_ = global::LittleHorse.Common.Proto.LHStatus.Starting;
    /// <summary>
    /// The status of this NodeRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.LHStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "arrival_time" field.</summary>
    public const int ArrivalTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp arrivalTime_;
    /// <summary>
    /// The time the ThreadRun arrived at this NodeRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ArrivalTime {
      get { return arrivalTime_; }
      set {
        arrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// The time the NodeRun was terminated (failed or completed).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "thread_spec_name" field.</summary>
    public const int ThreadSpecNameFieldNumber = 9;
    private string threadSpecName_ = "";
    /// <summary>
    /// The name of the ThreadSpec to which this NodeRun belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ThreadSpecName {
      get { return threadSpecName_; }
      set {
        threadSpecName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_name" field.</summary>
    public const int NodeNameFieldNumber = 10;
    private string nodeName_ = "";
    /// <summary>
    /// The name of the Node in the ThreadSpec that this NodeRun belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 11;
    private readonly static string ErrorMessageDefaultValue = "";

    private string errorMessage_;
    /// <summary>
    /// A human-readable error message intended to help developers diagnose WfSpec
    /// problems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ErrorMessage {
      get { return errorMessage_ ?? ErrorMessageDefaultValue; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "error_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasErrorMessage {
      get { return errorMessage_ != null; }
    }
    /// <summary>Clears the value of the "error_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearErrorMessage() {
      errorMessage_ = null;
    }

    /// <summary>Field number for the "failures" field.</summary>
    public const int FailuresFieldNumber = 12;
    private static readonly pb::FieldCodec<global::LittleHorse.Common.Proto.Failure> _repeated_failures_codec
        = pb::FieldCodec.ForMessage(98, global::LittleHorse.Common.Proto.Failure.Parser);
    private readonly pbc::RepeatedField<global::LittleHorse.Common.Proto.Failure> failures_ = new pbc::RepeatedField<global::LittleHorse.Common.Proto.Failure>();
    /// <summary>
    /// A list of Failures thrown by this NodeRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LittleHorse.Common.Proto.Failure> Failures {
      get { return failures_; }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 13;
    /// <summary>
    /// Denotes a TASK node, which runs a TaskRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.TaskNodeRun Task {
      get { return nodeTypeCase_ == NodeTypeOneofCase.Task ? (global::LittleHorse.Common.Proto.TaskNodeRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.Task;
      }
    }

    /// <summary>Field number for the "external_event" field.</summary>
    public const int ExternalEventFieldNumber = 14;
    /// <summary>
    /// An EXTERNAL_EVENT node blocks until an ExternalEvent arrives.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ExternalEventNodeRun ExternalEvent {
      get { return nodeTypeCase_ == NodeTypeOneofCase.ExternalEvent ? (global::LittleHorse.Common.Proto.ExternalEventNodeRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.ExternalEvent;
      }
    }

    /// <summary>Field number for the "entrypoint" field.</summary>
    public const int EntrypointFieldNumber = 15;
    /// <summary>
    /// An ENTRYPOINT node is the first thing that runs in a ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.EntrypointRun Entrypoint {
      get { return nodeTypeCase_ == NodeTypeOneofCase.Entrypoint ? (global::LittleHorse.Common.Proto.EntrypointRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.Entrypoint;
      }
    }

    /// <summary>Field number for the "exit" field.</summary>
    public const int ExitFieldNumber = 16;
    /// <summary>
    /// An EXIT node completes a ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ExitRun Exit {
      get { return nodeTypeCase_ == NodeTypeOneofCase.Exit ? (global::LittleHorse.Common.Proto.ExitRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.Exit;
      }
    }

    /// <summary>Field number for the "start_thread" field.</summary>
    public const int StartThreadFieldNumber = 17;
    /// <summary>
    /// A START_THREAD node starts a child ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.StartThreadRun StartThread {
      get { return nodeTypeCase_ == NodeTypeOneofCase.StartThread ? (global::LittleHorse.Common.Proto.StartThreadRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.StartThread;
      }
    }

    /// <summary>Field number for the "wait_threads" field.</summary>
    public const int WaitThreadsFieldNumber = 18;
    /// <summary>
    /// A WAIT_THREADS node waits for one or more child ThreadRun's to complete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.WaitForThreadsRun WaitThreads {
      get { return nodeTypeCase_ == NodeTypeOneofCase.WaitThreads ? (global::LittleHorse.Common.Proto.WaitForThreadsRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.WaitThreads;
      }
    }

    /// <summary>Field number for the "sleep" field.</summary>
    public const int SleepFieldNumber = 19;
    /// <summary>
    /// A SLEEP node makes the ThreadRun block for a certain amount of time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.SleepNodeRun Sleep {
      get { return nodeTypeCase_ == NodeTypeOneofCase.Sleep ? (global::LittleHorse.Common.Proto.SleepNodeRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.Sleep;
      }
    }

    /// <summary>Field number for the "user_task" field.</summary>
    public const int UserTaskFieldNumber = 20;
    /// <summary>
    /// A USER_TASK node waits until a human executes some work and reports the result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.UserTaskNodeRun UserTask {
      get { return nodeTypeCase_ == NodeTypeOneofCase.UserTask ? (global::LittleHorse.Common.Proto.UserTaskNodeRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.UserTask;
      }
    }

    /// <summary>Field number for the "start_multiple_threads" field.</summary>
    public const int StartMultipleThreadsFieldNumber = 21;
    /// <summary>
    /// A START_MULTIPLE_THREADS node iterates over a JSON_ARR variable and spawns a
    /// child ThreadRun for each element in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.StartMultipleThreadsRun StartMultipleThreads {
      get { return nodeTypeCase_ == NodeTypeOneofCase.StartMultipleThreads ? (global::LittleHorse.Common.Proto.StartMultipleThreadsRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.StartMultipleThreads;
      }
    }

    /// <summary>Field number for the "throw_event" field.</summary>
    public const int ThrowEventFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ThrowEventNodeRun ThrowEvent {
      get { return nodeTypeCase_ == NodeTypeOneofCase.ThrowEvent ? (global::LittleHorse.Common.Proto.ThrowEventNodeRun) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.ThrowEvent;
      }
    }

    private object nodeType_;
    /// <summary>Enum of possible cases for the "node_type" oneof.</summary>
    public enum NodeTypeOneofCase {
      None = 0,
      Task = 13,
      ExternalEvent = 14,
      Entrypoint = 15,
      Exit = 16,
      StartThread = 17,
      WaitThreads = 18,
      Sleep = 19,
      UserTask = 20,
      StartMultipleThreads = 21,
      ThrowEvent = 22,
    }
    private NodeTypeOneofCase nodeTypeCase_ = NodeTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeTypeOneofCase NodeTypeCase {
      get { return nodeTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNodeType() {
      nodeTypeCase_ = NodeTypeOneofCase.None;
      nodeType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NodeRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NodeRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(WfSpecId, other.WfSpecId)) return false;
      if(!failureHandlerIds_.Equals(other.failureHandlerIds_)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ArrivalTime, other.ArrivalTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (ThreadSpecName != other.ThreadSpecName) return false;
      if (NodeName != other.NodeName) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if(!failures_.Equals(other.failures_)) return false;
      if (!object.Equals(Task, other.Task)) return false;
      if (!object.Equals(ExternalEvent, other.ExternalEvent)) return false;
      if (!object.Equals(Entrypoint, other.Entrypoint)) return false;
      if (!object.Equals(Exit, other.Exit)) return false;
      if (!object.Equals(StartThread, other.StartThread)) return false;
      if (!object.Equals(WaitThreads, other.WaitThreads)) return false;
      if (!object.Equals(Sleep, other.Sleep)) return false;
      if (!object.Equals(UserTask, other.UserTask)) return false;
      if (!object.Equals(StartMultipleThreads, other.StartMultipleThreads)) return false;
      if (!object.Equals(ThrowEvent, other.ThrowEvent)) return false;
      if (NodeTypeCase != other.NodeTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (wfSpecId_ != null) hash ^= WfSpecId.GetHashCode();
      hash ^= failureHandlerIds_.GetHashCode();
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) hash ^= Status.GetHashCode();
      if (arrivalTime_ != null) hash ^= ArrivalTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (ThreadSpecName.Length != 0) hash ^= ThreadSpecName.GetHashCode();
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (HasErrorMessage) hash ^= ErrorMessage.GetHashCode();
      hash ^= failures_.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.Task) hash ^= Task.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.ExternalEvent) hash ^= ExternalEvent.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.Entrypoint) hash ^= Entrypoint.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.Exit) hash ^= Exit.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.StartThread) hash ^= StartThread.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.WaitThreads) hash ^= WaitThreads.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.Sleep) hash ^= Sleep.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.UserTask) hash ^= UserTask.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.StartMultipleThreads) hash ^= StartMultipleThreads.GetHashCode();
      if (nodeTypeCase_ == NodeTypeOneofCase.ThrowEvent) hash ^= ThrowEvent.GetHashCode();
      hash ^= (int) nodeTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (wfSpecId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WfSpecId);
      }
      failureHandlerIds_.WriteTo(output, _repeated_failureHandlerIds_codec);
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (arrivalTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ArrivalTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndTime);
      }
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ThreadSpecName);
      }
      if (NodeName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NodeName);
      }
      if (HasErrorMessage) {
        output.WriteRawTag(90);
        output.WriteString(ErrorMessage);
      }
      failures_.WriteTo(output, _repeated_failures_codec);
      if (nodeTypeCase_ == NodeTypeOneofCase.Task) {
        output.WriteRawTag(106);
        output.WriteMessage(Task);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.ExternalEvent) {
        output.WriteRawTag(114);
        output.WriteMessage(ExternalEvent);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Entrypoint) {
        output.WriteRawTag(122);
        output.WriteMessage(Entrypoint);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Exit) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Exit);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.StartThread) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StartThread);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.WaitThreads) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(WaitThreads);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Sleep) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Sleep);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.UserTask) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UserTask);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.StartMultipleThreads) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StartMultipleThreads);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.ThrowEvent) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(ThrowEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (wfSpecId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WfSpecId);
      }
      failureHandlerIds_.WriteTo(ref output, _repeated_failureHandlerIds_codec);
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (arrivalTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ArrivalTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndTime);
      }
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ThreadSpecName);
      }
      if (NodeName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NodeName);
      }
      if (HasErrorMessage) {
        output.WriteRawTag(90);
        output.WriteString(ErrorMessage);
      }
      failures_.WriteTo(ref output, _repeated_failures_codec);
      if (nodeTypeCase_ == NodeTypeOneofCase.Task) {
        output.WriteRawTag(106);
        output.WriteMessage(Task);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.ExternalEvent) {
        output.WriteRawTag(114);
        output.WriteMessage(ExternalEvent);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Entrypoint) {
        output.WriteRawTag(122);
        output.WriteMessage(Entrypoint);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Exit) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Exit);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.StartThread) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StartThread);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.WaitThreads) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(WaitThreads);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Sleep) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Sleep);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.UserTask) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UserTask);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.StartMultipleThreads) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StartMultipleThreads);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.ThrowEvent) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(ThrowEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (wfSpecId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WfSpecId);
      }
      size += failureHandlerIds_.CalculateSize(_repeated_failureHandlerIds_codec);
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (arrivalTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrivalTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (ThreadSpecName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThreadSpecName);
      }
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (HasErrorMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      size += failures_.CalculateSize(_repeated_failures_codec);
      if (nodeTypeCase_ == NodeTypeOneofCase.Task) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.ExternalEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalEvent);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Entrypoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entrypoint);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Exit) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Exit);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.StartThread) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartThread);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.WaitThreads) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WaitThreads);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.Sleep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Sleep);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.UserTask) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserTask);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.StartMultipleThreads) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartMultipleThreads);
      }
      if (nodeTypeCase_ == NodeTypeOneofCase.ThrowEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ThrowEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NodeRun other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::LittleHorse.Common.Proto.NodeRunId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.wfSpecId_ != null) {
        if (wfSpecId_ == null) {
          WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
        }
        WfSpecId.MergeFrom(other.WfSpecId);
      }
      failureHandlerIds_.Add(other.failureHandlerIds_);
      if (other.Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        Status = other.Status;
      }
      if (other.arrivalTime_ != null) {
        if (arrivalTime_ == null) {
          ArrivalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ArrivalTime.MergeFrom(other.ArrivalTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.ThreadSpecName.Length != 0) {
        ThreadSpecName = other.ThreadSpecName;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      if (other.HasErrorMessage) {
        ErrorMessage = other.ErrorMessage;
      }
      failures_.Add(other.failures_);
      switch (other.NodeTypeCase) {
        case NodeTypeOneofCase.Task:
          if (Task == null) {
            Task = new global::LittleHorse.Common.Proto.TaskNodeRun();
          }
          Task.MergeFrom(other.Task);
          break;
        case NodeTypeOneofCase.ExternalEvent:
          if (ExternalEvent == null) {
            ExternalEvent = new global::LittleHorse.Common.Proto.ExternalEventNodeRun();
          }
          ExternalEvent.MergeFrom(other.ExternalEvent);
          break;
        case NodeTypeOneofCase.Entrypoint:
          if (Entrypoint == null) {
            Entrypoint = new global::LittleHorse.Common.Proto.EntrypointRun();
          }
          Entrypoint.MergeFrom(other.Entrypoint);
          break;
        case NodeTypeOneofCase.Exit:
          if (Exit == null) {
            Exit = new global::LittleHorse.Common.Proto.ExitRun();
          }
          Exit.MergeFrom(other.Exit);
          break;
        case NodeTypeOneofCase.StartThread:
          if (StartThread == null) {
            StartThread = new global::LittleHorse.Common.Proto.StartThreadRun();
          }
          StartThread.MergeFrom(other.StartThread);
          break;
        case NodeTypeOneofCase.WaitThreads:
          if (WaitThreads == null) {
            WaitThreads = new global::LittleHorse.Common.Proto.WaitForThreadsRun();
          }
          WaitThreads.MergeFrom(other.WaitThreads);
          break;
        case NodeTypeOneofCase.Sleep:
          if (Sleep == null) {
            Sleep = new global::LittleHorse.Common.Proto.SleepNodeRun();
          }
          Sleep.MergeFrom(other.Sleep);
          break;
        case NodeTypeOneofCase.UserTask:
          if (UserTask == null) {
            UserTask = new global::LittleHorse.Common.Proto.UserTaskNodeRun();
          }
          UserTask.MergeFrom(other.UserTask);
          break;
        case NodeTypeOneofCase.StartMultipleThreads:
          if (StartMultipleThreads == null) {
            StartMultipleThreads = new global::LittleHorse.Common.Proto.StartMultipleThreadsRun();
          }
          StartMultipleThreads.MergeFrom(other.StartMultipleThreads);
          break;
        case NodeTypeOneofCase.ThrowEvent:
          if (ThrowEvent == null) {
            ThrowEvent = new global::LittleHorse.Common.Proto.ThrowEventNodeRun();
          }
          ThrowEvent.MergeFrom(other.ThrowEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::LittleHorse.Common.Proto.NodeRunId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 34: {
            if (wfSpecId_ == null) {
              WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
            }
            input.ReadMessage(WfSpecId);
            break;
          }
          case 42:
          case 40: {
            failureHandlerIds_.AddEntriesFrom(input, _repeated_failureHandlerIds_codec);
            break;
          }
          case 48: {
            Status = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
            break;
          }
          case 58: {
            if (arrivalTime_ == null) {
              ArrivalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ArrivalTime);
            break;
          }
          case 66: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 74: {
            ThreadSpecName = input.ReadString();
            break;
          }
          case 82: {
            NodeName = input.ReadString();
            break;
          }
          case 90: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 98: {
            failures_.AddEntriesFrom(input, _repeated_failures_codec);
            break;
          }
          case 106: {
            global::LittleHorse.Common.Proto.TaskNodeRun subBuilder = new global::LittleHorse.Common.Proto.TaskNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Task) {
              subBuilder.MergeFrom(Task);
            }
            input.ReadMessage(subBuilder);
            Task = subBuilder;
            break;
          }
          case 114: {
            global::LittleHorse.Common.Proto.ExternalEventNodeRun subBuilder = new global::LittleHorse.Common.Proto.ExternalEventNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.ExternalEvent) {
              subBuilder.MergeFrom(ExternalEvent);
            }
            input.ReadMessage(subBuilder);
            ExternalEvent = subBuilder;
            break;
          }
          case 122: {
            global::LittleHorse.Common.Proto.EntrypointRun subBuilder = new global::LittleHorse.Common.Proto.EntrypointRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Entrypoint) {
              subBuilder.MergeFrom(Entrypoint);
            }
            input.ReadMessage(subBuilder);
            Entrypoint = subBuilder;
            break;
          }
          case 130: {
            global::LittleHorse.Common.Proto.ExitRun subBuilder = new global::LittleHorse.Common.Proto.ExitRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Exit) {
              subBuilder.MergeFrom(Exit);
            }
            input.ReadMessage(subBuilder);
            Exit = subBuilder;
            break;
          }
          case 138: {
            global::LittleHorse.Common.Proto.StartThreadRun subBuilder = new global::LittleHorse.Common.Proto.StartThreadRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.StartThread) {
              subBuilder.MergeFrom(StartThread);
            }
            input.ReadMessage(subBuilder);
            StartThread = subBuilder;
            break;
          }
          case 146: {
            global::LittleHorse.Common.Proto.WaitForThreadsRun subBuilder = new global::LittleHorse.Common.Proto.WaitForThreadsRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.WaitThreads) {
              subBuilder.MergeFrom(WaitThreads);
            }
            input.ReadMessage(subBuilder);
            WaitThreads = subBuilder;
            break;
          }
          case 154: {
            global::LittleHorse.Common.Proto.SleepNodeRun subBuilder = new global::LittleHorse.Common.Proto.SleepNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Sleep) {
              subBuilder.MergeFrom(Sleep);
            }
            input.ReadMessage(subBuilder);
            Sleep = subBuilder;
            break;
          }
          case 162: {
            global::LittleHorse.Common.Proto.UserTaskNodeRun subBuilder = new global::LittleHorse.Common.Proto.UserTaskNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.UserTask) {
              subBuilder.MergeFrom(UserTask);
            }
            input.ReadMessage(subBuilder);
            UserTask = subBuilder;
            break;
          }
          case 170: {
            global::LittleHorse.Common.Proto.StartMultipleThreadsRun subBuilder = new global::LittleHorse.Common.Proto.StartMultipleThreadsRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.StartMultipleThreads) {
              subBuilder.MergeFrom(StartMultipleThreads);
            }
            input.ReadMessage(subBuilder);
            StartMultipleThreads = subBuilder;
            break;
          }
          case 178: {
            global::LittleHorse.Common.Proto.ThrowEventNodeRun subBuilder = new global::LittleHorse.Common.Proto.ThrowEventNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.ThrowEvent) {
              subBuilder.MergeFrom(ThrowEvent);
            }
            input.ReadMessage(subBuilder);
            ThrowEvent = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::LittleHorse.Common.Proto.NodeRunId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 34: {
            if (wfSpecId_ == null) {
              WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
            }
            input.ReadMessage(WfSpecId);
            break;
          }
          case 42:
          case 40: {
            failureHandlerIds_.AddEntriesFrom(ref input, _repeated_failureHandlerIds_codec);
            break;
          }
          case 48: {
            Status = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
            break;
          }
          case 58: {
            if (arrivalTime_ == null) {
              ArrivalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ArrivalTime);
            break;
          }
          case 66: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 74: {
            ThreadSpecName = input.ReadString();
            break;
          }
          case 82: {
            NodeName = input.ReadString();
            break;
          }
          case 90: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 98: {
            failures_.AddEntriesFrom(ref input, _repeated_failures_codec);
            break;
          }
          case 106: {
            global::LittleHorse.Common.Proto.TaskNodeRun subBuilder = new global::LittleHorse.Common.Proto.TaskNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Task) {
              subBuilder.MergeFrom(Task);
            }
            input.ReadMessage(subBuilder);
            Task = subBuilder;
            break;
          }
          case 114: {
            global::LittleHorse.Common.Proto.ExternalEventNodeRun subBuilder = new global::LittleHorse.Common.Proto.ExternalEventNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.ExternalEvent) {
              subBuilder.MergeFrom(ExternalEvent);
            }
            input.ReadMessage(subBuilder);
            ExternalEvent = subBuilder;
            break;
          }
          case 122: {
            global::LittleHorse.Common.Proto.EntrypointRun subBuilder = new global::LittleHorse.Common.Proto.EntrypointRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Entrypoint) {
              subBuilder.MergeFrom(Entrypoint);
            }
            input.ReadMessage(subBuilder);
            Entrypoint = subBuilder;
            break;
          }
          case 130: {
            global::LittleHorse.Common.Proto.ExitRun subBuilder = new global::LittleHorse.Common.Proto.ExitRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Exit) {
              subBuilder.MergeFrom(Exit);
            }
            input.ReadMessage(subBuilder);
            Exit = subBuilder;
            break;
          }
          case 138: {
            global::LittleHorse.Common.Proto.StartThreadRun subBuilder = new global::LittleHorse.Common.Proto.StartThreadRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.StartThread) {
              subBuilder.MergeFrom(StartThread);
            }
            input.ReadMessage(subBuilder);
            StartThread = subBuilder;
            break;
          }
          case 146: {
            global::LittleHorse.Common.Proto.WaitForThreadsRun subBuilder = new global::LittleHorse.Common.Proto.WaitForThreadsRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.WaitThreads) {
              subBuilder.MergeFrom(WaitThreads);
            }
            input.ReadMessage(subBuilder);
            WaitThreads = subBuilder;
            break;
          }
          case 154: {
            global::LittleHorse.Common.Proto.SleepNodeRun subBuilder = new global::LittleHorse.Common.Proto.SleepNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.Sleep) {
              subBuilder.MergeFrom(Sleep);
            }
            input.ReadMessage(subBuilder);
            Sleep = subBuilder;
            break;
          }
          case 162: {
            global::LittleHorse.Common.Proto.UserTaskNodeRun subBuilder = new global::LittleHorse.Common.Proto.UserTaskNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.UserTask) {
              subBuilder.MergeFrom(UserTask);
            }
            input.ReadMessage(subBuilder);
            UserTask = subBuilder;
            break;
          }
          case 170: {
            global::LittleHorse.Common.Proto.StartMultipleThreadsRun subBuilder = new global::LittleHorse.Common.Proto.StartMultipleThreadsRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.StartMultipleThreads) {
              subBuilder.MergeFrom(StartMultipleThreads);
            }
            input.ReadMessage(subBuilder);
            StartMultipleThreads = subBuilder;
            break;
          }
          case 178: {
            global::LittleHorse.Common.Proto.ThrowEventNodeRun subBuilder = new global::LittleHorse.Common.Proto.ThrowEventNodeRun();
            if (nodeTypeCase_ == NodeTypeOneofCase.ThrowEvent) {
              subBuilder.MergeFrom(ThrowEvent);
            }
            input.ReadMessage(subBuilder);
            ThrowEvent = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for a TASK NodeRun.
  /// </summary>
  public sealed partial class TaskNodeRun : pb::IMessage<TaskNodeRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaskNodeRun> _parser = new pb::MessageParser<TaskNodeRun>(() => new TaskNodeRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TaskNodeRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TaskNodeRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TaskNodeRun(TaskNodeRun other) : this() {
      taskRunId_ = other.taskRunId_ != null ? other.taskRunId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TaskNodeRun Clone() {
      return new TaskNodeRun(this);
    }

    /// <summary>Field number for the "task_run_id" field.</summary>
    public const int TaskRunIdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.TaskRunId taskRunId_;
    /// <summary>
    /// The ID of the TaskRun. Note that if the ThreadRun was halted when it arrived
    /// at this TASK Node, then the task_run_id will be unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.TaskRunId TaskRunId {
      get { return taskRunId_; }
      set {
        taskRunId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TaskNodeRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TaskNodeRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TaskRunId, other.TaskRunId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (taskRunId_ != null) hash ^= TaskRunId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (taskRunId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TaskRunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (taskRunId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TaskRunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (taskRunId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskRunId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TaskNodeRun other) {
      if (other == null) {
        return;
      }
      if (other.taskRunId_ != null) {
        if (taskRunId_ == null) {
          TaskRunId = new global::LittleHorse.Common.Proto.TaskRunId();
        }
        TaskRunId.MergeFrom(other.TaskRunId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (taskRunId_ == null) {
              TaskRunId = new global::LittleHorse.Common.Proto.TaskRunId();
            }
            input.ReadMessage(TaskRunId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (taskRunId_ == null) {
              TaskRunId = new global::LittleHorse.Common.Proto.TaskRunId();
            }
            input.ReadMessage(TaskRunId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ThrowEventNodeRun : pb::IMessage<ThrowEventNodeRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ThrowEventNodeRun> _parser = new pb::MessageParser<ThrowEventNodeRun>(() => new ThrowEventNodeRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ThrowEventNodeRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThrowEventNodeRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThrowEventNodeRun(ThrowEventNodeRun other) : this() {
      workflowEventId_ = other.workflowEventId_ != null ? other.workflowEventId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThrowEventNodeRun Clone() {
      return new ThrowEventNodeRun(this);
    }

    /// <summary>Field number for the "workflow_event_id" field.</summary>
    public const int WorkflowEventIdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.WorkflowEventId workflowEventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.WorkflowEventId WorkflowEventId {
      get { return workflowEventId_; }
      set {
        workflowEventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ThrowEventNodeRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ThrowEventNodeRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WorkflowEventId, other.WorkflowEventId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (workflowEventId_ != null) hash ^= WorkflowEventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (workflowEventId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WorkflowEventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (workflowEventId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WorkflowEventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (workflowEventId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorkflowEventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ThrowEventNodeRun other) {
      if (other == null) {
        return;
      }
      if (other.workflowEventId_ != null) {
        if (workflowEventId_ == null) {
          WorkflowEventId = new global::LittleHorse.Common.Proto.WorkflowEventId();
        }
        WorkflowEventId.MergeFrom(other.WorkflowEventId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (workflowEventId_ == null) {
              WorkflowEventId = new global::LittleHorse.Common.Proto.WorkflowEventId();
            }
            input.ReadMessage(WorkflowEventId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (workflowEventId_ == null) {
              WorkflowEventId = new global::LittleHorse.Common.Proto.WorkflowEventId();
            }
            input.ReadMessage(WorkflowEventId);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for a USER_TASK NodeRun.
  /// </summary>
  public sealed partial class UserTaskNodeRun : pb::IMessage<UserTaskNodeRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserTaskNodeRun> _parser = new pb::MessageParser<UserTaskNodeRun>(() => new UserTaskNodeRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserTaskNodeRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTaskNodeRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTaskNodeRun(UserTaskNodeRun other) : this() {
      userTaskRunId_ = other.userTaskRunId_ != null ? other.userTaskRunId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTaskNodeRun Clone() {
      return new UserTaskNodeRun(this);
    }

    /// <summary>Field number for the "user_task_run_id" field.</summary>
    public const int UserTaskRunIdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.UserTaskRunId userTaskRunId_;
    /// <summary>
    /// The ID of the UserTaskRun. Note that if the ThreadRun was halted when it arrived
    /// at this USER_TASK node, then the user_task_run_id will be unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.UserTaskRunId UserTaskRunId {
      get { return userTaskRunId_; }
      set {
        userTaskRunId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserTaskNodeRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserTaskNodeRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserTaskRunId, other.UserTaskRunId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (userTaskRunId_ != null) hash ^= UserTaskRunId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (userTaskRunId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserTaskRunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (userTaskRunId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserTaskRunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (userTaskRunId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserTaskRunId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserTaskNodeRun other) {
      if (other == null) {
        return;
      }
      if (other.userTaskRunId_ != null) {
        if (userTaskRunId_ == null) {
          UserTaskRunId = new global::LittleHorse.Common.Proto.UserTaskRunId();
        }
        UserTaskRunId.MergeFrom(other.UserTaskRunId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userTaskRunId_ == null) {
              UserTaskRunId = new global::LittleHorse.Common.Proto.UserTaskRunId();
            }
            input.ReadMessage(UserTaskRunId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (userTaskRunId_ == null) {
              UserTaskRunId = new global::LittleHorse.Common.Proto.UserTaskRunId();
            }
            input.ReadMessage(UserTaskRunId);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for an ENTRYPOINT NodeRun. Currently Empty.
  /// </summary>
  public sealed partial class EntrypointRun : pb::IMessage<EntrypointRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntrypointRun> _parser = new pb::MessageParser<EntrypointRun>(() => new EntrypointRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EntrypointRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EntrypointRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EntrypointRun(EntrypointRun other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EntrypointRun Clone() {
      return new EntrypointRun(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EntrypointRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EntrypointRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EntrypointRun other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for an EXIT NodeRun. Currently Empty, will contain info
  /// about ThreadRun Outputs once those are added in the future.
  /// </summary>
  public sealed partial class ExitRun : pb::IMessage<ExitRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExitRun> _parser = new pb::MessageParser<ExitRun>(() => new ExitRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExitRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExitRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExitRun(ExitRun other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExitRun Clone() {
      return new ExitRun(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExitRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExitRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExitRun other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for a START_THREAD NodeRun.
  /// </summary>
  public sealed partial class StartThreadRun : pb::IMessage<StartThreadRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartThreadRun> _parser = new pb::MessageParser<StartThreadRun>(() => new StartThreadRun());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StartThreadRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartThreadRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartThreadRun(StartThreadRun other) : this() {
      _hasBits0 = other._hasBits0;
      childThreadId_ = other.childThreadId_;
      threadSpecName_ = other.threadSpecName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartThreadRun Clone() {
      return new StartThreadRun(this);
    }

    /// <summary>Field number for the "child_thread_id" field.</summary>
    public const int ChildThreadIdFieldNumber = 1;
    private readonly static int ChildThreadIdDefaultValue = 0;

    private int childThreadId_;
    /// <summary>
    /// Contains the thread_run_number of the created Child ThreadRun, if it has
    /// been created already.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChildThreadId {
      get { if ((_hasBits0 & 1) != 0) { return childThreadId_; } else { return ChildThreadIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        childThreadId_ = value;
      }
    }
    /// <summary>Gets whether the "child_thread_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChildThreadId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "child_thread_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChildThreadId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "thread_spec_name" field.</summary>
    public const int ThreadSpecNameFieldNumber = 2;
    private string threadSpecName_ = "";
    /// <summary>
    /// The thread_spec_name of the child thread_run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ThreadSpecName {
      get { return threadSpecName_; }
      set {
        threadSpecName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StartThreadRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StartThreadRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChildThreadId != other.ChildThreadId) return false;
      if (ThreadSpecName != other.ThreadSpecName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChildThreadId) hash ^= ChildThreadId.GetHashCode();
      if (ThreadSpecName.Length != 0) hash ^= ThreadSpecName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChildThreadId) {
        output.WriteRawTag(8);
        output.WriteInt32(ChildThreadId);
      }
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ThreadSpecName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChildThreadId) {
        output.WriteRawTag(8);
        output.WriteInt32(ChildThreadId);
      }
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ThreadSpecName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChildThreadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChildThreadId);
      }
      if (ThreadSpecName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThreadSpecName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StartThreadRun other) {
      if (other == null) {
        return;
      }
      if (other.HasChildThreadId) {
        ChildThreadId = other.ChildThreadId;
      }
      if (other.ThreadSpecName.Length != 0) {
        ThreadSpecName = other.ThreadSpecName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChildThreadId = input.ReadInt32();
            break;
          }
          case 18: {
            ThreadSpecName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChildThreadId = input.ReadInt32();
            break;
          }
          case 18: {
            ThreadSpecName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for a START_MULTIPLE_THREADS NodeRun.
  ///
  /// Note: the output of this NodeRun, which can be used to mutate Variables,
  /// is a JSON_ARR variable containing the ID's of all the child threadRuns.
  /// </summary>
  public sealed partial class StartMultipleThreadsRun : pb::IMessage<StartMultipleThreadsRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartMultipleThreadsRun> _parser = new pb::MessageParser<StartMultipleThreadsRun>(() => new StartMultipleThreadsRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StartMultipleThreadsRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartMultipleThreadsRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartMultipleThreadsRun(StartMultipleThreadsRun other) : this() {
      threadSpecName_ = other.threadSpecName_;
      childThreadIds_ = other.childThreadIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartMultipleThreadsRun Clone() {
      return new StartMultipleThreadsRun(this);
    }

    /// <summary>Field number for the "thread_spec_name" field.</summary>
    public const int ThreadSpecNameFieldNumber = 1;
    private string threadSpecName_ = "";
    /// <summary>
    /// The thread_spec_name of the child thread_runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ThreadSpecName {
      get { return threadSpecName_; }
      set {
        threadSpecName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_thread_ids" field.</summary>
    public const int ChildThreadIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_childThreadIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> childThreadIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The list of all created child ThreadRun's
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ChildThreadIds {
      get { return childThreadIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StartMultipleThreadsRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StartMultipleThreadsRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThreadSpecName != other.ThreadSpecName) return false;
      if(!childThreadIds_.Equals(other.childThreadIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ThreadSpecName.Length != 0) hash ^= ThreadSpecName.GetHashCode();
      hash ^= childThreadIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ThreadSpecName);
      }
      childThreadIds_.WriteTo(output, _repeated_childThreadIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ThreadSpecName);
      }
      childThreadIds_.WriteTo(ref output, _repeated_childThreadIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ThreadSpecName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThreadSpecName);
      }
      size += childThreadIds_.CalculateSize(_repeated_childThreadIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StartMultipleThreadsRun other) {
      if (other == null) {
        return;
      }
      if (other.ThreadSpecName.Length != 0) {
        ThreadSpecName = other.ThreadSpecName;
      }
      childThreadIds_.Add(other.childThreadIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ThreadSpecName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            childThreadIds_.AddEntriesFrom(input, _repeated_childThreadIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ThreadSpecName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            childThreadIds_.AddEntriesFrom(ref input, _repeated_childThreadIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for a WAIT_FOR_THREADS NodeRun.
  /// </summary>
  public sealed partial class WaitForThreadsRun : pb::IMessage<WaitForThreadsRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WaitForThreadsRun> _parser = new pb::MessageParser<WaitForThreadsRun>(() => new WaitForThreadsRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WaitForThreadsRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WaitForThreadsRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WaitForThreadsRun(WaitForThreadsRun other) : this() {
      threads_ = other.threads_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WaitForThreadsRun Clone() {
      return new WaitForThreadsRun(this);
    }

    /// <summary>Field number for the "threads" field.</summary>
    public const int ThreadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitForThread> _repeated_threads_codec
        = pb::FieldCodec.ForMessage(10, global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitForThread.Parser);
    private readonly pbc::RepeatedField<global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitForThread> threads_ = new pbc::RepeatedField<global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitForThread>();
    /// <summary>
    /// The threads that are being waited for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitForThread> Threads {
      get { return threads_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WaitForThreadsRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WaitForThreadsRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!threads_.Equals(other.threads_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= threads_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      threads_.WriteTo(output, _repeated_threads_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      threads_.WriteTo(ref output, _repeated_threads_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += threads_.CalculateSize(_repeated_threads_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WaitForThreadsRun other) {
      if (other == null) {
        return;
      }
      threads_.Add(other.threads_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            threads_.AddEntriesFrom(input, _repeated_threads_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            threads_.AddEntriesFrom(ref input, _repeated_threads_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WaitForThreadsRun message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// The status of a single ThreadRun that we are waiting for.
      /// </summary>
      public enum WaitingThreadStatus {
        /// <summary>
        /// The ThreadRun is in progress (i.e. not COMPLETED nor EXCEPTION nor ERROR)
        /// </summary>
        [pbr::OriginalName("THREAD_IN_PROGRESS")] ThreadInProgress = 0,
        /// <summary>
        /// The ThreadRun failed with some failure, and the FailureHandler is running
        /// for that Failure.
        /// </summary>
        [pbr::OriginalName("THREAD_HANDLING_FAILURE")] ThreadHandlingFailure = 1,
        /// <summary>
        /// We can mark this ThreadRun as "already waited for", meaning that either:
        /// 1. It completed successfully, OR
        /// 2. It failed, and the Failure Handler successfully completed
        /// </summary>
        [pbr::OriginalName("THREAD_COMPLETED_OR_FAILURE_HANDLED")] ThreadCompletedOrFailureHandled = 2,
        /// <summary>
        /// The ThreadRun did not complete successfully, and there wasn't a successful
        /// run of a Failure Handler for the Failure that was thrown.
        /// </summary>
        [pbr::OriginalName("THREAD_UNSUCCESSFUL")] ThreadUnsuccessful = 3,
      }

      /// <summary>
      /// A 'WaitForThread' structure defines a thread that is being waited for.
      /// </summary>
      public sealed partial class WaitForThread : pb::IMessage<WaitForThread>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<WaitForThread> _parser = new pb::MessageParser<WaitForThread>(() => new WaitForThread());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<WaitForThread> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LittleHorse.Common.Proto.WaitForThreadsRun.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public WaitForThread() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public WaitForThread(WaitForThread other) : this() {
          _hasBits0 = other._hasBits0;
          threadEndTime_ = other.threadEndTime_ != null ? other.threadEndTime_.Clone() : null;
          threadStatus_ = other.threadStatus_;
          threadRunNumber_ = other.threadRunNumber_;
          waitingStatus_ = other.waitingStatus_;
          failureHandlerThreadRunId_ = other.failureHandlerThreadRunId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public WaitForThread Clone() {
          return new WaitForThread(this);
        }

        /// <summary>Field number for the "thread_end_time" field.</summary>
        public const int ThreadEndTimeFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp threadEndTime_;
        /// <summary>
        /// The time at which the ThreadRun ended (successfully or not). Not set if the ThreadRun
        /// is still RUNNING, HALTED, or HALTING.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Timestamp ThreadEndTime {
          get { return threadEndTime_; }
          set {
            threadEndTime_ = value;
          }
        }

        /// <summary>Field number for the "thread_status" field.</summary>
        public const int ThreadStatusFieldNumber = 2;
        private global::LittleHorse.Common.Proto.LHStatus threadStatus_ = global::LittleHorse.Common.Proto.LHStatus.Starting;
        /// <summary>
        /// The current status of the ThreadRun being waited for.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::LittleHorse.Common.Proto.LHStatus ThreadStatus {
          get { return threadStatus_; }
          set {
            threadStatus_ = value;
          }
        }

        /// <summary>Field number for the "thread_run_number" field.</summary>
        public const int ThreadRunNumberFieldNumber = 3;
        private int threadRunNumber_;
        /// <summary>
        /// The number of the ThreadRun being waited for.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ThreadRunNumber {
          get { return threadRunNumber_; }
          set {
            threadRunNumber_ = value;
          }
        }

        /// <summary>Field number for the "waiting_status" field.</summary>
        public const int WaitingStatusFieldNumber = 4;
        private global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus waitingStatus_ = global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus.ThreadInProgress;
        /// <summary>
        /// The "waiting status" of this specific thread: whether it's still running,
        /// already done, handling a failure, or completely failed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus WaitingStatus {
          get { return waitingStatus_; }
          set {
            waitingStatus_ = value;
          }
        }

        /// <summary>Field number for the "failure_handler_thread_run_id" field.</summary>
        public const int FailureHandlerThreadRunIdFieldNumber = 5;
        private readonly static int FailureHandlerThreadRunIdDefaultValue = 0;

        private int failureHandlerThreadRunId_;
        /// <summary>
        /// If there is a failure on the ThreadRun, and we have a failure handler defined
        /// for it, then we will start a failure handler for this threadrun. This field
        /// is the id of that threadRun.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FailureHandlerThreadRunId {
          get { if ((_hasBits0 & 1) != 0) { return failureHandlerThreadRunId_; } else { return FailureHandlerThreadRunIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            failureHandlerThreadRunId_ = value;
          }
        }
        /// <summary>Gets whether the "failure_handler_thread_run_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFailureHandlerThreadRunId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "failure_handler_thread_run_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFailureHandlerThreadRunId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as WaitForThread);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(WaitForThread other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ThreadEndTime, other.ThreadEndTime)) return false;
          if (ThreadStatus != other.ThreadStatus) return false;
          if (ThreadRunNumber != other.ThreadRunNumber) return false;
          if (WaitingStatus != other.WaitingStatus) return false;
          if (FailureHandlerThreadRunId != other.FailureHandlerThreadRunId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (threadEndTime_ != null) hash ^= ThreadEndTime.GetHashCode();
          if (ThreadStatus != global::LittleHorse.Common.Proto.LHStatus.Starting) hash ^= ThreadStatus.GetHashCode();
          if (ThreadRunNumber != 0) hash ^= ThreadRunNumber.GetHashCode();
          if (WaitingStatus != global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus.ThreadInProgress) hash ^= WaitingStatus.GetHashCode();
          if (HasFailureHandlerThreadRunId) hash ^= FailureHandlerThreadRunId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (threadEndTime_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ThreadEndTime);
          }
          if (ThreadStatus != global::LittleHorse.Common.Proto.LHStatus.Starting) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ThreadStatus);
          }
          if (ThreadRunNumber != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ThreadRunNumber);
          }
          if (WaitingStatus != global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus.ThreadInProgress) {
            output.WriteRawTag(32);
            output.WriteEnum((int) WaitingStatus);
          }
          if (HasFailureHandlerThreadRunId) {
            output.WriteRawTag(40);
            output.WriteInt32(FailureHandlerThreadRunId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (threadEndTime_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ThreadEndTime);
          }
          if (ThreadStatus != global::LittleHorse.Common.Proto.LHStatus.Starting) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ThreadStatus);
          }
          if (ThreadRunNumber != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ThreadRunNumber);
          }
          if (WaitingStatus != global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus.ThreadInProgress) {
            output.WriteRawTag(32);
            output.WriteEnum((int) WaitingStatus);
          }
          if (HasFailureHandlerThreadRunId) {
            output.WriteRawTag(40);
            output.WriteInt32(FailureHandlerThreadRunId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (threadEndTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThreadEndTime);
          }
          if (ThreadStatus != global::LittleHorse.Common.Proto.LHStatus.Starting) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ThreadStatus);
          }
          if (ThreadRunNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadRunNumber);
          }
          if (WaitingStatus != global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus.ThreadInProgress) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WaitingStatus);
          }
          if (HasFailureHandlerThreadRunId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailureHandlerThreadRunId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(WaitForThread other) {
          if (other == null) {
            return;
          }
          if (other.threadEndTime_ != null) {
            if (threadEndTime_ == null) {
              ThreadEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            ThreadEndTime.MergeFrom(other.ThreadEndTime);
          }
          if (other.ThreadStatus != global::LittleHorse.Common.Proto.LHStatus.Starting) {
            ThreadStatus = other.ThreadStatus;
          }
          if (other.ThreadRunNumber != 0) {
            ThreadRunNumber = other.ThreadRunNumber;
          }
          if (other.WaitingStatus != global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus.ThreadInProgress) {
            WaitingStatus = other.WaitingStatus;
          }
          if (other.HasFailureHandlerThreadRunId) {
            FailureHandlerThreadRunId = other.FailureHandlerThreadRunId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (threadEndTime_ == null) {
                  ThreadEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(ThreadEndTime);
                break;
              }
              case 16: {
                ThreadStatus = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
                break;
              }
              case 24: {
                ThreadRunNumber = input.ReadInt32();
                break;
              }
              case 32: {
                WaitingStatus = (global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus) input.ReadEnum();
                break;
              }
              case 40: {
                FailureHandlerThreadRunId = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (threadEndTime_ == null) {
                  ThreadEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(ThreadEndTime);
                break;
              }
              case 16: {
                ThreadStatus = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
                break;
              }
              case 24: {
                ThreadRunNumber = input.ReadInt32();
                break;
              }
              case 32: {
                WaitingStatus = (global::LittleHorse.Common.Proto.WaitForThreadsRun.Types.WaitingThreadStatus) input.ReadEnum();
                break;
              }
              case 40: {
                FailureHandlerThreadRunId = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// The sub-node structure for an EXTERNAL_EVENT NodeRun.
  /// </summary>
  public sealed partial class ExternalEventNodeRun : pb::IMessage<ExternalEventNodeRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExternalEventNodeRun> _parser = new pb::MessageParser<ExternalEventNodeRun>(() => new ExternalEventNodeRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ExternalEventNodeRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExternalEventNodeRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExternalEventNodeRun(ExternalEventNodeRun other) : this() {
      externalEventDefId_ = other.externalEventDefId_ != null ? other.externalEventDefId_.Clone() : null;
      eventTime_ = other.eventTime_ != null ? other.eventTime_.Clone() : null;
      externalEventId_ = other.externalEventId_ != null ? other.externalEventId_.Clone() : null;
      timedOut_ = other.timedOut_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExternalEventNodeRun Clone() {
      return new ExternalEventNodeRun(this);
    }

    /// <summary>Field number for the "external_event_def_id" field.</summary>
    public const int ExternalEventDefIdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.ExternalEventDefId externalEventDefId_;
    /// <summary>
    /// The ExternalEventDefId that we are waiting for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ExternalEventDefId ExternalEventDefId {
      get { return externalEventDefId_; }
      set {
        externalEventDefId_ = value;
      }
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eventTime_;
    /// <summary>
    /// The time that the ExternalEvent arrived. Unset if still waiting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "external_event_id" field.</summary>
    public const int ExternalEventIdFieldNumber = 3;
    private global::LittleHorse.Common.Proto.ExternalEventId externalEventId_;
    /// <summary>
    /// The ExternalEventId of the ExternalEvent. Unset if still waiting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ExternalEventId ExternalEventId {
      get { return externalEventId_; }
      set {
        externalEventId_ = value;
      }
    }

    /// <summary>Field number for the "timed_out" field.</summary>
    public const int TimedOutFieldNumber = 4;
    private bool timedOut_;
    /// <summary>
    /// Whether we had a timeout while waiting for the ExternalEvent to come.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TimedOut {
      get { return timedOut_; }
      set {
        timedOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ExternalEventNodeRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ExternalEventNodeRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExternalEventDefId, other.ExternalEventDefId)) return false;
      if (!object.Equals(EventTime, other.EventTime)) return false;
      if (!object.Equals(ExternalEventId, other.ExternalEventId)) return false;
      if (TimedOut != other.TimedOut) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (externalEventDefId_ != null) hash ^= ExternalEventDefId.GetHashCode();
      if (eventTime_ != null) hash ^= EventTime.GetHashCode();
      if (externalEventId_ != null) hash ^= ExternalEventId.GetHashCode();
      if (TimedOut != false) hash ^= TimedOut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (externalEventDefId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExternalEventDefId);
      }
      if (eventTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EventTime);
      }
      if (externalEventId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExternalEventId);
      }
      if (TimedOut != false) {
        output.WriteRawTag(32);
        output.WriteBool(TimedOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (externalEventDefId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExternalEventDefId);
      }
      if (eventTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EventTime);
      }
      if (externalEventId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExternalEventId);
      }
      if (TimedOut != false) {
        output.WriteRawTag(32);
        output.WriteBool(TimedOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (externalEventDefId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalEventDefId);
      }
      if (eventTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventTime);
      }
      if (externalEventId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalEventId);
      }
      if (TimedOut != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ExternalEventNodeRun other) {
      if (other == null) {
        return;
      }
      if (other.externalEventDefId_ != null) {
        if (externalEventDefId_ == null) {
          ExternalEventDefId = new global::LittleHorse.Common.Proto.ExternalEventDefId();
        }
        ExternalEventDefId.MergeFrom(other.ExternalEventDefId);
      }
      if (other.eventTime_ != null) {
        if (eventTime_ == null) {
          EventTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EventTime.MergeFrom(other.EventTime);
      }
      if (other.externalEventId_ != null) {
        if (externalEventId_ == null) {
          ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
        }
        ExternalEventId.MergeFrom(other.ExternalEventId);
      }
      if (other.TimedOut != false) {
        TimedOut = other.TimedOut;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (externalEventDefId_ == null) {
              ExternalEventDefId = new global::LittleHorse.Common.Proto.ExternalEventDefId();
            }
            input.ReadMessage(ExternalEventDefId);
            break;
          }
          case 18: {
            if (eventTime_ == null) {
              EventTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EventTime);
            break;
          }
          case 26: {
            if (externalEventId_ == null) {
              ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(ExternalEventId);
            break;
          }
          case 32: {
            TimedOut = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (externalEventDefId_ == null) {
              ExternalEventDefId = new global::LittleHorse.Common.Proto.ExternalEventDefId();
            }
            input.ReadMessage(ExternalEventDefId);
            break;
          }
          case 18: {
            if (eventTime_ == null) {
              EventTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EventTime);
            break;
          }
          case 26: {
            if (externalEventId_ == null) {
              ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(ExternalEventId);
            break;
          }
          case 32: {
            TimedOut = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The sub-node structure for a SLEEP NodeRun.
  /// </summary>
  public sealed partial class SleepNodeRun : pb::IMessage<SleepNodeRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SleepNodeRun> _parser = new pb::MessageParser<SleepNodeRun>(() => new SleepNodeRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SleepNodeRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SleepNodeRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SleepNodeRun(SleepNodeRun other) : this() {
      maturationTime_ = other.maturationTime_ != null ? other.maturationTime_.Clone() : null;
      matured_ = other.matured_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SleepNodeRun Clone() {
      return new SleepNodeRun(this);
    }

    /// <summary>Field number for the "maturation_time" field.</summary>
    public const int MaturationTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturationTime_;
    /// <summary>
    /// The time at which the NodeRun is *SCHEDULED TO* wake up. In rare cases, if
    /// the LH Server is back-pressuring clients due to extreme load, the timer
    /// event which marks the sleep node as "matured" may come in slightly late.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturationTime {
      get { return maturationTime_; }
      set {
        maturationTime_ = value;
      }
    }

    /// <summary>Field number for the "matured" field.</summary>
    public const int MaturedFieldNumber = 2;
    private bool matured_;
    /// <summary>
    /// Whether the SleepNodeRun has been matured.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Matured {
      get { return matured_; }
      set {
        matured_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SleepNodeRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SleepNodeRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MaturationTime, other.MaturationTime)) return false;
      if (Matured != other.Matured) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (maturationTime_ != null) hash ^= MaturationTime.GetHashCode();
      if (Matured != false) hash ^= Matured.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (maturationTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MaturationTime);
      }
      if (Matured != false) {
        output.WriteRawTag(16);
        output.WriteBool(Matured);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (maturationTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MaturationTime);
      }
      if (Matured != false) {
        output.WriteRawTag(16);
        output.WriteBool(Matured);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (maturationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaturationTime);
      }
      if (Matured != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SleepNodeRun other) {
      if (other == null) {
        return;
      }
      if (other.maturationTime_ != null) {
        if (maturationTime_ == null) {
          MaturationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturationTime.MergeFrom(other.MaturationTime);
      }
      if (other.Matured != false) {
        Matured = other.Matured;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (maturationTime_ == null) {
              MaturationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturationTime);
            break;
          }
          case 16: {
            Matured = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (maturationTime_ == null) {
              MaturationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturationTime);
            break;
          }
          case 16: {
            Matured = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Denotes a failure that happened during execution of a NodeRun or the outgoing
  /// edges.
  /// </summary>
  public sealed partial class Failure : pb::IMessage<Failure>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Failure> _parser = new pb::MessageParser<Failure>(() => new Failure());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Failure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.NodeRunReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Failure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Failure(Failure other) : this() {
      _hasBits0 = other._hasBits0;
      failureName_ = other.failureName_;
      message_ = other.message_;
      content_ = other.content_ != null ? other.content_.Clone() : null;
      wasProperlyHandled_ = other.wasProperlyHandled_;
      failureHandlerThreadrunId_ = other.failureHandlerThreadrunId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Failure Clone() {
      return new Failure(this);
    }

    /// <summary>Field number for the "failure_name" field.</summary>
    public const int FailureNameFieldNumber = 1;
    private string failureName_ = "";
    /// <summary>
    /// The name of the failure. LittleHorse has certain built-in failures, all named in
    /// UPPER_UNDERSCORE_CASE. Such failures correspond with the `LHStatus.ERROR`.
    ///
    /// Any Failure named in `kebab-case` is a user-defined business `EXCEPTION`, treated
    /// as an `LHStatus.EXCEPTION`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FailureName {
      get { return failureName_; }
      set {
        failureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// The human-readable message associated with this Failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private global::LittleHorse.Common.Proto.VariableValue content_;
    /// <summary>
    /// A user-defined Failure can have a value; for example, in Java an Exception is an
    /// Object with arbitrary properties and behaviors.
    ///
    /// Future versions of LH will allow FailureHandler threads to accept that value as
    /// an input variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.VariableValue Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "was_properly_handled" field.</summary>
    public const int WasProperlyHandledFieldNumber = 4;
    private bool wasProperlyHandled_;
    /// <summary>
    /// A boolean denoting whether a Failure Handler ThreadRun properly handled the Failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WasProperlyHandled {
      get { return wasProperlyHandled_; }
      set {
        wasProperlyHandled_ = value;
      }
    }

    /// <summary>Field number for the "failure_handler_threadrun_id" field.</summary>
    public const int FailureHandlerThreadrunIdFieldNumber = 5;
    private readonly static int FailureHandlerThreadrunIdDefaultValue = 0;

    private int failureHandlerThreadrunId_;
    /// <summary>
    /// If there is a defined failure handler for the NodeRun, then this field is set to the
    /// id of the failure handler thread run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FailureHandlerThreadrunId {
      get { if ((_hasBits0 & 1) != 0) { return failureHandlerThreadrunId_; } else { return FailureHandlerThreadrunIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        failureHandlerThreadrunId_ = value;
      }
    }
    /// <summary>Gets whether the "failure_handler_threadrun_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFailureHandlerThreadrunId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "failure_handler_threadrun_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFailureHandlerThreadrunId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Failure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Failure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FailureName != other.FailureName) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(Content, other.Content)) return false;
      if (WasProperlyHandled != other.WasProperlyHandled) return false;
      if (FailureHandlerThreadrunId != other.FailureHandlerThreadrunId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FailureName.Length != 0) hash ^= FailureName.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (content_ != null) hash ^= Content.GetHashCode();
      if (WasProperlyHandled != false) hash ^= WasProperlyHandled.GetHashCode();
      if (HasFailureHandlerThreadrunId) hash ^= FailureHandlerThreadrunId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FailureName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FailureName);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (content_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Content);
      }
      if (WasProperlyHandled != false) {
        output.WriteRawTag(32);
        output.WriteBool(WasProperlyHandled);
      }
      if (HasFailureHandlerThreadrunId) {
        output.WriteRawTag(40);
        output.WriteInt32(FailureHandlerThreadrunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FailureName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FailureName);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (content_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Content);
      }
      if (WasProperlyHandled != false) {
        output.WriteRawTag(32);
        output.WriteBool(WasProperlyHandled);
      }
      if (HasFailureHandlerThreadrunId) {
        output.WriteRawTag(40);
        output.WriteInt32(FailureHandlerThreadrunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FailureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FailureName);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (content_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Content);
      }
      if (WasProperlyHandled != false) {
        size += 1 + 1;
      }
      if (HasFailureHandlerThreadrunId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailureHandlerThreadrunId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Failure other) {
      if (other == null) {
        return;
      }
      if (other.FailureName.Length != 0) {
        FailureName = other.FailureName;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.content_ != null) {
        if (content_ == null) {
          Content = new global::LittleHorse.Common.Proto.VariableValue();
        }
        Content.MergeFrom(other.Content);
      }
      if (other.WasProperlyHandled != false) {
        WasProperlyHandled = other.WasProperlyHandled;
      }
      if (other.HasFailureHandlerThreadrunId) {
        FailureHandlerThreadrunId = other.FailureHandlerThreadrunId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FailureName = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (content_ == null) {
              Content = new global::LittleHorse.Common.Proto.VariableValue();
            }
            input.ReadMessage(Content);
            break;
          }
          case 32: {
            WasProperlyHandled = input.ReadBool();
            break;
          }
          case 40: {
            FailureHandlerThreadrunId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FailureName = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (content_ == null) {
              Content = new global::LittleHorse.Common.Proto.VariableValue();
            }
            input.ReadMessage(Content);
            break;
          }
          case 32: {
            WasProperlyHandled = input.ReadBool();
            break;
          }
          case 40: {
            FailureHandlerThreadrunId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
