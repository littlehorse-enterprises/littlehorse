// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: wf_run.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LittleHorse.Common.Proto {

  /// <summary>Holder for reflection information generated from wf_run.proto</summary>
  public static partial class WfRunReflection {

    #region Descriptor
    /// <summary>File descriptor for wf_run.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WfRunReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx3Zl9ydW4ucHJvdG8SC2xpdHRsZWhvcnNlGh9nb29nbGUvcHJvdG9idWYv",
            "dGltZXN0YW1wLnByb3RvGhJjb21tb25fZW51bXMucHJvdG8aD29iamVjdF9p",
            "ZC5wcm90byLpAwoFV2ZSdW4SIAoCaWQYASABKAsyFC5saXR0bGVob3JzZS5X",
            "ZlJ1bklkEikKCndmX3NwZWNfaWQYAiABKAsyFS5saXR0bGVob3JzZS5XZlNw",
            "ZWNJZBIzChRvbGRfd2Zfc3BlY192ZXJzaW9ucxgDIAMoCzIVLmxpdHRsZWhv",
            "cnNlLldmU3BlY0lkEiUKBnN0YXR1cxgEIAEoDjIVLmxpdHRsZWhvcnNlLkxI",
            "U3RhdHVzEiEKGWdyZWF0ZXN0X3RocmVhZHJ1bl9udW1iZXIYBSABKAUSLgoK",
            "c3RhcnRfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "MQoIZW5kX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "SACIAQESKwoLdGhyZWFkX3J1bnMYCCADKAsyFi5saXR0bGVob3JzZS5UaHJl",
            "YWRSdW4SOQoScGVuZGluZ19pbnRlcnJ1cHRzGAkgAygLMh0ubGl0dGxlaG9y",
            "c2UuUGVuZGluZ0ludGVycnVwdBI8ChBwZW5kaW5nX2ZhaWx1cmVzGAogAygL",
            "MiIubGl0dGxlaG9yc2UuUGVuZGluZ0ZhaWx1cmVIYW5kbGVyQgsKCV9lbmRf",
            "dGltZSLJBQoJVGhyZWFkUnVuEikKCndmX3NwZWNfaWQYASABKAsyFS5saXR0",
            "bGVob3JzZS5XZlNwZWNJZBIOCgZudW1iZXIYAiABKAUSJQoGc3RhdHVzGAMg",
            "ASgOMhUubGl0dGxlaG9yc2UuTEhTdGF0dXMSGAoQdGhyZWFkX3NwZWNfbmFt",
            "ZRgEIAEoCRIuCgpzdGFydF90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBIxCghlbmRfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXBIAIgBARIaCg1lcnJvcl9tZXNzYWdlGAcgASgJSAGIAQES",
            "GAoQY2hpbGRfdGhyZWFkX2lkcxgIIAMoBRIdChBwYXJlbnRfdGhyZWFkX2lk",
            "GAkgASgFSAKIAQESMwoMaGFsdF9yZWFzb25zGAogAygLMh0ubGl0dGxlaG9y",
            "c2UuVGhyZWFkSGFsdFJlYXNvbhI/ChRpbnRlcnJ1cHRfdHJpZ2dlcl9pZBgL",
            "IAEoCzIcLmxpdHRsZWhvcnNlLkV4dGVybmFsRXZlbnRJZEgDiAEBEkQKFWZh",
            "aWx1cmVfYmVpbmdfaGFuZGxlZBgMIAEoCzIgLmxpdHRsZWhvcnNlLkZhaWx1",
            "cmVCZWluZ0hhbmRsZWRIBIgBARIdChVjdXJyZW50X25vZGVfcG9zaXRpb24Y",
            "DSABKAUSHwoXaGFuZGxlZF9mYWlsZWRfY2hpbGRyZW4YDiADKAUSJQoEdHlw",
            "ZRgPIAEoDjIXLmxpdHRsZWhvcnNlLlRocmVhZFR5cGVCCwoJX2VuZF90aW1l",
            "QhAKDl9lcnJvcl9tZXNzYWdlQhMKEV9wYXJlbnRfdGhyZWFkX2lkQhcKFV9p",
            "bnRlcnJ1cHRfdHJpZ2dlcl9pZEIYChZfZmFpbHVyZV9iZWluZ19oYW5kbGVk",
            "ImMKE0ZhaWx1cmVCZWluZ0hhbmRsZWQSGQoRdGhyZWFkX3J1bl9udW1iZXIY",
            "ASABKAUSGQoRbm9kZV9ydW5fcG9zaXRpb24YAiABKAUSFgoOZmFpbHVyZV9u",
            "dW1iZXIYAyABKAUihQEKEFBlbmRpbmdJbnRlcnJ1cHQSNwoRZXh0ZXJuYWxf",
            "ZXZlbnRfaWQYASABKAsyHC5saXR0bGVob3JzZS5FeHRlcm5hbEV2ZW50SWQS",
            "GQoRaGFuZGxlcl9zcGVjX25hbWUYAiABKAkSHQoVaW50ZXJydXB0ZWRfdGhy",
            "ZWFkX2lkGAMgASgFIk0KFVBlbmRpbmdGYWlsdXJlSGFuZGxlchIZChFmYWls",
            "ZWRfdGhyZWFkX3J1bhgBIAEoBRIZChFoYW5kbGVyX3NwZWNfbmFtZRgCIAEo",
            "CSJVChpQZW5kaW5nSW50ZXJydXB0SGFsdFJlYXNvbhI3ChFleHRlcm5hbF9l",
            "dmVudF9pZBgBIAEoCzIcLmxpdHRsZWhvcnNlLkV4dGVybmFsRXZlbnRJZCI8",
            "Ch9QZW5kaW5nRmFpbHVyZUhhbmRsZXJIYWx0UmVhc29uEhkKEW5vZGVfcnVu",
            "X3Bvc2l0aW9uGAEgASgFIjYKGUhhbmRsaW5nRmFpbHVyZUhhbHRSZWFzb24S",
            "GQoRaGFuZGxlcl90aHJlYWRfaWQYASABKAUiKAoMUGFyZW50SGFsdGVkEhgK",
            "EHBhcmVudF90aHJlYWRfaWQYASABKAUiKgoLSW50ZXJydXB0ZWQSGwoTaW50",
            "ZXJydXB0X3RocmVhZF9pZBgBIAEoBSImCgpNYW51YWxIYWx0EhgKD21lYW5p",
            "bmdfb2ZfbGlmZRiJASABKAgihAMKEFRocmVhZEhhbHRSZWFzb24SMgoNcGFy",
            "ZW50X2hhbHRlZBgBIAEoCzIZLmxpdHRsZWhvcnNlLlBhcmVudEhhbHRlZEgA",
            "Ei8KC2ludGVycnVwdGVkGAIgASgLMhgubGl0dGxlaG9yc2UuSW50ZXJydXB0",
            "ZWRIABJEChFwZW5kaW5nX2ludGVycnVwdBgDIAEoCzInLmxpdHRsZWhvcnNl",
            "LlBlbmRpbmdJbnRlcnJ1cHRIYWx0UmVhc29uSAASRwoPcGVuZGluZ19mYWls",
            "dXJlGAQgASgLMiwubGl0dGxlaG9yc2UuUGVuZGluZ0ZhaWx1cmVIYW5kbGVy",
            "SGFsdFJlYXNvbkgAEkIKEGhhbmRsaW5nX2ZhaWx1cmUYBSABKAsyJi5saXR0",
            "bGVob3JzZS5IYW5kbGluZ0ZhaWx1cmVIYWx0UmVhc29uSAASLgoLbWFudWFs",
            "X2hhbHQYBiABKAsyFy5saXR0bGVob3JzZS5NYW51YWxIYWx0SABCCAoGcmVh",
            "c29uKksKClRocmVhZFR5cGUSDgoKRU5UUllQT0lOVBAAEgkKBUNISUxEEAES",
            "DQoJSU5URVJSVVBUEAISEwoPRkFJTFVSRV9IQU5ETEVSEANCSQofaW8ubGl0",
            "dGxlaG9yc2Uuc2RrLmNvbW1vbi5wcm90b1ABWgkuO2xocHJvdG+qAhhMaXR0",
            "bGVIb3JzZS5Db21tb24uUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::LittleHorse.Common.Proto.CommonEnumsReflection.Descriptor, global::LittleHorse.Common.Proto.ObjectIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LittleHorse.Common.Proto.ThreadType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.WfRun), global::LittleHorse.Common.Proto.WfRun.Parser, new[]{ "Id", "WfSpecId", "OldWfSpecVersions", "Status", "GreatestThreadrunNumber", "StartTime", "EndTime", "ThreadRuns", "PendingInterrupts", "PendingFailures" }, new[]{ "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.ThreadRun), global::LittleHorse.Common.Proto.ThreadRun.Parser, new[]{ "WfSpecId", "Number", "Status", "ThreadSpecName", "StartTime", "EndTime", "ErrorMessage", "ChildThreadIds", "ParentThreadId", "HaltReasons", "InterruptTriggerId", "FailureBeingHandled", "CurrentNodePosition", "HandledFailedChildren", "Type" }, new[]{ "EndTime", "ErrorMessage", "ParentThreadId", "InterruptTriggerId", "FailureBeingHandled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.FailureBeingHandled), global::LittleHorse.Common.Proto.FailureBeingHandled.Parser, new[]{ "ThreadRunNumber", "NodeRunPosition", "FailureNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.PendingInterrupt), global::LittleHorse.Common.Proto.PendingInterrupt.Parser, new[]{ "ExternalEventId", "HandlerSpecName", "InterruptedThreadId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.PendingFailureHandler), global::LittleHorse.Common.Proto.PendingFailureHandler.Parser, new[]{ "FailedThreadRun", "HandlerSpecName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.PendingInterruptHaltReason), global::LittleHorse.Common.Proto.PendingInterruptHaltReason.Parser, new[]{ "ExternalEventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason), global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason.Parser, new[]{ "NodeRunPosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.HandlingFailureHaltReason), global::LittleHorse.Common.Proto.HandlingFailureHaltReason.Parser, new[]{ "HandlerThreadId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.ParentHalted), global::LittleHorse.Common.Proto.ParentHalted.Parser, new[]{ "ParentThreadId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.Interrupted), global::LittleHorse.Common.Proto.Interrupted.Parser, new[]{ "InterruptThreadId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.ManualHalt), global::LittleHorse.Common.Proto.ManualHalt.Parser, new[]{ "MeaningOfLife" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LittleHorse.Common.Proto.ThreadHaltReason), global::LittleHorse.Common.Proto.ThreadHaltReason.Parser, new[]{ "ParentHalted", "Interrupted", "PendingInterrupt", "PendingFailure", "HandlingFailure", "ManualHalt" }, new[]{ "Reason" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The type of a ThreadRUn.
  /// </summary>
  public enum ThreadType {
    /// <summary>
    /// The ENTRYPOINT ThreadRun. Exactly one per WfRun. Always has number == 0.
    /// </summary>
    [pbr::OriginalName("ENTRYPOINT")] Entrypoint = 0,
    /// <summary>
    /// A ThreadRun explicitly created by another ThreadRun via a START_THREAD or START_MULTIPLE_THREADS
    /// NodeRun.
    /// </summary>
    [pbr::OriginalName("CHILD")] Child = 1,
    /// <summary>
    /// A ThreadRun that was created to handle an Interrupt.
    /// </summary>
    [pbr::OriginalName("INTERRUPT")] Interrupt = 2,
    /// <summary>
    /// A ThreadRun that was created to handle a Failure.
    /// </summary>
    [pbr::OriginalName("FAILURE_HANDLER")] FailureHandler = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A WfRun is a running instance of a WfSpec.
  /// </summary>
  public sealed partial class WfRun : pb::IMessage<WfRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WfRun> _parser = new pb::MessageParser<WfRun>(() => new WfRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WfRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WfRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WfRun(WfRun other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      wfSpecId_ = other.wfSpecId_ != null ? other.wfSpecId_.Clone() : null;
      oldWfSpecVersions_ = other.oldWfSpecVersions_.Clone();
      status_ = other.status_;
      greatestThreadrunNumber_ = other.greatestThreadrunNumber_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      threadRuns_ = other.threadRuns_.Clone();
      pendingInterrupts_ = other.pendingInterrupts_.Clone();
      pendingFailures_ = other.pendingFailures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WfRun Clone() {
      return new WfRun(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.WfRunId id_;
    /// <summary>
    /// The ID of the WfRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.WfRunId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "wf_spec_id" field.</summary>
    public const int WfSpecIdFieldNumber = 2;
    private global::LittleHorse.Common.Proto.WfSpecId wfSpecId_;
    /// <summary>
    /// The ID of the WfSpec that this WfRun belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.WfSpecId WfSpecId {
      get { return wfSpecId_; }
      set {
        wfSpecId_ = value;
      }
    }

    /// <summary>Field number for the "old_wf_spec_versions" field.</summary>
    public const int OldWfSpecVersionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LittleHorse.Common.Proto.WfSpecId> _repeated_oldWfSpecVersions_codec
        = pb::FieldCodec.ForMessage(26, global::LittleHorse.Common.Proto.WfSpecId.Parser);
    private readonly pbc::RepeatedField<global::LittleHorse.Common.Proto.WfSpecId> oldWfSpecVersions_ = new pbc::RepeatedField<global::LittleHorse.Common.Proto.WfSpecId>();
    /// <summary>
    /// When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
    /// old WfSpecId to this list for historical auditing and debugging purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LittleHorse.Common.Proto.WfSpecId> OldWfSpecVersions {
      get { return oldWfSpecVersions_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::LittleHorse.Common.Proto.LHStatus status_ = global::LittleHorse.Common.Proto.LHStatus.Starting;
    /// <summary>
    /// The status of this WfRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.LHStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "greatest_threadrun_number" field.</summary>
    public const int GreatestThreadrunNumberFieldNumber = 5;
    private int greatestThreadrunNumber_;
    /// <summary>
    /// The ID number of the greatest ThreadRUn in this WfRun. The total number of ThreadRuns
    /// is given by greatest_thread_run_number + 1.
    ///
    /// Introduced now since with ThreadRun-level retention, we can't rely upon
    /// thread_runs.size() to determine the number of ThreadRuns, as a ThreadRun is removed
    /// from the thread_runs list once its retention period expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GreatestThreadrunNumber {
      get { return greatestThreadrunNumber_; }
      set {
        greatestThreadrunNumber_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The time the WfRun was started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// The time the WfRun failed or completed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "thread_runs" field.</summary>
    public const int ThreadRunsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::LittleHorse.Common.Proto.ThreadRun> _repeated_threadRuns_codec
        = pb::FieldCodec.ForMessage(66, global::LittleHorse.Common.Proto.ThreadRun.Parser);
    private readonly pbc::RepeatedField<global::LittleHorse.Common.Proto.ThreadRun> threadRuns_ = new pbc::RepeatedField<global::LittleHorse.Common.Proto.ThreadRun>();
    /// <summary>
    /// A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
    /// have not yet expired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LittleHorse.Common.Proto.ThreadRun> ThreadRuns {
      get { return threadRuns_; }
    }

    /// <summary>Field number for the "pending_interrupts" field.</summary>
    public const int PendingInterruptsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::LittleHorse.Common.Proto.PendingInterrupt> _repeated_pendingInterrupts_codec
        = pb::FieldCodec.ForMessage(74, global::LittleHorse.Common.Proto.PendingInterrupt.Parser);
    private readonly pbc::RepeatedField<global::LittleHorse.Common.Proto.PendingInterrupt> pendingInterrupts_ = new pbc::RepeatedField<global::LittleHorse.Common.Proto.PendingInterrupt>();
    /// <summary>
    /// A list of Interrupt events that will fire once their appropriate ThreadRun's finish
    /// halting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LittleHorse.Common.Proto.PendingInterrupt> PendingInterrupts {
      get { return pendingInterrupts_; }
    }

    /// <summary>Field number for the "pending_failures" field.</summary>
    public const int PendingFailuresFieldNumber = 10;
    private static readonly pb::FieldCodec<global::LittleHorse.Common.Proto.PendingFailureHandler> _repeated_pendingFailures_codec
        = pb::FieldCodec.ForMessage(82, global::LittleHorse.Common.Proto.PendingFailureHandler.Parser);
    private readonly pbc::RepeatedField<global::LittleHorse.Common.Proto.PendingFailureHandler> pendingFailures_ = new pbc::RepeatedField<global::LittleHorse.Common.Proto.PendingFailureHandler>();
    /// <summary>
    /// A list of pending failure handlers which will fire once their appropriate ThreadRun's
    /// finish halting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LittleHorse.Common.Proto.PendingFailureHandler> PendingFailures {
      get { return pendingFailures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WfRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WfRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(WfSpecId, other.WfSpecId)) return false;
      if(!oldWfSpecVersions_.Equals(other.oldWfSpecVersions_)) return false;
      if (Status != other.Status) return false;
      if (GreatestThreadrunNumber != other.GreatestThreadrunNumber) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if(!threadRuns_.Equals(other.threadRuns_)) return false;
      if(!pendingInterrupts_.Equals(other.pendingInterrupts_)) return false;
      if(!pendingFailures_.Equals(other.pendingFailures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (wfSpecId_ != null) hash ^= WfSpecId.GetHashCode();
      hash ^= oldWfSpecVersions_.GetHashCode();
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) hash ^= Status.GetHashCode();
      if (GreatestThreadrunNumber != 0) hash ^= GreatestThreadrunNumber.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      hash ^= threadRuns_.GetHashCode();
      hash ^= pendingInterrupts_.GetHashCode();
      hash ^= pendingFailures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (wfSpecId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WfSpecId);
      }
      oldWfSpecVersions_.WriteTo(output, _repeated_oldWfSpecVersions_codec);
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (GreatestThreadrunNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GreatestThreadrunNumber);
      }
      if (startTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EndTime);
      }
      threadRuns_.WriteTo(output, _repeated_threadRuns_codec);
      pendingInterrupts_.WriteTo(output, _repeated_pendingInterrupts_codec);
      pendingFailures_.WriteTo(output, _repeated_pendingFailures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (wfSpecId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WfSpecId);
      }
      oldWfSpecVersions_.WriteTo(ref output, _repeated_oldWfSpecVersions_codec);
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (GreatestThreadrunNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GreatestThreadrunNumber);
      }
      if (startTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EndTime);
      }
      threadRuns_.WriteTo(ref output, _repeated_threadRuns_codec);
      pendingInterrupts_.WriteTo(ref output, _repeated_pendingInterrupts_codec);
      pendingFailures_.WriteTo(ref output, _repeated_pendingFailures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (wfSpecId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WfSpecId);
      }
      size += oldWfSpecVersions_.CalculateSize(_repeated_oldWfSpecVersions_codec);
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (GreatestThreadrunNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GreatestThreadrunNumber);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      size += threadRuns_.CalculateSize(_repeated_threadRuns_codec);
      size += pendingInterrupts_.CalculateSize(_repeated_pendingInterrupts_codec);
      size += pendingFailures_.CalculateSize(_repeated_pendingFailures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WfRun other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::LittleHorse.Common.Proto.WfRunId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.wfSpecId_ != null) {
        if (wfSpecId_ == null) {
          WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
        }
        WfSpecId.MergeFrom(other.WfSpecId);
      }
      oldWfSpecVersions_.Add(other.oldWfSpecVersions_);
      if (other.Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        Status = other.Status;
      }
      if (other.GreatestThreadrunNumber != 0) {
        GreatestThreadrunNumber = other.GreatestThreadrunNumber;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      threadRuns_.Add(other.threadRuns_);
      pendingInterrupts_.Add(other.pendingInterrupts_);
      pendingFailures_.Add(other.pendingFailures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::LittleHorse.Common.Proto.WfRunId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (wfSpecId_ == null) {
              WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
            }
            input.ReadMessage(WfSpecId);
            break;
          }
          case 26: {
            oldWfSpecVersions_.AddEntriesFrom(input, _repeated_oldWfSpecVersions_codec);
            break;
          }
          case 32: {
            Status = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
            break;
          }
          case 40: {
            GreatestThreadrunNumber = input.ReadInt32();
            break;
          }
          case 50: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 58: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 66: {
            threadRuns_.AddEntriesFrom(input, _repeated_threadRuns_codec);
            break;
          }
          case 74: {
            pendingInterrupts_.AddEntriesFrom(input, _repeated_pendingInterrupts_codec);
            break;
          }
          case 82: {
            pendingFailures_.AddEntriesFrom(input, _repeated_pendingFailures_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::LittleHorse.Common.Proto.WfRunId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (wfSpecId_ == null) {
              WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
            }
            input.ReadMessage(WfSpecId);
            break;
          }
          case 26: {
            oldWfSpecVersions_.AddEntriesFrom(ref input, _repeated_oldWfSpecVersions_codec);
            break;
          }
          case 32: {
            Status = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
            break;
          }
          case 40: {
            GreatestThreadrunNumber = input.ReadInt32();
            break;
          }
          case 50: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 58: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 66: {
            threadRuns_.AddEntriesFrom(ref input, _repeated_threadRuns_codec);
            break;
          }
          case 74: {
            pendingInterrupts_.AddEntriesFrom(ref input, _repeated_pendingInterrupts_codec);
            break;
          }
          case 82: {
            pendingFailures_.AddEntriesFrom(ref input, _repeated_pendingFailures_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A ThreadRun is a running thread of execution within a WfRun.
  /// </summary>
  public sealed partial class ThreadRun : pb::IMessage<ThreadRun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ThreadRun> _parser = new pb::MessageParser<ThreadRun>(() => new ThreadRun());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ThreadRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThreadRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThreadRun(ThreadRun other) : this() {
      _hasBits0 = other._hasBits0;
      wfSpecId_ = other.wfSpecId_ != null ? other.wfSpecId_.Clone() : null;
      number_ = other.number_;
      status_ = other.status_;
      threadSpecName_ = other.threadSpecName_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      errorMessage_ = other.errorMessage_;
      childThreadIds_ = other.childThreadIds_.Clone();
      parentThreadId_ = other.parentThreadId_;
      haltReasons_ = other.haltReasons_.Clone();
      interruptTriggerId_ = other.interruptTriggerId_ != null ? other.interruptTriggerId_.Clone() : null;
      failureBeingHandled_ = other.failureBeingHandled_ != null ? other.failureBeingHandled_.Clone() : null;
      currentNodePosition_ = other.currentNodePosition_;
      handledFailedChildren_ = other.handledFailedChildren_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThreadRun Clone() {
      return new ThreadRun(this);
    }

    /// <summary>Field number for the "wf_spec_id" field.</summary>
    public const int WfSpecIdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.WfSpecId wfSpecId_;
    /// <summary>
    /// The current WfSpecId of this ThreadRun. This must be set explicitly because
    /// during a WfSpec Version Migration, it is possible for different ThreadSpec's to
    /// have different WfSpec versions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.WfSpecId WfSpecId {
      get { return wfSpecId_; }
      set {
        wfSpecId_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    /// <summary>
    /// The number of the ThreadRun. This is an auto-incremented integer corresponding to
    /// the chronological ordering of when the ThreadRun's were created. If you have not
    /// configured any retention policy for the ThreadRun's (i.e. never clean them up), then
    /// this also corresponds to the position of the ThreadRun in the WfRun's `thread_runs`
    /// list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::LittleHorse.Common.Proto.LHStatus status_ = global::LittleHorse.Common.Proto.LHStatus.Starting;
    /// <summary>
    /// The status of the ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.LHStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "thread_spec_name" field.</summary>
    public const int ThreadSpecNameFieldNumber = 4;
    private string threadSpecName_ = "";
    /// <summary>
    /// The name of the ThreadSpec being run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ThreadSpecName {
      get { return threadSpecName_; }
      set {
        threadSpecName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The time the ThreadRun was started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// The time the ThreadRun was completed or failed. Unset if still active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 7;
    private readonly static string ErrorMessageDefaultValue = "";

    private string errorMessage_;
    /// <summary>
    /// Human-readable error message detailing what went wrong in the case of a failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ErrorMessage {
      get { return errorMessage_ ?? ErrorMessageDefaultValue; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "error_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasErrorMessage {
      get { return errorMessage_ != null; }
    }
    /// <summary>Clears the value of the "error_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearErrorMessage() {
      errorMessage_ = null;
    }

    /// <summary>Field number for the "child_thread_ids" field.</summary>
    public const int ChildThreadIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_childThreadIds_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> childThreadIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// List of thread_run_number's for all child thread_runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ChildThreadIds {
      get { return childThreadIds_; }
    }

    /// <summary>Field number for the "parent_thread_id" field.</summary>
    public const int ParentThreadIdFieldNumber = 9;
    private readonly static int ParentThreadIdDefaultValue = 0;

    private int parentThreadId_;
    /// <summary>
    /// Set for every ThreadRun except the ENTRYPOINT. This is the id of the parent thread.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentThreadId {
      get { if ((_hasBits0 & 1) != 0) { return parentThreadId_; } else { return ParentThreadIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        parentThreadId_ = value;
      }
    }
    /// <summary>Gets whether the "parent_thread_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentThreadId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "parent_thread_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentThreadId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "halt_reasons" field.</summary>
    public const int HaltReasonsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::LittleHorse.Common.Proto.ThreadHaltReason> _repeated_haltReasons_codec
        = pb::FieldCodec.ForMessage(82, global::LittleHorse.Common.Proto.ThreadHaltReason.Parser);
    private readonly pbc::RepeatedField<global::LittleHorse.Common.Proto.ThreadHaltReason> haltReasons_ = new pbc::RepeatedField<global::LittleHorse.Common.Proto.ThreadHaltReason>();
    /// <summary>
    /// If the ThreadRun is HALTED, this contains a list of every reason for which the
    /// ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
    /// then the ThreadRun will return to the RUNNING state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LittleHorse.Common.Proto.ThreadHaltReason> HaltReasons {
      get { return haltReasons_; }
    }

    /// <summary>Field number for the "interrupt_trigger_id" field.</summary>
    public const int InterruptTriggerIdFieldNumber = 11;
    private global::LittleHorse.Common.Proto.ExternalEventId interruptTriggerId_;
    /// <summary>
    /// If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
    /// ExternalEvent that caused the Interrupt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ExternalEventId InterruptTriggerId {
      get { return interruptTriggerId_; }
      set {
        interruptTriggerId_ = value;
      }
    }

    /// <summary>Field number for the "failure_being_handled" field.</summary>
    public const int FailureBeingHandledFieldNumber = 12;
    private global::LittleHorse.Common.Proto.FailureBeingHandled failureBeingHandled_;
    /// <summary>
    /// If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
    /// that is being handled by this ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.FailureBeingHandled FailureBeingHandled {
      get { return failureBeingHandled_; }
      set {
        failureBeingHandled_ = value;
      }
    }

    /// <summary>Field number for the "current_node_position" field.</summary>
    public const int CurrentNodePositionFieldNumber = 13;
    private int currentNodePosition_;
    /// <summary>
    /// This is the current `position` of the current NodeRun being run. This is an
    /// auto-incremented field that gets incremented every time we run a new NodeRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrentNodePosition {
      get { return currentNodePosition_; }
      set {
        currentNodePosition_ = value;
      }
    }

    /// <summary>Field number for the "handled_failed_children" field.</summary>
    public const int HandledFailedChildrenFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_handledFailedChildren_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> handledFailedChildren_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// List of every child ThreadRun which both a) failed, and b) was properly handled by a
    /// Failure Handler.
    ///
    /// This is important because at the EXIT node, if a Child ThreadRun was discovered to have
    /// failed, then this ThreadRun (the parent) also fails with the same failure as the child.
    /// If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
    /// number is appended to this list, and then the EXIT node ignores that ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> HandledFailedChildren {
      get { return handledFailedChildren_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 15;
    private global::LittleHorse.Common.Proto.ThreadType type_ = global::LittleHorse.Common.Proto.ThreadType.Entrypoint;
    /// <summary>
    /// The Type of this ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ThreadType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ThreadRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ThreadRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WfSpecId, other.WfSpecId)) return false;
      if (Number != other.Number) return false;
      if (Status != other.Status) return false;
      if (ThreadSpecName != other.ThreadSpecName) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if(!childThreadIds_.Equals(other.childThreadIds_)) return false;
      if (ParentThreadId != other.ParentThreadId) return false;
      if(!haltReasons_.Equals(other.haltReasons_)) return false;
      if (!object.Equals(InterruptTriggerId, other.InterruptTriggerId)) return false;
      if (!object.Equals(FailureBeingHandled, other.FailureBeingHandled)) return false;
      if (CurrentNodePosition != other.CurrentNodePosition) return false;
      if(!handledFailedChildren_.Equals(other.handledFailedChildren_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (wfSpecId_ != null) hash ^= WfSpecId.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) hash ^= Status.GetHashCode();
      if (ThreadSpecName.Length != 0) hash ^= ThreadSpecName.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (HasErrorMessage) hash ^= ErrorMessage.GetHashCode();
      hash ^= childThreadIds_.GetHashCode();
      if (HasParentThreadId) hash ^= ParentThreadId.GetHashCode();
      hash ^= haltReasons_.GetHashCode();
      if (interruptTriggerId_ != null) hash ^= InterruptTriggerId.GetHashCode();
      if (failureBeingHandled_ != null) hash ^= FailureBeingHandled.GetHashCode();
      if (CurrentNodePosition != 0) hash ^= CurrentNodePosition.GetHashCode();
      hash ^= handledFailedChildren_.GetHashCode();
      if (Type != global::LittleHorse.Common.Proto.ThreadType.Entrypoint) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (wfSpecId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WfSpecId);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ThreadSpecName);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (HasErrorMessage) {
        output.WriteRawTag(58);
        output.WriteString(ErrorMessage);
      }
      childThreadIds_.WriteTo(output, _repeated_childThreadIds_codec);
      if (HasParentThreadId) {
        output.WriteRawTag(72);
        output.WriteInt32(ParentThreadId);
      }
      haltReasons_.WriteTo(output, _repeated_haltReasons_codec);
      if (interruptTriggerId_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(InterruptTriggerId);
      }
      if (failureBeingHandled_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FailureBeingHandled);
      }
      if (CurrentNodePosition != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentNodePosition);
      }
      handledFailedChildren_.WriteTo(output, _repeated_handledFailedChildren_codec);
      if (Type != global::LittleHorse.Common.Proto.ThreadType.Entrypoint) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (wfSpecId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WfSpecId);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (ThreadSpecName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ThreadSpecName);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (HasErrorMessage) {
        output.WriteRawTag(58);
        output.WriteString(ErrorMessage);
      }
      childThreadIds_.WriteTo(ref output, _repeated_childThreadIds_codec);
      if (HasParentThreadId) {
        output.WriteRawTag(72);
        output.WriteInt32(ParentThreadId);
      }
      haltReasons_.WriteTo(ref output, _repeated_haltReasons_codec);
      if (interruptTriggerId_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(InterruptTriggerId);
      }
      if (failureBeingHandled_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FailureBeingHandled);
      }
      if (CurrentNodePosition != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentNodePosition);
      }
      handledFailedChildren_.WriteTo(ref output, _repeated_handledFailedChildren_codec);
      if (Type != global::LittleHorse.Common.Proto.ThreadType.Entrypoint) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (wfSpecId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WfSpecId);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ThreadSpecName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThreadSpecName);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (HasErrorMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      size += childThreadIds_.CalculateSize(_repeated_childThreadIds_codec);
      if (HasParentThreadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentThreadId);
      }
      size += haltReasons_.CalculateSize(_repeated_haltReasons_codec);
      if (interruptTriggerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InterruptTriggerId);
      }
      if (failureBeingHandled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FailureBeingHandled);
      }
      if (CurrentNodePosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentNodePosition);
      }
      size += handledFailedChildren_.CalculateSize(_repeated_handledFailedChildren_codec);
      if (Type != global::LittleHorse.Common.Proto.ThreadType.Entrypoint) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ThreadRun other) {
      if (other == null) {
        return;
      }
      if (other.wfSpecId_ != null) {
        if (wfSpecId_ == null) {
          WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
        }
        WfSpecId.MergeFrom(other.WfSpecId);
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Status != global::LittleHorse.Common.Proto.LHStatus.Starting) {
        Status = other.Status;
      }
      if (other.ThreadSpecName.Length != 0) {
        ThreadSpecName = other.ThreadSpecName;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.HasErrorMessage) {
        ErrorMessage = other.ErrorMessage;
      }
      childThreadIds_.Add(other.childThreadIds_);
      if (other.HasParentThreadId) {
        ParentThreadId = other.ParentThreadId;
      }
      haltReasons_.Add(other.haltReasons_);
      if (other.interruptTriggerId_ != null) {
        if (interruptTriggerId_ == null) {
          InterruptTriggerId = new global::LittleHorse.Common.Proto.ExternalEventId();
        }
        InterruptTriggerId.MergeFrom(other.InterruptTriggerId);
      }
      if (other.failureBeingHandled_ != null) {
        if (failureBeingHandled_ == null) {
          FailureBeingHandled = new global::LittleHorse.Common.Proto.FailureBeingHandled();
        }
        FailureBeingHandled.MergeFrom(other.FailureBeingHandled);
      }
      if (other.CurrentNodePosition != 0) {
        CurrentNodePosition = other.CurrentNodePosition;
      }
      handledFailedChildren_.Add(other.handledFailedChildren_);
      if (other.Type != global::LittleHorse.Common.Proto.ThreadType.Entrypoint) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (wfSpecId_ == null) {
              WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
            }
            input.ReadMessage(WfSpecId);
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 24: {
            Status = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
            break;
          }
          case 34: {
            ThreadSpecName = input.ReadString();
            break;
          }
          case 42: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 58: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            childThreadIds_.AddEntriesFrom(input, _repeated_childThreadIds_codec);
            break;
          }
          case 72: {
            ParentThreadId = input.ReadInt32();
            break;
          }
          case 82: {
            haltReasons_.AddEntriesFrom(input, _repeated_haltReasons_codec);
            break;
          }
          case 90: {
            if (interruptTriggerId_ == null) {
              InterruptTriggerId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(InterruptTriggerId);
            break;
          }
          case 98: {
            if (failureBeingHandled_ == null) {
              FailureBeingHandled = new global::LittleHorse.Common.Proto.FailureBeingHandled();
            }
            input.ReadMessage(FailureBeingHandled);
            break;
          }
          case 104: {
            CurrentNodePosition = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            handledFailedChildren_.AddEntriesFrom(input, _repeated_handledFailedChildren_codec);
            break;
          }
          case 120: {
            Type = (global::LittleHorse.Common.Proto.ThreadType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (wfSpecId_ == null) {
              WfSpecId = new global::LittleHorse.Common.Proto.WfSpecId();
            }
            input.ReadMessage(WfSpecId);
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 24: {
            Status = (global::LittleHorse.Common.Proto.LHStatus) input.ReadEnum();
            break;
          }
          case 34: {
            ThreadSpecName = input.ReadString();
            break;
          }
          case 42: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 58: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            childThreadIds_.AddEntriesFrom(ref input, _repeated_childThreadIds_codec);
            break;
          }
          case 72: {
            ParentThreadId = input.ReadInt32();
            break;
          }
          case 82: {
            haltReasons_.AddEntriesFrom(ref input, _repeated_haltReasons_codec);
            break;
          }
          case 90: {
            if (interruptTriggerId_ == null) {
              InterruptTriggerId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(InterruptTriggerId);
            break;
          }
          case 98: {
            if (failureBeingHandled_ == null) {
              FailureBeingHandled = new global::LittleHorse.Common.Proto.FailureBeingHandled();
            }
            input.ReadMessage(FailureBeingHandled);
            break;
          }
          case 104: {
            CurrentNodePosition = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            handledFailedChildren_.AddEntriesFrom(ref input, _repeated_handledFailedChildren_codec);
            break;
          }
          case 120: {
            Type = (global::LittleHorse.Common.Proto.ThreadType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Points to the Failure that is currently being handled in the ThreadRun.
  /// </summary>
  public sealed partial class FailureBeingHandled : pb::IMessage<FailureBeingHandled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FailureBeingHandled> _parser = new pb::MessageParser<FailureBeingHandled>(() => new FailureBeingHandled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FailureBeingHandled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FailureBeingHandled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FailureBeingHandled(FailureBeingHandled other) : this() {
      threadRunNumber_ = other.threadRunNumber_;
      nodeRunPosition_ = other.nodeRunPosition_;
      failureNumber_ = other.failureNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FailureBeingHandled Clone() {
      return new FailureBeingHandled(this);
    }

    /// <summary>Field number for the "thread_run_number" field.</summary>
    public const int ThreadRunNumberFieldNumber = 1;
    private int threadRunNumber_;
    /// <summary>
    /// The thread run number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThreadRunNumber {
      get { return threadRunNumber_; }
      set {
        threadRunNumber_ = value;
      }
    }

    /// <summary>Field number for the "node_run_position" field.</summary>
    public const int NodeRunPositionFieldNumber = 2;
    private int nodeRunPosition_;
    /// <summary>
    /// The position of the NodeRun causing the failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NodeRunPosition {
      get { return nodeRunPosition_; }
      set {
        nodeRunPosition_ = value;
      }
    }

    /// <summary>Field number for the "failure_number" field.</summary>
    public const int FailureNumberFieldNumber = 3;
    private int failureNumber_;
    /// <summary>
    /// The number of the failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FailureNumber {
      get { return failureNumber_; }
      set {
        failureNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FailureBeingHandled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FailureBeingHandled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThreadRunNumber != other.ThreadRunNumber) return false;
      if (NodeRunPosition != other.NodeRunPosition) return false;
      if (FailureNumber != other.FailureNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ThreadRunNumber != 0) hash ^= ThreadRunNumber.GetHashCode();
      if (NodeRunPosition != 0) hash ^= NodeRunPosition.GetHashCode();
      if (FailureNumber != 0) hash ^= FailureNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ThreadRunNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ThreadRunNumber);
      }
      if (NodeRunPosition != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NodeRunPosition);
      }
      if (FailureNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FailureNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ThreadRunNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ThreadRunNumber);
      }
      if (NodeRunPosition != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NodeRunPosition);
      }
      if (FailureNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FailureNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ThreadRunNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadRunNumber);
      }
      if (NodeRunPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeRunPosition);
      }
      if (FailureNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailureNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FailureBeingHandled other) {
      if (other == null) {
        return;
      }
      if (other.ThreadRunNumber != 0) {
        ThreadRunNumber = other.ThreadRunNumber;
      }
      if (other.NodeRunPosition != 0) {
        NodeRunPosition = other.NodeRunPosition;
      }
      if (other.FailureNumber != 0) {
        FailureNumber = other.FailureNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ThreadRunNumber = input.ReadInt32();
            break;
          }
          case 16: {
            NodeRunPosition = input.ReadInt32();
            break;
          }
          case 24: {
            FailureNumber = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ThreadRunNumber = input.ReadInt32();
            break;
          }
          case 16: {
            NodeRunPosition = input.ReadInt32();
            break;
          }
          case 24: {
            FailureNumber = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents an ExternalEvent that has a registered Interrupt Handler for it
  /// and which is pending to be sent to the relevant ThreadRun's.
  /// </summary>
  public sealed partial class PendingInterrupt : pb::IMessage<PendingInterrupt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingInterrupt> _parser = new pb::MessageParser<PendingInterrupt>(() => new PendingInterrupt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PendingInterrupt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingInterrupt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingInterrupt(PendingInterrupt other) : this() {
      externalEventId_ = other.externalEventId_ != null ? other.externalEventId_.Clone() : null;
      handlerSpecName_ = other.handlerSpecName_;
      interruptedThreadId_ = other.interruptedThreadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingInterrupt Clone() {
      return new PendingInterrupt(this);
    }

    /// <summary>Field number for the "external_event_id" field.</summary>
    public const int ExternalEventIdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.ExternalEventId externalEventId_;
    /// <summary>
    /// The ID of the ExternalEvent triggering the Interrupt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ExternalEventId ExternalEventId {
      get { return externalEventId_; }
      set {
        externalEventId_ = value;
      }
    }

    /// <summary>Field number for the "handler_spec_name" field.</summary>
    public const int HandlerSpecNameFieldNumber = 2;
    private string handlerSpecName_ = "";
    /// <summary>
    /// The name of the ThreadSpec to run to handle the Interrupt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HandlerSpecName {
      get { return handlerSpecName_; }
      set {
        handlerSpecName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interrupted_thread_id" field.</summary>
    public const int InterruptedThreadIdFieldNumber = 3;
    private int interruptedThreadId_;
    /// <summary>
    /// The ID of the ThreadRun to interrupt. Must wait for this ThreadRun to be
    /// HALTED before running the Interrupt Handler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InterruptedThreadId {
      get { return interruptedThreadId_; }
      set {
        interruptedThreadId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PendingInterrupt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PendingInterrupt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExternalEventId, other.ExternalEventId)) return false;
      if (HandlerSpecName != other.HandlerSpecName) return false;
      if (InterruptedThreadId != other.InterruptedThreadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (externalEventId_ != null) hash ^= ExternalEventId.GetHashCode();
      if (HandlerSpecName.Length != 0) hash ^= HandlerSpecName.GetHashCode();
      if (InterruptedThreadId != 0) hash ^= InterruptedThreadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (externalEventId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExternalEventId);
      }
      if (HandlerSpecName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HandlerSpecName);
      }
      if (InterruptedThreadId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InterruptedThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (externalEventId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExternalEventId);
      }
      if (HandlerSpecName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HandlerSpecName);
      }
      if (InterruptedThreadId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InterruptedThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (externalEventId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalEventId);
      }
      if (HandlerSpecName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HandlerSpecName);
      }
      if (InterruptedThreadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterruptedThreadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PendingInterrupt other) {
      if (other == null) {
        return;
      }
      if (other.externalEventId_ != null) {
        if (externalEventId_ == null) {
          ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
        }
        ExternalEventId.MergeFrom(other.ExternalEventId);
      }
      if (other.HandlerSpecName.Length != 0) {
        HandlerSpecName = other.HandlerSpecName;
      }
      if (other.InterruptedThreadId != 0) {
        InterruptedThreadId = other.InterruptedThreadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (externalEventId_ == null) {
              ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(ExternalEventId);
            break;
          }
          case 18: {
            HandlerSpecName = input.ReadString();
            break;
          }
          case 24: {
            InterruptedThreadId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (externalEventId_ == null) {
              ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(ExternalEventId);
            break;
          }
          case 18: {
            HandlerSpecName = input.ReadString();
            break;
          }
          case 24: {
            InterruptedThreadId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a Failure Handler that is pending to be run.
  /// </summary>
  public sealed partial class PendingFailureHandler : pb::IMessage<PendingFailureHandler>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingFailureHandler> _parser = new pb::MessageParser<PendingFailureHandler>(() => new PendingFailureHandler());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PendingFailureHandler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingFailureHandler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingFailureHandler(PendingFailureHandler other) : this() {
      failedThreadRun_ = other.failedThreadRun_;
      handlerSpecName_ = other.handlerSpecName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingFailureHandler Clone() {
      return new PendingFailureHandler(this);
    }

    /// <summary>Field number for the "failed_thread_run" field.</summary>
    public const int FailedThreadRunFieldNumber = 1;
    private int failedThreadRun_;
    /// <summary>
    /// The ThreadRun that failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FailedThreadRun {
      get { return failedThreadRun_; }
      set {
        failedThreadRun_ = value;
      }
    }

    /// <summary>Field number for the "handler_spec_name" field.</summary>
    public const int HandlerSpecNameFieldNumber = 2;
    private string handlerSpecName_ = "";
    /// <summary>
    /// The name of the ThreadSpec to run to handle the failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HandlerSpecName {
      get { return handlerSpecName_; }
      set {
        handlerSpecName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PendingFailureHandler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PendingFailureHandler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FailedThreadRun != other.FailedThreadRun) return false;
      if (HandlerSpecName != other.HandlerSpecName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FailedThreadRun != 0) hash ^= FailedThreadRun.GetHashCode();
      if (HandlerSpecName.Length != 0) hash ^= HandlerSpecName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FailedThreadRun != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FailedThreadRun);
      }
      if (HandlerSpecName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HandlerSpecName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FailedThreadRun != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FailedThreadRun);
      }
      if (HandlerSpecName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HandlerSpecName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FailedThreadRun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailedThreadRun);
      }
      if (HandlerSpecName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HandlerSpecName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PendingFailureHandler other) {
      if (other == null) {
        return;
      }
      if (other.FailedThreadRun != 0) {
        FailedThreadRun = other.FailedThreadRun;
      }
      if (other.HandlerSpecName.Length != 0) {
        HandlerSpecName = other.HandlerSpecName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FailedThreadRun = input.ReadInt32();
            break;
          }
          case 18: {
            HandlerSpecName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FailedThreadRun = input.ReadInt32();
            break;
          }
          case 18: {
            HandlerSpecName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Halt Reason denoting that a ThreadRun is halted while waiting for an Interrupt handler
  /// to be run.
  /// </summary>
  public sealed partial class PendingInterruptHaltReason : pb::IMessage<PendingInterruptHaltReason>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingInterruptHaltReason> _parser = new pb::MessageParser<PendingInterruptHaltReason>(() => new PendingInterruptHaltReason());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PendingInterruptHaltReason> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingInterruptHaltReason() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingInterruptHaltReason(PendingInterruptHaltReason other) : this() {
      externalEventId_ = other.externalEventId_ != null ? other.externalEventId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingInterruptHaltReason Clone() {
      return new PendingInterruptHaltReason(this);
    }

    /// <summary>Field number for the "external_event_id" field.</summary>
    public const int ExternalEventIdFieldNumber = 1;
    private global::LittleHorse.Common.Proto.ExternalEventId externalEventId_;
    /// <summary>
    /// The ExternalEventId that caused the Interrupt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ExternalEventId ExternalEventId {
      get { return externalEventId_; }
      set {
        externalEventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PendingInterruptHaltReason);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PendingInterruptHaltReason other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExternalEventId, other.ExternalEventId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (externalEventId_ != null) hash ^= ExternalEventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (externalEventId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExternalEventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (externalEventId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExternalEventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (externalEventId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalEventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PendingInterruptHaltReason other) {
      if (other == null) {
        return;
      }
      if (other.externalEventId_ != null) {
        if (externalEventId_ == null) {
          ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
        }
        ExternalEventId.MergeFrom(other.ExternalEventId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (externalEventId_ == null) {
              ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(ExternalEventId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (externalEventId_ == null) {
              ExternalEventId = new global::LittleHorse.Common.Proto.ExternalEventId();
            }
            input.ReadMessage(ExternalEventId);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Halt Reason denoting that a ThreadRun is halted while a Failure Handler is *enqueued* to be
  /// run.
  /// </summary>
  public sealed partial class PendingFailureHandlerHaltReason : pb::IMessage<PendingFailureHandlerHaltReason>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingFailureHandlerHaltReason> _parser = new pb::MessageParser<PendingFailureHandlerHaltReason>(() => new PendingFailureHandlerHaltReason());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PendingFailureHandlerHaltReason> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingFailureHandlerHaltReason() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingFailureHandlerHaltReason(PendingFailureHandlerHaltReason other) : this() {
      nodeRunPosition_ = other.nodeRunPosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PendingFailureHandlerHaltReason Clone() {
      return new PendingFailureHandlerHaltReason(this);
    }

    /// <summary>Field number for the "node_run_position" field.</summary>
    public const int NodeRunPositionFieldNumber = 1;
    private int nodeRunPosition_;
    /// <summary>
    /// The position of the NodeRun which threw the failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NodeRunPosition {
      get { return nodeRunPosition_; }
      set {
        nodeRunPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PendingFailureHandlerHaltReason);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PendingFailureHandlerHaltReason other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeRunPosition != other.NodeRunPosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeRunPosition != 0) hash ^= NodeRunPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeRunPosition != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NodeRunPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeRunPosition != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NodeRunPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NodeRunPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeRunPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PendingFailureHandlerHaltReason other) {
      if (other == null) {
        return;
      }
      if (other.NodeRunPosition != 0) {
        NodeRunPosition = other.NodeRunPosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeRunPosition = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeRunPosition = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Halt Reason denoting that a ThreadRun is halted while a Failure Handler is being run.
  /// </summary>
  public sealed partial class HandlingFailureHaltReason : pb::IMessage<HandlingFailureHaltReason>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandlingFailureHaltReason> _parser = new pb::MessageParser<HandlingFailureHaltReason>(() => new HandlingFailureHaltReason());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandlingFailureHaltReason> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandlingFailureHaltReason() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandlingFailureHaltReason(HandlingFailureHaltReason other) : this() {
      handlerThreadId_ = other.handlerThreadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandlingFailureHaltReason Clone() {
      return new HandlingFailureHaltReason(this);
    }

    /// <summary>Field number for the "handler_thread_id" field.</summary>
    public const int HandlerThreadIdFieldNumber = 1;
    private int handlerThreadId_;
    /// <summary>
    /// The ID of the Failure Handler ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HandlerThreadId {
      get { return handlerThreadId_; }
      set {
        handlerThreadId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandlingFailureHaltReason);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandlingFailureHaltReason other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandlerThreadId != other.HandlerThreadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HandlerThreadId != 0) hash ^= HandlerThreadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HandlerThreadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HandlerThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HandlerThreadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HandlerThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HandlerThreadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandlerThreadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandlingFailureHaltReason other) {
      if (other == null) {
        return;
      }
      if (other.HandlerThreadId != 0) {
        HandlerThreadId = other.HandlerThreadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandlerThreadId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HandlerThreadId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Halt Reason denoting that a ThreadRun is halted because its parent is also HALTED.
  /// </summary>
  public sealed partial class ParentHalted : pb::IMessage<ParentHalted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParentHalted> _parser = new pb::MessageParser<ParentHalted>(() => new ParentHalted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ParentHalted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentHalted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentHalted(ParentHalted other) : this() {
      parentThreadId_ = other.parentThreadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParentHalted Clone() {
      return new ParentHalted(this);
    }

    /// <summary>Field number for the "parent_thread_id" field.</summary>
    public const int ParentThreadIdFieldNumber = 1;
    private int parentThreadId_;
    /// <summary>
    /// The ID of the halted parent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentThreadId {
      get { return parentThreadId_; }
      set {
        parentThreadId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ParentHalted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ParentHalted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParentThreadId != other.ParentThreadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ParentThreadId != 0) hash ^= ParentThreadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ParentThreadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ParentThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ParentThreadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ParentThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ParentThreadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentThreadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ParentHalted other) {
      if (other == null) {
        return;
      }
      if (other.ParentThreadId != 0) {
        ParentThreadId = other.ParentThreadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ParentThreadId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ParentThreadId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Halt Reason denoting that a ThreadRun is halted because it is waiting for the
  /// interrupt handler threadRun to run.
  /// </summary>
  public sealed partial class Interrupted : pb::IMessage<Interrupted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Interrupted> _parser = new pb::MessageParser<Interrupted>(() => new Interrupted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Interrupted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Interrupted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Interrupted(Interrupted other) : this() {
      interruptThreadId_ = other.interruptThreadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Interrupted Clone() {
      return new Interrupted(this);
    }

    /// <summary>Field number for the "interrupt_thread_id" field.</summary>
    public const int InterruptThreadIdFieldNumber = 1;
    private int interruptThreadId_;
    /// <summary>
    /// The ID of the Interrupt Handler ThreadRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InterruptThreadId {
      get { return interruptThreadId_; }
      set {
        interruptThreadId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Interrupted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Interrupted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InterruptThreadId != other.InterruptThreadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InterruptThreadId != 0) hash ^= InterruptThreadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InterruptThreadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InterruptThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InterruptThreadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InterruptThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InterruptThreadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterruptThreadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Interrupted other) {
      if (other == null) {
        return;
      }
      if (other.InterruptThreadId != 0) {
        InterruptThreadId = other.InterruptThreadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InterruptThreadId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InterruptThreadId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Halt Reason denoting that a ThreadRun was halted manually, via the `rpc StopWfRun` request.
  /// </summary>
  public sealed partial class ManualHalt : pb::IMessage<ManualHalt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ManualHalt> _parser = new pb::MessageParser<ManualHalt>(() => new ManualHalt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ManualHalt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ManualHalt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ManualHalt(ManualHalt other) : this() {
      meaningOfLife_ = other.meaningOfLife_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ManualHalt Clone() {
      return new ManualHalt(this);
    }

    /// <summary>Field number for the "meaning_of_life" field.</summary>
    public const int MeaningOfLifeFieldNumber = 137;
    private bool meaningOfLife_;
    /// <summary>
    /// Nothing to store.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MeaningOfLife {
      get { return meaningOfLife_; }
      set {
        meaningOfLife_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ManualHalt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ManualHalt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeaningOfLife != other.MeaningOfLife) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeaningOfLife != false) hash ^= MeaningOfLife.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeaningOfLife != false) {
        output.WriteRawTag(200, 8);
        output.WriteBool(MeaningOfLife);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeaningOfLife != false) {
        output.WriteRawTag(200, 8);
        output.WriteBool(MeaningOfLife);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeaningOfLife != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ManualHalt other) {
      if (other == null) {
        return;
      }
      if (other.MeaningOfLife != false) {
        MeaningOfLife = other.MeaningOfLife;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 1096: {
            MeaningOfLife = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 1096: {
            MeaningOfLife = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Denotes a reason why a ThreadRun is halted. See `ThreadRun.halt_reasons` for context.
  /// </summary>
  public sealed partial class ThreadHaltReason : pb::IMessage<ThreadHaltReason>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ThreadHaltReason> _parser = new pb::MessageParser<ThreadHaltReason>(() => new ThreadHaltReason());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ThreadHaltReason> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LittleHorse.Common.Proto.WfRunReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThreadHaltReason() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThreadHaltReason(ThreadHaltReason other) : this() {
      switch (other.ReasonCase) {
        case ReasonOneofCase.ParentHalted:
          ParentHalted = other.ParentHalted.Clone();
          break;
        case ReasonOneofCase.Interrupted:
          Interrupted = other.Interrupted.Clone();
          break;
        case ReasonOneofCase.PendingInterrupt:
          PendingInterrupt = other.PendingInterrupt.Clone();
          break;
        case ReasonOneofCase.PendingFailure:
          PendingFailure = other.PendingFailure.Clone();
          break;
        case ReasonOneofCase.HandlingFailure:
          HandlingFailure = other.HandlingFailure.Clone();
          break;
        case ReasonOneofCase.ManualHalt:
          ManualHalt = other.ManualHalt.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ThreadHaltReason Clone() {
      return new ThreadHaltReason(this);
    }

    /// <summary>Field number for the "parent_halted" field.</summary>
    public const int ParentHaltedFieldNumber = 1;
    /// <summary>
    /// Parent threadRun halted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ParentHalted ParentHalted {
      get { return reasonCase_ == ReasonOneofCase.ParentHalted ? (global::LittleHorse.Common.Proto.ParentHalted) reason_ : null; }
      set {
        reason_ = value;
        reasonCase_ = value == null ? ReasonOneofCase.None : ReasonOneofCase.ParentHalted;
      }
    }

    /// <summary>Field number for the "interrupted" field.</summary>
    public const int InterruptedFieldNumber = 2;
    /// <summary>
    /// Handling an Interrupt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.Interrupted Interrupted {
      get { return reasonCase_ == ReasonOneofCase.Interrupted ? (global::LittleHorse.Common.Proto.Interrupted) reason_ : null; }
      set {
        reason_ = value;
        reasonCase_ = value == null ? ReasonOneofCase.None : ReasonOneofCase.Interrupted;
      }
    }

    /// <summary>Field number for the "pending_interrupt" field.</summary>
    public const int PendingInterruptFieldNumber = 3;
    /// <summary>
    /// Waiting to handle Interrupt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.PendingInterruptHaltReason PendingInterrupt {
      get { return reasonCase_ == ReasonOneofCase.PendingInterrupt ? (global::LittleHorse.Common.Proto.PendingInterruptHaltReason) reason_ : null; }
      set {
        reason_ = value;
        reasonCase_ = value == null ? ReasonOneofCase.None : ReasonOneofCase.PendingInterrupt;
      }
    }

    /// <summary>Field number for the "pending_failure" field.</summary>
    public const int PendingFailureFieldNumber = 4;
    /// <summary>
    /// Waiting to handle a failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason PendingFailure {
      get { return reasonCase_ == ReasonOneofCase.PendingFailure ? (global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason) reason_ : null; }
      set {
        reason_ = value;
        reasonCase_ = value == null ? ReasonOneofCase.None : ReasonOneofCase.PendingFailure;
      }
    }

    /// <summary>Field number for the "handling_failure" field.</summary>
    public const int HandlingFailureFieldNumber = 5;
    /// <summary>
    /// Handling a failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.HandlingFailureHaltReason HandlingFailure {
      get { return reasonCase_ == ReasonOneofCase.HandlingFailure ? (global::LittleHorse.Common.Proto.HandlingFailureHaltReason) reason_ : null; }
      set {
        reason_ = value;
        reasonCase_ = value == null ? ReasonOneofCase.None : ReasonOneofCase.HandlingFailure;
      }
    }

    /// <summary>Field number for the "manual_halt" field.</summary>
    public const int ManualHaltFieldNumber = 6;
    /// <summary>
    /// Manually stopped the WfRun.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LittleHorse.Common.Proto.ManualHalt ManualHalt {
      get { return reasonCase_ == ReasonOneofCase.ManualHalt ? (global::LittleHorse.Common.Proto.ManualHalt) reason_ : null; }
      set {
        reason_ = value;
        reasonCase_ = value == null ? ReasonOneofCase.None : ReasonOneofCase.ManualHalt;
      }
    }

    private object reason_;
    /// <summary>Enum of possible cases for the "reason" oneof.</summary>
    public enum ReasonOneofCase {
      None = 0,
      ParentHalted = 1,
      Interrupted = 2,
      PendingInterrupt = 3,
      PendingFailure = 4,
      HandlingFailure = 5,
      ManualHalt = 6,
    }
    private ReasonOneofCase reasonCase_ = ReasonOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReasonOneofCase ReasonCase {
      get { return reasonCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReason() {
      reasonCase_ = ReasonOneofCase.None;
      reason_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ThreadHaltReason);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ThreadHaltReason other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ParentHalted, other.ParentHalted)) return false;
      if (!object.Equals(Interrupted, other.Interrupted)) return false;
      if (!object.Equals(PendingInterrupt, other.PendingInterrupt)) return false;
      if (!object.Equals(PendingFailure, other.PendingFailure)) return false;
      if (!object.Equals(HandlingFailure, other.HandlingFailure)) return false;
      if (!object.Equals(ManualHalt, other.ManualHalt)) return false;
      if (ReasonCase != other.ReasonCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (reasonCase_ == ReasonOneofCase.ParentHalted) hash ^= ParentHalted.GetHashCode();
      if (reasonCase_ == ReasonOneofCase.Interrupted) hash ^= Interrupted.GetHashCode();
      if (reasonCase_ == ReasonOneofCase.PendingInterrupt) hash ^= PendingInterrupt.GetHashCode();
      if (reasonCase_ == ReasonOneofCase.PendingFailure) hash ^= PendingFailure.GetHashCode();
      if (reasonCase_ == ReasonOneofCase.HandlingFailure) hash ^= HandlingFailure.GetHashCode();
      if (reasonCase_ == ReasonOneofCase.ManualHalt) hash ^= ManualHalt.GetHashCode();
      hash ^= (int) reasonCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (reasonCase_ == ReasonOneofCase.ParentHalted) {
        output.WriteRawTag(10);
        output.WriteMessage(ParentHalted);
      }
      if (reasonCase_ == ReasonOneofCase.Interrupted) {
        output.WriteRawTag(18);
        output.WriteMessage(Interrupted);
      }
      if (reasonCase_ == ReasonOneofCase.PendingInterrupt) {
        output.WriteRawTag(26);
        output.WriteMessage(PendingInterrupt);
      }
      if (reasonCase_ == ReasonOneofCase.PendingFailure) {
        output.WriteRawTag(34);
        output.WriteMessage(PendingFailure);
      }
      if (reasonCase_ == ReasonOneofCase.HandlingFailure) {
        output.WriteRawTag(42);
        output.WriteMessage(HandlingFailure);
      }
      if (reasonCase_ == ReasonOneofCase.ManualHalt) {
        output.WriteRawTag(50);
        output.WriteMessage(ManualHalt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (reasonCase_ == ReasonOneofCase.ParentHalted) {
        output.WriteRawTag(10);
        output.WriteMessage(ParentHalted);
      }
      if (reasonCase_ == ReasonOneofCase.Interrupted) {
        output.WriteRawTag(18);
        output.WriteMessage(Interrupted);
      }
      if (reasonCase_ == ReasonOneofCase.PendingInterrupt) {
        output.WriteRawTag(26);
        output.WriteMessage(PendingInterrupt);
      }
      if (reasonCase_ == ReasonOneofCase.PendingFailure) {
        output.WriteRawTag(34);
        output.WriteMessage(PendingFailure);
      }
      if (reasonCase_ == ReasonOneofCase.HandlingFailure) {
        output.WriteRawTag(42);
        output.WriteMessage(HandlingFailure);
      }
      if (reasonCase_ == ReasonOneofCase.ManualHalt) {
        output.WriteRawTag(50);
        output.WriteMessage(ManualHalt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (reasonCase_ == ReasonOneofCase.ParentHalted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentHalted);
      }
      if (reasonCase_ == ReasonOneofCase.Interrupted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interrupted);
      }
      if (reasonCase_ == ReasonOneofCase.PendingInterrupt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingInterrupt);
      }
      if (reasonCase_ == ReasonOneofCase.PendingFailure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingFailure);
      }
      if (reasonCase_ == ReasonOneofCase.HandlingFailure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandlingFailure);
      }
      if (reasonCase_ == ReasonOneofCase.ManualHalt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManualHalt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ThreadHaltReason other) {
      if (other == null) {
        return;
      }
      switch (other.ReasonCase) {
        case ReasonOneofCase.ParentHalted:
          if (ParentHalted == null) {
            ParentHalted = new global::LittleHorse.Common.Proto.ParentHalted();
          }
          ParentHalted.MergeFrom(other.ParentHalted);
          break;
        case ReasonOneofCase.Interrupted:
          if (Interrupted == null) {
            Interrupted = new global::LittleHorse.Common.Proto.Interrupted();
          }
          Interrupted.MergeFrom(other.Interrupted);
          break;
        case ReasonOneofCase.PendingInterrupt:
          if (PendingInterrupt == null) {
            PendingInterrupt = new global::LittleHorse.Common.Proto.PendingInterruptHaltReason();
          }
          PendingInterrupt.MergeFrom(other.PendingInterrupt);
          break;
        case ReasonOneofCase.PendingFailure:
          if (PendingFailure == null) {
            PendingFailure = new global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason();
          }
          PendingFailure.MergeFrom(other.PendingFailure);
          break;
        case ReasonOneofCase.HandlingFailure:
          if (HandlingFailure == null) {
            HandlingFailure = new global::LittleHorse.Common.Proto.HandlingFailureHaltReason();
          }
          HandlingFailure.MergeFrom(other.HandlingFailure);
          break;
        case ReasonOneofCase.ManualHalt:
          if (ManualHalt == null) {
            ManualHalt = new global::LittleHorse.Common.Proto.ManualHalt();
          }
          ManualHalt.MergeFrom(other.ManualHalt);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LittleHorse.Common.Proto.ParentHalted subBuilder = new global::LittleHorse.Common.Proto.ParentHalted();
            if (reasonCase_ == ReasonOneofCase.ParentHalted) {
              subBuilder.MergeFrom(ParentHalted);
            }
            input.ReadMessage(subBuilder);
            ParentHalted = subBuilder;
            break;
          }
          case 18: {
            global::LittleHorse.Common.Proto.Interrupted subBuilder = new global::LittleHorse.Common.Proto.Interrupted();
            if (reasonCase_ == ReasonOneofCase.Interrupted) {
              subBuilder.MergeFrom(Interrupted);
            }
            input.ReadMessage(subBuilder);
            Interrupted = subBuilder;
            break;
          }
          case 26: {
            global::LittleHorse.Common.Proto.PendingInterruptHaltReason subBuilder = new global::LittleHorse.Common.Proto.PendingInterruptHaltReason();
            if (reasonCase_ == ReasonOneofCase.PendingInterrupt) {
              subBuilder.MergeFrom(PendingInterrupt);
            }
            input.ReadMessage(subBuilder);
            PendingInterrupt = subBuilder;
            break;
          }
          case 34: {
            global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason subBuilder = new global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason();
            if (reasonCase_ == ReasonOneofCase.PendingFailure) {
              subBuilder.MergeFrom(PendingFailure);
            }
            input.ReadMessage(subBuilder);
            PendingFailure = subBuilder;
            break;
          }
          case 42: {
            global::LittleHorse.Common.Proto.HandlingFailureHaltReason subBuilder = new global::LittleHorse.Common.Proto.HandlingFailureHaltReason();
            if (reasonCase_ == ReasonOneofCase.HandlingFailure) {
              subBuilder.MergeFrom(HandlingFailure);
            }
            input.ReadMessage(subBuilder);
            HandlingFailure = subBuilder;
            break;
          }
          case 50: {
            global::LittleHorse.Common.Proto.ManualHalt subBuilder = new global::LittleHorse.Common.Proto.ManualHalt();
            if (reasonCase_ == ReasonOneofCase.ManualHalt) {
              subBuilder.MergeFrom(ManualHalt);
            }
            input.ReadMessage(subBuilder);
            ManualHalt = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::LittleHorse.Common.Proto.ParentHalted subBuilder = new global::LittleHorse.Common.Proto.ParentHalted();
            if (reasonCase_ == ReasonOneofCase.ParentHalted) {
              subBuilder.MergeFrom(ParentHalted);
            }
            input.ReadMessage(subBuilder);
            ParentHalted = subBuilder;
            break;
          }
          case 18: {
            global::LittleHorse.Common.Proto.Interrupted subBuilder = new global::LittleHorse.Common.Proto.Interrupted();
            if (reasonCase_ == ReasonOneofCase.Interrupted) {
              subBuilder.MergeFrom(Interrupted);
            }
            input.ReadMessage(subBuilder);
            Interrupted = subBuilder;
            break;
          }
          case 26: {
            global::LittleHorse.Common.Proto.PendingInterruptHaltReason subBuilder = new global::LittleHorse.Common.Proto.PendingInterruptHaltReason();
            if (reasonCase_ == ReasonOneofCase.PendingInterrupt) {
              subBuilder.MergeFrom(PendingInterrupt);
            }
            input.ReadMessage(subBuilder);
            PendingInterrupt = subBuilder;
            break;
          }
          case 34: {
            global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason subBuilder = new global::LittleHorse.Common.Proto.PendingFailureHandlerHaltReason();
            if (reasonCase_ == ReasonOneofCase.PendingFailure) {
              subBuilder.MergeFrom(PendingFailure);
            }
            input.ReadMessage(subBuilder);
            PendingFailure = subBuilder;
            break;
          }
          case 42: {
            global::LittleHorse.Common.Proto.HandlingFailureHaltReason subBuilder = new global::LittleHorse.Common.Proto.HandlingFailureHaltReason();
            if (reasonCase_ == ReasonOneofCase.HandlingFailure) {
              subBuilder.MergeFrom(HandlingFailure);
            }
            input.ReadMessage(subBuilder);
            HandlingFailure = subBuilder;
            break;
          }
          case 50: {
            global::LittleHorse.Common.Proto.ManualHalt subBuilder = new global::LittleHorse.Common.Proto.ManualHalt();
            if (reasonCase_ == ReasonOneofCase.ManualHalt) {
              subBuilder.MergeFrom(ManualHalt);
            }
            input.ReadMessage(subBuilder);
            ManualHalt = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
