plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.freefair.lombok' version '8.4'
    id 'com.google.protobuf' version '0.9.4'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

dependencies {
    // LittleHorse
    implementation project(':sdk-java')

    // Tools
    implementation 'com.google.guava:guava:33.0.0-jre'

    // Configurations
    implementation 'io.smallrye.config:smallrye-config:3.5.2'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.11'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.22.1'

    // Kafka
    implementation 'org.apache.kafka:kafka-streams:3.6.1'
    testImplementation 'org.apache.kafka:kafka-streams-test-utils:3.6.1'

    // Web API
    implementation 'io.javalin:javalin:6.3.0'
    implementation 'io.javalin:javalin-micrometer:6.3.0'

    // Prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus:1.14.6'

    // RocksDB
    implementation 'org.rocksdb:rocksdbjni:9.0.0'

    // Tests
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.2.0'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'net.datafaker:datafaker:2.1.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    jvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '--add-opens', 'java.base/java.util=ALL-UNNAMED']
}

spotless {
    java {
        target('**/*.java')
        palantirJavaFormat()
    }
}

application {
    mainClass = 'io.littlehorse.canary.Main'
}

shadowJar {
    mergeServiceFiles()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}sdfsd"
        }
    }
}

checkstyle {
    configFile = file("${rootDir}/canary/checkstyle.xml")
    checkstyleTest.enabled = false
}

tasks.withType(Checkstyle).configureEach {
    exclude('**io/littlehorse/canary/proto**')
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    repositories {
        maven {
            name = "ossrh"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = 'littlehorse-canary'
            version = version
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'LittleHorse Canary'
                description = 'LittleHorse Canary is a Synthetic Monitoring Tool'
                url = 'https://github.com/littlehorse-enterprises/littlehorse'
                licenses {
                    license {
                        name = 'GNU Affero General Public License Version 3'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        name = 'LittleHorse Engineering'
                        email = 'engineering@littlehorse.io'
                    }
                }
                scm {
                    url = 'https://github.com/littlehorse-enterprises/littlehorse'
                    connection = 'scm:git://github.com/littlehorse-enterprises/littlehorse.git'
                    developerConnection = 'scm:git:ssh://github.com/littlehorse-enterprises/littlehorse.git'
                }
                packaging = 'jar'
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

javadoc {
    excludes = []
    options.memberLevel = JavadocMemberLevel.PUBLIC
}
