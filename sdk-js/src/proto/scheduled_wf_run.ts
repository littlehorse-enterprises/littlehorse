// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.1
// source: scheduled_wf_run.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";
import { ScheduledWfRunId, WfRunId, WfSpecId } from "./object_id";
import { VariableValue } from "./variable";

/**
 * A `ScheduledWfRun` is an object in the LittleHorse API that triggers a `WfRun` to be started
 * on a cron schedule.
 */
export interface ScheduledWfRun {
  /** Unique id for this ScheduledWfRun. */
  id:
    | ScheduledWfRunId
    | undefined;
  /** WfSpec used to run a workflow on a schedule. */
  wfSpecId:
    | WfSpecId
    | undefined;
  /**
   * A map from Variable Name to Values for those variables. The provided variables are
   * passed as input to the Entrypoint ThreadRun.
   */
  variables: { [key: string]: VariableValue };
  /** Parent WfRunId associated with all the generated WfRuns */
  parentWfRunId?:
    | WfRunId
    | undefined;
  /** UNIX expression used to specify the schedule for executing WfRuns */
  cronExpression: string;
  /** Creation time for this ScheduledWfRun */
  createdAt: string | undefined;
}

export interface ScheduledWfRun_VariablesEntry {
  key: string;
  value: VariableValue | undefined;
}

function createBaseScheduledWfRun(): ScheduledWfRun {
  return {
    id: undefined,
    wfSpecId: undefined,
    variables: {},
    parentWfRunId: undefined,
    cronExpression: "",
    createdAt: undefined,
  };
}

export const ScheduledWfRun = {
  encode(message: ScheduledWfRun, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      ScheduledWfRunId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.wfSpecId !== undefined) {
      WfSpecId.encode(message.wfSpecId, writer.uint32(18).fork()).ldelim();
    }
    Object.entries(message.variables).forEach(([key, value]) => {
      ScheduledWfRun_VariablesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    if (message.parentWfRunId !== undefined) {
      WfRunId.encode(message.parentWfRunId, writer.uint32(34).fork()).ldelim();
    }
    if (message.cronExpression !== "") {
      writer.uint32(42).string(message.cronExpression);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledWfRun {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledWfRun();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ScheduledWfRunId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.wfSpecId = WfSpecId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ScheduledWfRun_VariablesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.variables[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parentWfRunId = WfRunId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.cronExpression = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledWfRun {
    return {
      id: isSet(object.id) ? ScheduledWfRunId.fromJSON(object.id) : undefined,
      wfSpecId: isSet(object.wfSpecId) ? WfSpecId.fromJSON(object.wfSpecId) : undefined,
      variables: isObject(object.variables)
        ? Object.entries(object.variables).reduce<{ [key: string]: VariableValue }>((acc, [key, value]) => {
          acc[key] = VariableValue.fromJSON(value);
          return acc;
        }, {})
        : {},
      parentWfRunId: isSet(object.parentWfRunId) ? WfRunId.fromJSON(object.parentWfRunId) : undefined,
      cronExpression: isSet(object.cronExpression) ? globalThis.String(object.cronExpression) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
    };
  },

  toJSON(message: ScheduledWfRun): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ScheduledWfRunId.toJSON(message.id);
    }
    if (message.wfSpecId !== undefined) {
      obj.wfSpecId = WfSpecId.toJSON(message.wfSpecId);
    }
    if (message.variables) {
      const entries = Object.entries(message.variables);
      if (entries.length > 0) {
        obj.variables = {};
        entries.forEach(([k, v]) => {
          obj.variables[k] = VariableValue.toJSON(v);
        });
      }
    }
    if (message.parentWfRunId !== undefined) {
      obj.parentWfRunId = WfRunId.toJSON(message.parentWfRunId);
    }
    if (message.cronExpression !== "") {
      obj.cronExpression = message.cronExpression;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduledWfRun>): ScheduledWfRun {
    return ScheduledWfRun.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduledWfRun>): ScheduledWfRun {
    const message = createBaseScheduledWfRun();
    message.id = (object.id !== undefined && object.id !== null) ? ScheduledWfRunId.fromPartial(object.id) : undefined;
    message.wfSpecId = (object.wfSpecId !== undefined && object.wfSpecId !== null)
      ? WfSpecId.fromPartial(object.wfSpecId)
      : undefined;
    message.variables = Object.entries(object.variables ?? {}).reduce<{ [key: string]: VariableValue }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = VariableValue.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.parentWfRunId = (object.parentWfRunId !== undefined && object.parentWfRunId !== null)
      ? WfRunId.fromPartial(object.parentWfRunId)
      : undefined;
    message.cronExpression = object.cronExpression ?? "";
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseScheduledWfRun_VariablesEntry(): ScheduledWfRun_VariablesEntry {
  return { key: "", value: undefined };
}

export const ScheduledWfRun_VariablesEntry = {
  encode(message: ScheduledWfRun_VariablesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledWfRun_VariablesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledWfRun_VariablesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = VariableValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledWfRun_VariablesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? VariableValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ScheduledWfRun_VariablesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = VariableValue.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduledWfRun_VariablesEntry>): ScheduledWfRun_VariablesEntry {
    return ScheduledWfRun_VariablesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduledWfRun_VariablesEntry>): ScheduledWfRun_VariablesEntry {
    const message = createBaseScheduledWfRun_VariablesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? VariableValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
