// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.1
// source: variable.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";
import { VariableId, WfRunId, WfSpecId } from "./object_id";

/**
 * VariableValue is a structure containing a value in LittleHorse. It can be
 * used to pass input variables into a WfRun/ThreadRun/TaskRun/etc, as output
 * from a TaskRun, as the value of a WfRun's Variable, etc.
 */
export interface VariableValue {
  value?:
    | { $case: "jsonObj"; value: string }
    | { $case: "jsonArr"; value: string }
    | { $case: "double"; value: number }
    | { $case: "bool"; value: boolean }
    | { $case: "str"; value: string }
    | { $case: "int"; value: number }
    | { $case: "bytes"; value: Buffer }
    | { $case: "wfRunId"; value: WfRunId }
    | { $case: "utcTimestamp"; value: string }
    | undefined;
}

/** A Variable is an instance of a variable assigned to a WfRun. */
export interface Variable {
  /**
   * ID of this Variable. Note that the VariableId contains the relevant
   * WfRunId inside it, the threadRunNumber, and the name of the Variabe.
   */
  id:
    | VariableId
    | undefined;
  /** The value of this Variable. */
  value:
    | VariableValue
    | undefined;
  /** When the Variable was created. */
  createdAt:
    | string
    | undefined;
  /** The ID of the WfSpec that this Variable belongs to. */
  wfSpecId:
    | WfSpecId
    | undefined;
  /** Marks a variable to show masked values */
  masked: boolean;
}

function createBaseVariableValue(): VariableValue {
  return { value: undefined };
}

export const VariableValue = {
  encode(message: VariableValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.value?.$case) {
      case "jsonObj":
        writer.uint32(18).string(message.value.value);
        break;
      case "jsonArr":
        writer.uint32(26).string(message.value.value);
        break;
      case "double":
        writer.uint32(33).double(message.value.value);
        break;
      case "bool":
        writer.uint32(40).bool(message.value.value);
        break;
      case "str":
        writer.uint32(50).string(message.value.value);
        break;
      case "int":
        writer.uint32(56).int64(message.value.value);
        break;
      case "bytes":
        writer.uint32(66).bytes(message.value.value);
        break;
      case "wfRunId":
        WfRunId.encode(message.value.value, writer.uint32(74).fork()).ldelim();
        break;
      case "utcTimestamp":
        Timestamp.encode(toTimestamp(message.value.value), writer.uint32(82).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VariableValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariableValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = { $case: "jsonObj", value: reader.string() };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = { $case: "jsonArr", value: reader.string() };
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.value = { $case: "double", value: reader.double() };
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.value = { $case: "bool", value: reader.bool() };
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.value = { $case: "str", value: reader.string() };
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.value = { $case: "int", value: longToNumber(reader.int64() as Long) };
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.value = { $case: "bytes", value: reader.bytes() as Buffer };
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.value = { $case: "wfRunId", value: WfRunId.decode(reader, reader.uint32()) };
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.value = { $case: "utcTimestamp", value: fromTimestamp(Timestamp.decode(reader, reader.uint32())) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VariableValue {
    return {
      value: isSet(object.jsonObj)
        ? { $case: "jsonObj", value: globalThis.String(object.jsonObj) }
        : isSet(object.jsonArr)
        ? { $case: "jsonArr", value: globalThis.String(object.jsonArr) }
        : isSet(object.double)
        ? { $case: "double", value: globalThis.Number(object.double) }
        : isSet(object.bool)
        ? { $case: "bool", value: globalThis.Boolean(object.bool) }
        : isSet(object.str)
        ? { $case: "str", value: globalThis.String(object.str) }
        : isSet(object.int)
        ? { $case: "int", value: globalThis.Number(object.int) }
        : isSet(object.bytes)
        ? { $case: "bytes", value: Buffer.from(bytesFromBase64(object.bytes)) }
        : isSet(object.wfRunId)
        ? { $case: "wfRunId", value: WfRunId.fromJSON(object.wfRunId) }
        : isSet(object.utcTimestamp)
        ? { $case: "utcTimestamp", value: globalThis.String(object.utcTimestamp) }
        : undefined,
    };
  },

  toJSON(message: VariableValue): unknown {
    const obj: any = {};
    if (message.value?.$case === "jsonObj") {
      obj.jsonObj = message.value.value;
    }
    if (message.value?.$case === "jsonArr") {
      obj.jsonArr = message.value.value;
    }
    if (message.value?.$case === "double") {
      obj.double = message.value.value;
    }
    if (message.value?.$case === "bool") {
      obj.bool = message.value.value;
    }
    if (message.value?.$case === "str") {
      obj.str = message.value.value;
    }
    if (message.value?.$case === "int") {
      obj.int = Math.round(message.value.value);
    }
    if (message.value?.$case === "bytes") {
      obj.bytes = base64FromBytes(message.value.value);
    }
    if (message.value?.$case === "wfRunId") {
      obj.wfRunId = WfRunId.toJSON(message.value.value);
    }
    if (message.value?.$case === "utcTimestamp") {
      obj.utcTimestamp = message.value.value;
    }
    return obj;
  },

  create(base?: DeepPartial<VariableValue>): VariableValue {
    return VariableValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VariableValue>): VariableValue {
    const message = createBaseVariableValue();
    if (object.value?.$case === "jsonObj" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "jsonObj", value: object.value.value };
    }
    if (object.value?.$case === "jsonArr" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "jsonArr", value: object.value.value };
    }
    if (object.value?.$case === "double" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "double", value: object.value.value };
    }
    if (object.value?.$case === "bool" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "bool", value: object.value.value };
    }
    if (object.value?.$case === "str" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "str", value: object.value.value };
    }
    if (object.value?.$case === "int" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "int", value: object.value.value };
    }
    if (object.value?.$case === "bytes" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "bytes", value: object.value.value };
    }
    if (object.value?.$case === "wfRunId" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "wfRunId", value: WfRunId.fromPartial(object.value.value) };
    }
    if (object.value?.$case === "utcTimestamp" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "utcTimestamp", value: object.value.value };
    }
    return message;
  },
};

function createBaseVariable(): Variable {
  return { id: undefined, value: undefined, createdAt: undefined, wfSpecId: undefined, masked: false };
}

export const Variable = {
  encode(message: Variable, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      VariableId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.value !== undefined) {
      VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();
    }
    if (message.wfSpecId !== undefined) {
      WfSpecId.encode(message.wfSpecId, writer.uint32(34).fork()).ldelim();
    }
    if (message.masked !== false) {
      writer.uint32(40).bool(message.masked);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Variable {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = VariableId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = VariableValue.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.wfSpecId = WfSpecId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.masked = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Variable {
    return {
      id: isSet(object.id) ? VariableId.fromJSON(object.id) : undefined,
      value: isSet(object.value) ? VariableValue.fromJSON(object.value) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      wfSpecId: isSet(object.wfSpecId) ? WfSpecId.fromJSON(object.wfSpecId) : undefined,
      masked: isSet(object.masked) ? globalThis.Boolean(object.masked) : false,
    };
  },

  toJSON(message: Variable): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = VariableId.toJSON(message.id);
    }
    if (message.value !== undefined) {
      obj.value = VariableValue.toJSON(message.value);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.wfSpecId !== undefined) {
      obj.wfSpecId = WfSpecId.toJSON(message.wfSpecId);
    }
    if (message.masked !== false) {
      obj.masked = message.masked;
    }
    return obj;
  },

  create(base?: DeepPartial<Variable>): Variable {
    return Variable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Variable>): Variable {
    const message = createBaseVariable();
    message.id = (object.id !== undefined && object.id !== null) ? VariableId.fromPartial(object.id) : undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? VariableValue.fromPartial(object.value)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.wfSpecId = (object.wfSpecId !== undefined && object.wfSpecId !== null)
      ? WfSpecId.fromPartial(object.wfSpecId)
      : undefined;
    message.masked = object.masked ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
