// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: external_event.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { ReturnType } from "./common_wfspec";
import { Timestamp } from "./google/protobuf/timestamp";
import { CorrelatedEventId, ExternalEventDefId, ExternalEventId } from "./object_id";
import { VariableValue } from "./variable";

/**
 * An ExternalEvent represents A Thing That Happened outside the context of a WfRun.
 * Generally, an ExternalEvent is used to represent a document getting signed, an incident
 * being resolved, an order being fulfilled, etc.
 *
 * ExternalEvent's are created via the 'rpc PutExternalEvent'
 *
 * For more context on ExternalEvents, check our documentation here:
 * https://littlehorse.io/docs/server/concepts/external-events
 */
export interface ExternalEvent {
  /**
   * The ID of the ExternalEvent. This contains WfRunId, ExternalEventDefId,
   * and a unique guid which can be used for idempotency of the `PutExternalEvent`
   * rpc call.
   */
  id:
    | ExternalEventId
    | undefined;
  /** The time the ExternalEvent was registered with LittleHorse. */
  createdAt:
    | string
    | undefined;
  /** The payload of this ExternalEvent. */
  content:
    | VariableValue
    | undefined;
  /**
   * If the ExternalEvent was claimed by a specific ThreadRun (via Interrupt or
   * EXTERNAL_EVENT Node), this is set to the number of the relevant ThreadRun.
   */
  threadRunNumber?:
    | number
    | undefined;
  /**
   * If the ExternalEvent was claimed by a specific ThreadRun (via EXTERNAL_EVENT
   * Node; note that in the case of an Interrupt the node_run_position will never
   * be set), this is set to the number of the relevant NodeRun.
   */
  nodeRunPosition?:
    | number
    | undefined;
  /** Whether the ExternalEvent has been claimed by a WfRun. */
  claimed: boolean;
}

/** The ExternalEventDef defines the blueprint for an ExternalEvent. */
export interface ExternalEventDef {
  /** The id of the ExternalEventDef. */
  id:
    | ExternalEventDefId
    | undefined;
  /** When the ExternalEventDef was created. */
  createdAt:
    | string
    | undefined;
  /**
   * The retention policy for ExternalEvent's of this ExternalEventDef. This applies to the
   * ExternalEvent **only before** it is matched with a WfRun.
   */
  retentionPolicy:
    | ExternalEventRetentionPolicy
    | undefined;
  /**
   * Schema that validates the content of any ExternalEvent's posted for this ExternalEventDef.
   *
   * It is _optional_ for compatibility purposes: ExternalEventDef's that were created
   * before 0.13.2 will not have a schema. For those `ExternalEventDef`s that do not have
   * a specified type_information, we do not validate the WfSpec's usage of the ExternalEvent
   * nor do we validate the type of `content` in the `rpc PutExternalEvent`.
   */
  typeInformation?:
    | ReturnType
    | undefined;
  /**
   * If not set, then the users cannot use the `rpc PutCorrelatedEvent` to post externalEvents of this
   * type.
   */
  correlatedEventConfig?: CorrelatedEventConfig | undefined;
}

/** Configures behavior of `CorrelatedEvent`s created for a specific `ExternalEventDef`. */
export interface CorrelatedEventConfig {
  /**
   * If ttl_seconds is set, then `CorrelatedEvent`s will be automatically
   * cleaned up based on the provided ttl.
   */
  ttlSeconds?:
    | number
    | undefined;
  /**
   * If true, delete the `CorrelatedEvent` after the first `ExternalEvent` is created.
   * Also, if set, it is implied that only one `WfRun` can ever be correlated
   * to this `CorrelatedEvent`.
   */
  deleteAfterFirstCorrelation: boolean;
}

/**
 * A CorrelatedEvent is a piece of data that has been posted into LittleHorse but is not
 * yet associated with any specific `WfRun`. This allows users to indirectly create
 * `ExternalEvent`s without knowing the `WfRunId` that they are posting the
 * `ExternalEvent` to by taking advantage of the correlation id feature of a
 * `CorrelatedEvent`.
 *
 * CorrelatedEvents also serve as a way to simply store data in LittleHorse.
 */
export interface CorrelatedEvent {
  /** The ID of the CorrelatedEvent */
  id:
    | CorrelatedEventId
    | undefined;
  /** The time at which the `CorrelatedEvent` was created. */
  createdAt:
    | string
    | undefined;
  /** The content of the `CorrelatedEvent`. */
  content:
    | VariableValue
    | undefined;
  /** List of `ExternalEvent`s that have been created for this `CorrelatedEvent`. */
  externalEvents: ExternalEventId[];
}

/**
 * Policy to determine how long an ExternalEvent is retained after creation if it
 * is not yet claimed by a WfRun. Note that once a WfRun has been matched with the
 * ExternalEvent, the ExternalEvent is deleted if/when that WfRun is deleted.
 * If not set, then ExternalEvent's are not deleted if they are not matched with
 * a WfRun.
 *
 * A future version of LittleHorse will allow changing the retention_policy, which
 * will trigger a cleanup of old `ExternalEvent`s.
 */
export interface ExternalEventRetentionPolicy {
  /**
   * Delete such an ExternalEvent X seconds after it has been registered if it
   * has not yet been claimed by a WfRun.
   */
  secondsAfterPut?: number | undefined;
}

function createBaseExternalEvent(): ExternalEvent {
  return {
    id: undefined,
    createdAt: undefined,
    content: undefined,
    threadRunNumber: undefined,
    nodeRunPosition: undefined,
    claimed: false,
  };
}

export const ExternalEvent = {
  encode(message: ExternalEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      ExternalEventId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    if (message.content !== undefined) {
      VariableValue.encode(message.content, writer.uint32(26).fork()).ldelim();
    }
    if (message.threadRunNumber !== undefined) {
      writer.uint32(32).int32(message.threadRunNumber);
    }
    if (message.nodeRunPosition !== undefined) {
      writer.uint32(40).int32(message.nodeRunPosition);
    }
    if (message.claimed !== false) {
      writer.uint32(48).bool(message.claimed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ExternalEventId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = VariableValue.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.threadRunNumber = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.nodeRunPosition = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.claimed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ExternalEvent>): ExternalEvent {
    return ExternalEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalEvent>): ExternalEvent {
    const message = createBaseExternalEvent();
    message.id = (object.id !== undefined && object.id !== null) ? ExternalEventId.fromPartial(object.id) : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? VariableValue.fromPartial(object.content)
      : undefined;
    message.threadRunNumber = object.threadRunNumber ?? undefined;
    message.nodeRunPosition = object.nodeRunPosition ?? undefined;
    message.claimed = object.claimed ?? false;
    return message;
  },
};

function createBaseExternalEventDef(): ExternalEventDef {
  return {
    id: undefined,
    createdAt: undefined,
    retentionPolicy: undefined,
    typeInformation: undefined,
    correlatedEventConfig: undefined,
  };
}

export const ExternalEventDef = {
  encode(message: ExternalEventDef, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      ExternalEventDefId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    if (message.retentionPolicy !== undefined) {
      ExternalEventRetentionPolicy.encode(message.retentionPolicy, writer.uint32(26).fork()).ldelim();
    }
    if (message.typeInformation !== undefined) {
      ReturnType.encode(message.typeInformation, writer.uint32(34).fork()).ldelim();
    }
    if (message.correlatedEventConfig !== undefined) {
      CorrelatedEventConfig.encode(message.correlatedEventConfig, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventDef {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalEventDef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ExternalEventDefId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.retentionPolicy = ExternalEventRetentionPolicy.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.typeInformation = ReturnType.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.correlatedEventConfig = CorrelatedEventConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ExternalEventDef>): ExternalEventDef {
    return ExternalEventDef.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalEventDef>): ExternalEventDef {
    const message = createBaseExternalEventDef();
    message.id = (object.id !== undefined && object.id !== null)
      ? ExternalEventDefId.fromPartial(object.id)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.retentionPolicy = (object.retentionPolicy !== undefined && object.retentionPolicy !== null)
      ? ExternalEventRetentionPolicy.fromPartial(object.retentionPolicy)
      : undefined;
    message.typeInformation = (object.typeInformation !== undefined && object.typeInformation !== null)
      ? ReturnType.fromPartial(object.typeInformation)
      : undefined;
    message.correlatedEventConfig =
      (object.correlatedEventConfig !== undefined && object.correlatedEventConfig !== null)
        ? CorrelatedEventConfig.fromPartial(object.correlatedEventConfig)
        : undefined;
    return message;
  },
};

function createBaseCorrelatedEventConfig(): CorrelatedEventConfig {
  return { ttlSeconds: undefined, deleteAfterFirstCorrelation: false };
}

export const CorrelatedEventConfig = {
  encode(message: CorrelatedEventConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ttlSeconds !== undefined) {
      writer.uint32(8).int64(message.ttlSeconds);
    }
    if (message.deleteAfterFirstCorrelation !== false) {
      writer.uint32(16).bool(message.deleteAfterFirstCorrelation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CorrelatedEventConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCorrelatedEventConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ttlSeconds = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.deleteAfterFirstCorrelation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CorrelatedEventConfig>): CorrelatedEventConfig {
    return CorrelatedEventConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CorrelatedEventConfig>): CorrelatedEventConfig {
    const message = createBaseCorrelatedEventConfig();
    message.ttlSeconds = object.ttlSeconds ?? undefined;
    message.deleteAfterFirstCorrelation = object.deleteAfterFirstCorrelation ?? false;
    return message;
  },
};

function createBaseCorrelatedEvent(): CorrelatedEvent {
  return { id: undefined, createdAt: undefined, content: undefined, externalEvents: [] };
}

export const CorrelatedEvent = {
  encode(message: CorrelatedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      CorrelatedEventId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    if (message.content !== undefined) {
      VariableValue.encode(message.content, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.externalEvents) {
      ExternalEventId.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CorrelatedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCorrelatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = CorrelatedEventId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = VariableValue.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.externalEvents.push(ExternalEventId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CorrelatedEvent>): CorrelatedEvent {
    return CorrelatedEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CorrelatedEvent>): CorrelatedEvent {
    const message = createBaseCorrelatedEvent();
    message.id = (object.id !== undefined && object.id !== null) ? CorrelatedEventId.fromPartial(object.id) : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? VariableValue.fromPartial(object.content)
      : undefined;
    message.externalEvents = object.externalEvents?.map((e) => ExternalEventId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExternalEventRetentionPolicy(): ExternalEventRetentionPolicy {
  return { secondsAfterPut: undefined };
}

export const ExternalEventRetentionPolicy = {
  encode(message: ExternalEventRetentionPolicy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.secondsAfterPut !== undefined) {
      writer.uint32(8).int64(message.secondsAfterPut);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventRetentionPolicy {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalEventRetentionPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.secondsAfterPut = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ExternalEventRetentionPolicy>): ExternalEventRetentionPolicy {
    return ExternalEventRetentionPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalEventRetentionPolicy>): ExternalEventRetentionPolicy {
    const message = createBaseExternalEventRetentionPolicy();
    message.secondsAfterPut = object.secondsAfterPut ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}
