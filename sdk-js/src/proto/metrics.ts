// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.23.4
// source: metrics.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import {
  AggregationType,
  aggregationTypeFromJSON,
  aggregationTypeToJSON,
  aggregationTypeToNumber,
  LHStatus,
  lHStatusFromJSON,
  lHStatusToJSON,
  lHStatusToNumber,
  TaskStatus,
  taskStatusFromJSON,
  taskStatusToJSON,
  taskStatusToNumber,
  UserTaskRunStatus,
  userTaskRunStatusFromJSON,
  userTaskRunStatusToJSON,
  userTaskRunStatusToNumber,
} from "./common_enums";
import { Duration } from "./google/protobuf/duration";
import { Timestamp } from "./google/protobuf/timestamp";
import { MetricId, MetricSpecId, TenantId } from "./object_id";

export interface MetricSpec {
  id: MetricSpecId | undefined;
  createdAt: string | undefined;
  aggregators: Aggregator[];
}

export interface Aggregator {
  windowLength: Duration | undefined;
  type?: { $case: "count"; value: Aggregator_Count } | { $case: "ratio"; value: Aggregator_Ratio } | {
    $case: "latency";
    value: Aggregator_Latency;
  } | undefined;
}

export interface Aggregator_StatusRange {
  type?: { $case: "lhStatus"; value: LHStatusRange } | { $case: "taskRun"; value: TaskRunStatusRange } | {
    $case: "userTaskRun";
    value: UserTaskRunStatusRange;
  } | undefined;
}

export interface Aggregator_Count {
  statusRange?: Aggregator_StatusRange | undefined;
}

export interface Aggregator_Ratio {
  statusRange?: Aggregator_StatusRange | undefined;
}

export interface Aggregator_Latency {
  statusRange?: Aggregator_StatusRange | undefined;
}

export interface LHStatusRange {
  starts: LHStatus;
  ends: LHStatus;
}

export interface TaskRunStatusRange {
  starts: TaskStatus;
  ends: TaskStatus;
}

export interface UserTaskRunStatusRange {
  starts: UserTaskRunStatus;
  ends: UserTaskRunStatus;
}

export interface PartitionMetric {
  id: PartitionMetricId | undefined;
  createdAt: string | undefined;
  activeWindows: PartitionWindowedMetric[];
  windowLength: Duration | undefined;
}

export interface PartitionWindowedMetric {
  value: number;
  windowStart: string | undefined;
  numberOfSamples: number;
}

export interface PartitionMetricId {
  id: MetricSpecId | undefined;
  tenantId: TenantId | undefined;
  aggregationType: AggregationType;
}

/** Metric value for a given MetricId */
export interface Metric {
  /** Unique id of the metric value */
  id: MetricId | undefined;
  value?:
    | { $case: "count"; value: number }
    | { $case: "latencyAvg"; value: number }
    | undefined;
  /** Indicates when the metric was created */
  createdAt: string | undefined;
  valuePerPartition: { [key: number]: number };
}

export interface Metric_ValuePerPartitionEntry {
  key: number;
  value: number;
}

function createBaseMetricSpec(): MetricSpec {
  return { id: undefined, createdAt: undefined, aggregators: [] };
}

export const MetricSpec = {
  encode(message: MetricSpec, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      MetricSpecId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.aggregators) {
      Aggregator.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MetricSpec {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = MetricSpecId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.aggregators.push(Aggregator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricSpec {
    return {
      id: isSet(object.id) ? MetricSpecId.fromJSON(object.id) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      aggregators: globalThis.Array.isArray(object?.aggregators)
        ? object.aggregators.map((e: any) => Aggregator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MetricSpec): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = MetricSpecId.toJSON(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.aggregators?.length) {
      obj.aggregators = message.aggregators.map((e) => Aggregator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MetricSpec>): MetricSpec {
    return MetricSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetricSpec>): MetricSpec {
    const message = createBaseMetricSpec();
    message.id = (object.id !== undefined && object.id !== null) ? MetricSpecId.fromPartial(object.id) : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.aggregators = object.aggregators?.map((e) => Aggregator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAggregator(): Aggregator {
  return { windowLength: undefined, type: undefined };
}

export const Aggregator = {
  encode(message: Aggregator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.windowLength !== undefined) {
      Duration.encode(message.windowLength, writer.uint32(10).fork()).ldelim();
    }
    switch (message.type?.$case) {
      case "count":
        Aggregator_Count.encode(message.type.value, writer.uint32(18).fork()).ldelim();
        break;
      case "ratio":
        Aggregator_Ratio.encode(message.type.value, writer.uint32(26).fork()).ldelim();
        break;
      case "latency":
        Aggregator_Latency.encode(message.type.value, writer.uint32(34).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Aggregator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.windowLength = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = { $case: "count", value: Aggregator_Count.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = { $case: "ratio", value: Aggregator_Ratio.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.type = { $case: "latency", value: Aggregator_Latency.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Aggregator {
    return {
      windowLength: isSet(object.windowLength) ? Duration.fromJSON(object.windowLength) : undefined,
      type: isSet(object.count)
        ? { $case: "count", value: Aggregator_Count.fromJSON(object.count) }
        : isSet(object.ratio)
        ? { $case: "ratio", value: Aggregator_Ratio.fromJSON(object.ratio) }
        : isSet(object.latency)
        ? { $case: "latency", value: Aggregator_Latency.fromJSON(object.latency) }
        : undefined,
    };
  },

  toJSON(message: Aggregator): unknown {
    const obj: any = {};
    if (message.windowLength !== undefined) {
      obj.windowLength = Duration.toJSON(message.windowLength);
    }
    if (message.type?.$case === "count") {
      obj.count = Aggregator_Count.toJSON(message.type.value);
    }
    if (message.type?.$case === "ratio") {
      obj.ratio = Aggregator_Ratio.toJSON(message.type.value);
    }
    if (message.type?.$case === "latency") {
      obj.latency = Aggregator_Latency.toJSON(message.type.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Aggregator>): Aggregator {
    return Aggregator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Aggregator>): Aggregator {
    const message = createBaseAggregator();
    message.windowLength = (object.windowLength !== undefined && object.windowLength !== null)
      ? Duration.fromPartial(object.windowLength)
      : undefined;
    if (object.type?.$case === "count" && object.type?.value !== undefined && object.type?.value !== null) {
      message.type = { $case: "count", value: Aggregator_Count.fromPartial(object.type.value) };
    }
    if (object.type?.$case === "ratio" && object.type?.value !== undefined && object.type?.value !== null) {
      message.type = { $case: "ratio", value: Aggregator_Ratio.fromPartial(object.type.value) };
    }
    if (object.type?.$case === "latency" && object.type?.value !== undefined && object.type?.value !== null) {
      message.type = { $case: "latency", value: Aggregator_Latency.fromPartial(object.type.value) };
    }
    return message;
  },
};

function createBaseAggregator_StatusRange(): Aggregator_StatusRange {
  return { type: undefined };
}

export const Aggregator_StatusRange = {
  encode(message: Aggregator_StatusRange, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.type?.$case) {
      case "lhStatus":
        LHStatusRange.encode(message.type.value, writer.uint32(10).fork()).ldelim();
        break;
      case "taskRun":
        TaskRunStatusRange.encode(message.type.value, writer.uint32(18).fork()).ldelim();
        break;
      case "userTaskRun":
        UserTaskRunStatusRange.encode(message.type.value, writer.uint32(26).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Aggregator_StatusRange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregator_StatusRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = { $case: "lhStatus", value: LHStatusRange.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = { $case: "taskRun", value: TaskRunStatusRange.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = { $case: "userTaskRun", value: UserTaskRunStatusRange.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Aggregator_StatusRange {
    return {
      type: isSet(object.lhStatus)
        ? { $case: "lhStatus", value: LHStatusRange.fromJSON(object.lhStatus) }
        : isSet(object.taskRun)
        ? { $case: "taskRun", value: TaskRunStatusRange.fromJSON(object.taskRun) }
        : isSet(object.userTaskRun)
        ? { $case: "userTaskRun", value: UserTaskRunStatusRange.fromJSON(object.userTaskRun) }
        : undefined,
    };
  },

  toJSON(message: Aggregator_StatusRange): unknown {
    const obj: any = {};
    if (message.type?.$case === "lhStatus") {
      obj.lhStatus = LHStatusRange.toJSON(message.type.value);
    }
    if (message.type?.$case === "taskRun") {
      obj.taskRun = TaskRunStatusRange.toJSON(message.type.value);
    }
    if (message.type?.$case === "userTaskRun") {
      obj.userTaskRun = UserTaskRunStatusRange.toJSON(message.type.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Aggregator_StatusRange>): Aggregator_StatusRange {
    return Aggregator_StatusRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Aggregator_StatusRange>): Aggregator_StatusRange {
    const message = createBaseAggregator_StatusRange();
    if (object.type?.$case === "lhStatus" && object.type?.value !== undefined && object.type?.value !== null) {
      message.type = { $case: "lhStatus", value: LHStatusRange.fromPartial(object.type.value) };
    }
    if (object.type?.$case === "taskRun" && object.type?.value !== undefined && object.type?.value !== null) {
      message.type = { $case: "taskRun", value: TaskRunStatusRange.fromPartial(object.type.value) };
    }
    if (object.type?.$case === "userTaskRun" && object.type?.value !== undefined && object.type?.value !== null) {
      message.type = { $case: "userTaskRun", value: UserTaskRunStatusRange.fromPartial(object.type.value) };
    }
    return message;
  },
};

function createBaseAggregator_Count(): Aggregator_Count {
  return { statusRange: undefined };
}

export const Aggregator_Count = {
  encode(message: Aggregator_Count, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.statusRange !== undefined) {
      Aggregator_StatusRange.encode(message.statusRange, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Aggregator_Count {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregator_Count();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.statusRange = Aggregator_StatusRange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Aggregator_Count {
    return { statusRange: isSet(object.statusRange) ? Aggregator_StatusRange.fromJSON(object.statusRange) : undefined };
  },

  toJSON(message: Aggregator_Count): unknown {
    const obj: any = {};
    if (message.statusRange !== undefined) {
      obj.statusRange = Aggregator_StatusRange.toJSON(message.statusRange);
    }
    return obj;
  },

  create(base?: DeepPartial<Aggregator_Count>): Aggregator_Count {
    return Aggregator_Count.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Aggregator_Count>): Aggregator_Count {
    const message = createBaseAggregator_Count();
    message.statusRange = (object.statusRange !== undefined && object.statusRange !== null)
      ? Aggregator_StatusRange.fromPartial(object.statusRange)
      : undefined;
    return message;
  },
};

function createBaseAggregator_Ratio(): Aggregator_Ratio {
  return { statusRange: undefined };
}

export const Aggregator_Ratio = {
  encode(message: Aggregator_Ratio, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.statusRange !== undefined) {
      Aggregator_StatusRange.encode(message.statusRange, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Aggregator_Ratio {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregator_Ratio();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.statusRange = Aggregator_StatusRange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Aggregator_Ratio {
    return { statusRange: isSet(object.statusRange) ? Aggregator_StatusRange.fromJSON(object.statusRange) : undefined };
  },

  toJSON(message: Aggregator_Ratio): unknown {
    const obj: any = {};
    if (message.statusRange !== undefined) {
      obj.statusRange = Aggregator_StatusRange.toJSON(message.statusRange);
    }
    return obj;
  },

  create(base?: DeepPartial<Aggregator_Ratio>): Aggregator_Ratio {
    return Aggregator_Ratio.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Aggregator_Ratio>): Aggregator_Ratio {
    const message = createBaseAggregator_Ratio();
    message.statusRange = (object.statusRange !== undefined && object.statusRange !== null)
      ? Aggregator_StatusRange.fromPartial(object.statusRange)
      : undefined;
    return message;
  },
};

function createBaseAggregator_Latency(): Aggregator_Latency {
  return { statusRange: undefined };
}

export const Aggregator_Latency = {
  encode(message: Aggregator_Latency, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.statusRange !== undefined) {
      Aggregator_StatusRange.encode(message.statusRange, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Aggregator_Latency {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregator_Latency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.statusRange = Aggregator_StatusRange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Aggregator_Latency {
    return { statusRange: isSet(object.statusRange) ? Aggregator_StatusRange.fromJSON(object.statusRange) : undefined };
  },

  toJSON(message: Aggregator_Latency): unknown {
    const obj: any = {};
    if (message.statusRange !== undefined) {
      obj.statusRange = Aggregator_StatusRange.toJSON(message.statusRange);
    }
    return obj;
  },

  create(base?: DeepPartial<Aggregator_Latency>): Aggregator_Latency {
    return Aggregator_Latency.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Aggregator_Latency>): Aggregator_Latency {
    const message = createBaseAggregator_Latency();
    message.statusRange = (object.statusRange !== undefined && object.statusRange !== null)
      ? Aggregator_StatusRange.fromPartial(object.statusRange)
      : undefined;
    return message;
  },
};

function createBaseLHStatusRange(): LHStatusRange {
  return { starts: LHStatus.STARTING, ends: LHStatus.STARTING };
}

export const LHStatusRange = {
  encode(message: LHStatusRange, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.starts !== LHStatus.STARTING) {
      writer.uint32(8).int32(lHStatusToNumber(message.starts));
    }
    if (message.ends !== LHStatus.STARTING) {
      writer.uint32(16).int32(lHStatusToNumber(message.ends));
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LHStatusRange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLHStatusRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.starts = lHStatusFromJSON(reader.int32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ends = lHStatusFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LHStatusRange {
    return {
      starts: isSet(object.starts) ? lHStatusFromJSON(object.starts) : LHStatus.STARTING,
      ends: isSet(object.ends) ? lHStatusFromJSON(object.ends) : LHStatus.STARTING,
    };
  },

  toJSON(message: LHStatusRange): unknown {
    const obj: any = {};
    if (message.starts !== LHStatus.STARTING) {
      obj.starts = lHStatusToJSON(message.starts);
    }
    if (message.ends !== LHStatus.STARTING) {
      obj.ends = lHStatusToJSON(message.ends);
    }
    return obj;
  },

  create(base?: DeepPartial<LHStatusRange>): LHStatusRange {
    return LHStatusRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LHStatusRange>): LHStatusRange {
    const message = createBaseLHStatusRange();
    message.starts = object.starts ?? LHStatus.STARTING;
    message.ends = object.ends ?? LHStatus.STARTING;
    return message;
  },
};

function createBaseTaskRunStatusRange(): TaskRunStatusRange {
  return { starts: TaskStatus.TASK_SCHEDULED, ends: TaskStatus.TASK_SCHEDULED };
}

export const TaskRunStatusRange = {
  encode(message: TaskRunStatusRange, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.starts !== TaskStatus.TASK_SCHEDULED) {
      writer.uint32(8).int32(taskStatusToNumber(message.starts));
    }
    if (message.ends !== TaskStatus.TASK_SCHEDULED) {
      writer.uint32(16).int32(taskStatusToNumber(message.ends));
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TaskRunStatusRange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskRunStatusRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.starts = taskStatusFromJSON(reader.int32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ends = taskStatusFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskRunStatusRange {
    return {
      starts: isSet(object.starts) ? taskStatusFromJSON(object.starts) : TaskStatus.TASK_SCHEDULED,
      ends: isSet(object.ends) ? taskStatusFromJSON(object.ends) : TaskStatus.TASK_SCHEDULED,
    };
  },

  toJSON(message: TaskRunStatusRange): unknown {
    const obj: any = {};
    if (message.starts !== TaskStatus.TASK_SCHEDULED) {
      obj.starts = taskStatusToJSON(message.starts);
    }
    if (message.ends !== TaskStatus.TASK_SCHEDULED) {
      obj.ends = taskStatusToJSON(message.ends);
    }
    return obj;
  },

  create(base?: DeepPartial<TaskRunStatusRange>): TaskRunStatusRange {
    return TaskRunStatusRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskRunStatusRange>): TaskRunStatusRange {
    const message = createBaseTaskRunStatusRange();
    message.starts = object.starts ?? TaskStatus.TASK_SCHEDULED;
    message.ends = object.ends ?? TaskStatus.TASK_SCHEDULED;
    return message;
  },
};

function createBaseUserTaskRunStatusRange(): UserTaskRunStatusRange {
  return { starts: UserTaskRunStatus.UNASSIGNED, ends: UserTaskRunStatus.UNASSIGNED };
}

export const UserTaskRunStatusRange = {
  encode(message: UserTaskRunStatusRange, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.starts !== UserTaskRunStatus.UNASSIGNED) {
      writer.uint32(8).int32(userTaskRunStatusToNumber(message.starts));
    }
    if (message.ends !== UserTaskRunStatus.UNASSIGNED) {
      writer.uint32(16).int32(userTaskRunStatusToNumber(message.ends));
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRunStatusRange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserTaskRunStatusRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.starts = userTaskRunStatusFromJSON(reader.int32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ends = userTaskRunStatusFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserTaskRunStatusRange {
    return {
      starts: isSet(object.starts) ? userTaskRunStatusFromJSON(object.starts) : UserTaskRunStatus.UNASSIGNED,
      ends: isSet(object.ends) ? userTaskRunStatusFromJSON(object.ends) : UserTaskRunStatus.UNASSIGNED,
    };
  },

  toJSON(message: UserTaskRunStatusRange): unknown {
    const obj: any = {};
    if (message.starts !== UserTaskRunStatus.UNASSIGNED) {
      obj.starts = userTaskRunStatusToJSON(message.starts);
    }
    if (message.ends !== UserTaskRunStatus.UNASSIGNED) {
      obj.ends = userTaskRunStatusToJSON(message.ends);
    }
    return obj;
  },

  create(base?: DeepPartial<UserTaskRunStatusRange>): UserTaskRunStatusRange {
    return UserTaskRunStatusRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserTaskRunStatusRange>): UserTaskRunStatusRange {
    const message = createBaseUserTaskRunStatusRange();
    message.starts = object.starts ?? UserTaskRunStatus.UNASSIGNED;
    message.ends = object.ends ?? UserTaskRunStatus.UNASSIGNED;
    return message;
  },
};

function createBasePartitionMetric(): PartitionMetric {
  return { id: undefined, createdAt: undefined, activeWindows: [], windowLength: undefined };
}

export const PartitionMetric = {
  encode(message: PartitionMetric, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      PartitionMetricId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.activeWindows) {
      PartitionWindowedMetric.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.windowLength !== undefined) {
      Duration.encode(message.windowLength, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PartitionMetric {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartitionMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = PartitionMetricId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.activeWindows.push(PartitionWindowedMetric.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.windowLength = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartitionMetric {
    return {
      id: isSet(object.id) ? PartitionMetricId.fromJSON(object.id) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      activeWindows: globalThis.Array.isArray(object?.activeWindows)
        ? object.activeWindows.map((e: any) => PartitionWindowedMetric.fromJSON(e))
        : [],
      windowLength: isSet(object.windowLength) ? Duration.fromJSON(object.windowLength) : undefined,
    };
  },

  toJSON(message: PartitionMetric): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = PartitionMetricId.toJSON(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.activeWindows?.length) {
      obj.activeWindows = message.activeWindows.map((e) => PartitionWindowedMetric.toJSON(e));
    }
    if (message.windowLength !== undefined) {
      obj.windowLength = Duration.toJSON(message.windowLength);
    }
    return obj;
  },

  create(base?: DeepPartial<PartitionMetric>): PartitionMetric {
    return PartitionMetric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartitionMetric>): PartitionMetric {
    const message = createBasePartitionMetric();
    message.id = (object.id !== undefined && object.id !== null) ? PartitionMetricId.fromPartial(object.id) : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.activeWindows = object.activeWindows?.map((e) => PartitionWindowedMetric.fromPartial(e)) || [];
    message.windowLength = (object.windowLength !== undefined && object.windowLength !== null)
      ? Duration.fromPartial(object.windowLength)
      : undefined;
    return message;
  },
};

function createBasePartitionWindowedMetric(): PartitionWindowedMetric {
  return { value: 0, windowStart: undefined, numberOfSamples: 0 };
}

export const PartitionWindowedMetric = {
  encode(message: PartitionWindowedMetric, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    if (message.windowStart !== undefined) {
      Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(18).fork()).ldelim();
    }
    if (message.numberOfSamples !== 0) {
      writer.uint32(24).int64(message.numberOfSamples);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PartitionWindowedMetric {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartitionWindowedMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.windowStart = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.numberOfSamples = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartitionWindowedMetric {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      windowStart: isSet(object.windowStart) ? globalThis.String(object.windowStart) : undefined,
      numberOfSamples: isSet(object.numberOfSamples) ? globalThis.Number(object.numberOfSamples) : 0,
    };
  },

  toJSON(message: PartitionWindowedMetric): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.windowStart !== undefined) {
      obj.windowStart = message.windowStart;
    }
    if (message.numberOfSamples !== 0) {
      obj.numberOfSamples = Math.round(message.numberOfSamples);
    }
    return obj;
  },

  create(base?: DeepPartial<PartitionWindowedMetric>): PartitionWindowedMetric {
    return PartitionWindowedMetric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartitionWindowedMetric>): PartitionWindowedMetric {
    const message = createBasePartitionWindowedMetric();
    message.value = object.value ?? 0;
    message.windowStart = object.windowStart ?? undefined;
    message.numberOfSamples = object.numberOfSamples ?? 0;
    return message;
  },
};

function createBasePartitionMetricId(): PartitionMetricId {
  return { id: undefined, tenantId: undefined, aggregationType: AggregationType.COUNT };
}

export const PartitionMetricId = {
  encode(message: PartitionMetricId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      MetricSpecId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.tenantId !== undefined) {
      TenantId.encode(message.tenantId, writer.uint32(18).fork()).ldelim();
    }
    if (message.aggregationType !== AggregationType.COUNT) {
      writer.uint32(24).int32(aggregationTypeToNumber(message.aggregationType));
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PartitionMetricId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartitionMetricId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = MetricSpecId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tenantId = TenantId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.aggregationType = aggregationTypeFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartitionMetricId {
    return {
      id: isSet(object.id) ? MetricSpecId.fromJSON(object.id) : undefined,
      tenantId: isSet(object.tenantId) ? TenantId.fromJSON(object.tenantId) : undefined,
      aggregationType: isSet(object.aggregationType)
        ? aggregationTypeFromJSON(object.aggregationType)
        : AggregationType.COUNT,
    };
  },

  toJSON(message: PartitionMetricId): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = MetricSpecId.toJSON(message.id);
    }
    if (message.tenantId !== undefined) {
      obj.tenantId = TenantId.toJSON(message.tenantId);
    }
    if (message.aggregationType !== AggregationType.COUNT) {
      obj.aggregationType = aggregationTypeToJSON(message.aggregationType);
    }
    return obj;
  },

  create(base?: DeepPartial<PartitionMetricId>): PartitionMetricId {
    return PartitionMetricId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartitionMetricId>): PartitionMetricId {
    const message = createBasePartitionMetricId();
    message.id = (object.id !== undefined && object.id !== null) ? MetricSpecId.fromPartial(object.id) : undefined;
    message.tenantId = (object.tenantId !== undefined && object.tenantId !== null)
      ? TenantId.fromPartial(object.tenantId)
      : undefined;
    message.aggregationType = object.aggregationType ?? AggregationType.COUNT;
    return message;
  },
};

function createBaseMetric(): Metric {
  return { id: undefined, value: undefined, createdAt: undefined, valuePerPartition: {} };
}

export const Metric = {
  encode(message: Metric, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      MetricId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    switch (message.value?.$case) {
      case "count":
        writer.uint32(16).int64(message.value.value);
        break;
      case "latencyAvg":
        writer.uint32(24).int64(message.value.value);
        break;
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    Object.entries(message.valuePerPartition).forEach(([key, value]) => {
      Metric_ValuePerPartitionEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Metric {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = MetricId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = { $case: "count", value: longToNumber(reader.int64() as Long) };
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.value = { $case: "latencyAvg", value: longToNumber(reader.int64() as Long) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Metric_ValuePerPartitionEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.valuePerPartition[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metric {
    return {
      id: isSet(object.id) ? MetricId.fromJSON(object.id) : undefined,
      value: isSet(object.count)
        ? { $case: "count", value: globalThis.Number(object.count) }
        : isSet(object.latencyAvg)
        ? { $case: "latencyAvg", value: globalThis.Number(object.latencyAvg) }
        : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      valuePerPartition: isObject(object.valuePerPartition)
        ? Object.entries(object.valuePerPartition).reduce<{ [key: number]: number }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Metric): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = MetricId.toJSON(message.id);
    }
    if (message.value?.$case === "count") {
      obj.count = Math.round(message.value.value);
    }
    if (message.value?.$case === "latencyAvg") {
      obj.latencyAvg = Math.round(message.value.value);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.valuePerPartition) {
      const entries = Object.entries(message.valuePerPartition);
      if (entries.length > 0) {
        obj.valuePerPartition = {};
        entries.forEach(([k, v]) => {
          obj.valuePerPartition[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Metric>): Metric {
    return Metric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Metric>): Metric {
    const message = createBaseMetric();
    message.id = (object.id !== undefined && object.id !== null) ? MetricId.fromPartial(object.id) : undefined;
    if (object.value?.$case === "count" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "count", value: object.value.value };
    }
    if (object.value?.$case === "latencyAvg" && object.value?.value !== undefined && object.value?.value !== null) {
      message.value = { $case: "latencyAvg", value: object.value.value };
    }
    message.createdAt = object.createdAt ?? undefined;
    message.valuePerPartition = Object.entries(object.valuePerPartition ?? {}).reduce<{ [key: number]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseMetric_ValuePerPartitionEntry(): Metric_ValuePerPartitionEntry {
  return { key: 0, value: 0 };
}

export const Metric_ValuePerPartitionEntry = {
  encode(message: Metric_ValuePerPartitionEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Metric_ValuePerPartitionEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetric_ValuePerPartitionEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metric_ValuePerPartitionEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Metric_ValuePerPartitionEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Metric_ValuePerPartitionEntry>): Metric_ValuePerPartitionEntry {
    return Metric_ValuePerPartitionEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Metric_ValuePerPartitionEntry>): Metric_ValuePerPartitionEntry {
    const message = createBaseMetric_ValuePerPartitionEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
