// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: metrics.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Duration } from "./google/protobuf/duration";
import { Timestamp } from "./google/protobuf/timestamp";
import { MetricId, MetricRunId, TenantId } from "./object_id";

export interface Metric {
  id: MetricId | undefined;
  createdAt: string | undefined;
  windowLength: Duration | undefined;
}

export interface PartitionMetric {
  id: PartitionMetricId | undefined;
  createdAt: string | undefined;
  activeWindows: PartitionWindowedMetric[];
  windowLength: Duration | undefined;
}

export interface PartitionWindowedMetric {
  value: number;
  windowStart: string | undefined;
}

export interface PartitionMetricId {
  id: MetricId | undefined;
  tenantId: TenantId | undefined;
}

export interface MetricRun {
  id: MetricRunId | undefined;
  value: number;
  createdAt: string | undefined;
}

function createBaseMetric(): Metric {
  return { id: undefined, createdAt: undefined, windowLength: undefined };
}

export const Metric = {
  encode(message: Metric, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      MetricId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    if (message.windowLength !== undefined) {
      Duration.encode(message.windowLength, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Metric {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = MetricId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.windowLength = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Metric>): Metric {
    return Metric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Metric>): Metric {
    const message = createBaseMetric();
    message.id = (object.id !== undefined && object.id !== null) ? MetricId.fromPartial(object.id) : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.windowLength = (object.windowLength !== undefined && object.windowLength !== null)
      ? Duration.fromPartial(object.windowLength)
      : undefined;
    return message;
  },
};

function createBasePartitionMetric(): PartitionMetric {
  return { id: undefined, createdAt: undefined, activeWindows: [], windowLength: undefined };
}

export const PartitionMetric = {
  encode(message: PartitionMetric, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      PartitionMetricId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.activeWindows) {
      PartitionWindowedMetric.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.windowLength !== undefined) {
      Duration.encode(message.windowLength, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PartitionMetric {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartitionMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = PartitionMetricId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.activeWindows.push(PartitionWindowedMetric.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.windowLength = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PartitionMetric>): PartitionMetric {
    return PartitionMetric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartitionMetric>): PartitionMetric {
    const message = createBasePartitionMetric();
    message.id = (object.id !== undefined && object.id !== null) ? PartitionMetricId.fromPartial(object.id) : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.activeWindows = object.activeWindows?.map((e) => PartitionWindowedMetric.fromPartial(e)) || [];
    message.windowLength = (object.windowLength !== undefined && object.windowLength !== null)
      ? Duration.fromPartial(object.windowLength)
      : undefined;
    return message;
  },
};

function createBasePartitionWindowedMetric(): PartitionWindowedMetric {
  return { value: 0, windowStart: undefined };
}

export const PartitionWindowedMetric = {
  encode(message: PartitionWindowedMetric, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    if (message.windowStart !== undefined) {
      Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PartitionWindowedMetric {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartitionWindowedMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.windowStart = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PartitionWindowedMetric>): PartitionWindowedMetric {
    return PartitionWindowedMetric.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartitionWindowedMetric>): PartitionWindowedMetric {
    const message = createBasePartitionWindowedMetric();
    message.value = object.value ?? 0;
    message.windowStart = object.windowStart ?? undefined;
    return message;
  },
};

function createBasePartitionMetricId(): PartitionMetricId {
  return { id: undefined, tenantId: undefined };
}

export const PartitionMetricId = {
  encode(message: PartitionMetricId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      MetricId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.tenantId !== undefined) {
      TenantId.encode(message.tenantId, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PartitionMetricId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartitionMetricId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = MetricId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tenantId = TenantId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PartitionMetricId>): PartitionMetricId {
    return PartitionMetricId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PartitionMetricId>): PartitionMetricId {
    const message = createBasePartitionMetricId();
    message.id = (object.id !== undefined && object.id !== null) ? MetricId.fromPartial(object.id) : undefined;
    message.tenantId = (object.tenantId !== undefined && object.tenantId !== null)
      ? TenantId.fromPartial(object.tenantId)
      : undefined;
    return message;
  },
};

function createBaseMetricRun(): MetricRun {
  return { id: undefined, value: 0, createdAt: undefined };
}

export const MetricRun = {
  encode(message: MetricRun, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      MetricRunId.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MetricRun {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricRun();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = MetricRunId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MetricRun>): MetricRun {
    return MetricRun.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetricRun>): MetricRun {
    const message = createBaseMetricRun();
    message.id = (object.id !== undefined && object.id !== null) ? MetricRunId.fromPartial(object.id) : undefined;
    message.value = object.value ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}
