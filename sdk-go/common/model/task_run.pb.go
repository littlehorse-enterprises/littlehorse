// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: task_run.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A TaskRun resents a single instance of a TaskDef being executed.
type TaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
	Id *TaskRunId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the TaskDef being executed.
	TaskDefId *TaskDefId `protobuf:"bytes,2,opt,name=task_def_id,json=taskDefId,proto3" json:"task_def_id,omitempty"`
	// All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
	// the TaskRun being put on a Task Queue to be executed by the Task Workers.
	Attempts []*TaskAttempt `protobuf:"bytes,3,rep,name=attempts,proto3" json:"attempts,omitempty"`
	// The maximum number of attempts that may be scheduled for this TaskRun.
	MaxAttempts int32 `protobuf:"varint,4,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// The input variables to pass into this TaskRun. Note that this is a list and not
	// a map, because ordering matters. Depending on the language implementation, not
	// every LittleHorse Task Worker SDK has the ability to determine the names of the
	// variables from the method signature, so we provide both names and ordering.
	InputVariables []*VarNameAndVal `protobuf:"bytes,5,rep,name=input_variables,json=inputVariables,proto3" json:"input_variables,omitempty"`
	// The source (in the WfRun) that caused this TaskRun to be created. Currently, this
	// can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
	// as a task used to send reminders).
	Source *TaskRunSource `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// When the TaskRun was scheduled.
	ScheduledAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// The status of the TaskRun.
	Status TaskStatus `protobuf:"varint,8,opt,name=status,proto3,enum=littlehorse.TaskStatus" json:"status,omitempty"`
	// The timeout before LH considers a TaskAttempt to be timed out.
	TimeoutSeconds int32 `protobuf:"varint,9,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *TaskRun) Reset() {
	*x = TaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_run_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun) ProtoMessage() {}

func (x *TaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_task_run_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun.ProtoReflect.Descriptor instead.
func (*TaskRun) Descriptor() ([]byte, []int) {
	return file_task_run_proto_rawDescGZIP(), []int{0}
}

func (x *TaskRun) GetId() *TaskRunId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskRun) GetTaskDefId() *TaskDefId {
	if x != nil {
		return x.TaskDefId
	}
	return nil
}

func (x *TaskRun) GetAttempts() []*TaskAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *TaskRun) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *TaskRun) GetInputVariables() []*VarNameAndVal {
	if x != nil {
		return x.InputVariables
	}
	return nil
}

func (x *TaskRun) GetSource() *TaskRunSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TaskRun) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *TaskRun) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_SCHEDULED
}

func (x *TaskRun) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

// A key-value pair of variable name and value.
type VarNameAndVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The variable name.
	VarName string `protobuf:"bytes,1,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	// The value of the variable for this TaskRun.
	Value *VariableValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VarNameAndVal) Reset() {
	*x = VarNameAndVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_run_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarNameAndVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarNameAndVal) ProtoMessage() {}

func (x *VarNameAndVal) ProtoReflect() protoreflect.Message {
	mi := &file_task_run_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarNameAndVal.ProtoReflect.Descriptor instead.
func (*VarNameAndVal) Descriptor() ([]byte, []int) {
	return file_task_run_proto_rawDescGZIP(), []int{1}
}

func (x *VarNameAndVal) GetVarName() string {
	if x != nil {
		return x.VarName
	}
	return ""
}

func (x *VarNameAndVal) GetValue() *VariableValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// A single time that a TaskRun was scheduled for execution on a Task Queue.
type TaskAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional information provided by the Task Worker SDK for debugging. Usually, if set
	// it contains a stacktrace or it contains information logged via `WorkerContext#log()`.
	LogOutput *VariableValue `protobuf:"bytes,2,opt,name=log_output,json=logOutput,proto3,oneof" json:"log_output,omitempty"`
	// The time the TaskAttempt was scheduled on the Task Queue.
	ScheduleTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=schedule_time,json=scheduleTime,proto3,oneof" json:"schedule_time,omitempty"`
	// The time the TaskAttempt was pulled off the queue and sent to a TaskWorker.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	// The time the TaskAttempt was finished (either completed, reported as failed, or
	// timed out)
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// EXPERIMENTAL: the ID of the Task Worker who executed this TaskRun.
	TaskWorkerId string `protobuf:"bytes,7,opt,name=task_worker_id,json=taskWorkerId,proto3" json:"task_worker_id,omitempty"`
	// The version of the Task Worker that executed the TaskAttempt.
	TaskWorkerVersion *string `protobuf:"bytes,8,opt,name=task_worker_version,json=taskWorkerVersion,proto3,oneof" json:"task_worker_version,omitempty"`
	// The status of this TaskAttempt.
	Status TaskStatus `protobuf:"varint,9,opt,name=status,proto3,enum=littlehorse.TaskStatus" json:"status,omitempty"`
	// The result of this TaskAttempt. Can either be a successful run which returns an
	// output value, a technical ERROR which returns a LHTaskError, or the Task Function
	// can throw a business EXCEPTION (eg. `credit-card-declined`).
	//
	// Types that are assignable to Result:
	//	*TaskAttempt_Output
	//	*TaskAttempt_Error
	//	*TaskAttempt_Exception
	Result isTaskAttempt_Result `protobuf_oneof:"result"`
}

func (x *TaskAttempt) Reset() {
	*x = TaskAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_run_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttempt) ProtoMessage() {}

func (x *TaskAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_task_run_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttempt.ProtoReflect.Descriptor instead.
func (*TaskAttempt) Descriptor() ([]byte, []int) {
	return file_task_run_proto_rawDescGZIP(), []int{2}
}

func (x *TaskAttempt) GetLogOutput() *VariableValue {
	if x != nil {
		return x.LogOutput
	}
	return nil
}

func (x *TaskAttempt) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

func (x *TaskAttempt) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskAttempt) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskAttempt) GetTaskWorkerId() string {
	if x != nil {
		return x.TaskWorkerId
	}
	return ""
}

func (x *TaskAttempt) GetTaskWorkerVersion() string {
	if x != nil && x.TaskWorkerVersion != nil {
		return *x.TaskWorkerVersion
	}
	return ""
}

func (x *TaskAttempt) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_SCHEDULED
}

func (m *TaskAttempt) GetResult() isTaskAttempt_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *TaskAttempt) GetOutput() *VariableValue {
	if x, ok := x.GetResult().(*TaskAttempt_Output); ok {
		return x.Output
	}
	return nil
}

func (x *TaskAttempt) GetError() *LHTaskError {
	if x, ok := x.GetResult().(*TaskAttempt_Error); ok {
		return x.Error
	}
	return nil
}

func (x *TaskAttempt) GetException() *LHTaskException {
	if x, ok := x.GetResult().(*TaskAttempt_Exception); ok {
		return x.Exception
	}
	return nil
}

type isTaskAttempt_Result interface {
	isTaskAttempt_Result()
}

type TaskAttempt_Output struct {
	// Denotes the Task Function executed properly and returned an output.
	Output *VariableValue `protobuf:"bytes,1,opt,name=output,proto3,oneof"`
}

type TaskAttempt_Error struct {
	// An unexpected technical error was encountered. May or may not be retriable.
	Error *LHTaskError `protobuf:"bytes,10,opt,name=error,proto3,oneof"`
}

type TaskAttempt_Exception struct {
	// The Task Function encountered a business problem and threw a technical exception.
	Exception *LHTaskException `protobuf:"bytes,11,opt,name=exception,proto3,oneof"`
}

func (*TaskAttempt_Output) isTaskAttempt_Result() {}

func (*TaskAttempt_Error) isTaskAttempt_Result() {}

func (*TaskAttempt_Exception) isTaskAttempt_Result() {}

// The source of a TaskRun; i.e. why it was scheduled.
type TaskRunSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of the TaskRun.
	//
	// Types that are assignable to TaskRunSource:
	//	*TaskRunSource_TaskNode
	//	*TaskRunSource_UserTaskTrigger
	TaskRunSource isTaskRunSource_TaskRunSource `protobuf_oneof:"task_run_source"`
	// The ID of the WfSpec that is being executed. Always set in ScheduledTask.source so
	// that the WorkerContext can know this information.
	WfSpecId *WfSpecId `protobuf:"bytes,3,opt,name=wf_spec_id,json=wfSpecId,proto3,oneof" json:"wf_spec_id,omitempty"`
}

func (x *TaskRunSource) Reset() {
	*x = TaskRunSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_run_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRunSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSource) ProtoMessage() {}

func (x *TaskRunSource) ProtoReflect() protoreflect.Message {
	mi := &file_task_run_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSource.ProtoReflect.Descriptor instead.
func (*TaskRunSource) Descriptor() ([]byte, []int) {
	return file_task_run_proto_rawDescGZIP(), []int{3}
}

func (m *TaskRunSource) GetTaskRunSource() isTaskRunSource_TaskRunSource {
	if m != nil {
		return m.TaskRunSource
	}
	return nil
}

func (x *TaskRunSource) GetTaskNode() *TaskNodeReference {
	if x, ok := x.GetTaskRunSource().(*TaskRunSource_TaskNode); ok {
		return x.TaskNode
	}
	return nil
}

func (x *TaskRunSource) GetUserTaskTrigger() *UserTaskTriggerReference {
	if x, ok := x.GetTaskRunSource().(*TaskRunSource_UserTaskTrigger); ok {
		return x.UserTaskTrigger
	}
	return nil
}

func (x *TaskRunSource) GetWfSpecId() *WfSpecId {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

type isTaskRunSource_TaskRunSource interface {
	isTaskRunSource_TaskRunSource()
}

type TaskRunSource_TaskNode struct {
	// Reference to a NodeRun of type TASK which scheduled this TaskRun.
	TaskNode *TaskNodeReference `protobuf:"bytes,1,opt,name=task_node,json=taskNode,proto3,oneof"`
}

type TaskRunSource_UserTaskTrigger struct {
	// Reference to the specific UserTaskRun trigger action which scheduled this TaskRun
	UserTaskTrigger *UserTaskTriggerReference `protobuf:"bytes,2,opt,name=user_task_trigger,json=userTaskTrigger,proto3,oneof"`
}

func (*TaskRunSource_TaskNode) isTaskRunSource_TaskRunSource() {}

func (*TaskRunSource_UserTaskTrigger) isTaskRunSource_TaskRunSource() {}

// Reference to a NodeRun of type TASK which caused a TaskRun to be scheduled.
type TaskNodeReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the NodeRun which caused this TASK to be scheduled.
	NodeRunId *NodeRunId `protobuf:"bytes,1,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
}

func (x *TaskNodeReference) Reset() {
	*x = TaskNodeReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_run_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNodeReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNodeReference) ProtoMessage() {}

func (x *TaskNodeReference) ProtoReflect() protoreflect.Message {
	mi := &file_task_run_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNodeReference.ProtoReflect.Descriptor instead.
func (*TaskNodeReference) Descriptor() ([]byte, []int) {
	return file_task_run_proto_rawDescGZIP(), []int{4}
}

func (x *TaskNodeReference) GetNodeRunId() *NodeRunId {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

// Message denoting a TaskRun failed for technical reasons.
type LHTaskError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The technical error code.
	Type LHErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=littlehorse.LHErrorType" json:"type,omitempty"`
	// Human readable message for debugging.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LHTaskError) Reset() {
	*x = LHTaskError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_run_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHTaskError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHTaskError) ProtoMessage() {}

func (x *LHTaskError) ProtoReflect() protoreflect.Message {
	mi := &file_task_run_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHTaskError.ProtoReflect.Descriptor instead.
func (*LHTaskError) Descriptor() ([]byte, []int) {
	return file_task_run_proto_rawDescGZIP(), []int{5}
}

func (x *LHTaskError) GetType() LHErrorType {
	if x != nil {
		return x.Type
	}
	return LHErrorType_CHILD_FAILURE
}

func (x *LHTaskError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message denoting a TaskRun's execution signaled that something went wrong in the
// business process, throwing a littlehorse 'EXCEPTION'.
type LHTaskException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user-defined Failure name, for example, "credit-card-declined"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Human readadble description of the failure.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LHTaskException) Reset() {
	*x = LHTaskException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_run_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHTaskException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHTaskException) ProtoMessage() {}

func (x *LHTaskException) ProtoReflect() protoreflect.Message {
	mi := &file_task_run_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHTaskException.ProtoReflect.Descriptor instead.
func (*LHTaskException) Descriptor() ([]byte, []int) {
	return file_task_run_proto_rawDescGZIP(), []int{6}
}

func (x *LHTaskException) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LHTaskException) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_task_run_proto protoreflect.FileDescriptor

var file_task_run_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x03, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x52,
	0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x0d,
	0x56, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa0, 0x05, 0x0a, 0x0b, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52,
	0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x48, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xff, 0x01,
	0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x53,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x48, 0x01,
	0x52, 0x08, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x22,
	0x4b, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x0b,
	0x4c, 0x48, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x4c, 0x48, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x47, 0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0xaa, 0x02, 0x18, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_run_proto_rawDescOnce sync.Once
	file_task_run_proto_rawDescData = file_task_run_proto_rawDesc
)

func file_task_run_proto_rawDescGZIP() []byte {
	file_task_run_proto_rawDescOnce.Do(func() {
		file_task_run_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_run_proto_rawDescData)
	})
	return file_task_run_proto_rawDescData
}

var file_task_run_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_task_run_proto_goTypes = []interface{}{
	(*TaskRun)(nil),                  // 0: littlehorse.TaskRun
	(*VarNameAndVal)(nil),            // 1: littlehorse.VarNameAndVal
	(*TaskAttempt)(nil),              // 2: littlehorse.TaskAttempt
	(*TaskRunSource)(nil),            // 3: littlehorse.TaskRunSource
	(*TaskNodeReference)(nil),        // 4: littlehorse.TaskNodeReference
	(*LHTaskError)(nil),              // 5: littlehorse.LHTaskError
	(*LHTaskException)(nil),          // 6: littlehorse.LHTaskException
	(*TaskRunId)(nil),                // 7: littlehorse.TaskRunId
	(*TaskDefId)(nil),                // 8: littlehorse.TaskDefId
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
	(TaskStatus)(0),                  // 10: littlehorse.TaskStatus
	(*VariableValue)(nil),            // 11: littlehorse.VariableValue
	(*UserTaskTriggerReference)(nil), // 12: littlehorse.UserTaskTriggerReference
	(*WfSpecId)(nil),                 // 13: littlehorse.WfSpecId
	(*NodeRunId)(nil),                // 14: littlehorse.NodeRunId
	(LHErrorType)(0),                 // 15: littlehorse.LHErrorType
}
var file_task_run_proto_depIdxs = []int32{
	7,  // 0: littlehorse.TaskRun.id:type_name -> littlehorse.TaskRunId
	8,  // 1: littlehorse.TaskRun.task_def_id:type_name -> littlehorse.TaskDefId
	2,  // 2: littlehorse.TaskRun.attempts:type_name -> littlehorse.TaskAttempt
	1,  // 3: littlehorse.TaskRun.input_variables:type_name -> littlehorse.VarNameAndVal
	3,  // 4: littlehorse.TaskRun.source:type_name -> littlehorse.TaskRunSource
	9,  // 5: littlehorse.TaskRun.scheduled_at:type_name -> google.protobuf.Timestamp
	10, // 6: littlehorse.TaskRun.status:type_name -> littlehorse.TaskStatus
	11, // 7: littlehorse.VarNameAndVal.value:type_name -> littlehorse.VariableValue
	11, // 8: littlehorse.TaskAttempt.log_output:type_name -> littlehorse.VariableValue
	9,  // 9: littlehorse.TaskAttempt.schedule_time:type_name -> google.protobuf.Timestamp
	9,  // 10: littlehorse.TaskAttempt.start_time:type_name -> google.protobuf.Timestamp
	9,  // 11: littlehorse.TaskAttempt.end_time:type_name -> google.protobuf.Timestamp
	10, // 12: littlehorse.TaskAttempt.status:type_name -> littlehorse.TaskStatus
	11, // 13: littlehorse.TaskAttempt.output:type_name -> littlehorse.VariableValue
	5,  // 14: littlehorse.TaskAttempt.error:type_name -> littlehorse.LHTaskError
	6,  // 15: littlehorse.TaskAttempt.exception:type_name -> littlehorse.LHTaskException
	4,  // 16: littlehorse.TaskRunSource.task_node:type_name -> littlehorse.TaskNodeReference
	12, // 17: littlehorse.TaskRunSource.user_task_trigger:type_name -> littlehorse.UserTaskTriggerReference
	13, // 18: littlehorse.TaskRunSource.wf_spec_id:type_name -> littlehorse.WfSpecId
	14, // 19: littlehorse.TaskNodeReference.node_run_id:type_name -> littlehorse.NodeRunId
	15, // 20: littlehorse.LHTaskError.type:type_name -> littlehorse.LHErrorType
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_task_run_proto_init() }
func file_task_run_proto_init() {
	if File_task_run_proto != nil {
		return
	}
	file_common_enums_proto_init()
	file_variable_proto_init()
	file_object_id_proto_init()
	file_user_tasks_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_task_run_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_run_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarNameAndVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_run_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_run_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRunSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_run_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNodeReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_run_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHTaskError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_run_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHTaskException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_task_run_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TaskAttempt_Output)(nil),
		(*TaskAttempt_Error)(nil),
		(*TaskAttempt_Exception)(nil),
	}
	file_task_run_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TaskRunSource_TaskNode)(nil),
		(*TaskRunSource_UserTaskTrigger)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_run_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_task_run_proto_goTypes,
		DependencyIndexes: file_task_run_proto_depIdxs,
		MessageInfos:      file_task_run_proto_msgTypes,
	}.Build()
	File_task_run_proto = out.File
	file_task_run_proto_rawDesc = nil
	file_task_run_proto_goTypes = nil
	file_task_run_proto_depIdxs = nil
}
