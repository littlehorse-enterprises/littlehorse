// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: user_tasks.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserTaskRunStatus int32

const (
	UserTaskRunStatus_UNASSIGNED UserTaskRunStatus = 0
	UserTaskRunStatus_ASSIGNED   UserTaskRunStatus = 1
	UserTaskRunStatus_DONE       UserTaskRunStatus = 3
	UserTaskRunStatus_CANCELLED  UserTaskRunStatus = 4
)

// Enum value maps for UserTaskRunStatus.
var (
	UserTaskRunStatus_name = map[int32]string{
		0: "UNASSIGNED",
		1: "ASSIGNED",
		3: "DONE",
		4: "CANCELLED",
	}
	UserTaskRunStatus_value = map[string]int32{
		"UNASSIGNED": 0,
		"ASSIGNED":   1,
		"DONE":       3,
		"CANCELLED":  4,
	}
)

func (x UserTaskRunStatus) Enum() *UserTaskRunStatus {
	p := new(UserTaskRunStatus)
	*p = x
	return p
}

func (x UserTaskRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserTaskRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_user_tasks_proto_enumTypes[0].Descriptor()
}

func (UserTaskRunStatus) Type() protoreflect.EnumType {
	return &file_user_tasks_proto_enumTypes[0]
}

func (x UserTaskRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserTaskRunStatus.Descriptor instead.
func (UserTaskRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{0}
}

type UserTaskDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Description *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Fields      []*UserTaskField       `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserTaskDef) Reset() {
	*x = UserTaskDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskDef) ProtoMessage() {}

func (x *UserTaskDef) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskDef.ProtoReflect.Descriptor instead.
func (*UserTaskDef) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *UserTaskDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskDef) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UserTaskDef) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserTaskDef) GetFields() []*UserTaskField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UserTaskDef) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UserTaskField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        VariableType `protobuf:"varint,2,opt,name=type,proto3,enum=littlehorse.VariableType" json:"type,omitempty"`
	Description *string      `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DisplayName string       `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Required    bool         `protobuf:"varint,5,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *UserTaskField) Reset() {
	*x = UserTaskField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskField) ProtoMessage() {}

func (x *UserTaskField) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskField.ProtoReflect.Descriptor instead.
func (*UserTaskField) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *UserTaskField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskField) GetType() VariableType {
	if x != nil {
		return x.Type
	}
	return VariableType_JSON_OBJ
}

func (x *UserTaskField) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserTaskField) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserTaskField) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type UserTaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *UserTaskRunId            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserTaskDefId *UserTaskDefId            `protobuf:"bytes,2,opt,name=user_task_def_id,json=userTaskDefId,proto3" json:"user_task_def_id,omitempty"`
	UserGroup     *string                   `protobuf:"bytes,3,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
	UserId        *string                   `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Results       map[string]*VariableValue `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status        UserTaskRunStatus         `protobuf:"varint,7,opt,name=status,proto3,enum=littlehorse.UserTaskRunStatus" json:"status,omitempty"`
	Events        []*UserTaskEvent          `protobuf:"bytes,8,rep,name=events,proto3" json:"events,omitempty"`
	Notes         *string                   `protobuf:"bytes,9,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	ScheduledTime *timestamppb.Timestamp    `protobuf:"bytes,10,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// If we ever allow ad-hoc User Tasks, this will move to an optional
	// field, or a `oneof user_task_source` field. However, note that such
	// a change would be fine from the API Compatibility perspective.
	NodeRunId *NodeRunId `protobuf:"bytes,11,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
}

func (x *UserTaskRun) Reset() {
	*x = UserTaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskRun) ProtoMessage() {}

func (x *UserTaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskRun.ProtoReflect.Descriptor instead.
func (*UserTaskRun) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *UserTaskRun) GetId() *UserTaskRunId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UserTaskRun) GetUserTaskDefId() *UserTaskDefId {
	if x != nil {
		return x.UserTaskDefId
	}
	return nil
}

func (x *UserTaskRun) GetUserGroup() string {
	if x != nil && x.UserGroup != nil {
		return *x.UserGroup
	}
	return ""
}

func (x *UserTaskRun) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserTaskRun) GetResults() map[string]*VariableValue {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UserTaskRun) GetStatus() UserTaskRunStatus {
	if x != nil {
		return x.Status
	}
	return UserTaskRunStatus_UNASSIGNED
}

func (x *UserTaskRun) GetEvents() []*UserTaskEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *UserTaskRun) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *UserTaskRun) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *UserTaskRun) GetNodeRunId() *NodeRunId {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

type AssignUserTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
	OverrideClaim bool           `protobuf:"varint,2,opt,name=override_claim,json=overrideClaim,proto3" json:"override_claim,omitempty"`
	UserGroup     *string        `protobuf:"bytes,3,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
	UserId        *string        `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
}

func (x *AssignUserTaskRunRequest) Reset() {
	*x = AssignUserTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUserTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUserTaskRunRequest) ProtoMessage() {}

func (x *AssignUserTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUserTaskRunRequest.ProtoReflect.Descriptor instead.
func (*AssignUserTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *AssignUserTaskRunRequest) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

func (x *AssignUserTaskRunRequest) GetOverrideClaim() bool {
	if x != nil {
		return x.OverrideClaim
	}
	return false
}

func (x *AssignUserTaskRunRequest) GetUserGroup() string {
	if x != nil && x.UserGroup != nil {
		return *x.UserGroup
	}
	return ""
}

func (x *AssignUserTaskRunRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type CompleteUserTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId            `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
	Results       map[string]*VariableValue `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserId        string                    `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CompleteUserTaskRunRequest) Reset() {
	*x = CompleteUserTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteUserTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUserTaskRunRequest) ProtoMessage() {}

func (x *CompleteUserTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUserTaskRunRequest.ProtoReflect.Descriptor instead.
func (*CompleteUserTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *CompleteUserTaskRunRequest) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

func (x *CompleteUserTaskRunRequest) GetResults() map[string]*VariableValue {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CompleteUserTaskRunRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CancelUserTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
}

func (x *CancelUserTaskRunRequest) Reset() {
	*x = CancelUserTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUserTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUserTaskRunRequest) ProtoMessage() {}

func (x *CancelUserTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUserTaskRunRequest.ProtoReflect.Descriptor instead.
func (*CancelUserTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{5}
}

func (x *CancelUserTaskRunRequest) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

type UserTaskTriggerReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunId           *NodeRunId `protobuf:"bytes,1,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
	UserTaskEventNumber int32      `protobuf:"varint,2,opt,name=user_task_event_number,json=userTaskEventNumber,proto3" json:"user_task_event_number,omitempty"`
	UserId              *string    `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserGroup           *string    `protobuf:"bytes,4,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
}

func (x *UserTaskTriggerReference) Reset() {
	*x = UserTaskTriggerReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskTriggerReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskTriggerReference) ProtoMessage() {}

func (x *UserTaskTriggerReference) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskTriggerReference.ProtoReflect.Descriptor instead.
func (*UserTaskTriggerReference) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{6}
}

func (x *UserTaskTriggerReference) GetNodeRunId() *NodeRunId {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

func (x *UserTaskTriggerReference) GetUserTaskEventNumber() int32 {
	if x != nil {
		return x.UserTaskEventNumber
	}
	return 0
}

func (x *UserTaskTriggerReference) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserTaskTriggerReference) GetUserGroup() string {
	if x != nil && x.UserGroup != nil {
		return *x.UserGroup
	}
	return ""
}

type UserTaskEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Event:
	//	*UserTaskEvent_TaskExecuted
	//	*UserTaskEvent_Assigned
	//	*UserTaskEvent_Cancelled
	Event isUserTaskEvent_Event `protobuf_oneof:"event"`
}

func (x *UserTaskEvent) Reset() {
	*x = UserTaskEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent) ProtoMessage() {}

func (x *UserTaskEvent) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent.ProtoReflect.Descriptor instead.
func (*UserTaskEvent) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{7}
}

func (x *UserTaskEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (m *UserTaskEvent) GetEvent() isUserTaskEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *UserTaskEvent) GetTaskExecuted() *UserTaskEvent_UTETaskExecuted {
	if x, ok := x.GetEvent().(*UserTaskEvent_TaskExecuted); ok {
		return x.TaskExecuted
	}
	return nil
}

func (x *UserTaskEvent) GetAssigned() *UserTaskEvent_UTEAssigned {
	if x, ok := x.GetEvent().(*UserTaskEvent_Assigned); ok {
		return x.Assigned
	}
	return nil
}

func (x *UserTaskEvent) GetCancelled() *UserTaskEvent_UTECancelled {
	if x, ok := x.GetEvent().(*UserTaskEvent_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

type isUserTaskEvent_Event interface {
	isUserTaskEvent_Event()
}

type UserTaskEvent_TaskExecuted struct {
	TaskExecuted *UserTaskEvent_UTETaskExecuted `protobuf:"bytes,2,opt,name=task_executed,json=taskExecuted,proto3,oneof"`
}

type UserTaskEvent_Assigned struct {
	Assigned *UserTaskEvent_UTEAssigned `protobuf:"bytes,3,opt,name=assigned,proto3,oneof"`
}

type UserTaskEvent_Cancelled struct {
	Cancelled *UserTaskEvent_UTECancelled `protobuf:"bytes,4,opt,name=cancelled,proto3,oneof"`
}

func (*UserTaskEvent_TaskExecuted) isUserTaskEvent_Event() {}

func (*UserTaskEvent_Assigned) isUserTaskEvent_Event() {}

func (*UserTaskEvent_Cancelled) isUserTaskEvent_Event() {}

type UserTaskEvent_UTECancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserTaskEvent_UTECancelled) Reset() {
	*x = UserTaskEvent_UTECancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent_UTECancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent_UTECancelled) ProtoMessage() {}

func (x *UserTaskEvent_UTECancelled) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent_UTECancelled.ProtoReflect.Descriptor instead.
func (*UserTaskEvent_UTECancelled) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{7, 0}
}

type UserTaskEvent_UTETaskExecuted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRun *TaskRunId `protobuf:"bytes,1,opt,name=task_run,json=taskRun,proto3" json:"task_run,omitempty"`
}

func (x *UserTaskEvent_UTETaskExecuted) Reset() {
	*x = UserTaskEvent_UTETaskExecuted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent_UTETaskExecuted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent_UTETaskExecuted) ProtoMessage() {}

func (x *UserTaskEvent_UTETaskExecuted) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent_UTETaskExecuted.ProtoReflect.Descriptor instead.
func (*UserTaskEvent_UTETaskExecuted) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{7, 1}
}

func (x *UserTaskEvent_UTETaskExecuted) GetTaskRun() *TaskRunId {
	if x != nil {
		return x.TaskRun
	}
	return nil
}

type UserTaskEvent_UTEAssigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldUserId    *string `protobuf:"bytes,1,opt,name=old_user_id,json=oldUserId,proto3,oneof" json:"old_user_id,omitempty"`
	OldUserGroup *string `protobuf:"bytes,2,opt,name=old_user_group,json=oldUserGroup,proto3,oneof" json:"old_user_group,omitempty"`
	NewUserId    *string `protobuf:"bytes,3,opt,name=new_user_id,json=newUserId,proto3,oneof" json:"new_user_id,omitempty"`
	NewUserGroup *string `protobuf:"bytes,4,opt,name=new_user_group,json=newUserGroup,proto3,oneof" json:"new_user_group,omitempty"`
}

func (x *UserTaskEvent_UTEAssigned) Reset() {
	*x = UserTaskEvent_UTEAssigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tasks_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent_UTEAssigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent_UTEAssigned) ProtoMessage() {}

func (x *UserTaskEvent_UTEAssigned) ProtoReflect() protoreflect.Message {
	mi := &file_user_tasks_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent_UTEAssigned.ProtoReflect.Descriptor instead.
func (*UserTaskEvent_UTEAssigned) Descriptor() ([]byte, []int) {
	return file_user_tasks_proto_rawDescGZIP(), []int{7, 2}
}

func (x *UserTaskEvent_UTEAssigned) GetOldUserId() string {
	if x != nil && x.OldUserId != nil {
		return *x.OldUserId
	}
	return ""
}

func (x *UserTaskEvent_UTEAssigned) GetOldUserGroup() string {
	if x != nil && x.OldUserGroup != nil {
		return *x.OldUserGroup
	}
	return ""
}

func (x *UserTaskEvent_UTEAssigned) GetNewUserId() string {
	if x != nil && x.NewUserId != nil {
		return *x.NewUserId
	}
	return ""
}

func (x *UserTaskEvent_UTEAssigned) GetNewUserGroup() string {
	if x != nil && x.NewUserGroup != nil {
		return *x.NewUserGroup
	}
	return ""
}

var File_user_tasks_proto protoreflect.FileDescriptor

var file_user_tasks_proto_rawDesc = []byte{
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x05, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x43, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x1a, 0x56, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xa2, 0x02,
	0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x56, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5f, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xf6, 0x04, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x54, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x54,
	0x45, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x54, 0x45, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x0e,
	0x0a, 0x0c, 0x55, 0x54, 0x45, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x44,
	0x0a, 0x0f, 0x55, 0x54, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x1a, 0xf3, 0x01, 0x0a, 0x0b, 0x55, 0x54, 0x45, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6c, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x6c, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2a, 0x4a, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x42,
	0x47, 0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xaa, 0x02, 0x18,
	0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_tasks_proto_rawDescOnce sync.Once
	file_user_tasks_proto_rawDescData = file_user_tasks_proto_rawDesc
)

func file_user_tasks_proto_rawDescGZIP() []byte {
	file_user_tasks_proto_rawDescOnce.Do(func() {
		file_user_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_tasks_proto_rawDescData)
	})
	return file_user_tasks_proto_rawDescData
}

var file_user_tasks_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_user_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_user_tasks_proto_goTypes = []interface{}{
	(UserTaskRunStatus)(0),                // 0: littlehorse.UserTaskRunStatus
	(*UserTaskDef)(nil),                   // 1: littlehorse.UserTaskDef
	(*UserTaskField)(nil),                 // 2: littlehorse.UserTaskField
	(*UserTaskRun)(nil),                   // 3: littlehorse.UserTaskRun
	(*AssignUserTaskRunRequest)(nil),      // 4: littlehorse.AssignUserTaskRunRequest
	(*CompleteUserTaskRunRequest)(nil),    // 5: littlehorse.CompleteUserTaskRunRequest
	(*CancelUserTaskRunRequest)(nil),      // 6: littlehorse.CancelUserTaskRunRequest
	(*UserTaskTriggerReference)(nil),      // 7: littlehorse.UserTaskTriggerReference
	(*UserTaskEvent)(nil),                 // 8: littlehorse.UserTaskEvent
	nil,                                   // 9: littlehorse.UserTaskRun.ResultsEntry
	nil,                                   // 10: littlehorse.CompleteUserTaskRunRequest.ResultsEntry
	(*UserTaskEvent_UTECancelled)(nil),    // 11: littlehorse.UserTaskEvent.UTECancelled
	(*UserTaskEvent_UTETaskExecuted)(nil), // 12: littlehorse.UserTaskEvent.UTETaskExecuted
	(*UserTaskEvent_UTEAssigned)(nil),     // 13: littlehorse.UserTaskEvent.UTEAssigned
	(*timestamppb.Timestamp)(nil),         // 14: google.protobuf.Timestamp
	(VariableType)(0),                     // 15: littlehorse.VariableType
	(*UserTaskRunId)(nil),                 // 16: littlehorse.UserTaskRunId
	(*UserTaskDefId)(nil),                 // 17: littlehorse.UserTaskDefId
	(*NodeRunId)(nil),                     // 18: littlehorse.NodeRunId
	(*VariableValue)(nil),                 // 19: littlehorse.VariableValue
	(*TaskRunId)(nil),                     // 20: littlehorse.TaskRunId
}
var file_user_tasks_proto_depIdxs = []int32{
	2,  // 0: littlehorse.UserTaskDef.fields:type_name -> littlehorse.UserTaskField
	14, // 1: littlehorse.UserTaskDef.created_at:type_name -> google.protobuf.Timestamp
	15, // 2: littlehorse.UserTaskField.type:type_name -> littlehorse.VariableType
	16, // 3: littlehorse.UserTaskRun.id:type_name -> littlehorse.UserTaskRunId
	17, // 4: littlehorse.UserTaskRun.user_task_def_id:type_name -> littlehorse.UserTaskDefId
	9,  // 5: littlehorse.UserTaskRun.results:type_name -> littlehorse.UserTaskRun.ResultsEntry
	0,  // 6: littlehorse.UserTaskRun.status:type_name -> littlehorse.UserTaskRunStatus
	8,  // 7: littlehorse.UserTaskRun.events:type_name -> littlehorse.UserTaskEvent
	14, // 8: littlehorse.UserTaskRun.scheduled_time:type_name -> google.protobuf.Timestamp
	18, // 9: littlehorse.UserTaskRun.node_run_id:type_name -> littlehorse.NodeRunId
	16, // 10: littlehorse.AssignUserTaskRunRequest.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	16, // 11: littlehorse.CompleteUserTaskRunRequest.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	10, // 12: littlehorse.CompleteUserTaskRunRequest.results:type_name -> littlehorse.CompleteUserTaskRunRequest.ResultsEntry
	16, // 13: littlehorse.CancelUserTaskRunRequest.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	18, // 14: littlehorse.UserTaskTriggerReference.node_run_id:type_name -> littlehorse.NodeRunId
	14, // 15: littlehorse.UserTaskEvent.time:type_name -> google.protobuf.Timestamp
	12, // 16: littlehorse.UserTaskEvent.task_executed:type_name -> littlehorse.UserTaskEvent.UTETaskExecuted
	13, // 17: littlehorse.UserTaskEvent.assigned:type_name -> littlehorse.UserTaskEvent.UTEAssigned
	11, // 18: littlehorse.UserTaskEvent.cancelled:type_name -> littlehorse.UserTaskEvent.UTECancelled
	19, // 19: littlehorse.UserTaskRun.ResultsEntry.value:type_name -> littlehorse.VariableValue
	19, // 20: littlehorse.CompleteUserTaskRunRequest.ResultsEntry.value:type_name -> littlehorse.VariableValue
	20, // 21: littlehorse.UserTaskEvent.UTETaskExecuted.task_run:type_name -> littlehorse.TaskRunId
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_user_tasks_proto_init() }
func file_user_tasks_proto_init() {
	if File_user_tasks_proto != nil {
		return
	}
	file_common_enums_proto_init()
	file_object_id_proto_init()
	file_variable_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_tasks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUserTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteUserTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUserTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskTriggerReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent_UTECancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent_UTETaskExecuted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tasks_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent_UTEAssigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_tasks_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_user_tasks_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_user_tasks_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_user_tasks_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_user_tasks_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_user_tasks_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UserTaskEvent_TaskExecuted)(nil),
		(*UserTaskEvent_Assigned)(nil),
		(*UserTaskEvent_Cancelled)(nil),
	}
	file_user_tasks_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_tasks_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_tasks_proto_goTypes,
		DependencyIndexes: file_user_tasks_proto_depIdxs,
		EnumInfos:         file_user_tasks_proto_enumTypes,
		MessageInfos:      file_user_tasks_proto_msgTypes,
	}.Build()
	File_user_tasks_proto = out.File
	file_user_tasks_proto_rawDesc = nil
	file_user_tasks_proto_goTypes = nil
	file_user_tasks_proto_depIdxs = nil
}
