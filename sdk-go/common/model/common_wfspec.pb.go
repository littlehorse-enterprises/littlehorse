// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: common_wfspec.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerates the available operations to mutate a variable in a WfRun.
type VariableMutationType int32

const (
	// Set the variable specified by the LHS to the value of the RHS.
	VariableMutationType_ASSIGN VariableMutationType = 0
	// Add the RHS to the LHS.
	VariableMutationType_ADD VariableMutationType = 1
	// Append the RHS to the LHS (valid if the LHS is a STR or JSON_ARR)
	VariableMutationType_EXTEND VariableMutationType = 2
	// Subtract the RHS from the LHS (both must be INT or DOUBLE)
	VariableMutationType_SUBTRACT VariableMutationType = 3
	// Multiply the LHS by the RHS (both must be INT or DOUBLE)
	VariableMutationType_MULTIPLY VariableMutationType = 4
	// Divide the LHS by the RHS (both must be INT or DOUBLE)
	VariableMutationType_DIVIDE VariableMutationType = 5
	// Remove any occurrences of RHS from LHS (LHS must be JSON_ARR)
	VariableMutationType_REMOVE_IF_PRESENT VariableMutationType = 6
	// Remove item at index RHS from LHS (LHS must be JSON_ARR)
	VariableMutationType_REMOVE_INDEX VariableMutationType = 7
	// Remove the key specified by RHS from the LHS (LHS must be JSON_OBJ)
	VariableMutationType_REMOVE_KEY VariableMutationType = 8
)

// Enum value maps for VariableMutationType.
var (
	VariableMutationType_name = map[int32]string{
		0: "ASSIGN",
		1: "ADD",
		2: "EXTEND",
		3: "SUBTRACT",
		4: "MULTIPLY",
		5: "DIVIDE",
		6: "REMOVE_IF_PRESENT",
		7: "REMOVE_INDEX",
		8: "REMOVE_KEY",
	}
	VariableMutationType_value = map[string]int32{
		"ASSIGN":            0,
		"ADD":               1,
		"EXTEND":            2,
		"SUBTRACT":          3,
		"MULTIPLY":          4,
		"DIVIDE":            5,
		"REMOVE_IF_PRESENT": 6,
		"REMOVE_INDEX":      7,
		"REMOVE_KEY":        8,
	}
)

func (x VariableMutationType) Enum() *VariableMutationType {
	p := new(VariableMutationType)
	*p = x
	return p
}

func (x VariableMutationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableMutationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_wfspec_proto_enumTypes[0].Descriptor()
}

func (VariableMutationType) Type() protoreflect.EnumType {
	return &file_common_wfspec_proto_enumTypes[0]
}

func (x VariableMutationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableMutationType.Descriptor instead.
func (VariableMutationType) EnumDescriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{0}
}

// Operator for comparing two values to create a boolean expression.
type Comparator int32

const (
	// Equivalent to `<`. Only valid for primitive types (no JSON_OBJ or JSON_ARR).
	Comparator_LESS_THAN Comparator = 0
	// Equivalent to `>`. Only valid for primitive types (no JSON_OBJ or JSON_ARR).
	Comparator_GREATER_THAN Comparator = 1
	// Equivalent to `<=`. Only valid for primitive types (no JSON_OBJ or JSON_ARR).
	Comparator_LESS_THAN_EQ Comparator = 2
	// Equivalent to `>=`. Only valid for primitive types (no JSON_OBJ or JSON_ARR).
	Comparator_GREATER_THAN_EQ Comparator = 3
	// This is valid for any variable type, and is similar to .equals() in Java.
	//
	// One note: if the RHS is a different type from the LHS, then LittleHorse will
	// try to cast the RHS to the same type as the LHS. If the cast fails, then the
	// ThreadRun fails with a VAR_SUB_ERROR.
	Comparator_EQUALS Comparator = 4
	// This is the inverse of `EQUALS`
	Comparator_NOT_EQUALS Comparator = 5
	// Only valid if the RHS is a JSON_OBJ or JSON_ARR. Valid for any type on the LHS.
	//
	// For the JSON_OBJ type, this returns true if the LHS is equal to a *KEY* in the
	// RHS. For the JSON_ARR type, it returns true if one of the elements of the RHS
	// is equal to the LHS.
	Comparator_IN Comparator = 6
	// The inverse of IN.
	Comparator_NOT_IN Comparator = 7
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0: "LESS_THAN",
		1: "GREATER_THAN",
		2: "LESS_THAN_EQ",
		3: "GREATER_THAN_EQ",
		4: "EQUALS",
		5: "NOT_EQUALS",
		6: "IN",
		7: "NOT_IN",
	}
	Comparator_value = map[string]int32{
		"LESS_THAN":       0,
		"GREATER_THAN":    1,
		"LESS_THAN_EQ":    2,
		"GREATER_THAN_EQ": 3,
		"EQUALS":          4,
		"NOT_EQUALS":      5,
		"IN":              6,
		"NOT_IN":          7,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_common_wfspec_proto_enumTypes[1].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_common_wfspec_proto_enumTypes[1]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparator.Descriptor instead.
func (Comparator) EnumDescriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{1}
}

// Enumerates the different lifecycle hooks that can cause the timer to start running.
type UTActionTrigger_UTHook int32

const (
	// The hook should be scheduled `delay_seconds` after the UserTaskRun is created. This
	// hook only causes the action to be scheduled once.
	UTActionTrigger_ON_ARRIVAL UTActionTrigger_UTHook = 0
	// The hook should be scheduled `delay_seconds` after the ownership of the UserTaskRun
	// changes. This hook causes the Action to be scheduled one or more times. The first
	// time is scheduled when the UserTaskRun is created, since we treat the change from
	// "UserTaskRun is nonexistent" to "UserTaskRun is owned by a userId or userGroup" as
	// a change in ownership.
	UTActionTrigger_ON_TASK_ASSIGNED UTActionTrigger_UTHook = 1
)

// Enum value maps for UTActionTrigger_UTHook.
var (
	UTActionTrigger_UTHook_name = map[int32]string{
		0: "ON_ARRIVAL",
		1: "ON_TASK_ASSIGNED",
	}
	UTActionTrigger_UTHook_value = map[string]int32{
		"ON_ARRIVAL":       0,
		"ON_TASK_ASSIGNED": 1,
	}
)

func (x UTActionTrigger_UTHook) Enum() *UTActionTrigger_UTHook {
	p := new(UTActionTrigger_UTHook)
	*p = x
	return p
}

func (x UTActionTrigger_UTHook) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UTActionTrigger_UTHook) Descriptor() protoreflect.EnumDescriptor {
	return file_common_wfspec_proto_enumTypes[2].Descriptor()
}

func (UTActionTrigger_UTHook) Type() protoreflect.EnumType {
	return &file_common_wfspec_proto_enumTypes[2]
}

func (x UTActionTrigger_UTHook) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UTActionTrigger_UTHook.Descriptor instead.
func (UTActionTrigger_UTHook) EnumDescriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{3, 0}
}

// A VariableAssignment is used within a WfSpec to determine how a value should be
// assigned in the context of a specific WfRun. For example, in a TASK node, you
// use a VariableAssignment for each input parameter to determine how the value
// is set.
//
// Note that the VariableAssignment is normally handled by the SDK; you shouldn't
// have to worry about this in daily LittleHorse usage.
type VariableAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If you provide a `variable_name` and the specified variable is JSON_OBJ or
	// JSON_ARR type, then you may also provide a json_path which makes the VariableAssignment
	// resolve to the specified field.
	JsonPath *string `protobuf:"bytes,1,opt,name=json_path,json=jsonPath,proto3,oneof" json:"json_path,omitempty"`
	// The oneof determines where the value is resolved to.
	//
	// Types that are assignable to Source:
	//	*VariableAssignment_VariableName
	//	*VariableAssignment_LiteralValue
	//	*VariableAssignment_FormatString_
	Source isVariableAssignment_Source `protobuf_oneof:"source"`
}

func (x *VariableAssignment) Reset() {
	*x = VariableAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAssignment) ProtoMessage() {}

func (x *VariableAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAssignment.ProtoReflect.Descriptor instead.
func (*VariableAssignment) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{0}
}

func (x *VariableAssignment) GetJsonPath() string {
	if x != nil && x.JsonPath != nil {
		return *x.JsonPath
	}
	return ""
}

func (m *VariableAssignment) GetSource() isVariableAssignment_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *VariableAssignment) GetVariableName() string {
	if x, ok := x.GetSource().(*VariableAssignment_VariableName); ok {
		return x.VariableName
	}
	return ""
}

func (x *VariableAssignment) GetLiteralValue() *VariableValue {
	if x, ok := x.GetSource().(*VariableAssignment_LiteralValue); ok {
		return x.LiteralValue
	}
	return nil
}

func (x *VariableAssignment) GetFormatString() *VariableAssignment_FormatString {
	if x, ok := x.GetSource().(*VariableAssignment_FormatString_); ok {
		return x.FormatString
	}
	return nil
}

type isVariableAssignment_Source interface {
	isVariableAssignment_Source()
}

type VariableAssignment_VariableName struct {
	// Assign the value from a variable.
	VariableName string `protobuf:"bytes,2,opt,name=variable_name,json=variableName,proto3,oneof"`
}

type VariableAssignment_LiteralValue struct {
	// Assign a literal value
	LiteralValue *VariableValue `protobuf:"bytes,3,opt,name=literal_value,json=literalValue,proto3,oneof"`
}

type VariableAssignment_FormatString_ struct {
	// Assign a format string
	FormatString *VariableAssignment_FormatString `protobuf:"bytes,4,opt,name=format_string,json=formatString,proto3,oneof"`
}

func (*VariableAssignment_VariableName) isVariableAssignment_Source() {}

func (*VariableAssignment_LiteralValue) isVariableAssignment_Source() {}

func (*VariableAssignment_FormatString_) isVariableAssignment_Source() {}

// A VariableMutation defines a modification made to one of a ThreadRun's variables.
// The LHS determines the variable that is modified; the operation determines how
// it is modified, and the RHS is the input to the operation.
//
// Day-to-day users of LittleHorse generally don't interact with this structure unless
// they are writing their own WfSpec SDK.
type VariableMutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the variable to mutate
	LhsName string `protobuf:"bytes,1,opt,name=lhs_name,json=lhsName,proto3" json:"lhs_name,omitempty"`
	// For JSON_ARR and JSON_OBJ variables, this allows you to optionally mutate
	// a specific sub-field of the variable.
	LhsJsonPath *string `protobuf:"bytes,2,opt,name=lhs_json_path,json=lhsJsonPath,proto3,oneof" json:"lhs_json_path,omitempty"`
	// Defines the operation that we are executing.
	Operation VariableMutationType `protobuf:"varint,3,opt,name=operation,proto3,enum=littlehorse.VariableMutationType" json:"operation,omitempty"`
	// The RHS of the mutation; i.e. what is operated _with_.
	//
	// Types that are assignable to RhsValue:
	//	*VariableMutation_SourceVariable
	//	*VariableMutation_LiteralValue
	//	*VariableMutation_NodeOutput
	RhsValue isVariableMutation_RhsValue `protobuf_oneof:"rhs_value"`
}

func (x *VariableMutation) Reset() {
	*x = VariableMutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableMutation) ProtoMessage() {}

func (x *VariableMutation) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableMutation.ProtoReflect.Descriptor instead.
func (*VariableMutation) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{1}
}

func (x *VariableMutation) GetLhsName() string {
	if x != nil {
		return x.LhsName
	}
	return ""
}

func (x *VariableMutation) GetLhsJsonPath() string {
	if x != nil && x.LhsJsonPath != nil {
		return *x.LhsJsonPath
	}
	return ""
}

func (x *VariableMutation) GetOperation() VariableMutationType {
	if x != nil {
		return x.Operation
	}
	return VariableMutationType_ASSIGN
}

func (m *VariableMutation) GetRhsValue() isVariableMutation_RhsValue {
	if m != nil {
		return m.RhsValue
	}
	return nil
}

func (x *VariableMutation) GetSourceVariable() *VariableAssignment {
	if x, ok := x.GetRhsValue().(*VariableMutation_SourceVariable); ok {
		return x.SourceVariable
	}
	return nil
}

func (x *VariableMutation) GetLiteralValue() *VariableValue {
	if x, ok := x.GetRhsValue().(*VariableMutation_LiteralValue); ok {
		return x.LiteralValue
	}
	return nil
}

func (x *VariableMutation) GetNodeOutput() *VariableMutation_NodeOutputSource {
	if x, ok := x.GetRhsValue().(*VariableMutation_NodeOutput); ok {
		return x.NodeOutput
	}
	return nil
}

type isVariableMutation_RhsValue interface {
	isVariableMutation_RhsValue()
}

type VariableMutation_SourceVariable struct {
	// Set the source_variable as the RHS to use another variable from the workflow to
	// as the RHS/
	SourceVariable *VariableAssignment `protobuf:"bytes,4,opt,name=source_variable,json=sourceVariable,proto3,oneof"`
}

type VariableMutation_LiteralValue struct {
	// Use a literal value as the RHS.
	LiteralValue *VariableValue `protobuf:"bytes,5,opt,name=literal_value,json=literalValue,proto3,oneof"`
}

type VariableMutation_NodeOutput struct {
	// Use the output of the current node as the RHS.
	NodeOutput *VariableMutation_NodeOutputSource `protobuf:"bytes,6,opt,name=node_output,json=nodeOutput,proto3,oneof"`
}

func (*VariableMutation_SourceVariable) isVariableMutation_RhsValue() {}

func (*VariableMutation_LiteralValue) isVariableMutation_RhsValue() {}

func (*VariableMutation_NodeOutput) isVariableMutation_RhsValue() {}

// Declares a Variable.
type VariableDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Type of the variable.
	Type VariableType `protobuf:"varint,1,opt,name=type,proto3,enum=littlehorse.VariableType" json:"type,omitempty"`
	// The name of the variable.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional default value if the variable isn't set; for example, in a ThreadRun
	// if you start a ThreadRun or WfRun without passing a variable in, then this is
	// used.
	DefaultValue *VariableValue `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3,oneof" json:"default_value,omitempty"`
}

func (x *VariableDef) Reset() {
	*x = VariableDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDef) ProtoMessage() {}

func (x *VariableDef) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDef.ProtoReflect.Descriptor instead.
func (*VariableDef) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{2}
}

func (x *VariableDef) GetType() VariableType {
	if x != nil {
		return x.Type
	}
	return VariableType_JSON_OBJ
}

func (x *VariableDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableDef) GetDefaultValue() *VariableValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

// A UTActionTrigger triggers an action upon certain lifecycle hooks
// in a User Task. Actions include:
// - re-assign the User Task Run
// - cancel the User Task Run
// - execute a Reminder Task
//
// Hooks include:
// - Upon creation of the UserTaskRun
// - Upon rescheduling the UserTaskRun
type UTActionTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action that is scheduled by the hook
	//
	// Types that are assignable to Action:
	//	*UTActionTrigger_Task
	//	*UTActionTrigger_Cancel
	//	*UTActionTrigger_Reassign
	Action isUTActionTrigger_Action `protobuf_oneof:"action"`
	// The Action is triggered some time after the Hook matures. The delay is controlled
	// by this field.
	DelaySeconds *VariableAssignment `protobuf:"bytes,5,opt,name=delay_seconds,json=delaySeconds,proto3" json:"delay_seconds,omitempty"`
	// The hook on which this UserTaskAction is scheduled.
	Hook UTActionTrigger_UTHook `protobuf:"varint,6,opt,name=hook,proto3,enum=littlehorse.UTActionTrigger_UTHook" json:"hook,omitempty"`
}

func (x *UTActionTrigger) Reset() {
	*x = UTActionTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger) ProtoMessage() {}

func (x *UTActionTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger.ProtoReflect.Descriptor instead.
func (*UTActionTrigger) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{3}
}

func (m *UTActionTrigger) GetAction() isUTActionTrigger_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *UTActionTrigger) GetTask() *UTActionTrigger_UTATask {
	if x, ok := x.GetAction().(*UTActionTrigger_Task); ok {
		return x.Task
	}
	return nil
}

func (x *UTActionTrigger) GetCancel() *UTActionTrigger_UTACancel {
	if x, ok := x.GetAction().(*UTActionTrigger_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *UTActionTrigger) GetReassign() *UTActionTrigger_UTAReassign {
	if x, ok := x.GetAction().(*UTActionTrigger_Reassign); ok {
		return x.Reassign
	}
	return nil
}

func (x *UTActionTrigger) GetDelaySeconds() *VariableAssignment {
	if x != nil {
		return x.DelaySeconds
	}
	return nil
}

func (x *UTActionTrigger) GetHook() UTActionTrigger_UTHook {
	if x != nil {
		return x.Hook
	}
	return UTActionTrigger_ON_ARRIVAL
}

type isUTActionTrigger_Action interface {
	isUTActionTrigger_Action()
}

type UTActionTrigger_Task struct {
	Task *UTActionTrigger_UTATask `protobuf:"bytes,1,opt,name=task,proto3,oneof"`
}

type UTActionTrigger_Cancel struct {
	Cancel *UTActionTrigger_UTACancel `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

type UTActionTrigger_Reassign struct {
	Reassign *UTActionTrigger_UTAReassign `protobuf:"bytes,3,opt,name=reassign,proto3,oneof"` // later on, might enable scheduling entire ThreadRuns
}

func (*UTActionTrigger_Task) isUTActionTrigger_Action() {}

func (*UTActionTrigger_Cancel) isUTActionTrigger_Action() {}

func (*UTActionTrigger_Reassign) isUTActionTrigger_Action() {}

// Defines an Exponential backoff policy for TaskRun retries. The delay for a retry
// attempt `N` is defined as:
//
// min(base_interval_ms * (multiplier ^(N-1)), max_delay_ms)
//
// Note that timers in LittleHorse have a resolution of about 500-1000 milliseconds,
// so timing is not exact.
type ExponentialBackoffRetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base delay in ms for the first retry. Note that in LittleHorse, timers have a
	// resolution of 500-1000 milliseconds. Must be greater than zero.
	BaseIntervalMs int32 `protobuf:"varint,1,opt,name=base_interval_ms,json=baseIntervalMs,proto3" json:"base_interval_ms,omitempty"`
	// Maximum delay in milliseconds between retries.
	MaxDelayMs int64 `protobuf:"varint,2,opt,name=max_delay_ms,json=maxDelayMs,proto3" json:"max_delay_ms,omitempty"`
	// The multiplier to use in calculating the retry backoff policy. We recommend
	// starting with 2.0. Must be at least 1.0.
	Multiplier float32 `protobuf:"fixed32,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *ExponentialBackoffRetryPolicy) Reset() {
	*x = ExponentialBackoffRetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExponentialBackoffRetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExponentialBackoffRetryPolicy) ProtoMessage() {}

func (x *ExponentialBackoffRetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExponentialBackoffRetryPolicy.ProtoReflect.Descriptor instead.
func (*ExponentialBackoffRetryPolicy) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{4}
}

func (x *ExponentialBackoffRetryPolicy) GetBaseIntervalMs() int32 {
	if x != nil {
		return x.BaseIntervalMs
	}
	return 0
}

func (x *ExponentialBackoffRetryPolicy) GetMaxDelayMs() int64 {
	if x != nil {
		return x.MaxDelayMs
	}
	return 0
}

func (x *ExponentialBackoffRetryPolicy) GetMultiplier() float32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

// Defines a TaskRun execution. Used in a Node and also in the UserTask Trigger Actions.
type TaskNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of TaskRun to schedule.
	//
	// Types that are assignable to TaskToExecute:
	//	*TaskNode_TaskDefId
	//	*TaskNode_DynamicTask
	TaskToExecute isTaskNode_TaskToExecute `protobuf_oneof:"task_to_execute"`
	// How long until LittleHorse determines that the Task Worker had a technical ERROR if
	// the worker does not yet reply to the Server. This is determined on a per-Attempt
	// basis.
	TimeoutSeconds int32 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Configures the amount of retries allowed on this TaskNode.
	//
	// Retryable errors include:
	// - TASK_TIMEOUT: the TaskRun was started but the scheduler didn't hear back from the
	//   Task Worker in time.
	// - TASK_FAILED: the Task Worker reported an unexpected *technical* ERROR when executing
	//   the Task Function.
	//
	// Other result codes are not retryable (including TASK_OUTPUT_SERIALIZING_ERROR,
	// TASK_INPUT_VAR_SUB_ERROR, and TASK_EXCEPTION).
	Retries int32 `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`
	// If this field is set, then retries will use Exponential Backoff.
	ExponentialBackoff *ExponentialBackoffRetryPolicy `protobuf:"bytes,5,opt,name=exponential_backoff,json=exponentialBackoff,proto3,oneof" json:"exponential_backoff,omitempty"`
	// Input variables into the TaskDef.
	Variables []*VariableAssignment `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *TaskNode) Reset() {
	*x = TaskNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNode) ProtoMessage() {}

func (x *TaskNode) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNode.ProtoReflect.Descriptor instead.
func (*TaskNode) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{5}
}

func (m *TaskNode) GetTaskToExecute() isTaskNode_TaskToExecute {
	if m != nil {
		return m.TaskToExecute
	}
	return nil
}

func (x *TaskNode) GetTaskDefId() *TaskDefId {
	if x, ok := x.GetTaskToExecute().(*TaskNode_TaskDefId); ok {
		return x.TaskDefId
	}
	return nil
}

func (x *TaskNode) GetDynamicTask() *VariableAssignment {
	if x, ok := x.GetTaskToExecute().(*TaskNode_DynamicTask); ok {
		return x.DynamicTask
	}
	return nil
}

func (x *TaskNode) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TaskNode) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *TaskNode) GetExponentialBackoff() *ExponentialBackoffRetryPolicy {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TaskNode) GetVariables() []*VariableAssignment {
	if x != nil {
		return x.Variables
	}
	return nil
}

type isTaskNode_TaskToExecute interface {
	isTaskNode_TaskToExecute()
}

type TaskNode_TaskDefId struct {
	TaskDefId *TaskDefId `protobuf:"bytes,1,opt,name=task_def_id,json=taskDefId,proto3,oneof"`
}

type TaskNode_DynamicTask struct {
	DynamicTask *VariableAssignment `protobuf:"bytes,6,opt,name=dynamic_task,json=dynamicTask,proto3,oneof"`
}

func (*TaskNode_TaskDefId) isTaskNode_TaskToExecute() {}

func (*TaskNode_DynamicTask) isTaskNode_TaskToExecute() {}

// A FormatString formats a template String with values from the WfRun.
type VariableAssignment_FormatString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A VariableAssignment which must resolve to a String that has format args.
	// A valid string is "This is a format string with three args: {0}, {1}, {2}"
	Format *VariableAssignment `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	// VariableAssignments which fill out the args.
	Args []*VariableAssignment `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *VariableAssignment_FormatString) Reset() {
	*x = VariableAssignment_FormatString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAssignment_FormatString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAssignment_FormatString) ProtoMessage() {}

func (x *VariableAssignment_FormatString) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAssignment_FormatString.ProtoReflect.Descriptor instead.
func (*VariableAssignment_FormatString) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VariableAssignment_FormatString) GetFormat() *VariableAssignment {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *VariableAssignment_FormatString) GetArgs() []*VariableAssignment {
	if x != nil {
		return x.Args
	}
	return nil
}

// Specifies to use the output of a NodeRun as the RHS.
type VariableMutation_NodeOutputSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use this specific field from a JSON output
	Jsonpath *string `protobuf:"bytes,10,opt,name=jsonpath,proto3,oneof" json:"jsonpath,omitempty"`
}

func (x *VariableMutation_NodeOutputSource) Reset() {
	*x = VariableMutation_NodeOutputSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableMutation_NodeOutputSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableMutation_NodeOutputSource) ProtoMessage() {}

func (x *VariableMutation_NodeOutputSource) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableMutation_NodeOutputSource.ProtoReflect.Descriptor instead.
func (*VariableMutation_NodeOutputSource) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{1, 0}
}

func (x *VariableMutation_NodeOutputSource) GetJsonpath() string {
	if x != nil && x.Jsonpath != nil {
		return *x.Jsonpath
	}
	return ""
}

// A UserTaskAction that causes a UserTaskRun to be CANCELLED when it fires.
type UTActionTrigger_UTACancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UTActionTrigger_UTACancel) Reset() {
	*x = UTActionTrigger_UTACancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger_UTACancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger_UTACancel) ProtoMessage() {}

func (x *UTActionTrigger_UTACancel) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger_UTACancel.ProtoReflect.Descriptor instead.
func (*UTActionTrigger_UTACancel) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{3, 0}
}

// A UserTaskAction that causes a TaskRun to be scheduled when it fires.
type UTActionTrigger_UTATask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The specification of the Task to schedule.
	Task *TaskNode `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// EXPERIMENTAL: Any variables in the ThreadRun which we should mutate.
	Mutations []*VariableMutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
}

func (x *UTActionTrigger_UTATask) Reset() {
	*x = UTActionTrigger_UTATask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger_UTATask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger_UTATask) ProtoMessage() {}

func (x *UTActionTrigger_UTATask) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger_UTATask.ProtoReflect.Descriptor instead.
func (*UTActionTrigger_UTATask) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{3, 1}
}

func (x *UTActionTrigger_UTATask) GetTask() *TaskNode {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *UTActionTrigger_UTATask) GetMutations() []*VariableMutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

// A UserTaskAction that causes a UserTaskRun to be reassigned when it fires.
type UTActionTrigger_UTAReassign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A variable assignment that resolves to a STR representing the new user_id. If
	// not set, the user_id of the UserTaskRun will be un-set.
	UserId *VariableAssignment `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// A variable assignment that resolves to a STR representing the new user_group. If
	// not set, the user_group of the UserTaskRun will be un-set.
	UserGroup *VariableAssignment `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
}

func (x *UTActionTrigger_UTAReassign) Reset() {
	*x = UTActionTrigger_UTAReassign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_wfspec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger_UTAReassign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger_UTAReassign) ProtoMessage() {}

func (x *UTActionTrigger_UTAReassign) ProtoReflect() protoreflect.Message {
	mi := &file_common_wfspec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger_UTAReassign.ProtoReflect.Descriptor instead.
func (*UTActionTrigger_UTAReassign) Descriptor() ([]byte, []int) {
	return file_common_wfspec_proto_rawDescGZIP(), []int{3, 2}
}

func (x *UTActionTrigger_UTAReassign) GetUserId() *VariableAssignment {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UTActionTrigger_UTAReassign) GetUserGroup() *VariableAssignment {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

var File_common_wfspec_proto protoreflect.FileDescriptor

var file_common_wfspec_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x77, 0x66, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x7c, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x37, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xda, 0x03, 0x0a, 0x10, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x68,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x68,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x68, 0x73, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x6c, 0x68, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51,
	0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x1a, 0x40, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x70,
	0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x68, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x68, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x05,
	0x0a, 0x0f, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x54,
	0x41, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a,
	0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x54, 0x41, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x46, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x54, 0x41, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a,
	0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x54, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0b, 0x0a, 0x09, 0x55, 0x54, 0x41, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x1a, 0x71, 0x0a, 0x07, 0x55, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x0b, 0x55, 0x54, 0x41, 0x52, 0x65,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2e, 0x0a, 0x06, 0x55, 0x54, 0x48, 0x6f, 0x6f, 0x6b, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x8b, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x99, 0x03,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x2a, 0x98, 0x01, 0x0a, 0x14, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x08, 0x2a, 0x84, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x5f, 0x45, 0x51, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x42, 0x47, 0x0a, 0x1f, 0x69,
	0x6f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x07, 0x2e, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xaa, 0x02, 0x18, 0x4c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x48, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_wfspec_proto_rawDescOnce sync.Once
	file_common_wfspec_proto_rawDescData = file_common_wfspec_proto_rawDesc
)

func file_common_wfspec_proto_rawDescGZIP() []byte {
	file_common_wfspec_proto_rawDescOnce.Do(func() {
		file_common_wfspec_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_wfspec_proto_rawDescData)
	})
	return file_common_wfspec_proto_rawDescData
}

var file_common_wfspec_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_wfspec_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_common_wfspec_proto_goTypes = []interface{}{
	(VariableMutationType)(0),                 // 0: littlehorse.VariableMutationType
	(Comparator)(0),                           // 1: littlehorse.Comparator
	(UTActionTrigger_UTHook)(0),               // 2: littlehorse.UTActionTrigger.UTHook
	(*VariableAssignment)(nil),                // 3: littlehorse.VariableAssignment
	(*VariableMutation)(nil),                  // 4: littlehorse.VariableMutation
	(*VariableDef)(nil),                       // 5: littlehorse.VariableDef
	(*UTActionTrigger)(nil),                   // 6: littlehorse.UTActionTrigger
	(*ExponentialBackoffRetryPolicy)(nil),     // 7: littlehorse.ExponentialBackoffRetryPolicy
	(*TaskNode)(nil),                          // 8: littlehorse.TaskNode
	(*VariableAssignment_FormatString)(nil),   // 9: littlehorse.VariableAssignment.FormatString
	(*VariableMutation_NodeOutputSource)(nil), // 10: littlehorse.VariableMutation.NodeOutputSource
	(*UTActionTrigger_UTACancel)(nil),         // 11: littlehorse.UTActionTrigger.UTACancel
	(*UTActionTrigger_UTATask)(nil),           // 12: littlehorse.UTActionTrigger.UTATask
	(*UTActionTrigger_UTAReassign)(nil),       // 13: littlehorse.UTActionTrigger.UTAReassign
	(*VariableValue)(nil),                     // 14: littlehorse.VariableValue
	(VariableType)(0),                         // 15: littlehorse.VariableType
	(*TaskDefId)(nil),                         // 16: littlehorse.TaskDefId
}
var file_common_wfspec_proto_depIdxs = []int32{
	14, // 0: littlehorse.VariableAssignment.literal_value:type_name -> littlehorse.VariableValue
	9,  // 1: littlehorse.VariableAssignment.format_string:type_name -> littlehorse.VariableAssignment.FormatString
	0,  // 2: littlehorse.VariableMutation.operation:type_name -> littlehorse.VariableMutationType
	3,  // 3: littlehorse.VariableMutation.source_variable:type_name -> littlehorse.VariableAssignment
	14, // 4: littlehorse.VariableMutation.literal_value:type_name -> littlehorse.VariableValue
	10, // 5: littlehorse.VariableMutation.node_output:type_name -> littlehorse.VariableMutation.NodeOutputSource
	15, // 6: littlehorse.VariableDef.type:type_name -> littlehorse.VariableType
	14, // 7: littlehorse.VariableDef.default_value:type_name -> littlehorse.VariableValue
	12, // 8: littlehorse.UTActionTrigger.task:type_name -> littlehorse.UTActionTrigger.UTATask
	11, // 9: littlehorse.UTActionTrigger.cancel:type_name -> littlehorse.UTActionTrigger.UTACancel
	13, // 10: littlehorse.UTActionTrigger.reassign:type_name -> littlehorse.UTActionTrigger.UTAReassign
	3,  // 11: littlehorse.UTActionTrigger.delay_seconds:type_name -> littlehorse.VariableAssignment
	2,  // 12: littlehorse.UTActionTrigger.hook:type_name -> littlehorse.UTActionTrigger.UTHook
	16, // 13: littlehorse.TaskNode.task_def_id:type_name -> littlehorse.TaskDefId
	3,  // 14: littlehorse.TaskNode.dynamic_task:type_name -> littlehorse.VariableAssignment
	7,  // 15: littlehorse.TaskNode.exponential_backoff:type_name -> littlehorse.ExponentialBackoffRetryPolicy
	3,  // 16: littlehorse.TaskNode.variables:type_name -> littlehorse.VariableAssignment
	3,  // 17: littlehorse.VariableAssignment.FormatString.format:type_name -> littlehorse.VariableAssignment
	3,  // 18: littlehorse.VariableAssignment.FormatString.args:type_name -> littlehorse.VariableAssignment
	8,  // 19: littlehorse.UTActionTrigger.UTATask.task:type_name -> littlehorse.TaskNode
	4,  // 20: littlehorse.UTActionTrigger.UTATask.mutations:type_name -> littlehorse.VariableMutation
	3,  // 21: littlehorse.UTActionTrigger.UTAReassign.user_id:type_name -> littlehorse.VariableAssignment
	3,  // 22: littlehorse.UTActionTrigger.UTAReassign.user_group:type_name -> littlehorse.VariableAssignment
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_common_wfspec_proto_init() }
func file_common_wfspec_proto_init() {
	if File_common_wfspec_proto != nil {
		return
	}
	file_common_enums_proto_init()
	file_variable_proto_init()
	file_object_id_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_wfspec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableMutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExponentialBackoffRetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAssignment_FormatString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableMutation_NodeOutputSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger_UTACancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger_UTATask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_wfspec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger_UTAReassign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_wfspec_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VariableAssignment_VariableName)(nil),
		(*VariableAssignment_LiteralValue)(nil),
		(*VariableAssignment_FormatString_)(nil),
	}
	file_common_wfspec_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VariableMutation_SourceVariable)(nil),
		(*VariableMutation_LiteralValue)(nil),
		(*VariableMutation_NodeOutput)(nil),
	}
	file_common_wfspec_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_common_wfspec_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UTActionTrigger_Task)(nil),
		(*UTActionTrigger_Cancel)(nil),
		(*UTActionTrigger_Reassign)(nil),
	}
	file_common_wfspec_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TaskNode_TaskDefId)(nil),
		(*TaskNode_DynamicTask)(nil),
	}
	file_common_wfspec_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_common_wfspec_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_wfspec_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_wfspec_proto_goTypes,
		DependencyIndexes: file_common_wfspec_proto_depIdxs,
		EnumInfos:         file_common_wfspec_proto_enumTypes,
		MessageInfos:      file_common_wfspec_proto_msgTypes,
	}.Build()
	File_common_wfspec_proto = out.File
	file_common_wfspec_proto_rawDesc = nil
	file_common_wfspec_proto_goTypes = nil
	file_common_wfspec_proto_depIdxs = nil
}
