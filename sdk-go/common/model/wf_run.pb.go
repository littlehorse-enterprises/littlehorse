// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: wf_run.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThreadType int32

const (
	ThreadType_ENTRYPOINT      ThreadType = 0
	ThreadType_CHILD           ThreadType = 1
	ThreadType_INTERRUPT       ThreadType = 2
	ThreadType_FAILURE_HANDLER ThreadType = 3
)

// Enum value maps for ThreadType.
var (
	ThreadType_name = map[int32]string{
		0: "ENTRYPOINT",
		1: "CHILD",
		2: "INTERRUPT",
		3: "FAILURE_HANDLER",
	}
	ThreadType_value = map[string]int32{
		"ENTRYPOINT":      0,
		"CHILD":           1,
		"INTERRUPT":       2,
		"FAILURE_HANDLER": 3,
	}
)

func (x ThreadType) Enum() *ThreadType {
	p := new(ThreadType)
	*p = x
	return p
}

func (x ThreadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThreadType) Descriptor() protoreflect.EnumDescriptor {
	return file_wf_run_proto_enumTypes[0].Descriptor()
}

func (ThreadType) Type() protoreflect.EnumType {
	return &file_wf_run_proto_enumTypes[0]
}

func (x ThreadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThreadType.Descriptor instead.
func (ThreadType) EnumDescriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{0}
}

type WfRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WfSpecName        string                   `protobuf:"bytes,2,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion     int32                    `protobuf:"varint,3,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	Status            LHStatus                 `protobuf:"varint,4,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	StartTime         *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	ThreadRuns        []*ThreadRun             `protobuf:"bytes,8,rep,name=thread_runs,json=threadRuns,proto3" json:"thread_runs,omitempty"`
	PendingInterrupts []*PendingInterrupt      `protobuf:"bytes,9,rep,name=pending_interrupts,json=pendingInterrupts,proto3" json:"pending_interrupts,omitempty"`
	PendingFailures   []*PendingFailureHandler `protobuf:"bytes,10,rep,name=pending_failures,json=pendingFailures,proto3" json:"pending_failures,omitempty"`
}

func (x *WfRun) Reset() {
	*x = WfRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfRun) ProtoMessage() {}

func (x *WfRun) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfRun.ProtoReflect.Descriptor instead.
func (*WfRun) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{0}
}

func (x *WfRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WfRun) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfRun) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *WfRun) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *WfRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WfRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WfRun) GetThreadRuns() []*ThreadRun {
	if x != nil {
		return x.ThreadRuns
	}
	return nil
}

func (x *WfRun) GetPendingInterrupts() []*PendingInterrupt {
	if x != nil {
		return x.PendingInterrupts
	}
	return nil
}

func (x *WfRun) GetPendingFailures() []*PendingFailureHandler {
	if x != nil {
		return x.PendingFailures
	}
	return nil
}

type ThreadRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId               string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	Number                int32                  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Status                LHStatus               `protobuf:"varint,3,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	WfSpecName            string                 `protobuf:"bytes,4,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion         int32                  `protobuf:"varint,5,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	ThreadSpecName        string                 `protobuf:"bytes,6,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	StartTime             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	ErrorMessage          *string                `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	ChildThreadIds        []int32                `protobuf:"varint,11,rep,packed,name=child_thread_ids,json=childThreadIds,proto3" json:"child_thread_ids,omitempty"`
	ParentThreadId        *int32                 `protobuf:"varint,12,opt,name=parent_thread_id,json=parentThreadId,proto3,oneof" json:"parent_thread_id,omitempty"`
	HaltReasons           []*ThreadHaltReason    `protobuf:"bytes,13,rep,name=halt_reasons,json=haltReasons,proto3" json:"halt_reasons,omitempty"`
	InterruptTriggerId    *ExternalEventId       `protobuf:"bytes,14,opt,name=interrupt_trigger_id,json=interruptTriggerId,proto3,oneof" json:"interrupt_trigger_id,omitempty"`
	FailureBeingHandled   *FailureBeingHandled   `protobuf:"bytes,15,opt,name=failure_being_handled,json=failureBeingHandled,proto3,oneof" json:"failure_being_handled,omitempty"`
	CurrentNodePosition   int32                  `protobuf:"varint,16,opt,name=current_node_position,json=currentNodePosition,proto3" json:"current_node_position,omitempty"`
	HandledFailedChildren []int32                `protobuf:"varint,17,rep,packed,name=handled_failed_children,json=handledFailedChildren,proto3" json:"handled_failed_children,omitempty"`
	Type                  ThreadType             `protobuf:"varint,18,opt,name=type,proto3,enum=littlehorse.ThreadType" json:"type,omitempty"`
}

func (x *ThreadRun) Reset() {
	*x = ThreadRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadRun) ProtoMessage() {}

func (x *ThreadRun) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadRun.ProtoReflect.Descriptor instead.
func (*ThreadRun) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{1}
}

func (x *ThreadRun) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ThreadRun) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ThreadRun) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *ThreadRun) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *ThreadRun) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *ThreadRun) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *ThreadRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ThreadRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ThreadRun) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ThreadRun) GetChildThreadIds() []int32 {
	if x != nil {
		return x.ChildThreadIds
	}
	return nil
}

func (x *ThreadRun) GetParentThreadId() int32 {
	if x != nil && x.ParentThreadId != nil {
		return *x.ParentThreadId
	}
	return 0
}

func (x *ThreadRun) GetHaltReasons() []*ThreadHaltReason {
	if x != nil {
		return x.HaltReasons
	}
	return nil
}

func (x *ThreadRun) GetInterruptTriggerId() *ExternalEventId {
	if x != nil {
		return x.InterruptTriggerId
	}
	return nil
}

func (x *ThreadRun) GetFailureBeingHandled() *FailureBeingHandled {
	if x != nil {
		return x.FailureBeingHandled
	}
	return nil
}

func (x *ThreadRun) GetCurrentNodePosition() int32 {
	if x != nil {
		return x.CurrentNodePosition
	}
	return 0
}

func (x *ThreadRun) GetHandledFailedChildren() []int32 {
	if x != nil {
		return x.HandledFailedChildren
	}
	return nil
}

func (x *ThreadRun) GetType() ThreadType {
	if x != nil {
		return x.Type
	}
	return ThreadType_ENTRYPOINT
}

type FailureBeingHandled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadRunNumber int32 `protobuf:"varint,1,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	NodeRunPosition int32 `protobuf:"varint,2,opt,name=node_run_position,json=nodeRunPosition,proto3" json:"node_run_position,omitempty"`
	FailureNumber   int32 `protobuf:"varint,3,opt,name=failure_number,json=failureNumber,proto3" json:"failure_number,omitempty"`
}

func (x *FailureBeingHandled) Reset() {
	*x = FailureBeingHandled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureBeingHandled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureBeingHandled) ProtoMessage() {}

func (x *FailureBeingHandled) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureBeingHandled.ProtoReflect.Descriptor instead.
func (*FailureBeingHandled) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{2}
}

func (x *FailureBeingHandled) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *FailureBeingHandled) GetNodeRunPosition() int32 {
	if x != nil {
		return x.NodeRunPosition
	}
	return 0
}

func (x *FailureBeingHandled) GetFailureNumber() int32 {
	if x != nil {
		return x.FailureNumber
	}
	return 0
}

type PendingInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventId     *ExternalEventId `protobuf:"bytes,1,opt,name=external_event_id,json=externalEventId,proto3" json:"external_event_id,omitempty"`
	HandlerSpecName     string           `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
	InterruptedThreadId int32            `protobuf:"varint,3,opt,name=interrupted_thread_id,json=interruptedThreadId,proto3" json:"interrupted_thread_id,omitempty"`
}

func (x *PendingInterrupt) Reset() {
	*x = PendingInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingInterrupt) ProtoMessage() {}

func (x *PendingInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingInterrupt.ProtoReflect.Descriptor instead.
func (*PendingInterrupt) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{3}
}

func (x *PendingInterrupt) GetExternalEventId() *ExternalEventId {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

func (x *PendingInterrupt) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

func (x *PendingInterrupt) GetInterruptedThreadId() int32 {
	if x != nil {
		return x.InterruptedThreadId
	}
	return 0
}

type PendingFailureHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedThreadRun int32  `protobuf:"varint,1,opt,name=failed_thread_run,json=failedThreadRun,proto3" json:"failed_thread_run,omitempty"`
	HandlerSpecName string `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *PendingFailureHandler) Reset() {
	*x = PendingFailureHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingFailureHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingFailureHandler) ProtoMessage() {}

func (x *PendingFailureHandler) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingFailureHandler.ProtoReflect.Descriptor instead.
func (*PendingFailureHandler) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{4}
}

func (x *PendingFailureHandler) GetFailedThreadRun() int32 {
	if x != nil {
		return x.FailedThreadRun
	}
	return 0
}

func (x *PendingFailureHandler) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type PendingInterruptHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventId *ExternalEventId `protobuf:"bytes,1,opt,name=external_event_id,json=externalEventId,proto3" json:"external_event_id,omitempty"`
}

func (x *PendingInterruptHaltReason) Reset() {
	*x = PendingInterruptHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingInterruptHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingInterruptHaltReason) ProtoMessage() {}

func (x *PendingInterruptHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingInterruptHaltReason.ProtoReflect.Descriptor instead.
func (*PendingInterruptHaltReason) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{5}
}

func (x *PendingInterruptHaltReason) GetExternalEventId() *ExternalEventId {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

type PendingFailureHandlerHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunPosition int32 `protobuf:"varint,1,opt,name=node_run_position,json=nodeRunPosition,proto3" json:"node_run_position,omitempty"`
}

func (x *PendingFailureHandlerHaltReason) Reset() {
	*x = PendingFailureHandlerHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingFailureHandlerHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingFailureHandlerHaltReason) ProtoMessage() {}

func (x *PendingFailureHandlerHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingFailureHandlerHaltReason.ProtoReflect.Descriptor instead.
func (*PendingFailureHandlerHaltReason) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{6}
}

func (x *PendingFailureHandlerHaltReason) GetNodeRunPosition() int32 {
	if x != nil {
		return x.NodeRunPosition
	}
	return 0
}

type HandlingFailureHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandlerThreadId int32 `protobuf:"varint,1,opt,name=handler_thread_id,json=handlerThreadId,proto3" json:"handler_thread_id,omitempty"`
}

func (x *HandlingFailureHaltReason) Reset() {
	*x = HandlingFailureHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlingFailureHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlingFailureHaltReason) ProtoMessage() {}

func (x *HandlingFailureHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlingFailureHaltReason.ProtoReflect.Descriptor instead.
func (*HandlingFailureHaltReason) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{7}
}

func (x *HandlingFailureHaltReason) GetHandlerThreadId() int32 {
	if x != nil {
		return x.HandlerThreadId
	}
	return 0
}

type ParentHalted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentThreadId int32 `protobuf:"varint,1,opt,name=parent_thread_id,json=parentThreadId,proto3" json:"parent_thread_id,omitempty"`
}

func (x *ParentHalted) Reset() {
	*x = ParentHalted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentHalted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentHalted) ProtoMessage() {}

func (x *ParentHalted) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentHalted.ProtoReflect.Descriptor instead.
func (*ParentHalted) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{8}
}

func (x *ParentHalted) GetParentThreadId() int32 {
	if x != nil {
		return x.ParentThreadId
	}
	return 0
}

type Interrupted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterruptThreadId int32 `protobuf:"varint,1,opt,name=interrupt_thread_id,json=interruptThreadId,proto3" json:"interrupt_thread_id,omitempty"`
}

func (x *Interrupted) Reset() {
	*x = Interrupted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interrupted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interrupted) ProtoMessage() {}

func (x *Interrupted) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interrupted.ProtoReflect.Descriptor instead.
func (*Interrupted) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{9}
}

func (x *Interrupted) GetInterruptThreadId() int32 {
	if x != nil {
		return x.InterruptThreadId
	}
	return 0
}

type ManualHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nothing to store.
	MeaningOfLife bool `protobuf:"varint,137,opt,name=meaning_of_life,json=meaningOfLife,proto3" json:"meaning_of_life,omitempty"`
}

func (x *ManualHalt) Reset() {
	*x = ManualHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualHalt) ProtoMessage() {}

func (x *ManualHalt) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualHalt.ProtoReflect.Descriptor instead.
func (*ManualHalt) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{10}
}

func (x *ManualHalt) GetMeaningOfLife() bool {
	if x != nil {
		return x.MeaningOfLife
	}
	return false
}

type ThreadHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*ThreadHaltReason_ParentHalted
	//	*ThreadHaltReason_Interrupted
	//	*ThreadHaltReason_PendingInterrupt
	//	*ThreadHaltReason_PendingFailure
	//	*ThreadHaltReason_HandlingFailure
	//	*ThreadHaltReason_ManualHalt
	Reason isThreadHaltReason_Reason `protobuf_oneof:"reason"`
}

func (x *ThreadHaltReason) Reset() {
	*x = ThreadHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_run_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadHaltReason) ProtoMessage() {}

func (x *ThreadHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_wf_run_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadHaltReason.ProtoReflect.Descriptor instead.
func (*ThreadHaltReason) Descriptor() ([]byte, []int) {
	return file_wf_run_proto_rawDescGZIP(), []int{11}
}

func (m *ThreadHaltReason) GetReason() isThreadHaltReason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ThreadHaltReason) GetParentHalted() *ParentHalted {
	if x, ok := x.GetReason().(*ThreadHaltReason_ParentHalted); ok {
		return x.ParentHalted
	}
	return nil
}

func (x *ThreadHaltReason) GetInterrupted() *Interrupted {
	if x, ok := x.GetReason().(*ThreadHaltReason_Interrupted); ok {
		return x.Interrupted
	}
	return nil
}

func (x *ThreadHaltReason) GetPendingInterrupt() *PendingInterruptHaltReason {
	if x, ok := x.GetReason().(*ThreadHaltReason_PendingInterrupt); ok {
		return x.PendingInterrupt
	}
	return nil
}

func (x *ThreadHaltReason) GetPendingFailure() *PendingFailureHandlerHaltReason {
	if x, ok := x.GetReason().(*ThreadHaltReason_PendingFailure); ok {
		return x.PendingFailure
	}
	return nil
}

func (x *ThreadHaltReason) GetHandlingFailure() *HandlingFailureHaltReason {
	if x, ok := x.GetReason().(*ThreadHaltReason_HandlingFailure); ok {
		return x.HandlingFailure
	}
	return nil
}

func (x *ThreadHaltReason) GetManualHalt() *ManualHalt {
	if x, ok := x.GetReason().(*ThreadHaltReason_ManualHalt); ok {
		return x.ManualHalt
	}
	return nil
}

type isThreadHaltReason_Reason interface {
	isThreadHaltReason_Reason()
}

type ThreadHaltReason_ParentHalted struct {
	ParentHalted *ParentHalted `protobuf:"bytes,1,opt,name=parent_halted,json=parentHalted,proto3,oneof"`
}

type ThreadHaltReason_Interrupted struct {
	Interrupted *Interrupted `protobuf:"bytes,2,opt,name=interrupted,proto3,oneof"`
}

type ThreadHaltReason_PendingInterrupt struct {
	PendingInterrupt *PendingInterruptHaltReason `protobuf:"bytes,3,opt,name=pending_interrupt,json=pendingInterrupt,proto3,oneof"`
}

type ThreadHaltReason_PendingFailure struct {
	PendingFailure *PendingFailureHandlerHaltReason `protobuf:"bytes,4,opt,name=pending_failure,json=pendingFailure,proto3,oneof"`
}

type ThreadHaltReason_HandlingFailure struct {
	HandlingFailure *HandlingFailureHaltReason `protobuf:"bytes,5,opt,name=handling_failure,json=handlingFailure,proto3,oneof"`
}

type ThreadHaltReason_ManualHalt struct {
	ManualHalt *ManualHalt `protobuf:"bytes,6,opt,name=manual_halt,json=manualHalt,proto3,oneof"`
}

func (*ThreadHaltReason_ParentHalted) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_Interrupted) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_PendingInterrupt) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_PendingFailure) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_HandlingFailure) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_ManualHalt) isThreadHaltReason_Reason() {}

var File_wf_run_proto protoreflect.FileDescriptor

var file_wf_run_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xea, 0x03, 0x0a, 0x05, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77,
	0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x75, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52,
	0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xce,
	0x07, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x09,
	0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70,
	0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x0c, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12,
	0x53, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x03, 0x52, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x48, 0x04, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x42, 0x65, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x22,
	0x94, 0x01, 0x0a, 0x13, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x15, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x1a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x1f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a,
	0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x22, 0x3d, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22,
	0x35, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x22, 0xde, 0x03, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x10,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0x4b, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x52, 0x10, 0x03, 0x42, 0x2c, 0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wf_run_proto_rawDescOnce sync.Once
	file_wf_run_proto_rawDescData = file_wf_run_proto_rawDesc
)

func file_wf_run_proto_rawDescGZIP() []byte {
	file_wf_run_proto_rawDescOnce.Do(func() {
		file_wf_run_proto_rawDescData = protoimpl.X.CompressGZIP(file_wf_run_proto_rawDescData)
	})
	return file_wf_run_proto_rawDescData
}

var file_wf_run_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wf_run_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_wf_run_proto_goTypes = []interface{}{
	(ThreadType)(0),                         // 0: littlehorse.ThreadType
	(*WfRun)(nil),                           // 1: littlehorse.WfRun
	(*ThreadRun)(nil),                       // 2: littlehorse.ThreadRun
	(*FailureBeingHandled)(nil),             // 3: littlehorse.FailureBeingHandled
	(*PendingInterrupt)(nil),                // 4: littlehorse.PendingInterrupt
	(*PendingFailureHandler)(nil),           // 5: littlehorse.PendingFailureHandler
	(*PendingInterruptHaltReason)(nil),      // 6: littlehorse.PendingInterruptHaltReason
	(*PendingFailureHandlerHaltReason)(nil), // 7: littlehorse.PendingFailureHandlerHaltReason
	(*HandlingFailureHaltReason)(nil),       // 8: littlehorse.HandlingFailureHaltReason
	(*ParentHalted)(nil),                    // 9: littlehorse.ParentHalted
	(*Interrupted)(nil),                     // 10: littlehorse.Interrupted
	(*ManualHalt)(nil),                      // 11: littlehorse.ManualHalt
	(*ThreadHaltReason)(nil),                // 12: littlehorse.ThreadHaltReason
	(LHStatus)(0),                           // 13: littlehorse.LHStatus
	(*timestamppb.Timestamp)(nil),           // 14: google.protobuf.Timestamp
	(*ExternalEventId)(nil),                 // 15: littlehorse.ExternalEventId
}
var file_wf_run_proto_depIdxs = []int32{
	13, // 0: littlehorse.WfRun.status:type_name -> littlehorse.LHStatus
	14, // 1: littlehorse.WfRun.start_time:type_name -> google.protobuf.Timestamp
	14, // 2: littlehorse.WfRun.end_time:type_name -> google.protobuf.Timestamp
	2,  // 3: littlehorse.WfRun.thread_runs:type_name -> littlehorse.ThreadRun
	4,  // 4: littlehorse.WfRun.pending_interrupts:type_name -> littlehorse.PendingInterrupt
	5,  // 5: littlehorse.WfRun.pending_failures:type_name -> littlehorse.PendingFailureHandler
	13, // 6: littlehorse.ThreadRun.status:type_name -> littlehorse.LHStatus
	14, // 7: littlehorse.ThreadRun.start_time:type_name -> google.protobuf.Timestamp
	14, // 8: littlehorse.ThreadRun.end_time:type_name -> google.protobuf.Timestamp
	12, // 9: littlehorse.ThreadRun.halt_reasons:type_name -> littlehorse.ThreadHaltReason
	15, // 10: littlehorse.ThreadRun.interrupt_trigger_id:type_name -> littlehorse.ExternalEventId
	3,  // 11: littlehorse.ThreadRun.failure_being_handled:type_name -> littlehorse.FailureBeingHandled
	0,  // 12: littlehorse.ThreadRun.type:type_name -> littlehorse.ThreadType
	15, // 13: littlehorse.PendingInterrupt.external_event_id:type_name -> littlehorse.ExternalEventId
	15, // 14: littlehorse.PendingInterruptHaltReason.external_event_id:type_name -> littlehorse.ExternalEventId
	9,  // 15: littlehorse.ThreadHaltReason.parent_halted:type_name -> littlehorse.ParentHalted
	10, // 16: littlehorse.ThreadHaltReason.interrupted:type_name -> littlehorse.Interrupted
	6,  // 17: littlehorse.ThreadHaltReason.pending_interrupt:type_name -> littlehorse.PendingInterruptHaltReason
	7,  // 18: littlehorse.ThreadHaltReason.pending_failure:type_name -> littlehorse.PendingFailureHandlerHaltReason
	8,  // 19: littlehorse.ThreadHaltReason.handling_failure:type_name -> littlehorse.HandlingFailureHaltReason
	11, // 20: littlehorse.ThreadHaltReason.manual_halt:type_name -> littlehorse.ManualHalt
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_wf_run_proto_init() }
func file_wf_run_proto_init() {
	if File_wf_run_proto != nil {
		return
	}
	file_common_enums_proto_init()
	file_object_id_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wf_run_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureBeingHandled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingFailureHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingInterruptHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingFailureHandlerHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlingFailureHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentHalted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interrupted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_run_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wf_run_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_wf_run_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_wf_run_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ThreadHaltReason_ParentHalted)(nil),
		(*ThreadHaltReason_Interrupted)(nil),
		(*ThreadHaltReason_PendingInterrupt)(nil),
		(*ThreadHaltReason_PendingFailure)(nil),
		(*ThreadHaltReason_HandlingFailure)(nil),
		(*ThreadHaltReason_ManualHalt)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wf_run_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wf_run_proto_goTypes,
		DependencyIndexes: file_wf_run_proto_depIdxs,
		EnumInfos:         file_wf_run_proto_enumTypes,
		MessageInfos:      file_wf_run_proto_msgTypes,
	}.Build()
	File_wf_run_proto = out.File
	file_wf_run_proto_rawDesc = nil
	file_wf_run_proto_goTypes = nil
	file_wf_run_proto_depIdxs = nil
}
