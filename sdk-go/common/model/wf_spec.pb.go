// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: wf_spec.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WfRunVariableAccessLevel int32

const (
	WfRunVariableAccessLevel_PUBLIC_VAR    WfRunVariableAccessLevel = 0
	WfRunVariableAccessLevel_PRIVATE_VAR   WfRunVariableAccessLevel = 1
	WfRunVariableAccessLevel_INHERITED_VAR WfRunVariableAccessLevel = 2
)

// Enum value maps for WfRunVariableAccessLevel.
var (
	WfRunVariableAccessLevel_name = map[int32]string{
		0: "PUBLIC_VAR",
		1: "PRIVATE_VAR",
		2: "INHERITED_VAR",
	}
	WfRunVariableAccessLevel_value = map[string]int32{
		"PUBLIC_VAR":    0,
		"PRIVATE_VAR":   1,
		"INHERITED_VAR": 2,
	}
)

func (x WfRunVariableAccessLevel) Enum() *WfRunVariableAccessLevel {
	p := new(WfRunVariableAccessLevel)
	*p = x
	return p
}

func (x WfRunVariableAccessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WfRunVariableAccessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_wf_spec_proto_enumTypes[0].Descriptor()
}

func (WfRunVariableAccessLevel) Type() protoreflect.EnumType {
	return &file_wf_spec_proto_enumTypes[0]
}

func (x WfRunVariableAccessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WfRunVariableAccessLevel.Descriptor instead.
func (WfRunVariableAccessLevel) EnumDescriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{0}
}

type FailureHandlerDef_LHFailureType int32

const (
	FailureHandlerDef_FAILURE_TYPE_ERROR     FailureHandlerDef_LHFailureType = 0
	FailureHandlerDef_FAILURE_TYPE_EXCEPTION FailureHandlerDef_LHFailureType = 1
)

// Enum value maps for FailureHandlerDef_LHFailureType.
var (
	FailureHandlerDef_LHFailureType_name = map[int32]string{
		0: "FAILURE_TYPE_ERROR",
		1: "FAILURE_TYPE_EXCEPTION",
	}
	FailureHandlerDef_LHFailureType_value = map[string]int32{
		"FAILURE_TYPE_ERROR":     0,
		"FAILURE_TYPE_EXCEPTION": 1,
	}
)

func (x FailureHandlerDef_LHFailureType) Enum() *FailureHandlerDef_LHFailureType {
	p := new(FailureHandlerDef_LHFailureType)
	*p = x
	return p
}

func (x FailureHandlerDef_LHFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureHandlerDef_LHFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_wf_spec_proto_enumTypes[1].Descriptor()
}

func (FailureHandlerDef_LHFailureType) Type() protoreflect.EnumType {
	return &file_wf_spec_proto_enumTypes[1]
}

func (x FailureHandlerDef_LHFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureHandlerDef_LHFailureType.Descriptor instead.
func (FailureHandlerDef_LHFailureType) EnumDescriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{10, 0}
}

type WfSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *WfSpecId              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	FrozenVariables []*ThreadVarDef        `protobuf:"bytes,3,rep,name=frozen_variables,json=frozenVariables,proto3" json:"frozen_variables,omitempty"`
	// to be used for WfSpec Status, i.e. ACTIVE/TERMINATING/ARCHIVED
	Status               MetadataStatus           `protobuf:"varint,4,opt,name=status,proto3,enum=littlehorse.MetadataStatus" json:"status,omitempty"`
	ThreadSpecs          map[string]*ThreadSpec   `protobuf:"bytes,5,rep,name=thread_specs,json=threadSpecs,proto3" json:"thread_specs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EntrypointThreadName string                   `protobuf:"bytes,6,opt,name=entrypoint_thread_name,json=entrypointThreadName,proto3" json:"entrypoint_thread_name,omitempty"`
	RetentionPolicy      *WorkflowRetentionPolicy `protobuf:"bytes,7,opt,name=retention_policy,json=retentionPolicy,proto3,oneof" json:"retention_policy,omitempty"`
	Migration            *WfSpecVersionMigration  `protobuf:"bytes,8,opt,name=migration,proto3,oneof" json:"migration,omitempty"`
	// Reference to the parent WfSpec. If this is set, all WfRun's for this WfSpec must be the
	// child of a WfRun belonging to the referenced WfSpec.
	ParentWfSpec *WfSpec_ParentWfSpecReference `protobuf:"bytes,9,opt,name=parent_wf_spec,json=parentWfSpec,proto3,oneof" json:"parent_wf_spec,omitempty"`
}

func (x *WfSpec) Reset() {
	*x = WfSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpec) ProtoMessage() {}

func (x *WfSpec) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpec.ProtoReflect.Descriptor instead.
func (*WfSpec) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{0}
}

func (x *WfSpec) GetId() *WfSpecId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WfSpec) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WfSpec) GetFrozenVariables() []*ThreadVarDef {
	if x != nil {
		return x.FrozenVariables
	}
	return nil
}

func (x *WfSpec) GetStatus() MetadataStatus {
	if x != nil {
		return x.Status
	}
	return MetadataStatus_ACTIVE
}

func (x *WfSpec) GetThreadSpecs() map[string]*ThreadSpec {
	if x != nil {
		return x.ThreadSpecs
	}
	return nil
}

func (x *WfSpec) GetEntrypointThreadName() string {
	if x != nil {
		return x.EntrypointThreadName
	}
	return ""
}

func (x *WfSpec) GetRetentionPolicy() *WorkflowRetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (x *WfSpec) GetMigration() *WfSpecVersionMigration {
	if x != nil {
		return x.Migration
	}
	return nil
}

func (x *WfSpec) GetParentWfSpec() *WfSpec_ParentWfSpecReference {
	if x != nil {
		return x.ParentWfSpec
	}
	return nil
}

type WorkflowRetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WfGcPolicy:
	//	*WorkflowRetentionPolicy_SecondsAfterWfTermination
	WfGcPolicy isWorkflowRetentionPolicy_WfGcPolicy `protobuf_oneof:"wf_gc_policy"`
}

func (x *WorkflowRetentionPolicy) Reset() {
	*x = WorkflowRetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRetentionPolicy) ProtoMessage() {}

func (x *WorkflowRetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRetentionPolicy.ProtoReflect.Descriptor instead.
func (*WorkflowRetentionPolicy) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{1}
}

func (m *WorkflowRetentionPolicy) GetWfGcPolicy() isWorkflowRetentionPolicy_WfGcPolicy {
	if m != nil {
		return m.WfGcPolicy
	}
	return nil
}

func (x *WorkflowRetentionPolicy) GetSecondsAfterWfTermination() int64 {
	if x, ok := x.GetWfGcPolicy().(*WorkflowRetentionPolicy_SecondsAfterWfTermination); ok {
		return x.SecondsAfterWfTermination
	}
	return 0
}

type isWorkflowRetentionPolicy_WfGcPolicy interface {
	isWorkflowRetentionPolicy_WfGcPolicy()
}

type WorkflowRetentionPolicy_SecondsAfterWfTermination struct {
	// Delete all WfRun's X seconds after they terminate, regardless of
	// status.
	SecondsAfterWfTermination int64 `protobuf:"varint,1,opt,name=seconds_after_wf_termination,json=secondsAfterWfTermination,proto3,oneof"`
}

func (*WorkflowRetentionPolicy_SecondsAfterWfTermination) isWorkflowRetentionPolicy_WfGcPolicy() {}

type JsonIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath string       `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	FieldType VariableType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=littlehorse.VariableType" json:"field_type,omitempty"`
}

func (x *JsonIndex) Reset() {
	*x = JsonIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonIndex) ProtoMessage() {}

func (x *JsonIndex) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonIndex.ProtoReflect.Descriptor instead.
func (*JsonIndex) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{2}
}

func (x *JsonIndex) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *JsonIndex) GetFieldType() VariableType {
	if x != nil {
		return x.FieldType
	}
	return VariableType_JSON_OBJ
}

type SearchableVariableDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarDef *VariableDef `protobuf:"bytes,1,opt,name=var_def,json=varDef,proto3" json:"var_def,omitempty"` // Future: Add index information (local/remote/etc)
}

func (x *SearchableVariableDef) Reset() {
	*x = SearchableVariableDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchableVariableDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchableVariableDef) ProtoMessage() {}

func (x *SearchableVariableDef) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchableVariableDef.ProtoReflect.Descriptor instead.
func (*SearchableVariableDef) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{3}
}

func (x *SearchableVariableDef) GetVarDef() *VariableDef {
	if x != nil {
		return x.VarDef
	}
	return nil
}

type ThreadVarDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarDef      *VariableDef             `protobuf:"bytes,1,opt,name=var_def,json=varDef,proto3" json:"var_def,omitempty"`
	Required    bool                     `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Searchable  bool                     `protobuf:"varint,3,opt,name=searchable,proto3" json:"searchable,omitempty"`
	JsonIndexes []*JsonIndex             `protobuf:"bytes,4,rep,name=json_indexes,json=jsonIndexes,proto3" json:"json_indexes,omitempty"`
	AccessLevel WfRunVariableAccessLevel `protobuf:"varint,5,opt,name=access_level,json=accessLevel,proto3,enum=littlehorse.WfRunVariableAccessLevel" json:"access_level,omitempty"`
}

func (x *ThreadVarDef) Reset() {
	*x = ThreadVarDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadVarDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadVarDef) ProtoMessage() {}

func (x *ThreadVarDef) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadVarDef.ProtoReflect.Descriptor instead.
func (*ThreadVarDef) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{4}
}

func (x *ThreadVarDef) GetVarDef() *VariableDef {
	if x != nil {
		return x.VarDef
	}
	return nil
}

func (x *ThreadVarDef) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ThreadVarDef) GetSearchable() bool {
	if x != nil {
		return x.Searchable
	}
	return false
}

func (x *ThreadVarDef) GetJsonIndexes() []*JsonIndex {
	if x != nil {
		return x.JsonIndexes
	}
	return nil
}

func (x *ThreadVarDef) GetAccessLevel() WfRunVariableAccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return WfRunVariableAccessLevel_PUBLIC_VAR
}

type ThreadSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes           map[string]*Node       `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VariableDefs    []*ThreadVarDef        `protobuf:"bytes,2,rep,name=variable_defs,json=variableDefs,proto3" json:"variable_defs,omitempty"`
	InterruptDefs   []*InterruptDef        `protobuf:"bytes,3,rep,name=interrupt_defs,json=interruptDefs,proto3" json:"interrupt_defs,omitempty"`
	RetentionPolicy *ThreadRetentionPolicy `protobuf:"bytes,4,opt,name=retention_policy,json=retentionPolicy,proto3,oneof" json:"retention_policy,omitempty"`
}

func (x *ThreadSpec) Reset() {
	*x = ThreadSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSpec) ProtoMessage() {}

func (x *ThreadSpec) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSpec.ProtoReflect.Descriptor instead.
func (*ThreadSpec) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{5}
}

func (x *ThreadSpec) GetNodes() map[string]*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ThreadSpec) GetVariableDefs() []*ThreadVarDef {
	if x != nil {
		return x.VariableDefs
	}
	return nil
}

func (x *ThreadSpec) GetInterruptDefs() []*InterruptDef {
	if x != nil {
		return x.InterruptDefs
	}
	return nil
}

func (x *ThreadSpec) GetRetentionPolicy() *ThreadRetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

type ThreadRetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ThreadGcPolicy:
	//	*ThreadRetentionPolicy_SecondsAfterThreadTermination
	ThreadGcPolicy isThreadRetentionPolicy_ThreadGcPolicy `protobuf_oneof:"thread_gc_policy"`
}

func (x *ThreadRetentionPolicy) Reset() {
	*x = ThreadRetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadRetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadRetentionPolicy) ProtoMessage() {}

func (x *ThreadRetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadRetentionPolicy.ProtoReflect.Descriptor instead.
func (*ThreadRetentionPolicy) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{6}
}

func (m *ThreadRetentionPolicy) GetThreadGcPolicy() isThreadRetentionPolicy_ThreadGcPolicy {
	if m != nil {
		return m.ThreadGcPolicy
	}
	return nil
}

func (x *ThreadRetentionPolicy) GetSecondsAfterThreadTermination() int64 {
	if x, ok := x.GetThreadGcPolicy().(*ThreadRetentionPolicy_SecondsAfterThreadTermination); ok {
		return x.SecondsAfterThreadTermination
	}
	return 0
}

type isThreadRetentionPolicy_ThreadGcPolicy interface {
	isThreadRetentionPolicy_ThreadGcPolicy()
}

type ThreadRetentionPolicy_SecondsAfterThreadTermination struct {
	// Delete associated ThreadRun's X seconds after they terminate, regardless
	// of status.
	SecondsAfterThreadTermination int64 `protobuf:"varint,1,opt,name=seconds_after_thread_termination,json=secondsAfterThreadTermination,proto3,oneof"`
}

func (*ThreadRetentionPolicy_SecondsAfterThreadTermination) isThreadRetentionPolicy_ThreadGcPolicy() {
}

type InterruptDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefId *ExternalEventDefId `protobuf:"bytes,1,opt,name=external_event_def_id,json=externalEventDefId,proto3" json:"external_event_def_id,omitempty"`
	HandlerSpecName    string              `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *InterruptDef) Reset() {
	*x = InterruptDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptDef) ProtoMessage() {}

func (x *InterruptDef) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptDef.ProtoReflect.Descriptor instead.
func (*InterruptDef) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{7}
}

func (x *InterruptDef) GetExternalEventDefId() *ExternalEventDefId {
	if x != nil {
		return x.ExternalEventDefId
	}
	return nil
}

func (x *InterruptDef) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type StartThreadNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadSpecName string                         `protobuf:"bytes,1,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	Variables      map[string]*VariableAssignment `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartThreadNode) Reset() {
	*x = StartThreadNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartThreadNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartThreadNode) ProtoMessage() {}

func (x *StartThreadNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartThreadNode.ProtoReflect.Descriptor instead.
func (*StartThreadNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{8}
}

func (x *StartThreadNode) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *StartThreadNode) GetVariables() map[string]*VariableAssignment {
	if x != nil {
		return x.Variables
	}
	return nil
}

type StartMultipleThreadsNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadSpecName string                         `protobuf:"bytes,1,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	Variables      map[string]*VariableAssignment `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Iterable       *VariableAssignment            `protobuf:"bytes,3,opt,name=iterable,proto3" json:"iterable,omitempty"`
}

func (x *StartMultipleThreadsNode) Reset() {
	*x = StartMultipleThreadsNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMultipleThreadsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMultipleThreadsNode) ProtoMessage() {}

func (x *StartMultipleThreadsNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMultipleThreadsNode.ProtoReflect.Descriptor instead.
func (*StartMultipleThreadsNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{9}
}

func (x *StartMultipleThreadsNode) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *StartMultipleThreadsNode) GetVariables() map[string]*VariableAssignment {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *StartMultipleThreadsNode) GetIterable() *VariableAssignment {
	if x != nil {
		return x.Iterable
	}
	return nil
}

type FailureHandlerDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandlerSpecName string `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
	// Types that are assignable to FailureToCatch:
	//	*FailureHandlerDef_SpecificFailure
	//	*FailureHandlerDef_AnyFailureOfType
	FailureToCatch isFailureHandlerDef_FailureToCatch `protobuf_oneof:"failure_to_catch"`
}

func (x *FailureHandlerDef) Reset() {
	*x = FailureHandlerDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureHandlerDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureHandlerDef) ProtoMessage() {}

func (x *FailureHandlerDef) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureHandlerDef.ProtoReflect.Descriptor instead.
func (*FailureHandlerDef) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{10}
}

func (x *FailureHandlerDef) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

func (m *FailureHandlerDef) GetFailureToCatch() isFailureHandlerDef_FailureToCatch {
	if m != nil {
		return m.FailureToCatch
	}
	return nil
}

func (x *FailureHandlerDef) GetSpecificFailure() string {
	if x, ok := x.GetFailureToCatch().(*FailureHandlerDef_SpecificFailure); ok {
		return x.SpecificFailure
	}
	return ""
}

func (x *FailureHandlerDef) GetAnyFailureOfType() FailureHandlerDef_LHFailureType {
	if x, ok := x.GetFailureToCatch().(*FailureHandlerDef_AnyFailureOfType); ok {
		return x.AnyFailureOfType
	}
	return FailureHandlerDef_FAILURE_TYPE_ERROR
}

type isFailureHandlerDef_FailureToCatch interface {
	isFailureHandlerDef_FailureToCatch()
}

type FailureHandlerDef_SpecificFailure struct {
	SpecificFailure string `protobuf:"bytes,1,opt,name=specific_failure,json=specificFailure,proto3,oneof"`
}

type FailureHandlerDef_AnyFailureOfType struct {
	AnyFailureOfType FailureHandlerDef_LHFailureType `protobuf:"varint,3,opt,name=any_failure_of_type,json=anyFailureOfType,proto3,enum=littlehorse.FailureHandlerDef_LHFailureType,oneof"`
}

func (*FailureHandlerDef_SpecificFailure) isFailureHandlerDef_FailureToCatch() {}

func (*FailureHandlerDef_AnyFailureOfType) isFailureHandlerDef_FailureToCatch() {}

type WaitForThreadsNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ThreadsToWaitFor:
	//	*WaitForThreadsNode_Threads
	//	*WaitForThreadsNode_ThreadList
	ThreadsToWaitFor         isWaitForThreadsNode_ThreadsToWaitFor `protobuf_oneof:"threads_to_wait_for"`
	PerThreadFailureHandlers []*FailureHandlerDef                  `protobuf:"bytes,3,rep,name=per_thread_failure_handlers,json=perThreadFailureHandlers,proto3" json:"per_thread_failure_handlers,omitempty"`
}

func (x *WaitForThreadsNode) Reset() {
	*x = WaitForThreadsNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsNode) ProtoMessage() {}

func (x *WaitForThreadsNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsNode.ProtoReflect.Descriptor instead.
func (*WaitForThreadsNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{11}
}

func (m *WaitForThreadsNode) GetThreadsToWaitFor() isWaitForThreadsNode_ThreadsToWaitFor {
	if m != nil {
		return m.ThreadsToWaitFor
	}
	return nil
}

func (x *WaitForThreadsNode) GetThreads() *WaitForThreadsNode_ThreadsToWaitFor {
	if x, ok := x.GetThreadsToWaitFor().(*WaitForThreadsNode_Threads); ok {
		return x.Threads
	}
	return nil
}

func (x *WaitForThreadsNode) GetThreadList() *VariableAssignment {
	if x, ok := x.GetThreadsToWaitFor().(*WaitForThreadsNode_ThreadList); ok {
		return x.ThreadList
	}
	return nil
}

func (x *WaitForThreadsNode) GetPerThreadFailureHandlers() []*FailureHandlerDef {
	if x != nil {
		return x.PerThreadFailureHandlers
	}
	return nil
}

type isWaitForThreadsNode_ThreadsToWaitFor interface {
	isWaitForThreadsNode_ThreadsToWaitFor()
}

type WaitForThreadsNode_Threads struct {
	Threads *WaitForThreadsNode_ThreadsToWaitFor `protobuf:"bytes,1,opt,name=threads,proto3,oneof"`
}

type WaitForThreadsNode_ThreadList struct {
	ThreadList *VariableAssignment `protobuf:"bytes,2,opt,name=thread_list,json=threadList,proto3,oneof"`
}

func (*WaitForThreadsNode_Threads) isWaitForThreadsNode_ThreadsToWaitFor() {}

func (*WaitForThreadsNode_ThreadList) isWaitForThreadsNode_ThreadsToWaitFor() {}

type ExternalEventNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefId *ExternalEventDefId `protobuf:"bytes,1,opt,name=external_event_def_id,json=externalEventDefId,proto3" json:"external_event_def_id,omitempty"`
	TimeoutSeconds     *VariableAssignment `protobuf:"bytes,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *ExternalEventNode) Reset() {
	*x = ExternalEventNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventNode) ProtoMessage() {}

func (x *ExternalEventNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventNode.ProtoReflect.Descriptor instead.
func (*ExternalEventNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{12}
}

func (x *ExternalEventNode) GetExternalEventDefId() *ExternalEventDefId {
	if x != nil {
		return x.ExternalEventDefId
	}
	return nil
}

func (x *ExternalEventNode) GetTimeoutSeconds() *VariableAssignment {
	if x != nil {
		return x.TimeoutSeconds
	}
	return nil
}

type EntrypointNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntrypointNode) Reset() {
	*x = EntrypointNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointNode) ProtoMessage() {}

func (x *EntrypointNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointNode.ProtoReflect.Descriptor instead.
func (*EntrypointNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{13}
}

type ExitNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureDef *FailureDef `protobuf:"bytes,1,opt,name=failure_def,json=failureDef,proto3,oneof" json:"failure_def,omitempty"`
}

func (x *ExitNode) Reset() {
	*x = ExitNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitNode) ProtoMessage() {}

func (x *ExitNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitNode.ProtoReflect.Descriptor instead.
func (*ExitNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{14}
}

func (x *ExitNode) GetFailureDef() *FailureDef {
	if x != nil {
		return x.FailureDef
	}
	return nil
}

type FailureDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureName string              `protobuf:"bytes,1,opt,name=failure_name,json=failureName,proto3" json:"failure_name,omitempty"`
	Message     string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Content     *VariableAssignment `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *FailureDef) Reset() {
	*x = FailureDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureDef) ProtoMessage() {}

func (x *FailureDef) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureDef.ProtoReflect.Descriptor instead.
func (*FailureDef) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{15}
}

func (x *FailureDef) GetFailureName() string {
	if x != nil {
		return x.FailureName
	}
	return ""
}

func (x *FailureDef) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FailureDef) GetContent() *VariableAssignment {
	if x != nil {
		return x.Content
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutgoingEdges   []*Edge              `protobuf:"bytes,1,rep,name=outgoing_edges,json=outgoingEdges,proto3" json:"outgoing_edges,omitempty"`
	FailureHandlers []*FailureHandlerDef `protobuf:"bytes,4,rep,name=failure_handlers,json=failureHandlers,proto3" json:"failure_handlers,omitempty"`
	// Types that are assignable to Node:
	//	*Node_Entrypoint
	//	*Node_Exit
	//	*Node_Task
	//	*Node_ExternalEvent
	//	*Node_StartThread
	//	*Node_WaitForThreads
	//	*Node_Nop
	//	*Node_Sleep
	//	*Node_UserTask
	//	*Node_StartMultipleThreads
	Node isNode_Node `protobuf_oneof:"node"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{16}
}

func (x *Node) GetOutgoingEdges() []*Edge {
	if x != nil {
		return x.OutgoingEdges
	}
	return nil
}

func (x *Node) GetFailureHandlers() []*FailureHandlerDef {
	if x != nil {
		return x.FailureHandlers
	}
	return nil
}

func (m *Node) GetNode() isNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *Node) GetEntrypoint() *EntrypointNode {
	if x, ok := x.GetNode().(*Node_Entrypoint); ok {
		return x.Entrypoint
	}
	return nil
}

func (x *Node) GetExit() *ExitNode {
	if x, ok := x.GetNode().(*Node_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *Node) GetTask() *TaskNode {
	if x, ok := x.GetNode().(*Node_Task); ok {
		return x.Task
	}
	return nil
}

func (x *Node) GetExternalEvent() *ExternalEventNode {
	if x, ok := x.GetNode().(*Node_ExternalEvent); ok {
		return x.ExternalEvent
	}
	return nil
}

func (x *Node) GetStartThread() *StartThreadNode {
	if x, ok := x.GetNode().(*Node_StartThread); ok {
		return x.StartThread
	}
	return nil
}

func (x *Node) GetWaitForThreads() *WaitForThreadsNode {
	if x, ok := x.GetNode().(*Node_WaitForThreads); ok {
		return x.WaitForThreads
	}
	return nil
}

func (x *Node) GetNop() *NopNode {
	if x, ok := x.GetNode().(*Node_Nop); ok {
		return x.Nop
	}
	return nil
}

func (x *Node) GetSleep() *SleepNode {
	if x, ok := x.GetNode().(*Node_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *Node) GetUserTask() *UserTaskNode {
	if x, ok := x.GetNode().(*Node_UserTask); ok {
		return x.UserTask
	}
	return nil
}

func (x *Node) GetStartMultipleThreads() *StartMultipleThreadsNode {
	if x, ok := x.GetNode().(*Node_StartMultipleThreads); ok {
		return x.StartMultipleThreads
	}
	return nil
}

type isNode_Node interface {
	isNode_Node()
}

type Node_Entrypoint struct {
	Entrypoint *EntrypointNode `protobuf:"bytes,5,opt,name=entrypoint,proto3,oneof"`
}

type Node_Exit struct {
	Exit *ExitNode `protobuf:"bytes,6,opt,name=exit,proto3,oneof"`
}

type Node_Task struct {
	Task *TaskNode `protobuf:"bytes,7,opt,name=task,proto3,oneof"`
}

type Node_ExternalEvent struct {
	ExternalEvent *ExternalEventNode `protobuf:"bytes,8,opt,name=external_event,json=externalEvent,proto3,oneof"`
}

type Node_StartThread struct {
	StartThread *StartThreadNode `protobuf:"bytes,9,opt,name=start_thread,json=startThread,proto3,oneof"`
}

type Node_WaitForThreads struct {
	WaitForThreads *WaitForThreadsNode `protobuf:"bytes,10,opt,name=wait_for_threads,json=waitForThreads,proto3,oneof"`
}

type Node_Nop struct {
	Nop *NopNode `protobuf:"bytes,11,opt,name=nop,proto3,oneof"`
}

type Node_Sleep struct {
	Sleep *SleepNode `protobuf:"bytes,12,opt,name=sleep,proto3,oneof"`
}

type Node_UserTask struct {
	UserTask *UserTaskNode `protobuf:"bytes,13,opt,name=user_task,json=userTask,proto3,oneof"`
}

type Node_StartMultipleThreads struct {
	StartMultipleThreads *StartMultipleThreadsNode `protobuf:"bytes,15,opt,name=start_multiple_threads,json=startMultipleThreads,proto3,oneof"`
}

func (*Node_Entrypoint) isNode_Node() {}

func (*Node_Exit) isNode_Node() {}

func (*Node_Task) isNode_Node() {}

func (*Node_ExternalEvent) isNode_Node() {}

func (*Node_StartThread) isNode_Node() {}

func (*Node_WaitForThreads) isNode_Node() {}

func (*Node_Nop) isNode_Node() {}

func (*Node_Sleep) isNode_Node() {}

func (*Node_UserTask) isNode_Node() {}

func (*Node_StartMultipleThreads) isNode_Node() {}

type UserTaskNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskDefName string `protobuf:"bytes,1,opt,name=user_task_def_name,json=userTaskDefName,proto3" json:"user_task_def_name,omitempty"`
	// to whom should the User Task Run be assigned?
	UserGroup *VariableAssignment `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
	UserId    *VariableAssignment `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// This is used to, for example, send a push notification to a mobile app
	// to remind someone that they need to fill out a task, or to re-assign
	// the task to another group of people
	Actions []*UTActionTrigger `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// So, once the WfSpec is created, this will be pinned to a version. Customer
	// can optionally specify a specific version or can leave it null, in which
	// case we just use the latest
	UserTaskDefVersion *int32 `protobuf:"varint,5,opt,name=user_task_def_version,json=userTaskDefVersion,proto3,oneof" json:"user_task_def_version,omitempty"`
	// Allow WfRun-specific notes for this User Task.
	Notes *VariableAssignment `protobuf:"bytes,6,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *UserTaskNode) Reset() {
	*x = UserTaskNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskNode) ProtoMessage() {}

func (x *UserTaskNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskNode.ProtoReflect.Descriptor instead.
func (*UserTaskNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{17}
}

func (x *UserTaskNode) GetUserTaskDefName() string {
	if x != nil {
		return x.UserTaskDefName
	}
	return ""
}

func (x *UserTaskNode) GetUserGroup() *VariableAssignment {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *UserTaskNode) GetUserId() *VariableAssignment {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserTaskNode) GetActions() []*UTActionTrigger {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *UserTaskNode) GetUserTaskDefVersion() int32 {
	if x != nil && x.UserTaskDefVersion != nil {
		return *x.UserTaskDefVersion
	}
	return 0
}

func (x *UserTaskNode) GetNotes() *VariableAssignment {
	if x != nil {
		return x.Notes
	}
	return nil
}

type EdgeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparator Comparator          `protobuf:"varint,1,opt,name=comparator,proto3,enum=littlehorse.Comparator" json:"comparator,omitempty"`
	Left       *VariableAssignment `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right      *VariableAssignment `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *EdgeCondition) Reset() {
	*x = EdgeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeCondition) ProtoMessage() {}

func (x *EdgeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeCondition.ProtoReflect.Descriptor instead.
func (*EdgeCondition) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{18}
}

func (x *EdgeCondition) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_LESS_THAN
}

func (x *EdgeCondition) GetLeft() *VariableAssignment {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *EdgeCondition) GetRight() *VariableAssignment {
	if x != nil {
		return x.Right
	}
	return nil
}

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinkNodeName      string              `protobuf:"bytes,1,opt,name=sink_node_name,json=sinkNodeName,proto3" json:"sink_node_name,omitempty"`
	Condition         *EdgeCondition      `protobuf:"bytes,2,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	VariableMutations []*VariableMutation `protobuf:"bytes,3,rep,name=variable_mutations,json=variableMutations,proto3" json:"variable_mutations,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{19}
}

func (x *Edge) GetSinkNodeName() string {
	if x != nil {
		return x.SinkNodeName
	}
	return ""
}

func (x *Edge) GetCondition() *EdgeCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Edge) GetVariableMutations() []*VariableMutation {
	if x != nil {
		return x.VariableMutations
	}
	return nil
}

type NopNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NopNode) Reset() {
	*x = NopNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NopNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NopNode) ProtoMessage() {}

func (x *NopNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NopNode.ProtoReflect.Descriptor instead.
func (*NopNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{20}
}

type SleepNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SleepLength:
	//	*SleepNode_RawSeconds
	//	*SleepNode_Timestamp
	//	*SleepNode_IsoDate
	SleepLength isSleepNode_SleepLength `protobuf_oneof:"sleep_length"`
}

func (x *SleepNode) Reset() {
	*x = SleepNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepNode) ProtoMessage() {}

func (x *SleepNode) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepNode.ProtoReflect.Descriptor instead.
func (*SleepNode) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{21}
}

func (m *SleepNode) GetSleepLength() isSleepNode_SleepLength {
	if m != nil {
		return m.SleepLength
	}
	return nil
}

func (x *SleepNode) GetRawSeconds() *VariableAssignment {
	if x, ok := x.GetSleepLength().(*SleepNode_RawSeconds); ok {
		return x.RawSeconds
	}
	return nil
}

func (x *SleepNode) GetTimestamp() *VariableAssignment {
	if x, ok := x.GetSleepLength().(*SleepNode_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *SleepNode) GetIsoDate() *VariableAssignment {
	if x, ok := x.GetSleepLength().(*SleepNode_IsoDate); ok {
		return x.IsoDate
	}
	return nil
}

type isSleepNode_SleepLength interface {
	isSleepNode_SleepLength()
}

type SleepNode_RawSeconds struct {
	RawSeconds *VariableAssignment `protobuf:"bytes,1,opt,name=raw_seconds,json=rawSeconds,proto3,oneof"`
}

type SleepNode_Timestamp struct {
	Timestamp *VariableAssignment `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type SleepNode_IsoDate struct {
	IsoDate *VariableAssignment `protobuf:"bytes,3,opt,name=iso_date,json=isoDate,proto3,oneof"`
}

func (*SleepNode_RawSeconds) isSleepNode_SleepLength() {}

func (*SleepNode_Timestamp) isSleepNode_SleepLength() {}

func (*SleepNode_IsoDate) isSleepNode_SleepLength() {}

type WfSpecVersionMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewMajorVersion      int32                           `protobuf:"varint,1,opt,name=new_major_version,json=newMajorVersion,proto3" json:"new_major_version,omitempty"`
	NewRevision          int32                           `protobuf:"varint,2,opt,name=new_revision,json=newRevision,proto3" json:"new_revision,omitempty"`
	ThreadSpecMigrations map[string]*ThreadSpecMigration `protobuf:"bytes,3,rep,name=thread_spec_migrations,json=threadSpecMigrations,proto3" json:"thread_spec_migrations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WfSpecVersionMigration) Reset() {
	*x = WfSpecVersionMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecVersionMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecVersionMigration) ProtoMessage() {}

func (x *WfSpecVersionMigration) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecVersionMigration.ProtoReflect.Descriptor instead.
func (*WfSpecVersionMigration) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{22}
}

func (x *WfSpecVersionMigration) GetNewMajorVersion() int32 {
	if x != nil {
		return x.NewMajorVersion
	}
	return 0
}

func (x *WfSpecVersionMigration) GetNewRevision() int32 {
	if x != nil {
		return x.NewRevision
	}
	return 0
}

func (x *WfSpecVersionMigration) GetThreadSpecMigrations() map[string]*ThreadSpecMigration {
	if x != nil {
		return x.ThreadSpecMigrations
	}
	return nil
}

type ThreadSpecMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewThreadSpecName string                    `protobuf:"bytes,1,opt,name=new_thread_spec_name,json=newThreadSpecName,proto3" json:"new_thread_spec_name,omitempty"`
	NodeMigrations    map[string]*NodeMigration `protobuf:"bytes,2,rep,name=node_migrations,json=nodeMigrations,proto3" json:"node_migrations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ThreadSpecMigration) Reset() {
	*x = ThreadSpecMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSpecMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSpecMigration) ProtoMessage() {}

func (x *ThreadSpecMigration) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSpecMigration.ProtoReflect.Descriptor instead.
func (*ThreadSpecMigration) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{23}
}

func (x *ThreadSpecMigration) GetNewThreadSpecName() string {
	if x != nil {
		return x.NewThreadSpecName
	}
	return ""
}

func (x *ThreadSpecMigration) GetNodeMigrations() map[string]*NodeMigration {
	if x != nil {
		return x.NodeMigrations
	}
	return nil
}

type NodeMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewNodeName string `protobuf:"bytes,1,opt,name=new_node_name,json=newNodeName,proto3" json:"new_node_name,omitempty"`
}

func (x *NodeMigration) Reset() {
	*x = NodeMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMigration) ProtoMessage() {}

func (x *NodeMigration) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMigration.ProtoReflect.Descriptor instead.
func (*NodeMigration) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{24}
}

func (x *NodeMigration) GetNewNodeName() string {
	if x != nil {
		return x.NewNodeName
	}
	return ""
}

// Reference to another WfSpec. If a WfSpec has a ParentWfSpecReference, then all
// WfRun's for that WfSpec *MUST* be the child of a WfRun of the provided WfSpec; meaning
// that the RunWf RPC must provide a `parent_wf_run_id` that belongs to the specified
// WfSpec.
//
// Currently, only reference by names is supported.
type WfSpec_ParentWfSpecReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Parent WfSpec
	WfSpecName         string `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecMajorVersion int32  `protobuf:"varint,2,opt,name=wf_spec_major_version,json=wfSpecMajorVersion,proto3" json:"wf_spec_major_version,omitempty"`
}

func (x *WfSpec_ParentWfSpecReference) Reset() {
	*x = WfSpec_ParentWfSpecReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpec_ParentWfSpecReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpec_ParentWfSpecReference) ProtoMessage() {}

func (x *WfSpec_ParentWfSpecReference) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpec_ParentWfSpecReference.ProtoReflect.Descriptor instead.
func (*WfSpec_ParentWfSpecReference) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{0, 1}
}

func (x *WfSpec_ParentWfSpecReference) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfSpec_ParentWfSpecReference) GetWfSpecMajorVersion() int32 {
	if x != nil {
		return x.WfSpecMajorVersion
	}
	return 0
}

type WaitForThreadsNode_ThreadToWaitFor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadRunNumber *VariableAssignment `protobuf:"bytes,1,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *WaitForThreadsNode_ThreadToWaitFor) Reset() {
	*x = WaitForThreadsNode_ThreadToWaitFor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsNode_ThreadToWaitFor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsNode_ThreadToWaitFor) ProtoMessage() {}

func (x *WaitForThreadsNode_ThreadToWaitFor) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsNode_ThreadToWaitFor.ProtoReflect.Descriptor instead.
func (*WaitForThreadsNode_ThreadToWaitFor) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{11, 0}
}

func (x *WaitForThreadsNode_ThreadToWaitFor) GetThreadRunNumber() *VariableAssignment {
	if x != nil {
		return x.ThreadRunNumber
	}
	return nil
}

type WaitForThreadsNode_ThreadsToWaitFor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*WaitForThreadsNode_ThreadToWaitFor `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *WaitForThreadsNode_ThreadsToWaitFor) Reset() {
	*x = WaitForThreadsNode_ThreadsToWaitFor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wf_spec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsNode_ThreadsToWaitFor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsNode_ThreadsToWaitFor) ProtoMessage() {}

func (x *WaitForThreadsNode_ThreadsToWaitFor) ProtoReflect() protoreflect.Message {
	mi := &file_wf_spec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsNode_ThreadsToWaitFor.ProtoReflect.Descriptor instead.
func (*WaitForThreadsNode_ThreadsToWaitFor) Descriptor() ([]byte, []int) {
	return file_wf_spec_proto_rawDescGZIP(), []int{11, 1}
}

func (x *WaitForThreadsNode_ThreadsToWaitFor) GetThreads() []*WaitForThreadsNode_ThreadToWaitFor {
	if x != nil {
		return x.Threads
	}
	return nil
}

var File_wf_spec_proto protoreflect.FileDescriptor

var file_wf_spec_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x77, 0x66, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x06, 0x0a, 0x06, 0x57, 0x66, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x56, 0x61, 0x72, 0x44, 0x65, 0x66, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54,
	0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x02, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x88,
	0x01, 0x01, 0x1a, 0x57, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x15, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22,
	0x6c, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x1c, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x66, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x57, 0x66, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x77, 0x66, 0x5f, 0x67, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x64, 0x0a,
	0x09, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x07,
	0x76, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x06, 0x76, 0x61, 0x72, 0x44, 0x65, 0x66, 0x22,
	0x82, 0x02, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x56, 0x61, 0x72, 0x44, 0x65, 0x66,
	0x12, 0x31, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x06, 0x76, 0x61, 0x72,
	0x44, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x39, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57,
	0x66, 0x52, 0x75, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x56, 0x61, 0x72, 0x44, 0x65, 0x66, 0x52,
	0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x65, 0x66,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x65, 0x66, 0x73, 0x12,
	0x52, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x1a, 0x4b, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x76, 0x0a, 0x15, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x49,
	0x0a, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x67, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x8e, 0x01,
	0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x65, 0x66, 0x12, 0x52,
	0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x12,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5,
	0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x5d,
	0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x02,
	0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x13,
	0x61, 0x6e, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x2e, 0x4c, 0x48, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6e, 0x79, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x4c,
	0x48, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x22, 0xdb, 0x03, 0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a,
	0x1b, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x52, 0x18, 0x70, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x1a, 0x5e, 0x0a, 0x0f,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x12,
	0x4b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x5d, 0x0a, 0x10,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x12, 0x49, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xf8, 0x05, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x0d, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x4b,
	0x0a, 0x10, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x6e,
	0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x6e, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x5d, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x04, 0x45,
	0x64, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x6e,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x12, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x22,
	0xde, 0x01, 0x0a, 0x09, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0xc7, 0x02, 0x0a, 0x16, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x77, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x16, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x69, 0x0a, 0x19, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02, 0x0a, 0x13, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x5d, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x33, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x4e, 0x0a, 0x18, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x56, 0x41, 0x52,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41,
	0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44,
	0x5f, 0x56, 0x41, 0x52, 0x10, 0x02, 0x42, 0x47, 0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0xaa, 0x02, 0x18, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wf_spec_proto_rawDescOnce sync.Once
	file_wf_spec_proto_rawDescData = file_wf_spec_proto_rawDesc
)

func file_wf_spec_proto_rawDescGZIP() []byte {
	file_wf_spec_proto_rawDescOnce.Do(func() {
		file_wf_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_wf_spec_proto_rawDescData)
	})
	return file_wf_spec_proto_rawDescData
}

var file_wf_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wf_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_wf_spec_proto_goTypes = []interface{}{
	(WfRunVariableAccessLevel)(0),               // 0: littlehorse.WfRunVariableAccessLevel
	(FailureHandlerDef_LHFailureType)(0),        // 1: littlehorse.FailureHandlerDef.LHFailureType
	(*WfSpec)(nil),                              // 2: littlehorse.WfSpec
	(*WorkflowRetentionPolicy)(nil),             // 3: littlehorse.WorkflowRetentionPolicy
	(*JsonIndex)(nil),                           // 4: littlehorse.JsonIndex
	(*SearchableVariableDef)(nil),               // 5: littlehorse.SearchableVariableDef
	(*ThreadVarDef)(nil),                        // 6: littlehorse.ThreadVarDef
	(*ThreadSpec)(nil),                          // 7: littlehorse.ThreadSpec
	(*ThreadRetentionPolicy)(nil),               // 8: littlehorse.ThreadRetentionPolicy
	(*InterruptDef)(nil),                        // 9: littlehorse.InterruptDef
	(*StartThreadNode)(nil),                     // 10: littlehorse.StartThreadNode
	(*StartMultipleThreadsNode)(nil),            // 11: littlehorse.StartMultipleThreadsNode
	(*FailureHandlerDef)(nil),                   // 12: littlehorse.FailureHandlerDef
	(*WaitForThreadsNode)(nil),                  // 13: littlehorse.WaitForThreadsNode
	(*ExternalEventNode)(nil),                   // 14: littlehorse.ExternalEventNode
	(*EntrypointNode)(nil),                      // 15: littlehorse.EntrypointNode
	(*ExitNode)(nil),                            // 16: littlehorse.ExitNode
	(*FailureDef)(nil),                          // 17: littlehorse.FailureDef
	(*Node)(nil),                                // 18: littlehorse.Node
	(*UserTaskNode)(nil),                        // 19: littlehorse.UserTaskNode
	(*EdgeCondition)(nil),                       // 20: littlehorse.EdgeCondition
	(*Edge)(nil),                                // 21: littlehorse.Edge
	(*NopNode)(nil),                             // 22: littlehorse.NopNode
	(*SleepNode)(nil),                           // 23: littlehorse.SleepNode
	(*WfSpecVersionMigration)(nil),              // 24: littlehorse.WfSpecVersionMigration
	(*ThreadSpecMigration)(nil),                 // 25: littlehorse.ThreadSpecMigration
	(*NodeMigration)(nil),                       // 26: littlehorse.NodeMigration
	nil,                                         // 27: littlehorse.WfSpec.ThreadSpecsEntry
	(*WfSpec_ParentWfSpecReference)(nil),        // 28: littlehorse.WfSpec.ParentWfSpecReference
	nil,                                         // 29: littlehorse.ThreadSpec.NodesEntry
	nil,                                         // 30: littlehorse.StartThreadNode.VariablesEntry
	nil,                                         // 31: littlehorse.StartMultipleThreadsNode.VariablesEntry
	(*WaitForThreadsNode_ThreadToWaitFor)(nil),  // 32: littlehorse.WaitForThreadsNode.ThreadToWaitFor
	(*WaitForThreadsNode_ThreadsToWaitFor)(nil), // 33: littlehorse.WaitForThreadsNode.ThreadsToWaitFor
	nil,                           // 34: littlehorse.WfSpecVersionMigration.ThreadSpecMigrationsEntry
	nil,                           // 35: littlehorse.ThreadSpecMigration.NodeMigrationsEntry
	(*WfSpecId)(nil),              // 36: littlehorse.WfSpecId
	(*timestamppb.Timestamp)(nil), // 37: google.protobuf.Timestamp
	(MetadataStatus)(0),           // 38: littlehorse.MetadataStatus
	(VariableType)(0),             // 39: littlehorse.VariableType
	(*VariableDef)(nil),           // 40: littlehorse.VariableDef
	(*ExternalEventDefId)(nil),    // 41: littlehorse.ExternalEventDefId
	(*VariableAssignment)(nil),    // 42: littlehorse.VariableAssignment
	(*TaskNode)(nil),              // 43: littlehorse.TaskNode
	(*UTActionTrigger)(nil),       // 44: littlehorse.UTActionTrigger
	(Comparator)(0),               // 45: littlehorse.Comparator
	(*VariableMutation)(nil),      // 46: littlehorse.VariableMutation
}
var file_wf_spec_proto_depIdxs = []int32{
	36, // 0: littlehorse.WfSpec.id:type_name -> littlehorse.WfSpecId
	37, // 1: littlehorse.WfSpec.created_at:type_name -> google.protobuf.Timestamp
	6,  // 2: littlehorse.WfSpec.frozen_variables:type_name -> littlehorse.ThreadVarDef
	38, // 3: littlehorse.WfSpec.status:type_name -> littlehorse.MetadataStatus
	27, // 4: littlehorse.WfSpec.thread_specs:type_name -> littlehorse.WfSpec.ThreadSpecsEntry
	3,  // 5: littlehorse.WfSpec.retention_policy:type_name -> littlehorse.WorkflowRetentionPolicy
	24, // 6: littlehorse.WfSpec.migration:type_name -> littlehorse.WfSpecVersionMigration
	28, // 7: littlehorse.WfSpec.parent_wf_spec:type_name -> littlehorse.WfSpec.ParentWfSpecReference
	39, // 8: littlehorse.JsonIndex.field_type:type_name -> littlehorse.VariableType
	40, // 9: littlehorse.SearchableVariableDef.var_def:type_name -> littlehorse.VariableDef
	40, // 10: littlehorse.ThreadVarDef.var_def:type_name -> littlehorse.VariableDef
	4,  // 11: littlehorse.ThreadVarDef.json_indexes:type_name -> littlehorse.JsonIndex
	0,  // 12: littlehorse.ThreadVarDef.access_level:type_name -> littlehorse.WfRunVariableAccessLevel
	29, // 13: littlehorse.ThreadSpec.nodes:type_name -> littlehorse.ThreadSpec.NodesEntry
	6,  // 14: littlehorse.ThreadSpec.variable_defs:type_name -> littlehorse.ThreadVarDef
	9,  // 15: littlehorse.ThreadSpec.interrupt_defs:type_name -> littlehorse.InterruptDef
	8,  // 16: littlehorse.ThreadSpec.retention_policy:type_name -> littlehorse.ThreadRetentionPolicy
	41, // 17: littlehorse.InterruptDef.external_event_def_id:type_name -> littlehorse.ExternalEventDefId
	30, // 18: littlehorse.StartThreadNode.variables:type_name -> littlehorse.StartThreadNode.VariablesEntry
	31, // 19: littlehorse.StartMultipleThreadsNode.variables:type_name -> littlehorse.StartMultipleThreadsNode.VariablesEntry
	42, // 20: littlehorse.StartMultipleThreadsNode.iterable:type_name -> littlehorse.VariableAssignment
	1,  // 21: littlehorse.FailureHandlerDef.any_failure_of_type:type_name -> littlehorse.FailureHandlerDef.LHFailureType
	33, // 22: littlehorse.WaitForThreadsNode.threads:type_name -> littlehorse.WaitForThreadsNode.ThreadsToWaitFor
	42, // 23: littlehorse.WaitForThreadsNode.thread_list:type_name -> littlehorse.VariableAssignment
	12, // 24: littlehorse.WaitForThreadsNode.per_thread_failure_handlers:type_name -> littlehorse.FailureHandlerDef
	41, // 25: littlehorse.ExternalEventNode.external_event_def_id:type_name -> littlehorse.ExternalEventDefId
	42, // 26: littlehorse.ExternalEventNode.timeout_seconds:type_name -> littlehorse.VariableAssignment
	17, // 27: littlehorse.ExitNode.failure_def:type_name -> littlehorse.FailureDef
	42, // 28: littlehorse.FailureDef.content:type_name -> littlehorse.VariableAssignment
	21, // 29: littlehorse.Node.outgoing_edges:type_name -> littlehorse.Edge
	12, // 30: littlehorse.Node.failure_handlers:type_name -> littlehorse.FailureHandlerDef
	15, // 31: littlehorse.Node.entrypoint:type_name -> littlehorse.EntrypointNode
	16, // 32: littlehorse.Node.exit:type_name -> littlehorse.ExitNode
	43, // 33: littlehorse.Node.task:type_name -> littlehorse.TaskNode
	14, // 34: littlehorse.Node.external_event:type_name -> littlehorse.ExternalEventNode
	10, // 35: littlehorse.Node.start_thread:type_name -> littlehorse.StartThreadNode
	13, // 36: littlehorse.Node.wait_for_threads:type_name -> littlehorse.WaitForThreadsNode
	22, // 37: littlehorse.Node.nop:type_name -> littlehorse.NopNode
	23, // 38: littlehorse.Node.sleep:type_name -> littlehorse.SleepNode
	19, // 39: littlehorse.Node.user_task:type_name -> littlehorse.UserTaskNode
	11, // 40: littlehorse.Node.start_multiple_threads:type_name -> littlehorse.StartMultipleThreadsNode
	42, // 41: littlehorse.UserTaskNode.user_group:type_name -> littlehorse.VariableAssignment
	42, // 42: littlehorse.UserTaskNode.user_id:type_name -> littlehorse.VariableAssignment
	44, // 43: littlehorse.UserTaskNode.actions:type_name -> littlehorse.UTActionTrigger
	42, // 44: littlehorse.UserTaskNode.notes:type_name -> littlehorse.VariableAssignment
	45, // 45: littlehorse.EdgeCondition.comparator:type_name -> littlehorse.Comparator
	42, // 46: littlehorse.EdgeCondition.left:type_name -> littlehorse.VariableAssignment
	42, // 47: littlehorse.EdgeCondition.right:type_name -> littlehorse.VariableAssignment
	20, // 48: littlehorse.Edge.condition:type_name -> littlehorse.EdgeCondition
	46, // 49: littlehorse.Edge.variable_mutations:type_name -> littlehorse.VariableMutation
	42, // 50: littlehorse.SleepNode.raw_seconds:type_name -> littlehorse.VariableAssignment
	42, // 51: littlehorse.SleepNode.timestamp:type_name -> littlehorse.VariableAssignment
	42, // 52: littlehorse.SleepNode.iso_date:type_name -> littlehorse.VariableAssignment
	34, // 53: littlehorse.WfSpecVersionMigration.thread_spec_migrations:type_name -> littlehorse.WfSpecVersionMigration.ThreadSpecMigrationsEntry
	35, // 54: littlehorse.ThreadSpecMigration.node_migrations:type_name -> littlehorse.ThreadSpecMigration.NodeMigrationsEntry
	7,  // 55: littlehorse.WfSpec.ThreadSpecsEntry.value:type_name -> littlehorse.ThreadSpec
	18, // 56: littlehorse.ThreadSpec.NodesEntry.value:type_name -> littlehorse.Node
	42, // 57: littlehorse.StartThreadNode.VariablesEntry.value:type_name -> littlehorse.VariableAssignment
	42, // 58: littlehorse.StartMultipleThreadsNode.VariablesEntry.value:type_name -> littlehorse.VariableAssignment
	42, // 59: littlehorse.WaitForThreadsNode.ThreadToWaitFor.thread_run_number:type_name -> littlehorse.VariableAssignment
	32, // 60: littlehorse.WaitForThreadsNode.ThreadsToWaitFor.threads:type_name -> littlehorse.WaitForThreadsNode.ThreadToWaitFor
	25, // 61: littlehorse.WfSpecVersionMigration.ThreadSpecMigrationsEntry.value:type_name -> littlehorse.ThreadSpecMigration
	26, // 62: littlehorse.ThreadSpecMigration.NodeMigrationsEntry.value:type_name -> littlehorse.NodeMigration
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_wf_spec_proto_init() }
func file_wf_spec_proto_init() {
	if File_wf_spec_proto != nil {
		return
	}
	file_common_enums_proto_init()
	file_common_wfspec_proto_init()
	file_object_id_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wf_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchableVariableDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadVarDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadRetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterruptDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartThreadNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMultipleThreadsNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureHandlerDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NopNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecVersionMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSpecMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpec_ParentWfSpecReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsNode_ThreadToWaitFor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wf_spec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsNode_ThreadsToWaitFor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wf_spec_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_wf_spec_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WorkflowRetentionPolicy_SecondsAfterWfTermination)(nil),
	}
	file_wf_spec_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_wf_spec_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ThreadRetentionPolicy_SecondsAfterThreadTermination)(nil),
	}
	file_wf_spec_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*FailureHandlerDef_SpecificFailure)(nil),
		(*FailureHandlerDef_AnyFailureOfType)(nil),
	}
	file_wf_spec_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*WaitForThreadsNode_Threads)(nil),
		(*WaitForThreadsNode_ThreadList)(nil),
	}
	file_wf_spec_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_wf_spec_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_wf_spec_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Node_Entrypoint)(nil),
		(*Node_Exit)(nil),
		(*Node_Task)(nil),
		(*Node_ExternalEvent)(nil),
		(*Node_StartThread)(nil),
		(*Node_WaitForThreads)(nil),
		(*Node_Nop)(nil),
		(*Node_Sleep)(nil),
		(*Node_UserTask)(nil),
		(*Node_StartMultipleThreads)(nil),
	}
	file_wf_spec_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_wf_spec_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_wf_spec_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*SleepNode_RawSeconds)(nil),
		(*SleepNode_Timestamp)(nil),
		(*SleepNode_IsoDate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wf_spec_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wf_spec_proto_goTypes,
		DependencyIndexes: file_wf_spec_proto_depIdxs,
		EnumInfos:         file_wf_spec_proto_enumTypes,
		MessageInfos:      file_wf_spec_proto_msgTypes,
	}.Build()
	File_wf_spec_proto = out.File
	file_wf_spec_proto_rawDesc = nil
	file_wf_spec_proto_goTypes = nil
	file_wf_spec_proto_depIdxs = nil
}
