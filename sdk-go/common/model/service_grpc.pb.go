// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LHPublicApi_PutTaskDef_FullMethodName             = "/littlehorse.LHPublicApi/PutTaskDef"
	LHPublicApi_GetTaskDef_FullMethodName             = "/littlehorse.LHPublicApi/GetTaskDef"
	LHPublicApi_PutExternalEventDef_FullMethodName    = "/littlehorse.LHPublicApi/PutExternalEventDef"
	LHPublicApi_GetExternalEventDef_FullMethodName    = "/littlehorse.LHPublicApi/GetExternalEventDef"
	LHPublicApi_PutWfSpec_FullMethodName              = "/littlehorse.LHPublicApi/PutWfSpec"
	LHPublicApi_GetWfSpec_FullMethodName              = "/littlehorse.LHPublicApi/GetWfSpec"
	LHPublicApi_GetLatestWfSpec_FullMethodName        = "/littlehorse.LHPublicApi/GetLatestWfSpec"
	LHPublicApi_PutUserTaskDef_FullMethodName         = "/littlehorse.LHPublicApi/PutUserTaskDef"
	LHPublicApi_GetUserTaskDef_FullMethodName         = "/littlehorse.LHPublicApi/GetUserTaskDef"
	LHPublicApi_GetLatestUserTaskDef_FullMethodName   = "/littlehorse.LHPublicApi/GetLatestUserTaskDef"
	LHPublicApi_GetUserTaskRun_FullMethodName         = "/littlehorse.LHPublicApi/GetUserTaskRun"
	LHPublicApi_RunWf_FullMethodName                  = "/littlehorse.LHPublicApi/RunWf"
	LHPublicApi_GetWfRun_FullMethodName               = "/littlehorse.LHPublicApi/GetWfRun"
	LHPublicApi_AssignUserTaskRun_FullMethodName      = "/littlehorse.LHPublicApi/AssignUserTaskRun"
	LHPublicApi_CompleteUserTaskRun_FullMethodName    = "/littlehorse.LHPublicApi/CompleteUserTaskRun"
	LHPublicApi_GetNodeRun_FullMethodName             = "/littlehorse.LHPublicApi/GetNodeRun"
	LHPublicApi_ListNodeRuns_FullMethodName           = "/littlehorse.LHPublicApi/ListNodeRuns"
	LHPublicApi_GetTaskRun_FullMethodName             = "/littlehorse.LHPublicApi/GetTaskRun"
	LHPublicApi_GetVariable_FullMethodName            = "/littlehorse.LHPublicApi/GetVariable"
	LHPublicApi_ListVariables_FullMethodName          = "/littlehorse.LHPublicApi/ListVariables"
	LHPublicApi_PutExternalEvent_FullMethodName       = "/littlehorse.LHPublicApi/PutExternalEvent"
	LHPublicApi_GetExternalEvent_FullMethodName       = "/littlehorse.LHPublicApi/GetExternalEvent"
	LHPublicApi_ListExternalEvents_FullMethodName     = "/littlehorse.LHPublicApi/ListExternalEvents"
	LHPublicApi_SearchWfRun_FullMethodName            = "/littlehorse.LHPublicApi/SearchWfRun"
	LHPublicApi_SearchNodeRun_FullMethodName          = "/littlehorse.LHPublicApi/SearchNodeRun"
	LHPublicApi_SearchTaskRun_FullMethodName          = "/littlehorse.LHPublicApi/SearchTaskRun"
	LHPublicApi_SearchUserTaskRun_FullMethodName      = "/littlehorse.LHPublicApi/SearchUserTaskRun"
	LHPublicApi_SearchVariable_FullMethodName         = "/littlehorse.LHPublicApi/SearchVariable"
	LHPublicApi_SearchTaskDef_FullMethodName          = "/littlehorse.LHPublicApi/SearchTaskDef"
	LHPublicApi_SearchUserTaskDef_FullMethodName      = "/littlehorse.LHPublicApi/SearchUserTaskDef"
	LHPublicApi_SearchWfSpec_FullMethodName           = "/littlehorse.LHPublicApi/SearchWfSpec"
	LHPublicApi_SearchExternalEventDef_FullMethodName = "/littlehorse.LHPublicApi/SearchExternalEventDef"
	LHPublicApi_SearchExternalEvent_FullMethodName    = "/littlehorse.LHPublicApi/SearchExternalEvent"
	LHPublicApi_RegisterTaskWorker_FullMethodName     = "/littlehorse.LHPublicApi/RegisterTaskWorker"
	LHPublicApi_PollTask_FullMethodName               = "/littlehorse.LHPublicApi/PollTask"
	LHPublicApi_ReportTask_FullMethodName             = "/littlehorse.LHPublicApi/ReportTask"
	LHPublicApi_StopWfRun_FullMethodName              = "/littlehorse.LHPublicApi/StopWfRun"
	LHPublicApi_ResumeWfRun_FullMethodName            = "/littlehorse.LHPublicApi/ResumeWfRun"
	LHPublicApi_DeleteWfRun_FullMethodName            = "/littlehorse.LHPublicApi/DeleteWfRun"
	LHPublicApi_DeleteTaskDef_FullMethodName          = "/littlehorse.LHPublicApi/DeleteTaskDef"
	LHPublicApi_DeleteWfSpec_FullMethodName           = "/littlehorse.LHPublicApi/DeleteWfSpec"
	LHPublicApi_DeleteUserTaskDef_FullMethodName      = "/littlehorse.LHPublicApi/DeleteUserTaskDef"
	LHPublicApi_DeleteExternalEventDef_FullMethodName = "/littlehorse.LHPublicApi/DeleteExternalEventDef"
	LHPublicApi_HealthCheck_FullMethodName            = "/littlehorse.LHPublicApi/HealthCheck"
	LHPublicApi_TaskDefMetrics_FullMethodName         = "/littlehorse.LHPublicApi/TaskDefMetrics"
	LHPublicApi_WfSpecMetrics_FullMethodName          = "/littlehorse.LHPublicApi/WfSpecMetrics"
	LHPublicApi_ListTaskDefMetrics_FullMethodName     = "/littlehorse.LHPublicApi/ListTaskDefMetrics"
	LHPublicApi_ListWfSpecMetrics_FullMethodName      = "/littlehorse.LHPublicApi/ListWfSpecMetrics"
)

// LHPublicApiClient is the client API for LHPublicApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LHPublicApiClient interface {
	PutTaskDef(ctx context.Context, in *PutTaskDefPb, opts ...grpc.CallOption) (*PutTaskDefReplyPb, error)
	GetTaskDef(ctx context.Context, in *TaskDefIdPb, opts ...grpc.CallOption) (*GetTaskDefReplyPb, error)
	PutExternalEventDef(ctx context.Context, in *PutExternalEventDefPb, opts ...grpc.CallOption) (*PutExternalEventDefReplyPb, error)
	GetExternalEventDef(ctx context.Context, in *ExternalEventDefIdPb, opts ...grpc.CallOption) (*GetExternalEventDefReplyPb, error)
	PutWfSpec(ctx context.Context, in *PutWfSpecPb, opts ...grpc.CallOption) (*PutWfSpecReplyPb, error)
	GetWfSpec(ctx context.Context, in *WfSpecIdPb, opts ...grpc.CallOption) (*GetWfSpecReplyPb, error)
	GetLatestWfSpec(ctx context.Context, in *GetLatestWfSpecPb, opts ...grpc.CallOption) (*GetWfSpecReplyPb, error)
	PutUserTaskDef(ctx context.Context, in *PutUserTaskDefPb, opts ...grpc.CallOption) (*PutUserTaskDefReplyPb, error)
	GetUserTaskDef(ctx context.Context, in *UserTaskDefIdPb, opts ...grpc.CallOption) (*GetUserTaskDefReplyPb, error)
	GetLatestUserTaskDef(ctx context.Context, in *GetLatestUserTaskDefPb, opts ...grpc.CallOption) (*GetUserTaskDefReplyPb, error)
	GetUserTaskRun(ctx context.Context, in *UserTaskRunIdPb, opts ...grpc.CallOption) (*GetUserTaskRunReplyPb, error)
	RunWf(ctx context.Context, in *RunWfPb, opts ...grpc.CallOption) (*RunWfReplyPb, error)
	GetWfRun(ctx context.Context, in *WfRunIdPb, opts ...grpc.CallOption) (*GetWfRunReplyPb, error)
	AssignUserTaskRun(ctx context.Context, in *AssignUserTaskRunPb, opts ...grpc.CallOption) (*AssignUserTaskRunReplyPb, error)
	CompleteUserTaskRun(ctx context.Context, in *CompleteUserTaskRunPb, opts ...grpc.CallOption) (*CompleteUserTaskRunReplyPb, error)
	GetNodeRun(ctx context.Context, in *NodeRunIdPb, opts ...grpc.CallOption) (*GetNodeRunReplyPb, error)
	ListNodeRuns(ctx context.Context, in *ListNodeRunsPb, opts ...grpc.CallOption) (*ListNodeRunsReplyPb, error)
	GetTaskRun(ctx context.Context, in *TaskRunIdPb, opts ...grpc.CallOption) (*GetTaskRunReplyPb, error)
	GetVariable(ctx context.Context, in *VariableIdPb, opts ...grpc.CallOption) (*GetVariableReplyPb, error)
	ListVariables(ctx context.Context, in *ListVariablesPb, opts ...grpc.CallOption) (*ListVariablesReplyPb, error)
	PutExternalEvent(ctx context.Context, in *PutExternalEventPb, opts ...grpc.CallOption) (*PutExternalEventReplyPb, error)
	GetExternalEvent(ctx context.Context, in *ExternalEventIdPb, opts ...grpc.CallOption) (*GetExternalEventReplyPb, error)
	ListExternalEvents(ctx context.Context, in *ListExternalEventsPb, opts ...grpc.CallOption) (*ListExternalEventsReplyPb, error)
	SearchWfRun(ctx context.Context, in *SearchWfRunPb, opts ...grpc.CallOption) (*SearchWfRunReplyPb, error)
	SearchNodeRun(ctx context.Context, in *SearchNodeRunPb, opts ...grpc.CallOption) (*SearchNodeRunReplyPb, error)
	SearchTaskRun(ctx context.Context, in *SearchTaskRunPb, opts ...grpc.CallOption) (*SearchTaskRunReplyPb, error)
	SearchUserTaskRun(ctx context.Context, in *SearchUserTaskRunPb, opts ...grpc.CallOption) (*SearchUserTaskRunReplyPb, error)
	SearchVariable(ctx context.Context, in *SearchVariablePb, opts ...grpc.CallOption) (*SearchVariableReplyPb, error)
	SearchTaskDef(ctx context.Context, in *SearchTaskDefPb, opts ...grpc.CallOption) (*SearchTaskDefReplyPb, error)
	SearchUserTaskDef(ctx context.Context, in *SearchUserTaskDefPb, opts ...grpc.CallOption) (*SearchUserTaskDefReplyPb, error)
	SearchWfSpec(ctx context.Context, in *SearchWfSpecPb, opts ...grpc.CallOption) (*SearchWfSpecReplyPb, error)
	SearchExternalEventDef(ctx context.Context, in *SearchExternalEventDefPb, opts ...grpc.CallOption) (*SearchExternalEventDefReplyPb, error)
	SearchExternalEvent(ctx context.Context, in *SearchExternalEventPb, opts ...grpc.CallOption) (*SearchExternalEventReplyPb, error)
	RegisterTaskWorker(ctx context.Context, in *RegisterTaskWorkerPb, opts ...grpc.CallOption) (*RegisterTaskWorkerReplyPb, error)
	PollTask(ctx context.Context, opts ...grpc.CallOption) (LHPublicApi_PollTaskClient, error)
	ReportTask(ctx context.Context, in *ReportTaskRunPb, opts ...grpc.CallOption) (*ReportTaskReplyPb, error)
	StopWfRun(ctx context.Context, in *StopWfRunPb, opts ...grpc.CallOption) (*StopWfRunReplyPb, error)
	ResumeWfRun(ctx context.Context, in *ResumeWfRunPb, opts ...grpc.CallOption) (*ResumeWfRunReplyPb, error)
	DeleteWfRun(ctx context.Context, in *DeleteWfRunPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error)
	DeleteTaskDef(ctx context.Context, in *DeleteTaskDefPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error)
	DeleteWfSpec(ctx context.Context, in *DeleteWfSpecPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error)
	DeleteUserTaskDef(ctx context.Context, in *DeleteUserTaskDefPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error)
	DeleteExternalEventDef(ctx context.Context, in *DeleteExternalEventDefPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error)
	HealthCheck(ctx context.Context, in *HealthCheckPb, opts ...grpc.CallOption) (*HealthCheckReplyPb, error)
	TaskDefMetrics(ctx context.Context, in *TaskDefMetricsQueryPb, opts ...grpc.CallOption) (*TaskDefMetricsReplyPb, error)
	WfSpecMetrics(ctx context.Context, in *WfSpecMetricsQueryPb, opts ...grpc.CallOption) (*WfSpecMetricsReplyPb, error)
	ListTaskDefMetrics(ctx context.Context, in *ListTaskMetricsPb, opts ...grpc.CallOption) (*ListTaskMetricsReplyPb, error)
	ListWfSpecMetrics(ctx context.Context, in *ListWfMetricsPb, opts ...grpc.CallOption) (*ListWfMetricsReplyPb, error)
}

type lHPublicApiClient struct {
	cc grpc.ClientConnInterface
}

func NewLHPublicApiClient(cc grpc.ClientConnInterface) LHPublicApiClient {
	return &lHPublicApiClient{cc}
}

func (c *lHPublicApiClient) PutTaskDef(ctx context.Context, in *PutTaskDefPb, opts ...grpc.CallOption) (*PutTaskDefReplyPb, error) {
	out := new(PutTaskDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_PutTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetTaskDef(ctx context.Context, in *TaskDefIdPb, opts ...grpc.CallOption) (*GetTaskDefReplyPb, error) {
	out := new(GetTaskDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutExternalEventDef(ctx context.Context, in *PutExternalEventDefPb, opts ...grpc.CallOption) (*PutExternalEventDefReplyPb, error) {
	out := new(PutExternalEventDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_PutExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetExternalEventDef(ctx context.Context, in *ExternalEventDefIdPb, opts ...grpc.CallOption) (*GetExternalEventDefReplyPb, error) {
	out := new(GetExternalEventDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutWfSpec(ctx context.Context, in *PutWfSpecPb, opts ...grpc.CallOption) (*PutWfSpecReplyPb, error) {
	out := new(PutWfSpecReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_PutWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetWfSpec(ctx context.Context, in *WfSpecIdPb, opts ...grpc.CallOption) (*GetWfSpecReplyPb, error) {
	out := new(GetWfSpecReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetLatestWfSpec(ctx context.Context, in *GetLatestWfSpecPb, opts ...grpc.CallOption) (*GetWfSpecReplyPb, error) {
	out := new(GetWfSpecReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetLatestWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutUserTaskDef(ctx context.Context, in *PutUserTaskDefPb, opts ...grpc.CallOption) (*PutUserTaskDefReplyPb, error) {
	out := new(PutUserTaskDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_PutUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetUserTaskDef(ctx context.Context, in *UserTaskDefIdPb, opts ...grpc.CallOption) (*GetUserTaskDefReplyPb, error) {
	out := new(GetUserTaskDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetLatestUserTaskDef(ctx context.Context, in *GetLatestUserTaskDefPb, opts ...grpc.CallOption) (*GetUserTaskDefReplyPb, error) {
	out := new(GetUserTaskDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetLatestUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetUserTaskRun(ctx context.Context, in *UserTaskRunIdPb, opts ...grpc.CallOption) (*GetUserTaskRunReplyPb, error) {
	out := new(GetUserTaskRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) RunWf(ctx context.Context, in *RunWfPb, opts ...grpc.CallOption) (*RunWfReplyPb, error) {
	out := new(RunWfReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_RunWf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetWfRun(ctx context.Context, in *WfRunIdPb, opts ...grpc.CallOption) (*GetWfRunReplyPb, error) {
	out := new(GetWfRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) AssignUserTaskRun(ctx context.Context, in *AssignUserTaskRunPb, opts ...grpc.CallOption) (*AssignUserTaskRunReplyPb, error) {
	out := new(AssignUserTaskRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_AssignUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) CompleteUserTaskRun(ctx context.Context, in *CompleteUserTaskRunPb, opts ...grpc.CallOption) (*CompleteUserTaskRunReplyPb, error) {
	out := new(CompleteUserTaskRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_CompleteUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetNodeRun(ctx context.Context, in *NodeRunIdPb, opts ...grpc.CallOption) (*GetNodeRunReplyPb, error) {
	out := new(GetNodeRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetNodeRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListNodeRuns(ctx context.Context, in *ListNodeRunsPb, opts ...grpc.CallOption) (*ListNodeRunsReplyPb, error) {
	out := new(ListNodeRunsReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_ListNodeRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetTaskRun(ctx context.Context, in *TaskRunIdPb, opts ...grpc.CallOption) (*GetTaskRunReplyPb, error) {
	out := new(GetTaskRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetVariable(ctx context.Context, in *VariableIdPb, opts ...grpc.CallOption) (*GetVariableReplyPb, error) {
	out := new(GetVariableReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListVariables(ctx context.Context, in *ListVariablesPb, opts ...grpc.CallOption) (*ListVariablesReplyPb, error) {
	out := new(ListVariablesReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_ListVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutExternalEvent(ctx context.Context, in *PutExternalEventPb, opts ...grpc.CallOption) (*PutExternalEventReplyPb, error) {
	out := new(PutExternalEventReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_PutExternalEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetExternalEvent(ctx context.Context, in *ExternalEventIdPb, opts ...grpc.CallOption) (*GetExternalEventReplyPb, error) {
	out := new(GetExternalEventReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_GetExternalEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListExternalEvents(ctx context.Context, in *ListExternalEventsPb, opts ...grpc.CallOption) (*ListExternalEventsReplyPb, error) {
	out := new(ListExternalEventsReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_ListExternalEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchWfRun(ctx context.Context, in *SearchWfRunPb, opts ...grpc.CallOption) (*SearchWfRunReplyPb, error) {
	out := new(SearchWfRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchNodeRun(ctx context.Context, in *SearchNodeRunPb, opts ...grpc.CallOption) (*SearchNodeRunReplyPb, error) {
	out := new(SearchNodeRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchNodeRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchTaskRun(ctx context.Context, in *SearchTaskRunPb, opts ...grpc.CallOption) (*SearchTaskRunReplyPb, error) {
	out := new(SearchTaskRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchUserTaskRun(ctx context.Context, in *SearchUserTaskRunPb, opts ...grpc.CallOption) (*SearchUserTaskRunReplyPb, error) {
	out := new(SearchUserTaskRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchVariable(ctx context.Context, in *SearchVariablePb, opts ...grpc.CallOption) (*SearchVariableReplyPb, error) {
	out := new(SearchVariableReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchTaskDef(ctx context.Context, in *SearchTaskDefPb, opts ...grpc.CallOption) (*SearchTaskDefReplyPb, error) {
	out := new(SearchTaskDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchUserTaskDef(ctx context.Context, in *SearchUserTaskDefPb, opts ...grpc.CallOption) (*SearchUserTaskDefReplyPb, error) {
	out := new(SearchUserTaskDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchWfSpec(ctx context.Context, in *SearchWfSpecPb, opts ...grpc.CallOption) (*SearchWfSpecReplyPb, error) {
	out := new(SearchWfSpecReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchExternalEventDef(ctx context.Context, in *SearchExternalEventDefPb, opts ...grpc.CallOption) (*SearchExternalEventDefReplyPb, error) {
	out := new(SearchExternalEventDefReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchExternalEvent(ctx context.Context, in *SearchExternalEventPb, opts ...grpc.CallOption) (*SearchExternalEventReplyPb, error) {
	out := new(SearchExternalEventReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchExternalEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) RegisterTaskWorker(ctx context.Context, in *RegisterTaskWorkerPb, opts ...grpc.CallOption) (*RegisterTaskWorkerReplyPb, error) {
	out := new(RegisterTaskWorkerReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_RegisterTaskWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PollTask(ctx context.Context, opts ...grpc.CallOption) (LHPublicApi_PollTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &LHPublicApi_ServiceDesc.Streams[0], LHPublicApi_PollTask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lHPublicApiPollTaskClient{stream}
	return x, nil
}

type LHPublicApi_PollTaskClient interface {
	Send(*PollTaskPb) error
	Recv() (*PollTaskReplyPb, error)
	grpc.ClientStream
}

type lHPublicApiPollTaskClient struct {
	grpc.ClientStream
}

func (x *lHPublicApiPollTaskClient) Send(m *PollTaskPb) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lHPublicApiPollTaskClient) Recv() (*PollTaskReplyPb, error) {
	m := new(PollTaskReplyPb)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lHPublicApiClient) ReportTask(ctx context.Context, in *ReportTaskRunPb, opts ...grpc.CallOption) (*ReportTaskReplyPb, error) {
	out := new(ReportTaskReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_ReportTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) StopWfRun(ctx context.Context, in *StopWfRunPb, opts ...grpc.CallOption) (*StopWfRunReplyPb, error) {
	out := new(StopWfRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_StopWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ResumeWfRun(ctx context.Context, in *ResumeWfRunPb, opts ...grpc.CallOption) (*ResumeWfRunReplyPb, error) {
	out := new(ResumeWfRunReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_ResumeWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteWfRun(ctx context.Context, in *DeleteWfRunPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error) {
	out := new(DeleteObjectReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteTaskDef(ctx context.Context, in *DeleteTaskDefPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error) {
	out := new(DeleteObjectReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteWfSpec(ctx context.Context, in *DeleteWfSpecPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error) {
	out := new(DeleteObjectReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteUserTaskDef(ctx context.Context, in *DeleteUserTaskDefPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error) {
	out := new(DeleteObjectReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteExternalEventDef(ctx context.Context, in *DeleteExternalEventDefPb, opts ...grpc.CallOption) (*DeleteObjectReplyPb, error) {
	out := new(DeleteObjectReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) HealthCheck(ctx context.Context, in *HealthCheckPb, opts ...grpc.CallOption) (*HealthCheckReplyPb, error) {
	out := new(HealthCheckReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) TaskDefMetrics(ctx context.Context, in *TaskDefMetricsQueryPb, opts ...grpc.CallOption) (*TaskDefMetricsReplyPb, error) {
	out := new(TaskDefMetricsReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_TaskDefMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) WfSpecMetrics(ctx context.Context, in *WfSpecMetricsQueryPb, opts ...grpc.CallOption) (*WfSpecMetricsReplyPb, error) {
	out := new(WfSpecMetricsReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_WfSpecMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListTaskDefMetrics(ctx context.Context, in *ListTaskMetricsPb, opts ...grpc.CallOption) (*ListTaskMetricsReplyPb, error) {
	out := new(ListTaskMetricsReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_ListTaskDefMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListWfSpecMetrics(ctx context.Context, in *ListWfMetricsPb, opts ...grpc.CallOption) (*ListWfMetricsReplyPb, error) {
	out := new(ListWfMetricsReplyPb)
	err := c.cc.Invoke(ctx, LHPublicApi_ListWfSpecMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LHPublicApiServer is the server API for LHPublicApi service.
// All implementations must embed UnimplementedLHPublicApiServer
// for forward compatibility
type LHPublicApiServer interface {
	PutTaskDef(context.Context, *PutTaskDefPb) (*PutTaskDefReplyPb, error)
	GetTaskDef(context.Context, *TaskDefIdPb) (*GetTaskDefReplyPb, error)
	PutExternalEventDef(context.Context, *PutExternalEventDefPb) (*PutExternalEventDefReplyPb, error)
	GetExternalEventDef(context.Context, *ExternalEventDefIdPb) (*GetExternalEventDefReplyPb, error)
	PutWfSpec(context.Context, *PutWfSpecPb) (*PutWfSpecReplyPb, error)
	GetWfSpec(context.Context, *WfSpecIdPb) (*GetWfSpecReplyPb, error)
	GetLatestWfSpec(context.Context, *GetLatestWfSpecPb) (*GetWfSpecReplyPb, error)
	PutUserTaskDef(context.Context, *PutUserTaskDefPb) (*PutUserTaskDefReplyPb, error)
	GetUserTaskDef(context.Context, *UserTaskDefIdPb) (*GetUserTaskDefReplyPb, error)
	GetLatestUserTaskDef(context.Context, *GetLatestUserTaskDefPb) (*GetUserTaskDefReplyPb, error)
	GetUserTaskRun(context.Context, *UserTaskRunIdPb) (*GetUserTaskRunReplyPb, error)
	RunWf(context.Context, *RunWfPb) (*RunWfReplyPb, error)
	GetWfRun(context.Context, *WfRunIdPb) (*GetWfRunReplyPb, error)
	AssignUserTaskRun(context.Context, *AssignUserTaskRunPb) (*AssignUserTaskRunReplyPb, error)
	CompleteUserTaskRun(context.Context, *CompleteUserTaskRunPb) (*CompleteUserTaskRunReplyPb, error)
	GetNodeRun(context.Context, *NodeRunIdPb) (*GetNodeRunReplyPb, error)
	ListNodeRuns(context.Context, *ListNodeRunsPb) (*ListNodeRunsReplyPb, error)
	GetTaskRun(context.Context, *TaskRunIdPb) (*GetTaskRunReplyPb, error)
	GetVariable(context.Context, *VariableIdPb) (*GetVariableReplyPb, error)
	ListVariables(context.Context, *ListVariablesPb) (*ListVariablesReplyPb, error)
	PutExternalEvent(context.Context, *PutExternalEventPb) (*PutExternalEventReplyPb, error)
	GetExternalEvent(context.Context, *ExternalEventIdPb) (*GetExternalEventReplyPb, error)
	ListExternalEvents(context.Context, *ListExternalEventsPb) (*ListExternalEventsReplyPb, error)
	SearchWfRun(context.Context, *SearchWfRunPb) (*SearchWfRunReplyPb, error)
	SearchNodeRun(context.Context, *SearchNodeRunPb) (*SearchNodeRunReplyPb, error)
	SearchTaskRun(context.Context, *SearchTaskRunPb) (*SearchTaskRunReplyPb, error)
	SearchUserTaskRun(context.Context, *SearchUserTaskRunPb) (*SearchUserTaskRunReplyPb, error)
	SearchVariable(context.Context, *SearchVariablePb) (*SearchVariableReplyPb, error)
	SearchTaskDef(context.Context, *SearchTaskDefPb) (*SearchTaskDefReplyPb, error)
	SearchUserTaskDef(context.Context, *SearchUserTaskDefPb) (*SearchUserTaskDefReplyPb, error)
	SearchWfSpec(context.Context, *SearchWfSpecPb) (*SearchWfSpecReplyPb, error)
	SearchExternalEventDef(context.Context, *SearchExternalEventDefPb) (*SearchExternalEventDefReplyPb, error)
	SearchExternalEvent(context.Context, *SearchExternalEventPb) (*SearchExternalEventReplyPb, error)
	RegisterTaskWorker(context.Context, *RegisterTaskWorkerPb) (*RegisterTaskWorkerReplyPb, error)
	PollTask(LHPublicApi_PollTaskServer) error
	ReportTask(context.Context, *ReportTaskRunPb) (*ReportTaskReplyPb, error)
	StopWfRun(context.Context, *StopWfRunPb) (*StopWfRunReplyPb, error)
	ResumeWfRun(context.Context, *ResumeWfRunPb) (*ResumeWfRunReplyPb, error)
	DeleteWfRun(context.Context, *DeleteWfRunPb) (*DeleteObjectReplyPb, error)
	DeleteTaskDef(context.Context, *DeleteTaskDefPb) (*DeleteObjectReplyPb, error)
	DeleteWfSpec(context.Context, *DeleteWfSpecPb) (*DeleteObjectReplyPb, error)
	DeleteUserTaskDef(context.Context, *DeleteUserTaskDefPb) (*DeleteObjectReplyPb, error)
	DeleteExternalEventDef(context.Context, *DeleteExternalEventDefPb) (*DeleteObjectReplyPb, error)
	HealthCheck(context.Context, *HealthCheckPb) (*HealthCheckReplyPb, error)
	TaskDefMetrics(context.Context, *TaskDefMetricsQueryPb) (*TaskDefMetricsReplyPb, error)
	WfSpecMetrics(context.Context, *WfSpecMetricsQueryPb) (*WfSpecMetricsReplyPb, error)
	ListTaskDefMetrics(context.Context, *ListTaskMetricsPb) (*ListTaskMetricsReplyPb, error)
	ListWfSpecMetrics(context.Context, *ListWfMetricsPb) (*ListWfMetricsReplyPb, error)
	mustEmbedUnimplementedLHPublicApiServer()
}

// UnimplementedLHPublicApiServer must be embedded to have forward compatible implementations.
type UnimplementedLHPublicApiServer struct {
}

func (UnimplementedLHPublicApiServer) PutTaskDef(context.Context, *PutTaskDefPb) (*PutTaskDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetTaskDef(context.Context, *TaskDefIdPb) (*GetTaskDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) PutExternalEventDef(context.Context, *PutExternalEventDefPb) (*PutExternalEventDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetExternalEventDef(context.Context, *ExternalEventDefIdPb) (*GetExternalEventDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) PutWfSpec(context.Context, *PutWfSpecPb) (*PutWfSpecReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) GetWfSpec(context.Context, *WfSpecIdPb) (*GetWfSpecReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) GetLatestWfSpec(context.Context, *GetLatestWfSpecPb) (*GetWfSpecReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) PutUserTaskDef(context.Context, *PutUserTaskDefPb) (*PutUserTaskDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetUserTaskDef(context.Context, *UserTaskDefIdPb) (*GetUserTaskDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetLatestUserTaskDef(context.Context, *GetLatestUserTaskDefPb) (*GetUserTaskDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetUserTaskRun(context.Context, *UserTaskRunIdPb) (*GetUserTaskRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) RunWf(context.Context, *RunWfPb) (*RunWfReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWf not implemented")
}
func (UnimplementedLHPublicApiServer) GetWfRun(context.Context, *WfRunIdPb) (*GetWfRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) AssignUserTaskRun(context.Context, *AssignUserTaskRunPb) (*AssignUserTaskRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) CompleteUserTaskRun(context.Context, *CompleteUserTaskRunPb) (*CompleteUserTaskRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) GetNodeRun(context.Context, *NodeRunIdPb) (*GetNodeRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRun not implemented")
}
func (UnimplementedLHPublicApiServer) ListNodeRuns(context.Context, *ListNodeRunsPb) (*ListNodeRunsReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeRuns not implemented")
}
func (UnimplementedLHPublicApiServer) GetTaskRun(context.Context, *TaskRunIdPb) (*GetTaskRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) GetVariable(context.Context, *VariableIdPb) (*GetVariableReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedLHPublicApiServer) ListVariables(context.Context, *ListVariablesPb) (*ListVariablesReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariables not implemented")
}
func (UnimplementedLHPublicApiServer) PutExternalEvent(context.Context, *PutExternalEventPb) (*PutExternalEventReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutExternalEvent not implemented")
}
func (UnimplementedLHPublicApiServer) GetExternalEvent(context.Context, *ExternalEventIdPb) (*GetExternalEventReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalEvent not implemented")
}
func (UnimplementedLHPublicApiServer) ListExternalEvents(context.Context, *ListExternalEventsPb) (*ListExternalEventsReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalEvents not implemented")
}
func (UnimplementedLHPublicApiServer) SearchWfRun(context.Context, *SearchWfRunPb) (*SearchWfRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchNodeRun(context.Context, *SearchNodeRunPb) (*SearchNodeRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchTaskRun(context.Context, *SearchTaskRunPb) (*SearchTaskRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchUserTaskRun(context.Context, *SearchUserTaskRunPb) (*SearchUserTaskRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchVariable(context.Context, *SearchVariablePb) (*SearchVariableReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVariable not implemented")
}
func (UnimplementedLHPublicApiServer) SearchTaskDef(context.Context, *SearchTaskDefPb) (*SearchTaskDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) SearchUserTaskDef(context.Context, *SearchUserTaskDefPb) (*SearchUserTaskDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) SearchWfSpec(context.Context, *SearchWfSpecPb) (*SearchWfSpecReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) SearchExternalEventDef(context.Context, *SearchExternalEventDefPb) (*SearchExternalEventDefReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) SearchExternalEvent(context.Context, *SearchExternalEventPb) (*SearchExternalEventReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExternalEvent not implemented")
}
func (UnimplementedLHPublicApiServer) RegisterTaskWorker(context.Context, *RegisterTaskWorkerPb) (*RegisterTaskWorkerReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTaskWorker not implemented")
}
func (UnimplementedLHPublicApiServer) PollTask(LHPublicApi_PollTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method PollTask not implemented")
}
func (UnimplementedLHPublicApiServer) ReportTask(context.Context, *ReportTaskRunPb) (*ReportTaskReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTask not implemented")
}
func (UnimplementedLHPublicApiServer) StopWfRun(context.Context, *StopWfRunPb) (*StopWfRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) ResumeWfRun(context.Context, *ResumeWfRunPb) (*ResumeWfRunReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteWfRun(context.Context, *DeleteWfRunPb) (*DeleteObjectReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteTaskDef(context.Context, *DeleteTaskDefPb) (*DeleteObjectReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteWfSpec(context.Context, *DeleteWfSpecPb) (*DeleteObjectReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteUserTaskDef(context.Context, *DeleteUserTaskDefPb) (*DeleteObjectReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteExternalEventDef(context.Context, *DeleteExternalEventDefPb) (*DeleteObjectReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) HealthCheck(context.Context, *HealthCheckPb) (*HealthCheckReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLHPublicApiServer) TaskDefMetrics(context.Context, *TaskDefMetricsQueryPb) (*TaskDefMetricsReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDefMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) WfSpecMetrics(context.Context, *WfSpecMetricsQueryPb) (*WfSpecMetricsReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WfSpecMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) ListTaskDefMetrics(context.Context, *ListTaskMetricsPb) (*ListTaskMetricsReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskDefMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) ListWfSpecMetrics(context.Context, *ListWfMetricsPb) (*ListWfMetricsReplyPb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWfSpecMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) mustEmbedUnimplementedLHPublicApiServer() {}

// UnsafeLHPublicApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LHPublicApiServer will
// result in compilation errors.
type UnsafeLHPublicApiServer interface {
	mustEmbedUnimplementedLHPublicApiServer()
}

func RegisterLHPublicApiServer(s grpc.ServiceRegistrar, srv LHPublicApiServer) {
	s.RegisterService(&LHPublicApi_ServiceDesc, srv)
}

func _LHPublicApi_PutTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutTaskDef(ctx, req.(*PutTaskDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDefIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetTaskDef(ctx, req.(*TaskDefIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutExternalEventDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutExternalEventDef(ctx, req.(*PutExternalEventDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalEventDefIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetExternalEventDef(ctx, req.(*ExternalEventDefIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutWfSpecPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutWfSpec(ctx, req.(*PutWfSpecPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfSpecIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetWfSpec(ctx, req.(*WfSpecIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetLatestWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestWfSpecPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetLatestWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetLatestWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetLatestWfSpec(ctx, req.(*GetLatestWfSpecPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserTaskDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutUserTaskDef(ctx, req.(*PutUserTaskDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTaskDefIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetUserTaskDef(ctx, req.(*UserTaskDefIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetLatestUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestUserTaskDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetLatestUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetLatestUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetLatestUserTaskDef(ctx, req.(*GetLatestUserTaskDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTaskRunIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetUserTaskRun(ctx, req.(*UserTaskRunIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_RunWf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunWfPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).RunWf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_RunWf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).RunWf(ctx, req.(*RunWfPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfRunIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetWfRun(ctx, req.(*WfRunIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_AssignUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserTaskRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).AssignUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_AssignUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).AssignUserTaskRun(ctx, req.(*AssignUserTaskRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_CompleteUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUserTaskRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).CompleteUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_CompleteUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).CompleteUserTaskRun(ctx, req.(*CompleteUserTaskRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRunIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetNodeRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetNodeRun(ctx, req.(*NodeRunIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListNodeRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRunsPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListNodeRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListNodeRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListNodeRuns(ctx, req.(*ListNodeRunsPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRunIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetTaskRun(ctx, req.(*TaskRunIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetVariable(ctx, req.(*VariableIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariablesPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListVariables(ctx, req.(*ListVariablesPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutExternalEventPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutExternalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutExternalEvent(ctx, req.(*PutExternalEventPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalEventIdPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetExternalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetExternalEvent(ctx, req.(*ExternalEventIdPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListExternalEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExternalEventsPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListExternalEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListExternalEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListExternalEvents(ctx, req.(*ListExternalEventsPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWfRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchWfRun(ctx, req.(*SearchWfRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNodeRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchNodeRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchNodeRun(ctx, req.(*SearchNodeRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTaskRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchTaskRun(ctx, req.(*SearchTaskRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserTaskRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchUserTaskRun(ctx, req.(*SearchUserTaskRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVariablePb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchVariable(ctx, req.(*SearchVariablePb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTaskDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchTaskDef(ctx, req.(*SearchTaskDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserTaskDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchUserTaskDef(ctx, req.(*SearchUserTaskDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWfSpecPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchWfSpec(ctx, req.(*SearchWfSpecPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchExternalEventDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchExternalEventDef(ctx, req.(*SearchExternalEventDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchExternalEventPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchExternalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchExternalEvent(ctx, req.(*SearchExternalEventPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_RegisterTaskWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTaskWorkerPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).RegisterTaskWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_RegisterTaskWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).RegisterTaskWorker(ctx, req.(*RegisterTaskWorkerPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PollTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LHPublicApiServer).PollTask(&lHPublicApiPollTaskServer{stream})
}

type LHPublicApi_PollTaskServer interface {
	Send(*PollTaskReplyPb) error
	Recv() (*PollTaskPb, error)
	grpc.ServerStream
}

type lHPublicApiPollTaskServer struct {
	grpc.ServerStream
}

func (x *lHPublicApiPollTaskServer) Send(m *PollTaskReplyPb) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lHPublicApiPollTaskServer) Recv() (*PollTaskPb, error) {
	m := new(PollTaskPb)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LHPublicApi_ReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ReportTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ReportTask(ctx, req.(*ReportTaskRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_StopWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWfRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).StopWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_StopWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).StopWfRun(ctx, req.(*StopWfRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ResumeWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeWfRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ResumeWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ResumeWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ResumeWfRun(ctx, req.(*ResumeWfRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWfRunPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteWfRun(ctx, req.(*DeleteWfRunPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteTaskDef(ctx, req.(*DeleteTaskDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWfSpecPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteWfSpec(ctx, req.(*DeleteWfSpecPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTaskDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteUserTaskDef(ctx, req.(*DeleteUserTaskDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalEventDefPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteExternalEventDef(ctx, req.(*DeleteExternalEventDefPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).HealthCheck(ctx, req.(*HealthCheckPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_TaskDefMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDefMetricsQueryPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).TaskDefMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_TaskDefMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).TaskDefMetrics(ctx, req.(*TaskDefMetricsQueryPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_WfSpecMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfSpecMetricsQueryPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).WfSpecMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_WfSpecMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).WfSpecMetrics(ctx, req.(*WfSpecMetricsQueryPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListTaskDefMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskMetricsPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListTaskDefMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListTaskDefMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListTaskDefMetrics(ctx, req.(*ListTaskMetricsPb))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListWfSpecMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWfMetricsPb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListWfSpecMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListWfSpecMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListWfSpecMetrics(ctx, req.(*ListWfMetricsPb))
	}
	return interceptor(ctx, in, info, handler)
}

// LHPublicApi_ServiceDesc is the grpc.ServiceDesc for LHPublicApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LHPublicApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "littlehorse.LHPublicApi",
	HandlerType: (*LHPublicApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutTaskDef",
			Handler:    _LHPublicApi_PutTaskDef_Handler,
		},
		{
			MethodName: "GetTaskDef",
			Handler:    _LHPublicApi_GetTaskDef_Handler,
		},
		{
			MethodName: "PutExternalEventDef",
			Handler:    _LHPublicApi_PutExternalEventDef_Handler,
		},
		{
			MethodName: "GetExternalEventDef",
			Handler:    _LHPublicApi_GetExternalEventDef_Handler,
		},
		{
			MethodName: "PutWfSpec",
			Handler:    _LHPublicApi_PutWfSpec_Handler,
		},
		{
			MethodName: "GetWfSpec",
			Handler:    _LHPublicApi_GetWfSpec_Handler,
		},
		{
			MethodName: "GetLatestWfSpec",
			Handler:    _LHPublicApi_GetLatestWfSpec_Handler,
		},
		{
			MethodName: "PutUserTaskDef",
			Handler:    _LHPublicApi_PutUserTaskDef_Handler,
		},
		{
			MethodName: "GetUserTaskDef",
			Handler:    _LHPublicApi_GetUserTaskDef_Handler,
		},
		{
			MethodName: "GetLatestUserTaskDef",
			Handler:    _LHPublicApi_GetLatestUserTaskDef_Handler,
		},
		{
			MethodName: "GetUserTaskRun",
			Handler:    _LHPublicApi_GetUserTaskRun_Handler,
		},
		{
			MethodName: "RunWf",
			Handler:    _LHPublicApi_RunWf_Handler,
		},
		{
			MethodName: "GetWfRun",
			Handler:    _LHPublicApi_GetWfRun_Handler,
		},
		{
			MethodName: "AssignUserTaskRun",
			Handler:    _LHPublicApi_AssignUserTaskRun_Handler,
		},
		{
			MethodName: "CompleteUserTaskRun",
			Handler:    _LHPublicApi_CompleteUserTaskRun_Handler,
		},
		{
			MethodName: "GetNodeRun",
			Handler:    _LHPublicApi_GetNodeRun_Handler,
		},
		{
			MethodName: "ListNodeRuns",
			Handler:    _LHPublicApi_ListNodeRuns_Handler,
		},
		{
			MethodName: "GetTaskRun",
			Handler:    _LHPublicApi_GetTaskRun_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _LHPublicApi_GetVariable_Handler,
		},
		{
			MethodName: "ListVariables",
			Handler:    _LHPublicApi_ListVariables_Handler,
		},
		{
			MethodName: "PutExternalEvent",
			Handler:    _LHPublicApi_PutExternalEvent_Handler,
		},
		{
			MethodName: "GetExternalEvent",
			Handler:    _LHPublicApi_GetExternalEvent_Handler,
		},
		{
			MethodName: "ListExternalEvents",
			Handler:    _LHPublicApi_ListExternalEvents_Handler,
		},
		{
			MethodName: "SearchWfRun",
			Handler:    _LHPublicApi_SearchWfRun_Handler,
		},
		{
			MethodName: "SearchNodeRun",
			Handler:    _LHPublicApi_SearchNodeRun_Handler,
		},
		{
			MethodName: "SearchTaskRun",
			Handler:    _LHPublicApi_SearchTaskRun_Handler,
		},
		{
			MethodName: "SearchUserTaskRun",
			Handler:    _LHPublicApi_SearchUserTaskRun_Handler,
		},
		{
			MethodName: "SearchVariable",
			Handler:    _LHPublicApi_SearchVariable_Handler,
		},
		{
			MethodName: "SearchTaskDef",
			Handler:    _LHPublicApi_SearchTaskDef_Handler,
		},
		{
			MethodName: "SearchUserTaskDef",
			Handler:    _LHPublicApi_SearchUserTaskDef_Handler,
		},
		{
			MethodName: "SearchWfSpec",
			Handler:    _LHPublicApi_SearchWfSpec_Handler,
		},
		{
			MethodName: "SearchExternalEventDef",
			Handler:    _LHPublicApi_SearchExternalEventDef_Handler,
		},
		{
			MethodName: "SearchExternalEvent",
			Handler:    _LHPublicApi_SearchExternalEvent_Handler,
		},
		{
			MethodName: "RegisterTaskWorker",
			Handler:    _LHPublicApi_RegisterTaskWorker_Handler,
		},
		{
			MethodName: "ReportTask",
			Handler:    _LHPublicApi_ReportTask_Handler,
		},
		{
			MethodName: "StopWfRun",
			Handler:    _LHPublicApi_StopWfRun_Handler,
		},
		{
			MethodName: "ResumeWfRun",
			Handler:    _LHPublicApi_ResumeWfRun_Handler,
		},
		{
			MethodName: "DeleteWfRun",
			Handler:    _LHPublicApi_DeleteWfRun_Handler,
		},
		{
			MethodName: "DeleteTaskDef",
			Handler:    _LHPublicApi_DeleteTaskDef_Handler,
		},
		{
			MethodName: "DeleteWfSpec",
			Handler:    _LHPublicApi_DeleteWfSpec_Handler,
		},
		{
			MethodName: "DeleteUserTaskDef",
			Handler:    _LHPublicApi_DeleteUserTaskDef_Handler,
		},
		{
			MethodName: "DeleteExternalEventDef",
			Handler:    _LHPublicApi_DeleteExternalEventDef_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LHPublicApi_HealthCheck_Handler,
		},
		{
			MethodName: "TaskDefMetrics",
			Handler:    _LHPublicApi_TaskDefMetrics_Handler,
		},
		{
			MethodName: "WfSpecMetrics",
			Handler:    _LHPublicApi_WfSpecMetrics_Handler,
		},
		{
			MethodName: "ListTaskDefMetrics",
			Handler:    _LHPublicApi_ListTaskDefMetrics_Handler,
		},
		{
			MethodName: "ListWfSpecMetrics",
			Handler:    _LHPublicApi_ListWfSpecMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollTask",
			Handler:       _LHPublicApi_PollTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
