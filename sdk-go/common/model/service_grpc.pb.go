// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LHPublicApi_PutTaskDef_FullMethodName             = "/littlehorse.LHPublicApi/PutTaskDef"
	LHPublicApi_GetTaskDef_FullMethodName             = "/littlehorse.LHPublicApi/GetTaskDef"
	LHPublicApi_PutExternalEventDef_FullMethodName    = "/littlehorse.LHPublicApi/PutExternalEventDef"
	LHPublicApi_GetExternalEventDef_FullMethodName    = "/littlehorse.LHPublicApi/GetExternalEventDef"
	LHPublicApi_PutWfSpec_FullMethodName              = "/littlehorse.LHPublicApi/PutWfSpec"
	LHPublicApi_GetWfSpec_FullMethodName              = "/littlehorse.LHPublicApi/GetWfSpec"
	LHPublicApi_GetLatestWfSpec_FullMethodName        = "/littlehorse.LHPublicApi/GetLatestWfSpec"
	LHPublicApi_PutUserTaskDef_FullMethodName         = "/littlehorse.LHPublicApi/PutUserTaskDef"
	LHPublicApi_GetUserTaskDef_FullMethodName         = "/littlehorse.LHPublicApi/GetUserTaskDef"
	LHPublicApi_GetLatestUserTaskDef_FullMethodName   = "/littlehorse.LHPublicApi/GetLatestUserTaskDef"
	LHPublicApi_GetUserTaskRun_FullMethodName         = "/littlehorse.LHPublicApi/GetUserTaskRun"
	LHPublicApi_RunWf_FullMethodName                  = "/littlehorse.LHPublicApi/RunWf"
	LHPublicApi_GetWfRun_FullMethodName               = "/littlehorse.LHPublicApi/GetWfRun"
	LHPublicApi_AssignUserTaskRun_FullMethodName      = "/littlehorse.LHPublicApi/AssignUserTaskRun"
	LHPublicApi_CompleteUserTaskRun_FullMethodName    = "/littlehorse.LHPublicApi/CompleteUserTaskRun"
	LHPublicApi_GetNodeRun_FullMethodName             = "/littlehorse.LHPublicApi/GetNodeRun"
	LHPublicApi_ListNodeRuns_FullMethodName           = "/littlehorse.LHPublicApi/ListNodeRuns"
	LHPublicApi_GetTaskRun_FullMethodName             = "/littlehorse.LHPublicApi/GetTaskRun"
	LHPublicApi_GetVariable_FullMethodName            = "/littlehorse.LHPublicApi/GetVariable"
	LHPublicApi_ListVariables_FullMethodName          = "/littlehorse.LHPublicApi/ListVariables"
	LHPublicApi_PutExternalEvent_FullMethodName       = "/littlehorse.LHPublicApi/PutExternalEvent"
	LHPublicApi_GetExternalEvent_FullMethodName       = "/littlehorse.LHPublicApi/GetExternalEvent"
	LHPublicApi_ListExternalEvents_FullMethodName     = "/littlehorse.LHPublicApi/ListExternalEvents"
	LHPublicApi_SearchWfRun_FullMethodName            = "/littlehorse.LHPublicApi/SearchWfRun"
	LHPublicApi_SearchNodeRun_FullMethodName          = "/littlehorse.LHPublicApi/SearchNodeRun"
	LHPublicApi_SearchTaskRun_FullMethodName          = "/littlehorse.LHPublicApi/SearchTaskRun"
	LHPublicApi_SearchUserTaskRun_FullMethodName      = "/littlehorse.LHPublicApi/SearchUserTaskRun"
	LHPublicApi_SearchVariable_FullMethodName         = "/littlehorse.LHPublicApi/SearchVariable"
	LHPublicApi_SearchTaskDef_FullMethodName          = "/littlehorse.LHPublicApi/SearchTaskDef"
	LHPublicApi_SearchUserTaskDef_FullMethodName      = "/littlehorse.LHPublicApi/SearchUserTaskDef"
	LHPublicApi_SearchWfSpec_FullMethodName           = "/littlehorse.LHPublicApi/SearchWfSpec"
	LHPublicApi_SearchExternalEventDef_FullMethodName = "/littlehorse.LHPublicApi/SearchExternalEventDef"
	LHPublicApi_SearchExternalEvent_FullMethodName    = "/littlehorse.LHPublicApi/SearchExternalEvent"
	LHPublicApi_RegisterTaskWorker_FullMethodName     = "/littlehorse.LHPublicApi/RegisterTaskWorker"
	LHPublicApi_PollTask_FullMethodName               = "/littlehorse.LHPublicApi/PollTask"
	LHPublicApi_ReportTask_FullMethodName             = "/littlehorse.LHPublicApi/ReportTask"
	LHPublicApi_StopWfRun_FullMethodName              = "/littlehorse.LHPublicApi/StopWfRun"
	LHPublicApi_ResumeWfRun_FullMethodName            = "/littlehorse.LHPublicApi/ResumeWfRun"
	LHPublicApi_DeleteWfRun_FullMethodName            = "/littlehorse.LHPublicApi/DeleteWfRun"
	LHPublicApi_DeleteTaskDef_FullMethodName          = "/littlehorse.LHPublicApi/DeleteTaskDef"
	LHPublicApi_DeleteWfSpec_FullMethodName           = "/littlehorse.LHPublicApi/DeleteWfSpec"
	LHPublicApi_DeleteUserTaskDef_FullMethodName      = "/littlehorse.LHPublicApi/DeleteUserTaskDef"
	LHPublicApi_DeleteExternalEventDef_FullMethodName = "/littlehorse.LHPublicApi/DeleteExternalEventDef"
	LHPublicApi_CancelUserTaskRun_FullMethodName      = "/littlehorse.LHPublicApi/CancelUserTaskRun"
	LHPublicApi_HealthCheck_FullMethodName            = "/littlehorse.LHPublicApi/HealthCheck"
	LHPublicApi_TaskDefMetrics_FullMethodName         = "/littlehorse.LHPublicApi/TaskDefMetrics"
	LHPublicApi_WfSpecMetrics_FullMethodName          = "/littlehorse.LHPublicApi/WfSpecMetrics"
	LHPublicApi_ListTaskDefMetrics_FullMethodName     = "/littlehorse.LHPublicApi/ListTaskDefMetrics"
	LHPublicApi_ListWfSpecMetrics_FullMethodName      = "/littlehorse.LHPublicApi/ListWfSpecMetrics"
)

// LHPublicApiClient is the client API for LHPublicApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LHPublicApiClient interface {
	PutTaskDef(ctx context.Context, in *PutTaskDefRequest, opts ...grpc.CallOption) (*PutTaskDefResponse, error)
	GetTaskDef(ctx context.Context, in *TaskDefId, opts ...grpc.CallOption) (*GetTaskDefResponse, error)
	PutExternalEventDef(ctx context.Context, in *PutExternalEventDefRequest, opts ...grpc.CallOption) (*PutExternalEventDefResponse, error)
	GetExternalEventDef(ctx context.Context, in *ExternalEventDefId, opts ...grpc.CallOption) (*GetExternalEventDefResponse, error)
	PutWfSpec(ctx context.Context, in *PutWfSpecRequest, opts ...grpc.CallOption) (*PutWfSpecResponse, error)
	GetWfSpec(ctx context.Context, in *WfSpecId, opts ...grpc.CallOption) (*GetWfSpecResponse, error)
	GetLatestWfSpec(ctx context.Context, in *GetLatestWfSpecRequest, opts ...grpc.CallOption) (*GetWfSpecResponse, error)
	PutUserTaskDef(ctx context.Context, in *PutUserTaskDefRequest, opts ...grpc.CallOption) (*PutUserTaskDefResponse, error)
	GetUserTaskDef(ctx context.Context, in *UserTaskDefId, opts ...grpc.CallOption) (*GetUserTaskDefResponse, error)
	GetLatestUserTaskDef(ctx context.Context, in *GetLatestUserTaskDefRequest, opts ...grpc.CallOption) (*GetUserTaskDefResponse, error)
	GetUserTaskRun(ctx context.Context, in *UserTaskRunId, opts ...grpc.CallOption) (*GetUserTaskRunResponse, error)
	RunWf(ctx context.Context, in *RunWfRequest, opts ...grpc.CallOption) (*RunWfResponse, error)
	GetWfRun(ctx context.Context, in *WfRunId, opts ...grpc.CallOption) (*GetWfRunResponse, error)
	AssignUserTaskRun(ctx context.Context, in *AssignUserTaskRunRequest, opts ...grpc.CallOption) (*AssignUserTaskRunResponse, error)
	CompleteUserTaskRun(ctx context.Context, in *CompleteUserTaskRunRequest, opts ...grpc.CallOption) (*CompleteUserTaskRunResponse, error)
	GetNodeRun(ctx context.Context, in *NodeRunId, opts ...grpc.CallOption) (*GetNodeRunResponse, error)
	ListNodeRuns(ctx context.Context, in *ListNodeRunsRequest, opts ...grpc.CallOption) (*ListNodeRunsResponse, error)
	GetTaskRun(ctx context.Context, in *TaskRunId, opts ...grpc.CallOption) (*GetTaskRunResponse, error)
	GetVariable(ctx context.Context, in *VariableId, opts ...grpc.CallOption) (*GetVariableResponse, error)
	ListVariables(ctx context.Context, in *ListVariablesRequest, opts ...grpc.CallOption) (*ListVariablesResponse, error)
	PutExternalEvent(ctx context.Context, in *PutExternalEventRequest, opts ...grpc.CallOption) (*PutExternalEventResponse, error)
	GetExternalEvent(ctx context.Context, in *ExternalEventId, opts ...grpc.CallOption) (*GetExternalEventResponse, error)
	ListExternalEvents(ctx context.Context, in *ListExternalEventsRequest, opts ...grpc.CallOption) (*ListExternalEventsResponse, error)
	SearchWfRun(ctx context.Context, in *SearchWfRunRequest, opts ...grpc.CallOption) (*SearchWfRunResponse, error)
	SearchNodeRun(ctx context.Context, in *SearchNodeRunRequest, opts ...grpc.CallOption) (*SearchNodeRunResponse, error)
	SearchTaskRun(ctx context.Context, in *SearchTaskRunRequest, opts ...grpc.CallOption) (*SearchTaskRunResponse, error)
	SearchUserTaskRun(ctx context.Context, in *SearchUserTaskRunRequest, opts ...grpc.CallOption) (*SearchUserTaskRunResponse, error)
	SearchVariable(ctx context.Context, in *SearchVariableRequest, opts ...grpc.CallOption) (*SearchVariableResponse, error)
	SearchTaskDef(ctx context.Context, in *SearchTaskDefRequest, opts ...grpc.CallOption) (*SearchTaskDefResponse, error)
	SearchUserTaskDef(ctx context.Context, in *SearchUserTaskDefRequest, opts ...grpc.CallOption) (*SearchUserTaskDefResponse, error)
	SearchWfSpec(ctx context.Context, in *SearchWfSpecRequest, opts ...grpc.CallOption) (*SearchWfSpecResponse, error)
	SearchExternalEventDef(ctx context.Context, in *SearchExternalEventDefRequest, opts ...grpc.CallOption) (*SearchExternalEventDefResponse, error)
	SearchExternalEvent(ctx context.Context, in *SearchExternalEventRequest, opts ...grpc.CallOption) (*SearchExternalEventResponse, error)
	RegisterTaskWorker(ctx context.Context, in *RegisterTaskWorkerRequest, opts ...grpc.CallOption) (*RegisterTaskWorkerResponse, error)
	PollTask(ctx context.Context, opts ...grpc.CallOption) (LHPublicApi_PollTaskClient, error)
	ReportTask(ctx context.Context, in *ReportTaskRun, opts ...grpc.CallOption) (*ReportTaskResponse, error)
	StopWfRun(ctx context.Context, in *StopWfRunRequest, opts ...grpc.CallOption) (*StopWfRunResponse, error)
	ResumeWfRun(ctx context.Context, in *ResumeWfRunRequest, opts ...grpc.CallOption) (*ResumeWfRunResponse, error)
	DeleteWfRun(ctx context.Context, in *DeleteWfRunRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	DeleteTaskDef(ctx context.Context, in *DeleteTaskDefRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	DeleteWfSpec(ctx context.Context, in *DeleteWfSpecRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	DeleteUserTaskDef(ctx context.Context, in *DeleteUserTaskDefRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	DeleteExternalEventDef(ctx context.Context, in *DeleteExternalEventDefRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	CancelUserTaskRun(ctx context.Context, in *CancelUserTaskRunRequest, opts ...grpc.CallOption) (*CancelUserTaskRunResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	TaskDefMetrics(ctx context.Context, in *TaskDefMetricsQueryRequest, opts ...grpc.CallOption) (*TaskDefMetricsResponse, error)
	WfSpecMetrics(ctx context.Context, in *WfSpecMetricsQueryRequest, opts ...grpc.CallOption) (*WfSpecMetricsResponse, error)
	ListTaskDefMetrics(ctx context.Context, in *ListTaskMetricsRequest, opts ...grpc.CallOption) (*ListTaskMetricsResponse, error)
	ListWfSpecMetrics(ctx context.Context, in *ListWfMetricsRequest, opts ...grpc.CallOption) (*ListWfMetricsResponse, error)
}

type lHPublicApiClient struct {
	cc grpc.ClientConnInterface
}

func NewLHPublicApiClient(cc grpc.ClientConnInterface) LHPublicApiClient {
	return &lHPublicApiClient{cc}
}

func (c *lHPublicApiClient) PutTaskDef(ctx context.Context, in *PutTaskDefRequest, opts ...grpc.CallOption) (*PutTaskDefResponse, error) {
	out := new(PutTaskDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_PutTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetTaskDef(ctx context.Context, in *TaskDefId, opts ...grpc.CallOption) (*GetTaskDefResponse, error) {
	out := new(GetTaskDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutExternalEventDef(ctx context.Context, in *PutExternalEventDefRequest, opts ...grpc.CallOption) (*PutExternalEventDefResponse, error) {
	out := new(PutExternalEventDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_PutExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetExternalEventDef(ctx context.Context, in *ExternalEventDefId, opts ...grpc.CallOption) (*GetExternalEventDefResponse, error) {
	out := new(GetExternalEventDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutWfSpec(ctx context.Context, in *PutWfSpecRequest, opts ...grpc.CallOption) (*PutWfSpecResponse, error) {
	out := new(PutWfSpecResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_PutWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetWfSpec(ctx context.Context, in *WfSpecId, opts ...grpc.CallOption) (*GetWfSpecResponse, error) {
	out := new(GetWfSpecResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetLatestWfSpec(ctx context.Context, in *GetLatestWfSpecRequest, opts ...grpc.CallOption) (*GetWfSpecResponse, error) {
	out := new(GetWfSpecResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetLatestWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutUserTaskDef(ctx context.Context, in *PutUserTaskDefRequest, opts ...grpc.CallOption) (*PutUserTaskDefResponse, error) {
	out := new(PutUserTaskDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_PutUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetUserTaskDef(ctx context.Context, in *UserTaskDefId, opts ...grpc.CallOption) (*GetUserTaskDefResponse, error) {
	out := new(GetUserTaskDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetLatestUserTaskDef(ctx context.Context, in *GetLatestUserTaskDefRequest, opts ...grpc.CallOption) (*GetUserTaskDefResponse, error) {
	out := new(GetUserTaskDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetLatestUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetUserTaskRun(ctx context.Context, in *UserTaskRunId, opts ...grpc.CallOption) (*GetUserTaskRunResponse, error) {
	out := new(GetUserTaskRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) RunWf(ctx context.Context, in *RunWfRequest, opts ...grpc.CallOption) (*RunWfResponse, error) {
	out := new(RunWfResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_RunWf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetWfRun(ctx context.Context, in *WfRunId, opts ...grpc.CallOption) (*GetWfRunResponse, error) {
	out := new(GetWfRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) AssignUserTaskRun(ctx context.Context, in *AssignUserTaskRunRequest, opts ...grpc.CallOption) (*AssignUserTaskRunResponse, error) {
	out := new(AssignUserTaskRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_AssignUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) CompleteUserTaskRun(ctx context.Context, in *CompleteUserTaskRunRequest, opts ...grpc.CallOption) (*CompleteUserTaskRunResponse, error) {
	out := new(CompleteUserTaskRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_CompleteUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetNodeRun(ctx context.Context, in *NodeRunId, opts ...grpc.CallOption) (*GetNodeRunResponse, error) {
	out := new(GetNodeRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetNodeRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListNodeRuns(ctx context.Context, in *ListNodeRunsRequest, opts ...grpc.CallOption) (*ListNodeRunsResponse, error) {
	out := new(ListNodeRunsResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_ListNodeRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetTaskRun(ctx context.Context, in *TaskRunId, opts ...grpc.CallOption) (*GetTaskRunResponse, error) {
	out := new(GetTaskRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetVariable(ctx context.Context, in *VariableId, opts ...grpc.CallOption) (*GetVariableResponse, error) {
	out := new(GetVariableResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListVariables(ctx context.Context, in *ListVariablesRequest, opts ...grpc.CallOption) (*ListVariablesResponse, error) {
	out := new(ListVariablesResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_ListVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PutExternalEvent(ctx context.Context, in *PutExternalEventRequest, opts ...grpc.CallOption) (*PutExternalEventResponse, error) {
	out := new(PutExternalEventResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_PutExternalEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) GetExternalEvent(ctx context.Context, in *ExternalEventId, opts ...grpc.CallOption) (*GetExternalEventResponse, error) {
	out := new(GetExternalEventResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_GetExternalEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListExternalEvents(ctx context.Context, in *ListExternalEventsRequest, opts ...grpc.CallOption) (*ListExternalEventsResponse, error) {
	out := new(ListExternalEventsResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_ListExternalEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchWfRun(ctx context.Context, in *SearchWfRunRequest, opts ...grpc.CallOption) (*SearchWfRunResponse, error) {
	out := new(SearchWfRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchNodeRun(ctx context.Context, in *SearchNodeRunRequest, opts ...grpc.CallOption) (*SearchNodeRunResponse, error) {
	out := new(SearchNodeRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchNodeRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchTaskRun(ctx context.Context, in *SearchTaskRunRequest, opts ...grpc.CallOption) (*SearchTaskRunResponse, error) {
	out := new(SearchTaskRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchUserTaskRun(ctx context.Context, in *SearchUserTaskRunRequest, opts ...grpc.CallOption) (*SearchUserTaskRunResponse, error) {
	out := new(SearchUserTaskRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchVariable(ctx context.Context, in *SearchVariableRequest, opts ...grpc.CallOption) (*SearchVariableResponse, error) {
	out := new(SearchVariableResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchTaskDef(ctx context.Context, in *SearchTaskDefRequest, opts ...grpc.CallOption) (*SearchTaskDefResponse, error) {
	out := new(SearchTaskDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchUserTaskDef(ctx context.Context, in *SearchUserTaskDefRequest, opts ...grpc.CallOption) (*SearchUserTaskDefResponse, error) {
	out := new(SearchUserTaskDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchWfSpec(ctx context.Context, in *SearchWfSpecRequest, opts ...grpc.CallOption) (*SearchWfSpecResponse, error) {
	out := new(SearchWfSpecResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchExternalEventDef(ctx context.Context, in *SearchExternalEventDefRequest, opts ...grpc.CallOption) (*SearchExternalEventDefResponse, error) {
	out := new(SearchExternalEventDefResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) SearchExternalEvent(ctx context.Context, in *SearchExternalEventRequest, opts ...grpc.CallOption) (*SearchExternalEventResponse, error) {
	out := new(SearchExternalEventResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_SearchExternalEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) RegisterTaskWorker(ctx context.Context, in *RegisterTaskWorkerRequest, opts ...grpc.CallOption) (*RegisterTaskWorkerResponse, error) {
	out := new(RegisterTaskWorkerResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_RegisterTaskWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) PollTask(ctx context.Context, opts ...grpc.CallOption) (LHPublicApi_PollTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &LHPublicApi_ServiceDesc.Streams[0], LHPublicApi_PollTask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lHPublicApiPollTaskClient{stream}
	return x, nil
}

type LHPublicApi_PollTaskClient interface {
	Send(*PollTaskRequest) error
	Recv() (*PollTaskResponse, error)
	grpc.ClientStream
}

type lHPublicApiPollTaskClient struct {
	grpc.ClientStream
}

func (x *lHPublicApiPollTaskClient) Send(m *PollTaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lHPublicApiPollTaskClient) Recv() (*PollTaskResponse, error) {
	m := new(PollTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lHPublicApiClient) ReportTask(ctx context.Context, in *ReportTaskRun, opts ...grpc.CallOption) (*ReportTaskResponse, error) {
	out := new(ReportTaskResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_ReportTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) StopWfRun(ctx context.Context, in *StopWfRunRequest, opts ...grpc.CallOption) (*StopWfRunResponse, error) {
	out := new(StopWfRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_StopWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ResumeWfRun(ctx context.Context, in *ResumeWfRunRequest, opts ...grpc.CallOption) (*ResumeWfRunResponse, error) {
	out := new(ResumeWfRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_ResumeWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteWfRun(ctx context.Context, in *DeleteWfRunRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteWfRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteTaskDef(ctx context.Context, in *DeleteTaskDefRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteWfSpec(ctx context.Context, in *DeleteWfSpecRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteWfSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteUserTaskDef(ctx context.Context, in *DeleteUserTaskDefRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteUserTaskDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) DeleteExternalEventDef(ctx context.Context, in *DeleteExternalEventDefRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_DeleteExternalEventDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) CancelUserTaskRun(ctx context.Context, in *CancelUserTaskRunRequest, opts ...grpc.CallOption) (*CancelUserTaskRunResponse, error) {
	out := new(CancelUserTaskRunResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_CancelUserTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) TaskDefMetrics(ctx context.Context, in *TaskDefMetricsQueryRequest, opts ...grpc.CallOption) (*TaskDefMetricsResponse, error) {
	out := new(TaskDefMetricsResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_TaskDefMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) WfSpecMetrics(ctx context.Context, in *WfSpecMetricsQueryRequest, opts ...grpc.CallOption) (*WfSpecMetricsResponse, error) {
	out := new(WfSpecMetricsResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_WfSpecMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListTaskDefMetrics(ctx context.Context, in *ListTaskMetricsRequest, opts ...grpc.CallOption) (*ListTaskMetricsResponse, error) {
	out := new(ListTaskMetricsResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_ListTaskDefMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lHPublicApiClient) ListWfSpecMetrics(ctx context.Context, in *ListWfMetricsRequest, opts ...grpc.CallOption) (*ListWfMetricsResponse, error) {
	out := new(ListWfMetricsResponse)
	err := c.cc.Invoke(ctx, LHPublicApi_ListWfSpecMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LHPublicApiServer is the server API for LHPublicApi service.
// All implementations must embed UnimplementedLHPublicApiServer
// for forward compatibility
type LHPublicApiServer interface {
	PutTaskDef(context.Context, *PutTaskDefRequest) (*PutTaskDefResponse, error)
	GetTaskDef(context.Context, *TaskDefId) (*GetTaskDefResponse, error)
	PutExternalEventDef(context.Context, *PutExternalEventDefRequest) (*PutExternalEventDefResponse, error)
	GetExternalEventDef(context.Context, *ExternalEventDefId) (*GetExternalEventDefResponse, error)
	PutWfSpec(context.Context, *PutWfSpecRequest) (*PutWfSpecResponse, error)
	GetWfSpec(context.Context, *WfSpecId) (*GetWfSpecResponse, error)
	GetLatestWfSpec(context.Context, *GetLatestWfSpecRequest) (*GetWfSpecResponse, error)
	PutUserTaskDef(context.Context, *PutUserTaskDefRequest) (*PutUserTaskDefResponse, error)
	GetUserTaskDef(context.Context, *UserTaskDefId) (*GetUserTaskDefResponse, error)
	GetLatestUserTaskDef(context.Context, *GetLatestUserTaskDefRequest) (*GetUserTaskDefResponse, error)
	GetUserTaskRun(context.Context, *UserTaskRunId) (*GetUserTaskRunResponse, error)
	RunWf(context.Context, *RunWfRequest) (*RunWfResponse, error)
	GetWfRun(context.Context, *WfRunId) (*GetWfRunResponse, error)
	AssignUserTaskRun(context.Context, *AssignUserTaskRunRequest) (*AssignUserTaskRunResponse, error)
	CompleteUserTaskRun(context.Context, *CompleteUserTaskRunRequest) (*CompleteUserTaskRunResponse, error)
	GetNodeRun(context.Context, *NodeRunId) (*GetNodeRunResponse, error)
	ListNodeRuns(context.Context, *ListNodeRunsRequest) (*ListNodeRunsResponse, error)
	GetTaskRun(context.Context, *TaskRunId) (*GetTaskRunResponse, error)
	GetVariable(context.Context, *VariableId) (*GetVariableResponse, error)
	ListVariables(context.Context, *ListVariablesRequest) (*ListVariablesResponse, error)
	PutExternalEvent(context.Context, *PutExternalEventRequest) (*PutExternalEventResponse, error)
	GetExternalEvent(context.Context, *ExternalEventId) (*GetExternalEventResponse, error)
	ListExternalEvents(context.Context, *ListExternalEventsRequest) (*ListExternalEventsResponse, error)
	SearchWfRun(context.Context, *SearchWfRunRequest) (*SearchWfRunResponse, error)
	SearchNodeRun(context.Context, *SearchNodeRunRequest) (*SearchNodeRunResponse, error)
	SearchTaskRun(context.Context, *SearchTaskRunRequest) (*SearchTaskRunResponse, error)
	SearchUserTaskRun(context.Context, *SearchUserTaskRunRequest) (*SearchUserTaskRunResponse, error)
	SearchVariable(context.Context, *SearchVariableRequest) (*SearchVariableResponse, error)
	SearchTaskDef(context.Context, *SearchTaskDefRequest) (*SearchTaskDefResponse, error)
	SearchUserTaskDef(context.Context, *SearchUserTaskDefRequest) (*SearchUserTaskDefResponse, error)
	SearchWfSpec(context.Context, *SearchWfSpecRequest) (*SearchWfSpecResponse, error)
	SearchExternalEventDef(context.Context, *SearchExternalEventDefRequest) (*SearchExternalEventDefResponse, error)
	SearchExternalEvent(context.Context, *SearchExternalEventRequest) (*SearchExternalEventResponse, error)
	RegisterTaskWorker(context.Context, *RegisterTaskWorkerRequest) (*RegisterTaskWorkerResponse, error)
	PollTask(LHPublicApi_PollTaskServer) error
	ReportTask(context.Context, *ReportTaskRun) (*ReportTaskResponse, error)
	StopWfRun(context.Context, *StopWfRunRequest) (*StopWfRunResponse, error)
	ResumeWfRun(context.Context, *ResumeWfRunRequest) (*ResumeWfRunResponse, error)
	DeleteWfRun(context.Context, *DeleteWfRunRequest) (*DeleteObjectResponse, error)
	DeleteTaskDef(context.Context, *DeleteTaskDefRequest) (*DeleteObjectResponse, error)
	DeleteWfSpec(context.Context, *DeleteWfSpecRequest) (*DeleteObjectResponse, error)
	DeleteUserTaskDef(context.Context, *DeleteUserTaskDefRequest) (*DeleteObjectResponse, error)
	DeleteExternalEventDef(context.Context, *DeleteExternalEventDefRequest) (*DeleteObjectResponse, error)
	CancelUserTaskRun(context.Context, *CancelUserTaskRunRequest) (*CancelUserTaskRunResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	TaskDefMetrics(context.Context, *TaskDefMetricsQueryRequest) (*TaskDefMetricsResponse, error)
	WfSpecMetrics(context.Context, *WfSpecMetricsQueryRequest) (*WfSpecMetricsResponse, error)
	ListTaskDefMetrics(context.Context, *ListTaskMetricsRequest) (*ListTaskMetricsResponse, error)
	ListWfSpecMetrics(context.Context, *ListWfMetricsRequest) (*ListWfMetricsResponse, error)
	mustEmbedUnimplementedLHPublicApiServer()
}

// UnimplementedLHPublicApiServer must be embedded to have forward compatible implementations.
type UnimplementedLHPublicApiServer struct {
}

func (UnimplementedLHPublicApiServer) PutTaskDef(context.Context, *PutTaskDefRequest) (*PutTaskDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetTaskDef(context.Context, *TaskDefId) (*GetTaskDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) PutExternalEventDef(context.Context, *PutExternalEventDefRequest) (*PutExternalEventDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetExternalEventDef(context.Context, *ExternalEventDefId) (*GetExternalEventDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) PutWfSpec(context.Context, *PutWfSpecRequest) (*PutWfSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) GetWfSpec(context.Context, *WfSpecId) (*GetWfSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) GetLatestWfSpec(context.Context, *GetLatestWfSpecRequest) (*GetWfSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) PutUserTaskDef(context.Context, *PutUserTaskDefRequest) (*PutUserTaskDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetUserTaskDef(context.Context, *UserTaskDefId) (*GetUserTaskDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetLatestUserTaskDef(context.Context, *GetLatestUserTaskDefRequest) (*GetUserTaskDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) GetUserTaskRun(context.Context, *UserTaskRunId) (*GetUserTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) RunWf(context.Context, *RunWfRequest) (*RunWfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWf not implemented")
}
func (UnimplementedLHPublicApiServer) GetWfRun(context.Context, *WfRunId) (*GetWfRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) AssignUserTaskRun(context.Context, *AssignUserTaskRunRequest) (*AssignUserTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) CompleteUserTaskRun(context.Context, *CompleteUserTaskRunRequest) (*CompleteUserTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) GetNodeRun(context.Context, *NodeRunId) (*GetNodeRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRun not implemented")
}
func (UnimplementedLHPublicApiServer) ListNodeRuns(context.Context, *ListNodeRunsRequest) (*ListNodeRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeRuns not implemented")
}
func (UnimplementedLHPublicApiServer) GetTaskRun(context.Context, *TaskRunId) (*GetTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) GetVariable(context.Context, *VariableId) (*GetVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedLHPublicApiServer) ListVariables(context.Context, *ListVariablesRequest) (*ListVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariables not implemented")
}
func (UnimplementedLHPublicApiServer) PutExternalEvent(context.Context, *PutExternalEventRequest) (*PutExternalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutExternalEvent not implemented")
}
func (UnimplementedLHPublicApiServer) GetExternalEvent(context.Context, *ExternalEventId) (*GetExternalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalEvent not implemented")
}
func (UnimplementedLHPublicApiServer) ListExternalEvents(context.Context, *ListExternalEventsRequest) (*ListExternalEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalEvents not implemented")
}
func (UnimplementedLHPublicApiServer) SearchWfRun(context.Context, *SearchWfRunRequest) (*SearchWfRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchNodeRun(context.Context, *SearchNodeRunRequest) (*SearchNodeRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchTaskRun(context.Context, *SearchTaskRunRequest) (*SearchTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchUserTaskRun(context.Context, *SearchUserTaskRunRequest) (*SearchUserTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) SearchVariable(context.Context, *SearchVariableRequest) (*SearchVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVariable not implemented")
}
func (UnimplementedLHPublicApiServer) SearchTaskDef(context.Context, *SearchTaskDefRequest) (*SearchTaskDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) SearchUserTaskDef(context.Context, *SearchUserTaskDefRequest) (*SearchUserTaskDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) SearchWfSpec(context.Context, *SearchWfSpecRequest) (*SearchWfSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) SearchExternalEventDef(context.Context, *SearchExternalEventDefRequest) (*SearchExternalEventDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) SearchExternalEvent(context.Context, *SearchExternalEventRequest) (*SearchExternalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExternalEvent not implemented")
}
func (UnimplementedLHPublicApiServer) RegisterTaskWorker(context.Context, *RegisterTaskWorkerRequest) (*RegisterTaskWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTaskWorker not implemented")
}
func (UnimplementedLHPublicApiServer) PollTask(LHPublicApi_PollTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method PollTask not implemented")
}
func (UnimplementedLHPublicApiServer) ReportTask(context.Context, *ReportTaskRun) (*ReportTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTask not implemented")
}
func (UnimplementedLHPublicApiServer) StopWfRun(context.Context, *StopWfRunRequest) (*StopWfRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) ResumeWfRun(context.Context, *ResumeWfRunRequest) (*ResumeWfRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteWfRun(context.Context, *DeleteWfRunRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWfRun not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteTaskDef(context.Context, *DeleteTaskDefRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteWfSpec(context.Context, *DeleteWfSpecRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWfSpec not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteUserTaskDef(context.Context, *DeleteUserTaskDefRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTaskDef not implemented")
}
func (UnimplementedLHPublicApiServer) DeleteExternalEventDef(context.Context, *DeleteExternalEventDefRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalEventDef not implemented")
}
func (UnimplementedLHPublicApiServer) CancelUserTaskRun(context.Context, *CancelUserTaskRunRequest) (*CancelUserTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUserTaskRun not implemented")
}
func (UnimplementedLHPublicApiServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLHPublicApiServer) TaskDefMetrics(context.Context, *TaskDefMetricsQueryRequest) (*TaskDefMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDefMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) WfSpecMetrics(context.Context, *WfSpecMetricsQueryRequest) (*WfSpecMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WfSpecMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) ListTaskDefMetrics(context.Context, *ListTaskMetricsRequest) (*ListTaskMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskDefMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) ListWfSpecMetrics(context.Context, *ListWfMetricsRequest) (*ListWfMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWfSpecMetrics not implemented")
}
func (UnimplementedLHPublicApiServer) mustEmbedUnimplementedLHPublicApiServer() {}

// UnsafeLHPublicApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LHPublicApiServer will
// result in compilation errors.
type UnsafeLHPublicApiServer interface {
	mustEmbedUnimplementedLHPublicApiServer()
}

func RegisterLHPublicApiServer(s grpc.ServiceRegistrar, srv LHPublicApiServer) {
	s.RegisterService(&LHPublicApi_ServiceDesc, srv)
}

func _LHPublicApi_PutTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutTaskDef(ctx, req.(*PutTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDefId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetTaskDef(ctx, req.(*TaskDefId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutExternalEventDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutExternalEventDef(ctx, req.(*PutExternalEventDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalEventDefId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetExternalEventDef(ctx, req.(*ExternalEventDefId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutWfSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutWfSpec(ctx, req.(*PutWfSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfSpecId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetWfSpec(ctx, req.(*WfSpecId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetLatestWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestWfSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetLatestWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetLatestWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetLatestWfSpec(ctx, req.(*GetLatestWfSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutUserTaskDef(ctx, req.(*PutUserTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTaskDefId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetUserTaskDef(ctx, req.(*UserTaskDefId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetLatestUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestUserTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetLatestUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetLatestUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetLatestUserTaskDef(ctx, req.(*GetLatestUserTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTaskRunId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetUserTaskRun(ctx, req.(*UserTaskRunId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_RunWf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunWfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).RunWf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_RunWf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).RunWf(ctx, req.(*RunWfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfRunId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetWfRun(ctx, req.(*WfRunId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_AssignUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).AssignUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_AssignUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).AssignUserTaskRun(ctx, req.(*AssignUserTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_CompleteUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUserTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).CompleteUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_CompleteUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).CompleteUserTaskRun(ctx, req.(*CompleteUserTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRunId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetNodeRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetNodeRun(ctx, req.(*NodeRunId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListNodeRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListNodeRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListNodeRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListNodeRuns(ctx, req.(*ListNodeRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRunId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetTaskRun(ctx, req.(*TaskRunId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetVariable(ctx, req.(*VariableId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListVariables(ctx, req.(*ListVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PutExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutExternalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).PutExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_PutExternalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).PutExternalEvent(ctx, req.(*PutExternalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_GetExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalEventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).GetExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_GetExternalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).GetExternalEvent(ctx, req.(*ExternalEventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListExternalEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExternalEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListExternalEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListExternalEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListExternalEvents(ctx, req.(*ListExternalEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWfRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchWfRun(ctx, req.(*SearchWfRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNodeRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchNodeRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchNodeRun(ctx, req.(*SearchNodeRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchTaskRun(ctx, req.(*SearchTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchUserTaskRun(ctx, req.(*SearchUserTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchVariable(ctx, req.(*SearchVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchTaskDef(ctx, req.(*SearchTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchUserTaskDef(ctx, req.(*SearchUserTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWfSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchWfSpec(ctx, req.(*SearchWfSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchExternalEventDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchExternalEventDef(ctx, req.(*SearchExternalEventDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_SearchExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchExternalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).SearchExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_SearchExternalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).SearchExternalEvent(ctx, req.(*SearchExternalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_RegisterTaskWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTaskWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).RegisterTaskWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_RegisterTaskWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).RegisterTaskWorker(ctx, req.(*RegisterTaskWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_PollTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LHPublicApiServer).PollTask(&lHPublicApiPollTaskServer{stream})
}

type LHPublicApi_PollTaskServer interface {
	Send(*PollTaskResponse) error
	Recv() (*PollTaskRequest, error)
	grpc.ServerStream
}

type lHPublicApiPollTaskServer struct {
	grpc.ServerStream
}

func (x *lHPublicApiPollTaskServer) Send(m *PollTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lHPublicApiPollTaskServer) Recv() (*PollTaskRequest, error) {
	m := new(PollTaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LHPublicApi_ReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ReportTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ReportTask(ctx, req.(*ReportTaskRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_StopWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWfRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).StopWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_StopWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).StopWfRun(ctx, req.(*StopWfRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ResumeWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeWfRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ResumeWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ResumeWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ResumeWfRun(ctx, req.(*ResumeWfRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteWfRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWfRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteWfRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteWfRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteWfRun(ctx, req.(*DeleteWfRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteTaskDef(ctx, req.(*DeleteTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteWfSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWfSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteWfSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteWfSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteWfSpec(ctx, req.(*DeleteWfSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteUserTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteUserTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteUserTaskDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteUserTaskDef(ctx, req.(*DeleteUserTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_DeleteExternalEventDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalEventDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).DeleteExternalEventDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_DeleteExternalEventDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).DeleteExternalEventDef(ctx, req.(*DeleteExternalEventDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_CancelUserTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUserTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).CancelUserTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_CancelUserTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).CancelUserTaskRun(ctx, req.(*CancelUserTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_TaskDefMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDefMetricsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).TaskDefMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_TaskDefMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).TaskDefMetrics(ctx, req.(*TaskDefMetricsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_WfSpecMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfSpecMetricsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).WfSpecMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_WfSpecMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).WfSpecMetrics(ctx, req.(*WfSpecMetricsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListTaskDefMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListTaskDefMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListTaskDefMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListTaskDefMetrics(ctx, req.(*ListTaskMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LHPublicApi_ListWfSpecMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWfMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LHPublicApiServer).ListWfSpecMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LHPublicApi_ListWfSpecMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LHPublicApiServer).ListWfSpecMetrics(ctx, req.(*ListWfMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LHPublicApi_ServiceDesc is the grpc.ServiceDesc for LHPublicApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LHPublicApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "littlehorse.LHPublicApi",
	HandlerType: (*LHPublicApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutTaskDef",
			Handler:    _LHPublicApi_PutTaskDef_Handler,
		},
		{
			MethodName: "GetTaskDef",
			Handler:    _LHPublicApi_GetTaskDef_Handler,
		},
		{
			MethodName: "PutExternalEventDef",
			Handler:    _LHPublicApi_PutExternalEventDef_Handler,
		},
		{
			MethodName: "GetExternalEventDef",
			Handler:    _LHPublicApi_GetExternalEventDef_Handler,
		},
		{
			MethodName: "PutWfSpec",
			Handler:    _LHPublicApi_PutWfSpec_Handler,
		},
		{
			MethodName: "GetWfSpec",
			Handler:    _LHPublicApi_GetWfSpec_Handler,
		},
		{
			MethodName: "GetLatestWfSpec",
			Handler:    _LHPublicApi_GetLatestWfSpec_Handler,
		},
		{
			MethodName: "PutUserTaskDef",
			Handler:    _LHPublicApi_PutUserTaskDef_Handler,
		},
		{
			MethodName: "GetUserTaskDef",
			Handler:    _LHPublicApi_GetUserTaskDef_Handler,
		},
		{
			MethodName: "GetLatestUserTaskDef",
			Handler:    _LHPublicApi_GetLatestUserTaskDef_Handler,
		},
		{
			MethodName: "GetUserTaskRun",
			Handler:    _LHPublicApi_GetUserTaskRun_Handler,
		},
		{
			MethodName: "RunWf",
			Handler:    _LHPublicApi_RunWf_Handler,
		},
		{
			MethodName: "GetWfRun",
			Handler:    _LHPublicApi_GetWfRun_Handler,
		},
		{
			MethodName: "AssignUserTaskRun",
			Handler:    _LHPublicApi_AssignUserTaskRun_Handler,
		},
		{
			MethodName: "CompleteUserTaskRun",
			Handler:    _LHPublicApi_CompleteUserTaskRun_Handler,
		},
		{
			MethodName: "GetNodeRun",
			Handler:    _LHPublicApi_GetNodeRun_Handler,
		},
		{
			MethodName: "ListNodeRuns",
			Handler:    _LHPublicApi_ListNodeRuns_Handler,
		},
		{
			MethodName: "GetTaskRun",
			Handler:    _LHPublicApi_GetTaskRun_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _LHPublicApi_GetVariable_Handler,
		},
		{
			MethodName: "ListVariables",
			Handler:    _LHPublicApi_ListVariables_Handler,
		},
		{
			MethodName: "PutExternalEvent",
			Handler:    _LHPublicApi_PutExternalEvent_Handler,
		},
		{
			MethodName: "GetExternalEvent",
			Handler:    _LHPublicApi_GetExternalEvent_Handler,
		},
		{
			MethodName: "ListExternalEvents",
			Handler:    _LHPublicApi_ListExternalEvents_Handler,
		},
		{
			MethodName: "SearchWfRun",
			Handler:    _LHPublicApi_SearchWfRun_Handler,
		},
		{
			MethodName: "SearchNodeRun",
			Handler:    _LHPublicApi_SearchNodeRun_Handler,
		},
		{
			MethodName: "SearchTaskRun",
			Handler:    _LHPublicApi_SearchTaskRun_Handler,
		},
		{
			MethodName: "SearchUserTaskRun",
			Handler:    _LHPublicApi_SearchUserTaskRun_Handler,
		},
		{
			MethodName: "SearchVariable",
			Handler:    _LHPublicApi_SearchVariable_Handler,
		},
		{
			MethodName: "SearchTaskDef",
			Handler:    _LHPublicApi_SearchTaskDef_Handler,
		},
		{
			MethodName: "SearchUserTaskDef",
			Handler:    _LHPublicApi_SearchUserTaskDef_Handler,
		},
		{
			MethodName: "SearchWfSpec",
			Handler:    _LHPublicApi_SearchWfSpec_Handler,
		},
		{
			MethodName: "SearchExternalEventDef",
			Handler:    _LHPublicApi_SearchExternalEventDef_Handler,
		},
		{
			MethodName: "SearchExternalEvent",
			Handler:    _LHPublicApi_SearchExternalEvent_Handler,
		},
		{
			MethodName: "RegisterTaskWorker",
			Handler:    _LHPublicApi_RegisterTaskWorker_Handler,
		},
		{
			MethodName: "ReportTask",
			Handler:    _LHPublicApi_ReportTask_Handler,
		},
		{
			MethodName: "StopWfRun",
			Handler:    _LHPublicApi_StopWfRun_Handler,
		},
		{
			MethodName: "ResumeWfRun",
			Handler:    _LHPublicApi_ResumeWfRun_Handler,
		},
		{
			MethodName: "DeleteWfRun",
			Handler:    _LHPublicApi_DeleteWfRun_Handler,
		},
		{
			MethodName: "DeleteTaskDef",
			Handler:    _LHPublicApi_DeleteTaskDef_Handler,
		},
		{
			MethodName: "DeleteWfSpec",
			Handler:    _LHPublicApi_DeleteWfSpec_Handler,
		},
		{
			MethodName: "DeleteUserTaskDef",
			Handler:    _LHPublicApi_DeleteUserTaskDef_Handler,
		},
		{
			MethodName: "DeleteExternalEventDef",
			Handler:    _LHPublicApi_DeleteExternalEventDef_Handler,
		},
		{
			MethodName: "CancelUserTaskRun",
			Handler:    _LHPublicApi_CancelUserTaskRun_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LHPublicApi_HealthCheck_Handler,
		},
		{
			MethodName: "TaskDefMetrics",
			Handler:    _LHPublicApi_TaskDefMetrics_Handler,
		},
		{
			MethodName: "WfSpecMetrics",
			Handler:    _LHPublicApi_WfSpecMetrics_Handler,
		},
		{
			MethodName: "ListTaskDefMetrics",
			Handler:    _LHPublicApi_ListTaskDefMetrics_Handler,
		},
		{
			MethodName: "ListWfSpecMetrics",
			Handler:    _LHPublicApi_ListWfSpecMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollTask",
			Handler:       _LHPublicApi_PollTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
