// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: service.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LHResponseCode int32

const (
	LHResponseCode_OK                         LHResponseCode = 0
	LHResponseCode_CONNECTION_ERROR           LHResponseCode = 1
	LHResponseCode_NOT_FOUND_ERROR            LHResponseCode = 2
	LHResponseCode_BAD_REQUEST_ERROR          LHResponseCode = 3
	LHResponseCode_VALIDATION_ERROR           LHResponseCode = 4
	LHResponseCode_ALREADY_EXISTS_ERROR       LHResponseCode = 5
	LHResponseCode_REPORTED_BUT_NOT_PROCESSED LHResponseCode = 6
)

// Enum value maps for LHResponseCode.
var (
	LHResponseCode_name = map[int32]string{
		0: "OK",
		1: "CONNECTION_ERROR",
		2: "NOT_FOUND_ERROR",
		3: "BAD_REQUEST_ERROR",
		4: "VALIDATION_ERROR",
		5: "ALREADY_EXISTS_ERROR",
		6: "REPORTED_BUT_NOT_PROCESSED",
	}
	LHResponseCode_value = map[string]int32{
		"OK":                         0,
		"CONNECTION_ERROR":           1,
		"NOT_FOUND_ERROR":            2,
		"BAD_REQUEST_ERROR":          3,
		"VALIDATION_ERROR":           4,
		"ALREADY_EXISTS_ERROR":       5,
		"REPORTED_BUT_NOT_PROCESSED": 6,
	}
)

func (x LHResponseCode) Enum() *LHResponseCode {
	p := new(LHResponseCode)
	*p = x
	return p
}

func (x LHResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LHResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (LHResponseCode) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x LHResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LHResponseCode.Descriptor instead.
func (LHResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

type LHStatus int32

const (
	LHStatus_STARTING  LHStatus = 0
	LHStatus_RUNNING   LHStatus = 1
	LHStatus_COMPLETED LHStatus = 2
	LHStatus_HALTING   LHStatus = 3
	LHStatus_HALTED    LHStatus = 4
	LHStatus_ERROR     LHStatus = 5
)

// Enum value maps for LHStatus.
var (
	LHStatus_name = map[int32]string{
		0: "STARTING",
		1: "RUNNING",
		2: "COMPLETED",
		3: "HALTING",
		4: "HALTED",
		5: "ERROR",
	}
	LHStatus_value = map[string]int32{
		"STARTING":  0,
		"RUNNING":   1,
		"COMPLETED": 2,
		"HALTING":   3,
		"HALTED":    4,
		"ERROR":     5,
	}
)

func (x LHStatus) Enum() *LHStatus {
	p := new(LHStatus)
	*p = x
	return p
}

func (x LHStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LHStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (LHStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x LHStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LHStatus.Descriptor instead.
func (LHStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

type TaskStatus int32

const (
	TaskStatus_TASK_SCHEDULED                TaskStatus = 0
	TaskStatus_TASK_RUNNING                  TaskStatus = 1
	TaskStatus_TASK_SUCCESS                  TaskStatus = 2
	TaskStatus_TASK_FAILED                   TaskStatus = 3
	TaskStatus_TASK_TIMEOUT                  TaskStatus = 4
	TaskStatus_TASK_OUTPUT_SERIALIZING_ERROR TaskStatus = 5
	TaskStatus_TASK_INPUT_VAR_SUB_ERROR      TaskStatus = 6
	TaskStatus_TASK_CANCELLED                TaskStatus = 7
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_SCHEDULED",
		1: "TASK_RUNNING",
		2: "TASK_SUCCESS",
		3: "TASK_FAILED",
		4: "TASK_TIMEOUT",
		5: "TASK_OUTPUT_SERIALIZING_ERROR",
		6: "TASK_INPUT_VAR_SUB_ERROR",
		7: "TASK_CANCELLED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_SCHEDULED":                0,
		"TASK_RUNNING":                  1,
		"TASK_SUCCESS":                  2,
		"TASK_FAILED":                   3,
		"TASK_TIMEOUT":                  4,
		"TASK_OUTPUT_SERIALIZING_ERROR": 5,
		"TASK_INPUT_VAR_SUB_ERROR":      6,
		"TASK_CANCELLED":                7,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[2].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[2]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

type LHHealthResult int32

const (
	LHHealthResult_LH_HEALTH_RUNNING     LHHealthResult = 0
	LHHealthResult_LH_HEALTH_REBALANCING LHHealthResult = 1
	LHHealthResult_LH_HEALTH_ERROR       LHHealthResult = 2
)

// Enum value maps for LHHealthResult.
var (
	LHHealthResult_name = map[int32]string{
		0: "LH_HEALTH_RUNNING",
		1: "LH_HEALTH_REBALANCING",
		2: "LH_HEALTH_ERROR",
	}
	LHHealthResult_value = map[string]int32{
		"LH_HEALTH_RUNNING":     0,
		"LH_HEALTH_REBALANCING": 1,
		"LH_HEALTH_ERROR":       2,
	}
)

func (x LHHealthResult) Enum() *LHHealthResult {
	p := new(LHHealthResult)
	*p = x
	return p
}

func (x LHHealthResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LHHealthResult) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[3].Descriptor()
}

func (LHHealthResult) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[3]
}

func (x LHHealthResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LHHealthResult.Descriptor instead.
func (LHHealthResult) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

// Variable
type VariableType int32

const (
	VariableType_JSON_OBJ VariableType = 0
	VariableType_JSON_ARR VariableType = 1
	VariableType_DOUBLE   VariableType = 2
	VariableType_BOOL     VariableType = 3
	VariableType_STR      VariableType = 4
	VariableType_INT      VariableType = 5
	VariableType_BYTES    VariableType = 6
	VariableType_NULL     VariableType = 7
)

// Enum value maps for VariableType.
var (
	VariableType_name = map[int32]string{
		0: "JSON_OBJ",
		1: "JSON_ARR",
		2: "DOUBLE",
		3: "BOOL",
		4: "STR",
		5: "INT",
		6: "BYTES",
		7: "NULL",
	}
	VariableType_value = map[string]int32{
		"JSON_OBJ": 0,
		"JSON_ARR": 1,
		"DOUBLE":   2,
		"BOOL":     3,
		"STR":      4,
		"INT":      5,
		"BYTES":    6,
		"NULL":     7,
	}
)

func (x VariableType) Enum() *VariableType {
	p := new(VariableType)
	*p = x
	return p
}

func (x VariableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[4].Descriptor()
}

func (VariableType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[4]
}

func (x VariableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableType.Descriptor instead.
func (VariableType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

type ThreadType int32

const (
	ThreadType_ENTRYPOINT      ThreadType = 0
	ThreadType_CHILD           ThreadType = 1
	ThreadType_INTERRUPT       ThreadType = 2
	ThreadType_FAILURE_HANDLER ThreadType = 3
)

// Enum value maps for ThreadType.
var (
	ThreadType_name = map[int32]string{
		0: "ENTRYPOINT",
		1: "CHILD",
		2: "INTERRUPT",
		3: "FAILURE_HANDLER",
	}
	ThreadType_value = map[string]int32{
		"ENTRYPOINT":      0,
		"CHILD":           1,
		"INTERRUPT":       2,
		"FAILURE_HANDLER": 3,
	}
)

func (x ThreadType) Enum() *ThreadType {
	p := new(ThreadType)
	*p = x
	return p
}

func (x ThreadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThreadType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[5].Descriptor()
}

func (ThreadType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[5]
}

func (x ThreadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThreadType.Descriptor instead.
func (ThreadType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

type Comparator int32

const (
	Comparator_LESS_THAN       Comparator = 0
	Comparator_GREATER_THAN    Comparator = 1
	Comparator_LESS_THAN_EQ    Comparator = 2
	Comparator_GREATER_THAN_EQ Comparator = 3
	Comparator_EQUALS          Comparator = 4
	Comparator_NOT_EQUALS      Comparator = 5
	Comparator_IN              Comparator = 6
	Comparator_NOT_IN          Comparator = 7
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0: "LESS_THAN",
		1: "GREATER_THAN",
		2: "LESS_THAN_EQ",
		3: "GREATER_THAN_EQ",
		4: "EQUALS",
		5: "NOT_EQUALS",
		6: "IN",
		7: "NOT_IN",
	}
	Comparator_value = map[string]int32{
		"LESS_THAN":       0,
		"GREATER_THAN":    1,
		"LESS_THAN_EQ":    2,
		"GREATER_THAN_EQ": 3,
		"EQUALS":          4,
		"NOT_EQUALS":      5,
		"IN":              6,
		"NOT_IN":          7,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[6].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[6]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparator.Descriptor instead.
func (Comparator) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

type VariableMutationType int32

const (
	VariableMutationType_ASSIGN            VariableMutationType = 0
	VariableMutationType_ADD               VariableMutationType = 1
	VariableMutationType_EXTEND            VariableMutationType = 2
	VariableMutationType_SUBTRACT          VariableMutationType = 3
	VariableMutationType_MULTIPLY          VariableMutationType = 4
	VariableMutationType_DIVIDE            VariableMutationType = 5
	VariableMutationType_REMOVE_IF_PRESENT VariableMutationType = 6
	VariableMutationType_REMOVE_INDEX      VariableMutationType = 7
	VariableMutationType_REMOVE_KEY        VariableMutationType = 8
)

// Enum value maps for VariableMutationType.
var (
	VariableMutationType_name = map[int32]string{
		0: "ASSIGN",
		1: "ADD",
		2: "EXTEND",
		3: "SUBTRACT",
		4: "MULTIPLY",
		5: "DIVIDE",
		6: "REMOVE_IF_PRESENT",
		7: "REMOVE_INDEX",
		8: "REMOVE_KEY",
	}
	VariableMutationType_value = map[string]int32{
		"ASSIGN":            0,
		"ADD":               1,
		"EXTEND":            2,
		"SUBTRACT":          3,
		"MULTIPLY":          4,
		"DIVIDE":            5,
		"REMOVE_IF_PRESENT": 6,
		"REMOVE_INDEX":      7,
		"REMOVE_KEY":        8,
	}
)

func (x VariableMutationType) Enum() *VariableMutationType {
	p := new(VariableMutationType)
	*p = x
	return p
}

func (x VariableMutationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableMutationType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[7].Descriptor()
}

func (VariableMutationType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[7]
}

func (x VariableMutationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableMutationType.Descriptor instead.
func (VariableMutationType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

type UserTaskRunStatus int32

const (
	UserTaskRunStatus_UNASSIGNED UserTaskRunStatus = 0
	UserTaskRunStatus_ASSIGNED   UserTaskRunStatus = 1
	UserTaskRunStatus_DONE       UserTaskRunStatus = 3
	UserTaskRunStatus_CANCELLED  UserTaskRunStatus = 4
)

// Enum value maps for UserTaskRunStatus.
var (
	UserTaskRunStatus_name = map[int32]string{
		0: "UNASSIGNED",
		1: "ASSIGNED",
		3: "DONE",
		4: "CANCELLED",
	}
	UserTaskRunStatus_value = map[string]int32{
		"UNASSIGNED": 0,
		"ASSIGNED":   1,
		"DONE":       3,
		"CANCELLED":  4,
	}
)

func (x UserTaskRunStatus) Enum() *UserTaskRunStatus {
	p := new(UserTaskRunStatus)
	*p = x
	return p
}

func (x UserTaskRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserTaskRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[8].Descriptor()
}

func (UserTaskRunStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[8]
}

func (x UserTaskRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserTaskRunStatus.Descriptor instead.
func (UserTaskRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

type IndexType int32

const (
	IndexType_LOCAL_INDEX  IndexType = 0
	IndexType_REMOTE_INDEX IndexType = 1
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "LOCAL_INDEX",
		1: "REMOTE_INDEX",
	}
	IndexType_value = map[string]int32{
		"LOCAL_INDEX":  0,
		"REMOTE_INDEX": 1,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[9].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[9]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

// Metrics
type MetricsWindowLength int32

const (
	MetricsWindowLength_MINUTES_5 MetricsWindowLength = 0
	MetricsWindowLength_HOURS_2   MetricsWindowLength = 1
	MetricsWindowLength_DAYS_1    MetricsWindowLength = 2
)

// Enum value maps for MetricsWindowLength.
var (
	MetricsWindowLength_name = map[int32]string{
		0: "MINUTES_5",
		1: "HOURS_2",
		2: "DAYS_1",
	}
	MetricsWindowLength_value = map[string]int32{
		"MINUTES_5": 0,
		"HOURS_2":   1,
		"DAYS_1":    2,
	}
)

func (x MetricsWindowLength) Enum() *MetricsWindowLength {
	p := new(MetricsWindowLength)
	*p = x
	return p
}

func (x MetricsWindowLength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsWindowLength) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[10].Descriptor()
}

func (MetricsWindowLength) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[10]
}

func (x MetricsWindowLength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsWindowLength.Descriptor instead.
func (MetricsWindowLength) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

type UTActionTrigger_UTHook int32

const (
	UTActionTrigger_ON_ARRIVAL       UTActionTrigger_UTHook = 0
	UTActionTrigger_ON_TASK_ASSIGNED UTActionTrigger_UTHook = 1
)

// Enum value maps for UTActionTrigger_UTHook.
var (
	UTActionTrigger_UTHook_name = map[int32]string{
		0: "ON_ARRIVAL",
		1: "ON_TASK_ASSIGNED",
	}
	UTActionTrigger_UTHook_value = map[string]int32{
		"ON_ARRIVAL":       0,
		"ON_TASK_ASSIGNED": 1,
	}
)

func (x UTActionTrigger_UTHook) Enum() *UTActionTrigger_UTHook {
	p := new(UTActionTrigger_UTHook)
	*p = x
	return p
}

func (x UTActionTrigger_UTHook) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UTActionTrigger_UTHook) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[11].Descriptor()
}

func (UTActionTrigger_UTHook) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[11]
}

func (x UTActionTrigger_UTHook) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UTActionTrigger_UTHook.Descriptor instead.
func (UTActionTrigger_UTHook) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134, 0}
}

type WfSpecId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *WfSpecId) Reset() {
	*x = WfSpecId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecId) ProtoMessage() {}

func (x *WfSpecId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecId.ProtoReflect.Descriptor instead.
func (*WfSpecId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *WfSpecId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WfSpecId) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type TaskDefId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TaskDefId) Reset() {
	*x = TaskDefId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefId) ProtoMessage() {}

func (x *TaskDefId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefId.ProtoReflect.Descriptor instead.
func (*TaskDefId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *TaskDefId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExternalEventDefId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExternalEventDefId) Reset() {
	*x = ExternalEventDefId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventDefId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventDefId) ProtoMessage() {}

func (x *ExternalEventDefId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventDefId.ProtoReflect.Descriptor instead.
func (*ExternalEventDefId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalEventDefId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLatestWfSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLatestWfSpecRequest) Reset() {
	*x = GetLatestWfSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestWfSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestWfSpecRequest) ProtoMessage() {}

func (x *GetLatestWfSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestWfSpecRequest.ProtoReflect.Descriptor instead.
func (*GetLatestWfSpecRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestWfSpecRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLatestUserTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLatestUserTaskDefRequest) Reset() {
	*x = GetLatestUserTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestUserTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestUserTaskDefRequest) ProtoMessage() {}

func (x *GetLatestUserTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestUserTaskDefRequest.ProtoReflect.Descriptor instead.
func (*GetLatestUserTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLatestUserTaskDefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetWfSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfSpec        `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetWfSpecResponse) Reset() {
	*x = GetWfSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWfSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWfSpecResponse) ProtoMessage() {}

func (x *GetWfSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWfSpecResponse.ProtoReflect.Descriptor instead.
func (*GetWfSpecResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetWfSpecResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetWfSpecResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetWfSpecResponse) GetResult() *WfSpec {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutWfSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ThreadSpecs          map[string]*ThreadSpec `protobuf:"bytes,5,rep,name=thread_specs,json=threadSpecs,proto3" json:"thread_specs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EntrypointThreadName string                 `protobuf:"bytes,6,opt,name=entrypoint_thread_name,json=entrypointThreadName,proto3" json:"entrypoint_thread_name,omitempty"`
	RetentionHours       *int32                 `protobuf:"varint,7,opt,name=retention_hours,json=retentionHours,proto3,oneof" json:"retention_hours,omitempty"`
}

func (x *PutWfSpecRequest) Reset() {
	*x = PutWfSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWfSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWfSpecRequest) ProtoMessage() {}

func (x *PutWfSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWfSpecRequest.ProtoReflect.Descriptor instead.
func (*PutWfSpecRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *PutWfSpecRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutWfSpecRequest) GetThreadSpecs() map[string]*ThreadSpec {
	if x != nil {
		return x.ThreadSpecs
	}
	return nil
}

func (x *PutWfSpecRequest) GetEntrypointThreadName() string {
	if x != nil {
		return x.EntrypointThreadName
	}
	return ""
}

func (x *PutWfSpecRequest) GetRetentionHours() int32 {
	if x != nil && x.RetentionHours != nil {
		return *x.RetentionHours
	}
	return 0
}

type PutWfSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfSpec        `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutWfSpecResponse) Reset() {
	*x = PutWfSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWfSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWfSpecResponse) ProtoMessage() {}

func (x *PutWfSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWfSpecResponse.ProtoReflect.Descriptor instead.
func (*PutWfSpecResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *PutWfSpecResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *PutWfSpecResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutWfSpecResponse) GetResult() *WfSpec {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetTaskDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskDef       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetTaskDefResponse) Reset() {
	*x = GetTaskDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDefResponse) ProtoMessage() {}

func (x *GetTaskDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDefResponse.ProtoReflect.Descriptor instead.
func (*GetTaskDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetTaskDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetTaskDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetTaskDefResponse) GetResult() *TaskDef {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputVars []*VariableDef `protobuf:"bytes,2,rep,name=input_vars,json=inputVars,proto3" json:"input_vars,omitempty"`
}

func (x *PutTaskDefRequest) Reset() {
	*x = PutTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskDefRequest) ProtoMessage() {}

func (x *PutTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskDefRequest.ProtoReflect.Descriptor instead.
func (*PutTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *PutTaskDefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutTaskDefRequest) GetInputVars() []*VariableDef {
	if x != nil {
		return x.InputVars
	}
	return nil
}

type PutTaskDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskDef       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutTaskDefResponse) Reset() {
	*x = PutTaskDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskDefResponse) ProtoMessage() {}

func (x *PutTaskDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskDefResponse.ProtoReflect.Descriptor instead.
func (*PutTaskDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *PutTaskDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *PutTaskDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutTaskDefResponse) GetResult() *TaskDef {
	if x != nil {
		return x.Result
	}
	return nil
}

type CancelUserTaskRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *CancelUserTaskRunResponse) Reset() {
	*x = CancelUserTaskRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUserTaskRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUserTaskRunResponse) ProtoMessage() {}

func (x *CancelUserTaskRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUserTaskRunResponse.ProtoReflect.Descriptor instead.
func (*CancelUserTaskRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *CancelUserTaskRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *CancelUserTaskRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type PutUserTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields      []*UserTaskField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Description *string          `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *PutUserTaskDefRequest) Reset() {
	*x = PutUserTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUserTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUserTaskDefRequest) ProtoMessage() {}

func (x *PutUserTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUserTaskDefRequest.ProtoReflect.Descriptor instead.
func (*PutUserTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *PutUserTaskDefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutUserTaskDefRequest) GetFields() []*UserTaskField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PutUserTaskDefRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type PutUserTaskDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *UserTaskDef   `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutUserTaskDefResponse) Reset() {
	*x = PutUserTaskDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUserTaskDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUserTaskDefResponse) ProtoMessage() {}

func (x *PutUserTaskDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUserTaskDefResponse.ProtoReflect.Descriptor instead.
func (*PutUserTaskDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *PutUserTaskDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *PutUserTaskDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutUserTaskDefResponse) GetResult() *UserTaskDef {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetUserTaskDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *UserTaskDef   `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetUserTaskDefResponse) Reset() {
	*x = GetUserTaskDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTaskDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskDefResponse) ProtoMessage() {}

func (x *GetUserTaskDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskDefResponse.ProtoReflect.Descriptor instead.
func (*GetUserTaskDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetUserTaskDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetUserTaskDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetUserTaskDefResponse) GetResult() *UserTaskDef {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutExternalEventDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RetentionHours *int32 `protobuf:"varint,2,opt,name=retention_hours,json=retentionHours,proto3,oneof" json:"retention_hours,omitempty"`
}

func (x *PutExternalEventDefRequest) Reset() {
	*x = PutExternalEventDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventDefRequest) ProtoMessage() {}

func (x *PutExternalEventDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventDefRequest.ProtoReflect.Descriptor instead.
func (*PutExternalEventDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *PutExternalEventDefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutExternalEventDefRequest) GetRetentionHours() int32 {
	if x != nil && x.RetentionHours != nil {
		return *x.RetentionHours
	}
	return 0
}

type PutExternalEventDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode    `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string           `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEventDef `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutExternalEventDefResponse) Reset() {
	*x = PutExternalEventDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventDefResponse) ProtoMessage() {}

func (x *PutExternalEventDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventDefResponse.ProtoReflect.Descriptor instead.
func (*PutExternalEventDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *PutExternalEventDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *PutExternalEventDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutExternalEventDefResponse) GetResult() *ExternalEventDef {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetExternalEventDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode    `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string           `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEventDef `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetExternalEventDefResponse) Reset() {
	*x = GetExternalEventDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalEventDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalEventDefResponse) ProtoMessage() {}

func (x *GetExternalEventDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalEventDefResponse.ProtoReflect.Descriptor instead.
func (*GetExternalEventDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetExternalEventDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetExternalEventDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetExternalEventDefResponse) GetResult() *ExternalEventDef {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetWfRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfRun         `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetWfRunResponse) Reset() {
	*x = GetWfRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWfRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWfRunResponse) ProtoMessage() {}

func (x *GetWfRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWfRunResponse.ProtoReflect.Descriptor instead.
func (*GetWfRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetWfRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetWfRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetWfRunResponse) GetResult() *WfRun {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetNodeRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *NodeRun       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetNodeRunResponse) Reset() {
	*x = GetNodeRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRunResponse) ProtoMessage() {}

func (x *GetNodeRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRunResponse.ProtoReflect.Descriptor instead.
func (*GetNodeRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetNodeRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetNodeRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetNodeRunResponse) GetResult() *NodeRun {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetTaskRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskRun       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetTaskRunResponse) Reset() {
	*x = GetTaskRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunResponse) ProtoMessage() {}

func (x *GetTaskRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunResponse.ProtoReflect.Descriptor instead.
func (*GetTaskRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetTaskRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetTaskRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetTaskRunResponse) GetResult() *TaskRun {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetUserTaskRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *UserTaskRun   `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetUserTaskRunResponse) Reset() {
	*x = GetUserTaskRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTaskRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskRunResponse) ProtoMessage() {}

func (x *GetUserTaskRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskRunResponse.ProtoReflect.Descriptor instead.
func (*GetUserTaskRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserTaskRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetUserTaskRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetUserTaskRunResponse) GetResult() *UserTaskRun {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetVariableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *Variable      `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetVariableResponse) Reset() {
	*x = GetVariableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVariableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariableResponse) ProtoMessage() {}

func (x *GetVariableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariableResponse.ProtoReflect.Descriptor instead.
func (*GetVariableResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetVariableResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetVariableResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetVariableResponse) GetResult() *Variable {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetExternalEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEvent `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetExternalEventResponse) Reset() {
	*x = GetExternalEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalEventResponse) ProtoMessage() {}

func (x *GetExternalEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalEventResponse.ProtoReflect.Descriptor instead.
func (*GetExternalEventResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetExternalEventResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *GetExternalEventResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetExternalEventResponse) GetResult() *ExternalEvent {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutExternalEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string         `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string         `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 *string        `protobuf:"bytes,3,opt,name=guid,proto3,oneof" json:"guid,omitempty"`
	Content              *VariableValue `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ThreadRunNumber      *int32         `protobuf:"varint,6,opt,name=thread_run_number,json=threadRunNumber,proto3,oneof" json:"thread_run_number,omitempty"`
	NodeRunPosition      *int32         `protobuf:"varint,7,opt,name=node_run_position,json=nodeRunPosition,proto3,oneof" json:"node_run_position,omitempty"`
}

func (x *PutExternalEventRequest) Reset() {
	*x = PutExternalEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventRequest) ProtoMessage() {}

func (x *PutExternalEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventRequest.ProtoReflect.Descriptor instead.
func (*PutExternalEventRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *PutExternalEventRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *PutExternalEventRequest) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *PutExternalEventRequest) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *PutExternalEventRequest) GetContent() *VariableValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PutExternalEventRequest) GetThreadRunNumber() int32 {
	if x != nil && x.ThreadRunNumber != nil {
		return *x.ThreadRunNumber
	}
	return 0
}

func (x *PutExternalEventRequest) GetNodeRunPosition() int32 {
	if x != nil && x.NodeRunPosition != nil {
		return *x.NodeRunPosition
	}
	return 0
}

type DeleteExternalEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 string `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *DeleteExternalEventRequest) Reset() {
	*x = DeleteExternalEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExternalEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExternalEventRequest) ProtoMessage() {}

func (x *DeleteExternalEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExternalEventRequest.ProtoReflect.Descriptor instead.
func (*DeleteExternalEventRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteExternalEventRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *DeleteExternalEventRequest) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *DeleteExternalEventRequest) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type PutExternalEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEvent `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutExternalEventResponse) Reset() {
	*x = PutExternalEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventResponse) ProtoMessage() {}

func (x *PutExternalEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventResponse.ProtoReflect.Descriptor instead.
func (*PutExternalEventResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *PutExternalEventResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *PutExternalEventResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutExternalEventResponse) GetResult() *ExternalEvent {
	if x != nil {
		return x.Result
	}
	return nil
}

type RunWfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                    `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion *int32                    `protobuf:"varint,2,opt,name=wf_spec_version,json=wfSpecVersion,proto3,oneof" json:"wf_spec_version,omitempty"`
	Variables     map[string]*VariableValue `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id            *string                   `protobuf:"bytes,4,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *RunWfRequest) Reset() {
	*x = RunWfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunWfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunWfRequest) ProtoMessage() {}

func (x *RunWfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunWfRequest.ProtoReflect.Descriptor instead.
func (*RunWfRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

func (x *RunWfRequest) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *RunWfRequest) GetWfSpecVersion() int32 {
	if x != nil && x.WfSpecVersion != nil {
		return *x.WfSpecVersion
	}
	return 0
}

func (x *RunWfRequest) GetVariables() map[string]*VariableValue {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *RunWfRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type RunWfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message       *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	WfSpecVersion *int32         `protobuf:"varint,3,opt,name=wf_spec_version,json=wfSpecVersion,proto3,oneof" json:"wf_spec_version,omitempty"`
	WfRunId       *string        `protobuf:"bytes,4,opt,name=wf_run_id,json=wfRunId,proto3,oneof" json:"wf_run_id,omitempty"`
}

func (x *RunWfResponse) Reset() {
	*x = RunWfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunWfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunWfResponse) ProtoMessage() {}

func (x *RunWfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunWfResponse.ProtoReflect.Descriptor instead.
func (*RunWfResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *RunWfResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *RunWfResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *RunWfResponse) GetWfSpecVersion() int32 {
	if x != nil && x.WfSpecVersion != nil {
		return *x.WfSpecVersion
	}
	return 0
}

func (x *RunWfResponse) GetWfRunId() string {
	if x != nil && x.WfRunId != nil {
		return *x.WfRunId
	}
	return ""
}

type SearchWfRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to WfrunCriteria:
	//
	//	*SearchWfRunRequest_StatusAndSpec
	//	*SearchWfRunRequest_Name
	//	*SearchWfRunRequest_StatusAndName
	WfrunCriteria isSearchWfRunRequest_WfrunCriteria `protobuf_oneof:"wfrun_criteria"`
}

func (x *SearchWfRunRequest) Reset() {
	*x = SearchWfRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunRequest) ProtoMessage() {}

func (x *SearchWfRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunRequest.ProtoReflect.Descriptor instead.
func (*SearchWfRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *SearchWfRunRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchWfRunRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchWfRunRequest) GetWfrunCriteria() isSearchWfRunRequest_WfrunCriteria {
	if m != nil {
		return m.WfrunCriteria
	}
	return nil
}

func (x *SearchWfRunRequest) GetStatusAndSpec() *SearchWfRunRequest_StatusAndSpecRequest {
	if x, ok := x.GetWfrunCriteria().(*SearchWfRunRequest_StatusAndSpec); ok {
		return x.StatusAndSpec
	}
	return nil
}

func (x *SearchWfRunRequest) GetName() *SearchWfRunRequest_NameRequest {
	if x, ok := x.GetWfrunCriteria().(*SearchWfRunRequest_Name); ok {
		return x.Name
	}
	return nil
}

func (x *SearchWfRunRequest) GetStatusAndName() *SearchWfRunRequest_StatusAndNameRequest {
	if x, ok := x.GetWfrunCriteria().(*SearchWfRunRequest_StatusAndName); ok {
		return x.StatusAndName
	}
	return nil
}

type isSearchWfRunRequest_WfrunCriteria interface {
	isSearchWfRunRequest_WfrunCriteria()
}

type SearchWfRunRequest_StatusAndSpec struct {
	StatusAndSpec *SearchWfRunRequest_StatusAndSpecRequest `protobuf:"bytes,3,opt,name=status_and_spec,json=statusAndSpec,proto3,oneof"`
}

type SearchWfRunRequest_Name struct {
	Name *SearchWfRunRequest_NameRequest `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

type SearchWfRunRequest_StatusAndName struct {
	StatusAndName *SearchWfRunRequest_StatusAndNameRequest `protobuf:"bytes,5,opt,name=status_and_name,json=statusAndName,proto3,oneof"`
}

func (*SearchWfRunRequest_StatusAndSpec) isSearchWfRunRequest_WfrunCriteria() {}

func (*SearchWfRunRequest_Name) isSearchWfRunRequest_WfrunCriteria() {}

func (*SearchWfRunRequest_StatusAndName) isSearchWfRunRequest_WfrunCriteria() {}

type SearchWfRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*WfRunId     `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// The bookmark is used internally by the backend implementation to enable
	// pagination. If you wish to do a multi-part paginated request, you should
	// pass in the bookmark (unaltered) to the next request.
	Bookmark []byte `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchWfRunResponse) Reset() {
	*x = SearchWfRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunResponse) ProtoMessage() {}

func (x *SearchWfRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunResponse.ProtoReflect.Descriptor instead.
func (*SearchWfRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *SearchWfRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchWfRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchWfRunResponse) GetResults() []*WfRunId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchWfRunResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to TaskRunCriteria:
	//
	//	*SearchTaskRunRequest_StatusAndTaskDef
	//	*SearchTaskRunRequest_TaskDef
	TaskRunCriteria isSearchTaskRunRequest_TaskRunCriteria `protobuf_oneof:"task_run_criteria"`
}

func (x *SearchTaskRunRequest) Reset() {
	*x = SearchTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunRequest) ProtoMessage() {}

func (x *SearchTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunRequest.ProtoReflect.Descriptor instead.
func (*SearchTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *SearchTaskRunRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchTaskRunRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchTaskRunRequest) GetTaskRunCriteria() isSearchTaskRunRequest_TaskRunCriteria {
	if m != nil {
		return m.TaskRunCriteria
	}
	return nil
}

func (x *SearchTaskRunRequest) GetStatusAndTaskDef() *SearchTaskRunRequest_StatusAndTaskDefRequest {
	if x, ok := x.GetTaskRunCriteria().(*SearchTaskRunRequest_StatusAndTaskDef); ok {
		return x.StatusAndTaskDef
	}
	return nil
}

func (x *SearchTaskRunRequest) GetTaskDef() *SearchTaskRunRequest_ByTaskDefRequest {
	if x, ok := x.GetTaskRunCriteria().(*SearchTaskRunRequest_TaskDef); ok {
		return x.TaskDef
	}
	return nil
}

type isSearchTaskRunRequest_TaskRunCriteria interface {
	isSearchTaskRunRequest_TaskRunCriteria()
}

type SearchTaskRunRequest_StatusAndTaskDef struct {
	StatusAndTaskDef *SearchTaskRunRequest_StatusAndTaskDefRequest `protobuf:"bytes,3,opt,name=status_and_task_def,json=statusAndTaskDef,proto3,oneof"`
}

type SearchTaskRunRequest_TaskDef struct {
	TaskDef *SearchTaskRunRequest_ByTaskDefRequest `protobuf:"bytes,4,opt,name=task_def,json=taskDef,proto3,oneof"`
}

func (*SearchTaskRunRequest_StatusAndTaskDef) isSearchTaskRunRequest_TaskRunCriteria() {}

func (*SearchTaskRunRequest_TaskDef) isSearchTaskRunRequest_TaskRunCriteria() {}

type SearchTaskRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*TaskRunId   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte         `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchTaskRunResponse) Reset() {
	*x = SearchTaskRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunResponse) ProtoMessage() {}

func (x *SearchTaskRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunResponse.ProtoReflect.Descriptor instead.
func (*SearchTaskRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *SearchTaskRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchTaskRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchTaskRunResponse) GetResults() []*TaskRunId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchTaskRunResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchNodeRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to NoderunCriteria:
	//
	//	*SearchNodeRunRequest_WfRunId
	NoderunCriteria isSearchNodeRunRequest_NoderunCriteria `protobuf_oneof:"noderun_criteria"`
}

func (x *SearchNodeRunRequest) Reset() {
	*x = SearchNodeRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodeRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodeRunRequest) ProtoMessage() {}

func (x *SearchNodeRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodeRunRequest.ProtoReflect.Descriptor instead.
func (*SearchNodeRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33}
}

func (x *SearchNodeRunRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchNodeRunRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchNodeRunRequest) GetNoderunCriteria() isSearchNodeRunRequest_NoderunCriteria {
	if m != nil {
		return m.NoderunCriteria
	}
	return nil
}

func (x *SearchNodeRunRequest) GetWfRunId() string {
	if x, ok := x.GetNoderunCriteria().(*SearchNodeRunRequest_WfRunId); ok {
		return x.WfRunId
	}
	return ""
}

type isSearchNodeRunRequest_NoderunCriteria interface {
	isSearchNodeRunRequest_NoderunCriteria()
}

type SearchNodeRunRequest_WfRunId struct {
	WfRunId string `protobuf:"bytes,3,opt,name=wf_run_id,json=wfRunId,proto3,oneof"`
}

func (*SearchNodeRunRequest_WfRunId) isSearchNodeRunRequest_NoderunCriteria() {}

type SearchNodeRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*NodeRunId   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte         `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchNodeRunResponse) Reset() {
	*x = SearchNodeRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodeRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodeRunResponse) ProtoMessage() {}

func (x *SearchNodeRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodeRunResponse.ProtoReflect.Descriptor instead.
func (*SearchNodeRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34}
}

func (x *SearchNodeRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchNodeRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchNodeRunResponse) GetResults() []*NodeRunId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchNodeRunResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchUserTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark        []byte             `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit           *int32             `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Status          *UserTaskRunStatus `protobuf:"varint,3,opt,name=status,proto3,enum=littlehorse.UserTaskRunStatus,oneof" json:"status,omitempty"`
	UserTaskDefName *string            `protobuf:"bytes,4,opt,name=user_task_def_name,json=userTaskDefName,proto3,oneof" json:"user_task_def_name,omitempty"`
	// Types that are assignable to TaskOwner:
	//
	//	*SearchUserTaskRunRequest_User
	//	*SearchUserTaskRunRequest_UserGroup
	TaskOwner     isSearchUserTaskRunRequest_TaskOwner `protobuf_oneof:"task_owner"`
	EarliestStart *timestamppb.Timestamp               `protobuf:"bytes,7,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp               `protobuf:"bytes,8,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchUserTaskRunRequest) Reset() {
	*x = SearchUserTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskRunRequest) ProtoMessage() {}

func (x *SearchUserTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskRunRequest.ProtoReflect.Descriptor instead.
func (*SearchUserTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35}
}

func (x *SearchUserTaskRunRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchUserTaskRunRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchUserTaskRunRequest) GetStatus() UserTaskRunStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserTaskRunStatus_UNASSIGNED
}

func (x *SearchUserTaskRunRequest) GetUserTaskDefName() string {
	if x != nil && x.UserTaskDefName != nil {
		return *x.UserTaskDefName
	}
	return ""
}

func (m *SearchUserTaskRunRequest) GetTaskOwner() isSearchUserTaskRunRequest_TaskOwner {
	if m != nil {
		return m.TaskOwner
	}
	return nil
}

func (x *SearchUserTaskRunRequest) GetUser() *User {
	if x, ok := x.GetTaskOwner().(*SearchUserTaskRunRequest_User); ok {
		return x.User
	}
	return nil
}

func (x *SearchUserTaskRunRequest) GetUserGroup() *UserGroup {
	if x, ok := x.GetTaskOwner().(*SearchUserTaskRunRequest_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

func (x *SearchUserTaskRunRequest) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchUserTaskRunRequest) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type isSearchUserTaskRunRequest_TaskOwner interface {
	isSearchUserTaskRunRequest_TaskOwner()
}

type SearchUserTaskRunRequest_User struct {
	User *User `protobuf:"bytes,5,opt,name=user,proto3,oneof"`
}

type SearchUserTaskRunRequest_UserGroup struct {
	UserGroup *UserGroup `protobuf:"bytes,6,opt,name=user_group,json=userGroup,proto3,oneof"`
}

func (*SearchUserTaskRunRequest_User) isSearchUserTaskRunRequest_TaskOwner() {}

func (*SearchUserTaskRunRequest_UserGroup) isSearchUserTaskRunRequest_TaskOwner() {}

type SearchUserTaskRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*UserTaskRunId `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte           `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchUserTaskRunResponse) Reset() {
	*x = SearchUserTaskRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskRunResponse) ProtoMessage() {}

func (x *SearchUserTaskRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskRunResponse.ProtoReflect.Descriptor instead.
func (*SearchUserTaskRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36}
}

func (x *SearchUserTaskRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchUserTaskRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchUserTaskRunResponse) GetResults() []*UserTaskRunId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchUserTaskRunResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchVariableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to VariableCriteria:
	//
	//	*SearchVariableRequest_WfRunId
	//	*SearchVariableRequest_Value
	VariableCriteria isSearchVariableRequest_VariableCriteria `protobuf_oneof:"variable_criteria"`
}

func (x *SearchVariableRequest) Reset() {
	*x = SearchVariableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVariableRequest) ProtoMessage() {}

func (x *SearchVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVariableRequest.ProtoReflect.Descriptor instead.
func (*SearchVariableRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37}
}

func (x *SearchVariableRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchVariableRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchVariableRequest) GetVariableCriteria() isSearchVariableRequest_VariableCriteria {
	if m != nil {
		return m.VariableCriteria
	}
	return nil
}

func (x *SearchVariableRequest) GetWfRunId() string {
	if x, ok := x.GetVariableCriteria().(*SearchVariableRequest_WfRunId); ok {
		return x.WfRunId
	}
	return ""
}

func (x *SearchVariableRequest) GetValue() *SearchVariableRequest_NameAndValueRequest {
	if x, ok := x.GetVariableCriteria().(*SearchVariableRequest_Value); ok {
		return x.Value
	}
	return nil
}

type isSearchVariableRequest_VariableCriteria interface {
	isSearchVariableRequest_VariableCriteria()
}

type SearchVariableRequest_WfRunId struct {
	WfRunId string `protobuf:"bytes,3,opt,name=wf_run_id,json=wfRunId,proto3,oneof"`
}

type SearchVariableRequest_Value struct {
	Value *SearchVariableRequest_NameAndValueRequest `protobuf:"bytes,4,opt,name=value,proto3,oneof"`
}

func (*SearchVariableRequest_WfRunId) isSearchVariableRequest_VariableCriteria() {}

func (*SearchVariableRequest_Value) isSearchVariableRequest_VariableCriteria() {}

type SearchVariableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*VariableId  `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte         `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchVariableResponse) Reset() {
	*x = SearchVariableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVariableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVariableResponse) ProtoMessage() {}

func (x *SearchVariableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVariableResponse.ProtoReflect.Descriptor instead.
func (*SearchVariableResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38}
}

func (x *SearchVariableResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchVariableResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchVariableResponse) GetResults() []*VariableId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchVariableResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte  `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32  `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Prefix   *string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *SearchTaskDefRequest) Reset() {
	*x = SearchTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskDefRequest) ProtoMessage() {}

func (x *SearchTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskDefRequest.ProtoReflect.Descriptor instead.
func (*SearchTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{39}
}

func (x *SearchTaskDefRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchTaskDefRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchTaskDefRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type SearchTaskDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*TaskDefId   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte         `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchTaskDefResponse) Reset() {
	*x = SearchTaskDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskDefResponse) ProtoMessage() {}

func (x *SearchTaskDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskDefResponse.ProtoReflect.Descriptor instead.
func (*SearchTaskDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{40}
}

func (x *SearchTaskDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchTaskDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchTaskDefResponse) GetResults() []*TaskDefId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchTaskDefResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchUserTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to UserTaskDefCriteria:
	//
	//	*SearchUserTaskDefRequest_Prefix
	//	*SearchUserTaskDefRequest_Name
	UserTaskDefCriteria isSearchUserTaskDefRequest_UserTaskDefCriteria `protobuf_oneof:"user_task_def_criteria"`
}

func (x *SearchUserTaskDefRequest) Reset() {
	*x = SearchUserTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskDefRequest) ProtoMessage() {}

func (x *SearchUserTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskDefRequest.ProtoReflect.Descriptor instead.
func (*SearchUserTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{41}
}

func (x *SearchUserTaskDefRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchUserTaskDefRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchUserTaskDefRequest) GetUserTaskDefCriteria() isSearchUserTaskDefRequest_UserTaskDefCriteria {
	if m != nil {
		return m.UserTaskDefCriteria
	}
	return nil
}

func (x *SearchUserTaskDefRequest) GetPrefix() string {
	if x, ok := x.GetUserTaskDefCriteria().(*SearchUserTaskDefRequest_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *SearchUserTaskDefRequest) GetName() string {
	if x, ok := x.GetUserTaskDefCriteria().(*SearchUserTaskDefRequest_Name); ok {
		return x.Name
	}
	return ""
}

type isSearchUserTaskDefRequest_UserTaskDefCriteria interface {
	isSearchUserTaskDefRequest_UserTaskDefCriteria()
}

type SearchUserTaskDefRequest_Prefix struct {
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof"`
}

type SearchUserTaskDefRequest_Name struct {
	Name string `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

func (*SearchUserTaskDefRequest_Prefix) isSearchUserTaskDefRequest_UserTaskDefCriteria() {}

func (*SearchUserTaskDefRequest_Name) isSearchUserTaskDefRequest_UserTaskDefCriteria() {}

type SearchUserTaskDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*UserTaskDefId `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte           `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchUserTaskDefResponse) Reset() {
	*x = SearchUserTaskDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskDefResponse) ProtoMessage() {}

func (x *SearchUserTaskDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskDefResponse.ProtoReflect.Descriptor instead.
func (*SearchUserTaskDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{42}
}

func (x *SearchUserTaskDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchUserTaskDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchUserTaskDefResponse) GetResults() []*UserTaskDefId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchUserTaskDefResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchWfSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to WfSpecCriteria:
	//
	//	*SearchWfSpecRequest_Name
	//	*SearchWfSpecRequest_Prefix
	//	*SearchWfSpecRequest_TaskDefName
	WfSpecCriteria isSearchWfSpecRequest_WfSpecCriteria `protobuf_oneof:"wf_spec_criteria"`
}

func (x *SearchWfSpecRequest) Reset() {
	*x = SearchWfSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfSpecRequest) ProtoMessage() {}

func (x *SearchWfSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfSpecRequest.ProtoReflect.Descriptor instead.
func (*SearchWfSpecRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{43}
}

func (x *SearchWfSpecRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchWfSpecRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchWfSpecRequest) GetWfSpecCriteria() isSearchWfSpecRequest_WfSpecCriteria {
	if m != nil {
		return m.WfSpecCriteria
	}
	return nil
}

func (x *SearchWfSpecRequest) GetName() string {
	if x, ok := x.GetWfSpecCriteria().(*SearchWfSpecRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *SearchWfSpecRequest) GetPrefix() string {
	if x, ok := x.GetWfSpecCriteria().(*SearchWfSpecRequest_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *SearchWfSpecRequest) GetTaskDefName() string {
	if x, ok := x.GetWfSpecCriteria().(*SearchWfSpecRequest_TaskDefName); ok {
		return x.TaskDefName
	}
	return ""
}

type isSearchWfSpecRequest_WfSpecCriteria interface {
	isSearchWfSpecRequest_WfSpecCriteria()
}

type SearchWfSpecRequest_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type SearchWfSpecRequest_Prefix struct {
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3,oneof"`
}

type SearchWfSpecRequest_TaskDefName struct {
	TaskDefName string `protobuf:"bytes,5,opt,name=task_def_name,json=taskDefName,proto3,oneof"`
}

func (*SearchWfSpecRequest_Name) isSearchWfSpecRequest_WfSpecCriteria() {}

func (*SearchWfSpecRequest_Prefix) isSearchWfSpecRequest_WfSpecCriteria() {}

func (*SearchWfSpecRequest_TaskDefName) isSearchWfSpecRequest_WfSpecCriteria() {}

type SearchWfSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*WfSpecId    `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte         `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchWfSpecResponse) Reset() {
	*x = SearchWfSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfSpecResponse) ProtoMessage() {}

func (x *SearchWfSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfSpecResponse.ProtoReflect.Descriptor instead.
func (*SearchWfSpecResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{44}
}

func (x *SearchWfSpecResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchWfSpecResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchWfSpecResponse) GetResults() []*WfSpecId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchWfSpecResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchExternalEventDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte  `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32  `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Prefix   *string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *SearchExternalEventDefRequest) Reset() {
	*x = SearchExternalEventDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventDefRequest) ProtoMessage() {}

func (x *SearchExternalEventDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventDefRequest.ProtoReflect.Descriptor instead.
func (*SearchExternalEventDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{45}
}

func (x *SearchExternalEventDefRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchExternalEventDefRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchExternalEventDefRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type SearchExternalEventDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode        `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string               `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*ExternalEventDefId `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte                `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchExternalEventDefResponse) Reset() {
	*x = SearchExternalEventDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventDefResponse) ProtoMessage() {}

func (x *SearchExternalEventDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventDefResponse.ProtoReflect.Descriptor instead.
func (*SearchExternalEventDefResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{46}
}

func (x *SearchExternalEventDefResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchExternalEventDefResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchExternalEventDefResponse) GetResults() []*ExternalEventDefId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchExternalEventDefResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchExternalEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to ExtEvtCriteria:
	//
	//	*SearchExternalEventRequest_WfRunId
	//	*SearchExternalEventRequest_ExternalEventDefNameAndStatus
	ExtEvtCriteria isSearchExternalEventRequest_ExtEvtCriteria `protobuf_oneof:"ext_evt_criteria"`
}

func (x *SearchExternalEventRequest) Reset() {
	*x = SearchExternalEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventRequest) ProtoMessage() {}

func (x *SearchExternalEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventRequest.ProtoReflect.Descriptor instead.
func (*SearchExternalEventRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{47}
}

func (x *SearchExternalEventRequest) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchExternalEventRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchExternalEventRequest) GetExtEvtCriteria() isSearchExternalEventRequest_ExtEvtCriteria {
	if m != nil {
		return m.ExtEvtCriteria
	}
	return nil
}

func (x *SearchExternalEventRequest) GetWfRunId() string {
	if x, ok := x.GetExtEvtCriteria().(*SearchExternalEventRequest_WfRunId); ok {
		return x.WfRunId
	}
	return ""
}

func (x *SearchExternalEventRequest) GetExternalEventDefNameAndStatus() *SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest {
	if x, ok := x.GetExtEvtCriteria().(*SearchExternalEventRequest_ExternalEventDefNameAndStatus); ok {
		return x.ExternalEventDefNameAndStatus
	}
	return nil
}

type isSearchExternalEventRequest_ExtEvtCriteria interface {
	isSearchExternalEventRequest_ExtEvtCriteria()
}

type SearchExternalEventRequest_WfRunId struct {
	WfRunId string `protobuf:"bytes,3,opt,name=wf_run_id,json=wfRunId,proto3,oneof"`
}

type SearchExternalEventRequest_ExternalEventDefNameAndStatus struct {
	ExternalEventDefNameAndStatus *SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest `protobuf:"bytes,4,opt,name=external_event_def_name_and_status,json=externalEventDefNameAndStatus,proto3,oneof"`
}

func (*SearchExternalEventRequest_WfRunId) isSearchExternalEventRequest_ExtEvtCriteria() {}

func (*SearchExternalEventRequest_ExternalEventDefNameAndStatus) isSearchExternalEventRequest_ExtEvtCriteria() {
}

type SearchExternalEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCode     `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message  *string            `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*ExternalEventId `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte             `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchExternalEventResponse) Reset() {
	*x = SearchExternalEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventResponse) ProtoMessage() {}

func (x *SearchExternalEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventResponse.ProtoReflect.Descriptor instead.
func (*SearchExternalEventResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{48}
}

func (x *SearchExternalEventResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *SearchExternalEventResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchExternalEventResponse) GetResults() []*ExternalEventId {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchExternalEventResponse) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type ListNodeRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *ListNodeRunsRequest) Reset() {
	*x = ListNodeRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRunsRequest) ProtoMessage() {}

func (x *ListNodeRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRunsRequest.ProtoReflect.Descriptor instead.
func (*ListNodeRunsRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{49}
}

func (x *ListNodeRunsRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type ListNodeRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*NodeRun     `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListNodeRunsResponse) Reset() {
	*x = ListNodeRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRunsResponse) ProtoMessage() {}

func (x *ListNodeRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRunsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeRunsResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{50}
}

func (x *ListNodeRunsResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *ListNodeRunsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListNodeRunsResponse) GetResults() []*NodeRun {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *ListVariablesRequest) Reset() {
	*x = ListVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariablesRequest) ProtoMessage() {}

func (x *ListVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariablesRequest.ProtoReflect.Descriptor instead.
func (*ListVariablesRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{51}
}

func (x *ListVariablesRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type ListVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*Variable    `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListVariablesResponse) Reset() {
	*x = ListVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariablesResponse) ProtoMessage() {}

func (x *ListVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariablesResponse.ProtoReflect.Descriptor instead.
func (*ListVariablesResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{52}
}

func (x *ListVariablesResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *ListVariablesResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListVariablesResponse) GetResults() []*Variable {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListExternalEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *ListExternalEventsRequest) Reset() {
	*x = ListExternalEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExternalEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExternalEventsRequest) ProtoMessage() {}

func (x *ListExternalEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExternalEventsRequest.ProtoReflect.Descriptor instead.
func (*ListExternalEventsRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{53}
}

func (x *ListExternalEventsRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type ListExternalEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*ExternalEvent `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListExternalEventsResponse) Reset() {
	*x = ListExternalEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExternalEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExternalEventsResponse) ProtoMessage() {}

func (x *ListExternalEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExternalEventsResponse.ProtoReflect.Descriptor instead.
func (*ListExternalEventsResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{54}
}

func (x *ListExternalEventsResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *ListExternalEventsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListExternalEventsResponse) GetResults() []*ExternalEvent {
	if x != nil {
		return x.Results
	}
	return nil
}

type RegisterTaskWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskDefName  string `protobuf:"bytes,2,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	ListenerName string `protobuf:"bytes,3,opt,name=listener_name,json=listenerName,proto3" json:"listener_name,omitempty"`
}

func (x *RegisterTaskWorkerRequest) Reset() {
	*x = RegisterTaskWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskWorkerRequest) ProtoMessage() {}

func (x *RegisterTaskWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskWorkerRequest.ProtoReflect.Descriptor instead.
func (*RegisterTaskWorkerRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{55}
}

func (x *RegisterTaskWorkerRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RegisterTaskWorkerRequest) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *RegisterTaskWorkerRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

type TaskWorkerHeartBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskDefName  string `protobuf:"bytes,2,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	ListenerName string `protobuf:"bytes,3,opt,name=listener_name,json=listenerName,proto3" json:"listener_name,omitempty"`
}

func (x *TaskWorkerHeartBeatRequest) Reset() {
	*x = TaskWorkerHeartBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerHeartBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerHeartBeatRequest) ProtoMessage() {}

func (x *TaskWorkerHeartBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerHeartBeatRequest.ProtoReflect.Descriptor instead.
func (*TaskWorkerHeartBeatRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{56}
}

func (x *TaskWorkerHeartBeatRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TaskWorkerHeartBeatRequest) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskWorkerHeartBeatRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

type RegisterTaskWorkerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message   *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	YourHosts []*HostInfo    `protobuf:"bytes,3,rep,name=your_hosts,json=yourHosts,proto3" json:"your_hosts,omitempty"`
}

func (x *RegisterTaskWorkerResponse) Reset() {
	*x = RegisterTaskWorkerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskWorkerResponse) ProtoMessage() {}

func (x *RegisterTaskWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskWorkerResponse.ProtoReflect.Descriptor instead.
func (*RegisterTaskWorkerResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{57}
}

func (x *RegisterTaskWorkerResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *RegisterTaskWorkerResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *RegisterTaskWorkerResponse) GetYourHosts() []*HostInfo {
	if x != nil {
		return x.YourHosts
	}
	return nil
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{58}
}

func (x *HostInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HostInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type TaskWorkerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId        string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	LatestHeartbeat *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=latest_heartbeat,json=latestHeartbeat,proto3" json:"latest_heartbeat,omitempty"`
	Hosts           []*HostInfo            `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *TaskWorkerMetadata) Reset() {
	*x = TaskWorkerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerMetadata) ProtoMessage() {}

func (x *TaskWorkerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerMetadata.ProtoReflect.Descriptor instead.
func (*TaskWorkerMetadata) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{59}
}

func (x *TaskWorkerMetadata) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TaskWorkerMetadata) GetLatestHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestHeartbeat
	}
	return nil
}

func (x *TaskWorkerMetadata) GetHosts() []*HostInfo {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type TaskWorkerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName string                         `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	CreatedAt   *timestamppb.Timestamp         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TaskWorkers map[string]*TaskWorkerMetadata `protobuf:"bytes,3,rep,name=task_workers,json=taskWorkers,proto3" json:"task_workers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TaskWorkerGroup) Reset() {
	*x = TaskWorkerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerGroup) ProtoMessage() {}

func (x *TaskWorkerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerGroup.ProtoReflect.Descriptor instead.
func (*TaskWorkerGroup) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{60}
}

func (x *TaskWorkerGroup) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskWorkerGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskWorkerGroup) GetTaskWorkers() map[string]*TaskWorkerMetadata {
	if x != nil {
		return x.TaskWorkers
	}
	return nil
}

type TaskWorkerGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName string `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
}

func (x *TaskWorkerGroupId) Reset() {
	*x = TaskWorkerGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerGroupId) ProtoMessage() {}

func (x *TaskWorkerGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerGroupId.ProtoReflect.Descriptor instead.
func (*TaskWorkerGroupId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{61}
}

func (x *TaskWorkerGroupId) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

type PollTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName       string  `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	ClientId          string  `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskWorkerVersion *string `protobuf:"bytes,3,opt,name=task_worker_version,json=taskWorkerVersion,proto3,oneof" json:"task_worker_version,omitempty"`
}

func (x *PollTaskRequest) Reset() {
	*x = PollTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTaskRequest) ProtoMessage() {}

func (x *PollTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTaskRequest.ProtoReflect.Descriptor instead.
func (*PollTaskRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{62}
}

func (x *PollTaskRequest) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *PollTaskRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PollTaskRequest) GetTaskWorkerVersion() string {
	if x != nil && x.TaskWorkerVersion != nil {
		return *x.TaskWorkerVersion
	}
	return ""
}

type ScheduledTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRunId     *TaskRunId             `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3" json:"task_run_id,omitempty"`
	TaskDefId     *TaskDefId             `protobuf:"bytes,2,opt,name=task_def_id,json=taskDefId,proto3" json:"task_def_id,omitempty"`
	AttemptNumber int32                  `protobuf:"varint,3,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	Variables     []*VarNameAndVal       `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Source        *TaskRunSource         `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ScheduledTask) Reset() {
	*x = ScheduledTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTask) ProtoMessage() {}

func (x *ScheduledTask) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTask.ProtoReflect.Descriptor instead.
func (*ScheduledTask) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{63}
}

func (x *ScheduledTask) GetTaskRunId() *TaskRunId {
	if x != nil {
		return x.TaskRunId
	}
	return nil
}

func (x *ScheduledTask) GetTaskDefId() *TaskDefId {
	if x != nil {
		return x.TaskDefId
	}
	return nil
}

func (x *ScheduledTask) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

func (x *ScheduledTask) GetVariables() []*VarNameAndVal {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ScheduledTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScheduledTask) GetSource() *TaskRunSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type TaskRunSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TaskRunSource:
	//
	//	*TaskRunSource_TaskNode
	//	*TaskRunSource_UserTaskTrigger
	TaskRunSource isTaskRunSource_TaskRunSource `protobuf_oneof:"task_run_source"`
}

func (x *TaskRunSource) Reset() {
	*x = TaskRunSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRunSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSource) ProtoMessage() {}

func (x *TaskRunSource) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSource.ProtoReflect.Descriptor instead.
func (*TaskRunSource) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{64}
}

func (m *TaskRunSource) GetTaskRunSource() isTaskRunSource_TaskRunSource {
	if m != nil {
		return m.TaskRunSource
	}
	return nil
}

func (x *TaskRunSource) GetTaskNode() *TaskNodeReference {
	if x, ok := x.GetTaskRunSource().(*TaskRunSource_TaskNode); ok {
		return x.TaskNode
	}
	return nil
}

func (x *TaskRunSource) GetUserTaskTrigger() *UserTaskTriggerReference {
	if x, ok := x.GetTaskRunSource().(*TaskRunSource_UserTaskTrigger); ok {
		return x.UserTaskTrigger
	}
	return nil
}

type isTaskRunSource_TaskRunSource interface {
	isTaskRunSource_TaskRunSource()
}

type TaskRunSource_TaskNode struct {
	TaskNode *TaskNodeReference `protobuf:"bytes,1,opt,name=task_node,json=taskNode,proto3,oneof"`
}

type TaskRunSource_UserTaskTrigger struct {
	UserTaskTrigger *UserTaskTriggerReference `protobuf:"bytes,2,opt,name=user_task_trigger,json=userTaskTrigger,proto3,oneof"`
}

func (*TaskRunSource_TaskNode) isTaskRunSource_TaskRunSource() {}

func (*TaskRunSource_UserTaskTrigger) isTaskRunSource_TaskRunSource() {}

type PollTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ScheduledTask `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PollTaskResponse) Reset() {
	*x = PollTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTaskResponse) ProtoMessage() {}

func (x *PollTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTaskResponse.ProtoReflect.Descriptor instead.
func (*PollTaskResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{65}
}

func (x *PollTaskResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *PollTaskResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PollTaskResponse) GetResult() *ScheduledTask {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReportTaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRunId     *TaskRunId             `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3" json:"task_run_id,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status        TaskStatus             `protobuf:"varint,3,opt,name=status,proto3,enum=littlehorse.TaskStatus" json:"status,omitempty"`
	Output        *VariableValue         `protobuf:"bytes,4,opt,name=output,proto3,oneof" json:"output,omitempty"`
	LogOutput     *VariableValue         `protobuf:"bytes,5,opt,name=log_output,json=logOutput,proto3,oneof" json:"log_output,omitempty"`
	AttemptNumber int32                  `protobuf:"varint,6,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
}

func (x *ReportTaskRun) Reset() {
	*x = ReportTaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskRun) ProtoMessage() {}

func (x *ReportTaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskRun.ProtoReflect.Descriptor instead.
func (*ReportTaskRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{66}
}

func (x *ReportTaskRun) GetTaskRunId() *TaskRunId {
	if x != nil {
		return x.TaskRunId
	}
	return nil
}

func (x *ReportTaskRun) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReportTaskRun) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_SCHEDULED
}

func (x *ReportTaskRun) GetOutput() *VariableValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ReportTaskRun) GetLogOutput() *VariableValue {
	if x != nil {
		return x.LogOutput
	}
	return nil
}

func (x *ReportTaskRun) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

type ReportTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ReportTaskResponse) Reset() {
	*x = ReportTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskResponse) ProtoMessage() {}

func (x *ReportTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskResponse.ProtoReflect.Descriptor instead.
func (*ReportTaskResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{67}
}

func (x *ReportTaskResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *ReportTaskResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type StopWfRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *StopWfRunRequest) Reset() {
	*x = StopWfRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWfRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWfRunRequest) ProtoMessage() {}

func (x *StopWfRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWfRunRequest.ProtoReflect.Descriptor instead.
func (*StopWfRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{68}
}

func (x *StopWfRunRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *StopWfRunRequest) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

type StopWfRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *StopWfRunResponse) Reset() {
	*x = StopWfRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWfRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWfRunResponse) ProtoMessage() {}

func (x *StopWfRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWfRunResponse.ProtoReflect.Descriptor instead.
func (*StopWfRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{69}
}

func (x *StopWfRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *StopWfRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ResumeWfRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *ResumeWfRunRequest) Reset() {
	*x = ResumeWfRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeWfRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeWfRunRequest) ProtoMessage() {}

func (x *ResumeWfRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeWfRunRequest.ProtoReflect.Descriptor instead.
func (*ResumeWfRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{70}
}

func (x *ResumeWfRunRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ResumeWfRunRequest) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

type ResumeWfRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ResumeWfRunResponse) Reset() {
	*x = ResumeWfRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeWfRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeWfRunResponse) ProtoMessage() {}

func (x *ResumeWfRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeWfRunResponse.ProtoReflect.Descriptor instead.
func (*ResumeWfRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{71}
}

func (x *ResumeWfRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *ResumeWfRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type DeleteWfRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *DeleteWfRunRequest) Reset() {
	*x = DeleteWfRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWfRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWfRunRequest) ProtoMessage() {}

func (x *DeleteWfRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWfRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteWfRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteWfRunRequest) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type DeleteTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTaskDefRequest) Reset() {
	*x = DeleteTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskDefRequest) ProtoMessage() {}

func (x *DeleteTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskDefRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteTaskDefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteUserTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteUserTaskDefRequest) Reset() {
	*x = DeleteUserTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserTaskDefRequest) ProtoMessage() {}

func (x *DeleteUserTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserTaskDefRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteUserTaskDefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteUserTaskDefRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeleteWfSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteWfSpecRequest) Reset() {
	*x = DeleteWfSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWfSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWfSpecRequest) ProtoMessage() {}

func (x *DeleteWfSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWfSpecRequest.ProtoReflect.Descriptor instead.
func (*DeleteWfSpecRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteWfSpecRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteWfSpecRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeleteExternalEventDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteExternalEventDefRequest) Reset() {
	*x = DeleteExternalEventDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExternalEventDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExternalEventDefRequest) ProtoMessage() {}

func (x *DeleteExternalEventDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExternalEventDefRequest.ProtoReflect.Descriptor instead.
func (*DeleteExternalEventDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteExternalEventDefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *DeleteObjectResponse) Reset() {
	*x = DeleteObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectResponse) ProtoMessage() {}

func (x *DeleteObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteObjectResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{77}
}

func (x *DeleteObjectResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *DeleteObjectResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{78}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreState  LHHealthResult `protobuf:"varint,1,opt,name=core_state,json=coreState,proto3,enum=littlehorse.LHHealthResult" json:"core_state,omitempty"`
	TimerState LHHealthResult `protobuf:"varint,2,opt,name=timer_state,json=timerState,proto3,enum=littlehorse.LHHealthResult" json:"timer_state,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{79}
}

func (x *HealthCheckResponse) GetCoreState() LHHealthResult {
	if x != nil {
		return x.CoreState
	}
	return LHHealthResult_LH_HEALTH_RUNNING
}

func (x *HealthCheckResponse) GetTimerState() LHHealthResult {
	if x != nil {
		return x.TimerState
	}
	return LHHealthResult_LH_HEALTH_RUNNING
}

type TaskDefMetricsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType  MetricsWindowLength    `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLength" json:"window_type,omitempty"`
	TaskDefName *string                `protobuf:"bytes,3,opt,name=task_def_name,json=taskDefName,proto3,oneof" json:"task_def_name,omitempty"`
}

func (x *TaskDefMetricsQueryRequest) Reset() {
	*x = TaskDefMetricsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetricsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetricsQueryRequest) ProtoMessage() {}

func (x *TaskDefMetricsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetricsQueryRequest.ProtoReflect.Descriptor instead.
func (*TaskDefMetricsQueryRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{80}
}

func (x *TaskDefMetricsQueryRequest) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *TaskDefMetricsQueryRequest) GetWindowType() MetricsWindowLength {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLength_MINUTES_5
}

func (x *TaskDefMetricsQueryRequest) GetTaskDefName() string {
	if x != nil && x.TaskDefName != nil {
		return *x.TaskDefName
	}
	return ""
}

type TaskDefMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode  `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskDefMetrics `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *TaskDefMetricsResponse) Reset() {
	*x = TaskDefMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetricsResponse) ProtoMessage() {}

func (x *TaskDefMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetricsResponse.ProtoReflect.Descriptor instead.
func (*TaskDefMetricsResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{81}
}

func (x *TaskDefMetricsResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *TaskDefMetricsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *TaskDefMetricsResponse) GetResult() *TaskDefMetrics {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListTaskMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastWindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_window_start,json=lastWindowStart,proto3" json:"last_window_start,omitempty"`
	NumWindows      int32                  `protobuf:"varint,2,opt,name=num_windows,json=numWindows,proto3" json:"num_windows,omitempty"`
	TaskDefName     string                 `protobuf:"bytes,3,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	WindowLength    MetricsWindowLength    `protobuf:"varint,4,opt,name=window_length,json=windowLength,proto3,enum=littlehorse.MetricsWindowLength" json:"window_length,omitempty"`
}

func (x *ListTaskMetricsRequest) Reset() {
	*x = ListTaskMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskMetricsRequest) ProtoMessage() {}

func (x *ListTaskMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskMetricsRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{82}
}

func (x *ListTaskMetricsRequest) GetLastWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LastWindowStart
	}
	return nil
}

func (x *ListTaskMetricsRequest) GetNumWindows() int32 {
	if x != nil {
		return x.NumWindows
	}
	return 0
}

func (x *ListTaskMetricsRequest) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *ListTaskMetricsRequest) GetWindowLength() MetricsWindowLength {
	if x != nil {
		return x.WindowLength
	}
	return MetricsWindowLength_MINUTES_5
}

type ListTaskMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode    `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string           `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*TaskDefMetrics `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListTaskMetricsResponse) Reset() {
	*x = ListTaskMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskMetricsResponse) ProtoMessage() {}

func (x *ListTaskMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskMetricsResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{83}
}

func (x *ListTaskMetricsResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *ListTaskMetricsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListTaskMetricsResponse) GetResults() []*TaskDefMetrics {
	if x != nil {
		return x.Results
	}
	return nil
}

type WfSpecMetricsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType    MetricsWindowLength    `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLength" json:"window_type,omitempty"`
	WfSpecName    string                 `protobuf:"bytes,3,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion int32                  `protobuf:"varint,4,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
}

func (x *WfSpecMetricsQueryRequest) Reset() {
	*x = WfSpecMetricsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetricsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetricsQueryRequest) ProtoMessage() {}

func (x *WfSpecMetricsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetricsQueryRequest.ProtoReflect.Descriptor instead.
func (*WfSpecMetricsQueryRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{84}
}

func (x *WfSpecMetricsQueryRequest) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *WfSpecMetricsQueryRequest) GetWindowType() MetricsWindowLength {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLength_MINUTES_5
}

func (x *WfSpecMetricsQueryRequest) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfSpecMetricsQueryRequest) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

type WfSpecMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfSpecMetrics `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *WfSpecMetricsResponse) Reset() {
	*x = WfSpecMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetricsResponse) ProtoMessage() {}

func (x *WfSpecMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetricsResponse.ProtoReflect.Descriptor instead.
func (*WfSpecMetricsResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{85}
}

func (x *WfSpecMetricsResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *WfSpecMetricsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *WfSpecMetricsResponse) GetResult() *WfSpecMetrics {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListWfMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastWindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_window_start,json=lastWindowStart,proto3" json:"last_window_start,omitempty"`
	NumWindows      int32                  `protobuf:"varint,2,opt,name=num_windows,json=numWindows,proto3" json:"num_windows,omitempty"`
	WfSpecName      string                 `protobuf:"bytes,3,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion   int32                  `protobuf:"varint,4,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	WindowLength    MetricsWindowLength    `protobuf:"varint,5,opt,name=window_length,json=windowLength,proto3,enum=littlehorse.MetricsWindowLength" json:"window_length,omitempty"`
}

func (x *ListWfMetricsRequest) Reset() {
	*x = ListWfMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWfMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWfMetricsRequest) ProtoMessage() {}

func (x *ListWfMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWfMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListWfMetricsRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{86}
}

func (x *ListWfMetricsRequest) GetLastWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LastWindowStart
	}
	return nil
}

func (x *ListWfMetricsRequest) GetNumWindows() int32 {
	if x != nil {
		return x.NumWindows
	}
	return 0
}

func (x *ListWfMetricsRequest) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *ListWfMetricsRequest) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *ListWfMetricsRequest) GetWindowLength() MetricsWindowLength {
	if x != nil {
		return x.WindowLength
	}
	return MetricsWindowLength_MINUTES_5
}

type ListWfMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*WfSpecMetrics `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListWfMetricsResponse) Reset() {
	*x = ListWfMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWfMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWfMetricsResponse) ProtoMessage() {}

func (x *ListWfMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWfMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListWfMetricsResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{87}
}

func (x *ListWfMetricsResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *ListWfMetricsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListWfMetricsResponse) GetResults() []*WfSpecMetrics {
	if x != nil {
		return x.Results
	}
	return nil
}

type VariableValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    VariableType `protobuf:"varint,1,opt,name=type,proto3,enum=littlehorse.VariableType" json:"type,omitempty"`
	JsonObj *string      `protobuf:"bytes,2,opt,name=json_obj,json=jsonObj,proto3,oneof" json:"json_obj,omitempty"`
	JsonArr *string      `protobuf:"bytes,3,opt,name=json_arr,json=jsonArr,proto3,oneof" json:"json_arr,omitempty"`
	Double  *float64     `protobuf:"fixed64,4,opt,name=double,proto3,oneof" json:"double,omitempty"`
	Bool    *bool        `protobuf:"varint,5,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
	Str     *string      `protobuf:"bytes,6,opt,name=str,proto3,oneof" json:"str,omitempty"`
	Int     *int64       `protobuf:"varint,7,opt,name=int,proto3,oneof" json:"int,omitempty"`
	Bytes   []byte       `protobuf:"bytes,8,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}

func (x *VariableValue) Reset() {
	*x = VariableValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableValue) ProtoMessage() {}

func (x *VariableValue) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableValue.ProtoReflect.Descriptor instead.
func (*VariableValue) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{88}
}

func (x *VariableValue) GetType() VariableType {
	if x != nil {
		return x.Type
	}
	return VariableType_JSON_OBJ
}

func (x *VariableValue) GetJsonObj() string {
	if x != nil && x.JsonObj != nil {
		return *x.JsonObj
	}
	return ""
}

func (x *VariableValue) GetJsonArr() string {
	if x != nil && x.JsonArr != nil {
		return *x.JsonArr
	}
	return ""
}

func (x *VariableValue) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *VariableValue) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *VariableValue) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *VariableValue) GetInt() int64 {
	if x != nil && x.Int != nil {
		return *x.Int
	}
	return 0
}

func (x *VariableValue) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type VariableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VariableId) Reset() {
	*x = VariableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableId) ProtoMessage() {}

func (x *VariableId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableId.ProtoReflect.Descriptor instead.
func (*VariableId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{89}
}

func (x *VariableId) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *VariableId) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *VariableId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           *VariableValue         `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	WfRunId         string                 `protobuf:"bytes,2,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,3,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Name            string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Date            *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{90}
}

func (x *Variable) GetValue() *VariableValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Variable) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *Variable) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variable) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type VarNameAndVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarName string         `protobuf:"bytes,1,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	Value   *VariableValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VarNameAndVal) Reset() {
	*x = VarNameAndVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarNameAndVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarNameAndVal) ProtoMessage() {}

func (x *VarNameAndVal) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarNameAndVal.ProtoReflect.Descriptor instead.
func (*VarNameAndVal) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{91}
}

func (x *VarNameAndVal) GetVarName() string {
	if x != nil {
		return x.VarName
	}
	return ""
}

func (x *VarNameAndVal) GetValue() *VariableValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// External Event
type ExternalEventId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 string `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *ExternalEventId) Reset() {
	*x = ExternalEventId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventId) ProtoMessage() {}

func (x *ExternalEventId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventId.ProtoReflect.Descriptor instead.
func (*ExternalEventId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{92}
}

func (x *ExternalEventId) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ExternalEventId) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventId) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type ExternalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string                 `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 string                 `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Content              *VariableValue         `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ThreadRunNumber      *int32                 `protobuf:"varint,6,opt,name=thread_run_number,json=threadRunNumber,proto3,oneof" json:"thread_run_number,omitempty"`
	NodeRunPosition      *int32                 `protobuf:"varint,7,opt,name=node_run_position,json=nodeRunPosition,proto3,oneof" json:"node_run_position,omitempty"`
	Claimed              bool                   `protobuf:"varint,8,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (x *ExternalEvent) Reset() {
	*x = ExternalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEvent) ProtoMessage() {}

func (x *ExternalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEvent.ProtoReflect.Descriptor instead.
func (*ExternalEvent) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{93}
}

func (x *ExternalEvent) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ExternalEvent) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEvent) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *ExternalEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExternalEvent) GetContent() *VariableValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ExternalEvent) GetThreadRunNumber() int32 {
	if x != nil && x.ThreadRunNumber != nil {
		return *x.ThreadRunNumber
	}
	return 0
}

func (x *ExternalEvent) GetNodeRunPosition() int32 {
	if x != nil && x.NodeRunPosition != nil {
		return *x.NodeRunPosition
	}
	return 0
}

func (x *ExternalEvent) GetClaimed() bool {
	if x != nil {
		return x.Claimed
	}
	return false
}

type WfRunId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WfRunId) Reset() {
	*x = WfRunId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfRunId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfRunId) ProtoMessage() {}

func (x *WfRunId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfRunId.ProtoReflect.Descriptor instead.
func (*WfRunId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{94}
}

func (x *WfRunId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WfRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WfSpecName        string                   `protobuf:"bytes,2,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion     int32                    `protobuf:"varint,3,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	Status            LHStatus                 `protobuf:"varint,4,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	StartTime         *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	ThreadRuns        []*ThreadRun             `protobuf:"bytes,8,rep,name=thread_runs,json=threadRuns,proto3" json:"thread_runs,omitempty"`
	PendingInterrupts []*PendingInterrupt      `protobuf:"bytes,9,rep,name=pending_interrupts,json=pendingInterrupts,proto3" json:"pending_interrupts,omitempty"`
	PendingFailures   []*PendingFailureHandler `protobuf:"bytes,10,rep,name=pending_failures,json=pendingFailures,proto3" json:"pending_failures,omitempty"`
}

func (x *WfRun) Reset() {
	*x = WfRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfRun) ProtoMessage() {}

func (x *WfRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfRun.ProtoReflect.Descriptor instead.
func (*WfRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{95}
}

func (x *WfRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WfRun) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfRun) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *WfRun) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *WfRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WfRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WfRun) GetThreadRuns() []*ThreadRun {
	if x != nil {
		return x.ThreadRuns
	}
	return nil
}

func (x *WfRun) GetPendingInterrupts() []*PendingInterrupt {
	if x != nil {
		return x.PendingInterrupts
	}
	return nil
}

func (x *WfRun) GetPendingFailures() []*PendingFailureHandler {
	if x != nil {
		return x.PendingFailures
	}
	return nil
}

type ThreadRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId               string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	Number                int32                  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Status                LHStatus               `protobuf:"varint,3,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	WfSpecName            string                 `protobuf:"bytes,4,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion         int32                  `protobuf:"varint,5,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	ThreadSpecName        string                 `protobuf:"bytes,6,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	StartTime             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	ErrorMessage          *string                `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	ChildThreadIds        []int32                `protobuf:"varint,11,rep,packed,name=child_thread_ids,json=childThreadIds,proto3" json:"child_thread_ids,omitempty"`
	ParentThreadId        *int32                 `protobuf:"varint,12,opt,name=parent_thread_id,json=parentThreadId,proto3,oneof" json:"parent_thread_id,omitempty"`
	HaltReasons           []*ThreadHaltReason    `protobuf:"bytes,13,rep,name=halt_reasons,json=haltReasons,proto3" json:"halt_reasons,omitempty"`
	InterruptTriggerId    *ExternalEventId       `protobuf:"bytes,14,opt,name=interrupt_trigger_id,json=interruptTriggerId,proto3,oneof" json:"interrupt_trigger_id,omitempty"`
	FailureBeingHandled   *FailureBeingHandled   `protobuf:"bytes,15,opt,name=failure_being_handled,json=failureBeingHandled,proto3,oneof" json:"failure_being_handled,omitempty"`
	CurrentNodePosition   int32                  `protobuf:"varint,16,opt,name=current_node_position,json=currentNodePosition,proto3" json:"current_node_position,omitempty"`
	HandledFailedChildren []int32                `protobuf:"varint,17,rep,packed,name=handled_failed_children,json=handledFailedChildren,proto3" json:"handled_failed_children,omitempty"`
	Type                  ThreadType             `protobuf:"varint,18,opt,name=type,proto3,enum=littlehorse.ThreadType" json:"type,omitempty"`
}

func (x *ThreadRun) Reset() {
	*x = ThreadRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadRun) ProtoMessage() {}

func (x *ThreadRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadRun.ProtoReflect.Descriptor instead.
func (*ThreadRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{96}
}

func (x *ThreadRun) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ThreadRun) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ThreadRun) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *ThreadRun) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *ThreadRun) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *ThreadRun) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *ThreadRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ThreadRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ThreadRun) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ThreadRun) GetChildThreadIds() []int32 {
	if x != nil {
		return x.ChildThreadIds
	}
	return nil
}

func (x *ThreadRun) GetParentThreadId() int32 {
	if x != nil && x.ParentThreadId != nil {
		return *x.ParentThreadId
	}
	return 0
}

func (x *ThreadRun) GetHaltReasons() []*ThreadHaltReason {
	if x != nil {
		return x.HaltReasons
	}
	return nil
}

func (x *ThreadRun) GetInterruptTriggerId() *ExternalEventId {
	if x != nil {
		return x.InterruptTriggerId
	}
	return nil
}

func (x *ThreadRun) GetFailureBeingHandled() *FailureBeingHandled {
	if x != nil {
		return x.FailureBeingHandled
	}
	return nil
}

func (x *ThreadRun) GetCurrentNodePosition() int32 {
	if x != nil {
		return x.CurrentNodePosition
	}
	return 0
}

func (x *ThreadRun) GetHandledFailedChildren() []int32 {
	if x != nil {
		return x.HandledFailedChildren
	}
	return nil
}

func (x *ThreadRun) GetType() ThreadType {
	if x != nil {
		return x.Type
	}
	return ThreadType_ENTRYPOINT
}

type FailureBeingHandled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadRunNumber int32 `protobuf:"varint,1,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	NodeRunPosition int32 `protobuf:"varint,2,opt,name=node_run_position,json=nodeRunPosition,proto3" json:"node_run_position,omitempty"`
	FailureNumber   int32 `protobuf:"varint,3,opt,name=failure_number,json=failureNumber,proto3" json:"failure_number,omitempty"`
}

func (x *FailureBeingHandled) Reset() {
	*x = FailureBeingHandled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureBeingHandled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureBeingHandled) ProtoMessage() {}

func (x *FailureBeingHandled) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureBeingHandled.ProtoReflect.Descriptor instead.
func (*FailureBeingHandled) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{97}
}

func (x *FailureBeingHandled) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *FailureBeingHandled) GetNodeRunPosition() int32 {
	if x != nil {
		return x.NodeRunPosition
	}
	return 0
}

func (x *FailureBeingHandled) GetFailureNumber() int32 {
	if x != nil {
		return x.FailureNumber
	}
	return 0
}

type PendingInterrupt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventId     *ExternalEventId `protobuf:"bytes,1,opt,name=external_event_id,json=externalEventId,proto3" json:"external_event_id,omitempty"`
	HandlerSpecName     string           `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
	InterruptedThreadId int32            `protobuf:"varint,3,opt,name=interrupted_thread_id,json=interruptedThreadId,proto3" json:"interrupted_thread_id,omitempty"`
}

func (x *PendingInterrupt) Reset() {
	*x = PendingInterrupt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingInterrupt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingInterrupt) ProtoMessage() {}

func (x *PendingInterrupt) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingInterrupt.ProtoReflect.Descriptor instead.
func (*PendingInterrupt) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{98}
}

func (x *PendingInterrupt) GetExternalEventId() *ExternalEventId {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

func (x *PendingInterrupt) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

func (x *PendingInterrupt) GetInterruptedThreadId() int32 {
	if x != nil {
		return x.InterruptedThreadId
	}
	return 0
}

type PendingFailureHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedThreadRun int32  `protobuf:"varint,1,opt,name=failed_thread_run,json=failedThreadRun,proto3" json:"failed_thread_run,omitempty"`
	HandlerSpecName string `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *PendingFailureHandler) Reset() {
	*x = PendingFailureHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingFailureHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingFailureHandler) ProtoMessage() {}

func (x *PendingFailureHandler) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingFailureHandler.ProtoReflect.Descriptor instead.
func (*PendingFailureHandler) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{99}
}

func (x *PendingFailureHandler) GetFailedThreadRun() int32 {
	if x != nil {
		return x.FailedThreadRun
	}
	return 0
}

func (x *PendingFailureHandler) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type PendingInterruptHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventId *ExternalEventId `protobuf:"bytes,1,opt,name=external_event_id,json=externalEventId,proto3" json:"external_event_id,omitempty"`
}

func (x *PendingInterruptHaltReason) Reset() {
	*x = PendingInterruptHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingInterruptHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingInterruptHaltReason) ProtoMessage() {}

func (x *PendingInterruptHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingInterruptHaltReason.ProtoReflect.Descriptor instead.
func (*PendingInterruptHaltReason) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{100}
}

func (x *PendingInterruptHaltReason) GetExternalEventId() *ExternalEventId {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

type PendingFailureHandlerHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunPosition int32 `protobuf:"varint,1,opt,name=node_run_position,json=nodeRunPosition,proto3" json:"node_run_position,omitempty"`
}

func (x *PendingFailureHandlerHaltReason) Reset() {
	*x = PendingFailureHandlerHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingFailureHandlerHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingFailureHandlerHaltReason) ProtoMessage() {}

func (x *PendingFailureHandlerHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingFailureHandlerHaltReason.ProtoReflect.Descriptor instead.
func (*PendingFailureHandlerHaltReason) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{101}
}

func (x *PendingFailureHandlerHaltReason) GetNodeRunPosition() int32 {
	if x != nil {
		return x.NodeRunPosition
	}
	return 0
}

type HandlingFailureHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandlerThreadId int32 `protobuf:"varint,1,opt,name=handler_thread_id,json=handlerThreadId,proto3" json:"handler_thread_id,omitempty"`
}

func (x *HandlingFailureHaltReason) Reset() {
	*x = HandlingFailureHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlingFailureHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlingFailureHaltReason) ProtoMessage() {}

func (x *HandlingFailureHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlingFailureHaltReason.ProtoReflect.Descriptor instead.
func (*HandlingFailureHaltReason) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{102}
}

func (x *HandlingFailureHaltReason) GetHandlerThreadId() int32 {
	if x != nil {
		return x.HandlerThreadId
	}
	return 0
}

type ParentHalted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentThreadId int32 `protobuf:"varint,1,opt,name=parent_thread_id,json=parentThreadId,proto3" json:"parent_thread_id,omitempty"`
}

func (x *ParentHalted) Reset() {
	*x = ParentHalted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentHalted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentHalted) ProtoMessage() {}

func (x *ParentHalted) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentHalted.ProtoReflect.Descriptor instead.
func (*ParentHalted) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{103}
}

func (x *ParentHalted) GetParentThreadId() int32 {
	if x != nil {
		return x.ParentThreadId
	}
	return 0
}

type Interrupted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterruptThreadId int32 `protobuf:"varint,1,opt,name=interrupt_thread_id,json=interruptThreadId,proto3" json:"interrupt_thread_id,omitempty"`
}

func (x *Interrupted) Reset() {
	*x = Interrupted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interrupted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interrupted) ProtoMessage() {}

func (x *Interrupted) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interrupted.ProtoReflect.Descriptor instead.
func (*Interrupted) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{104}
}

func (x *Interrupted) GetInterruptThreadId() int32 {
	if x != nil {
		return x.InterruptThreadId
	}
	return 0
}

type ManualHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nothing to store.
	MeaningOfLife bool `protobuf:"varint,137,opt,name=meaning_of_life,json=meaningOfLife,proto3" json:"meaning_of_life,omitempty"`
}

func (x *ManualHalt) Reset() {
	*x = ManualHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualHalt) ProtoMessage() {}

func (x *ManualHalt) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualHalt.ProtoReflect.Descriptor instead.
func (*ManualHalt) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{105}
}

func (x *ManualHalt) GetMeaningOfLife() bool {
	if x != nil {
		return x.MeaningOfLife
	}
	return false
}

type ThreadHaltReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*ThreadHaltReason_ParentHalted
	//	*ThreadHaltReason_Interrupted
	//	*ThreadHaltReason_PendingInterrupt
	//	*ThreadHaltReason_PendingFailure
	//	*ThreadHaltReason_HandlingFailure
	//	*ThreadHaltReason_ManualHalt
	Reason isThreadHaltReason_Reason `protobuf_oneof:"reason"`
}

func (x *ThreadHaltReason) Reset() {
	*x = ThreadHaltReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadHaltReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadHaltReason) ProtoMessage() {}

func (x *ThreadHaltReason) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadHaltReason.ProtoReflect.Descriptor instead.
func (*ThreadHaltReason) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{106}
}

func (m *ThreadHaltReason) GetReason() isThreadHaltReason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ThreadHaltReason) GetParentHalted() *ParentHalted {
	if x, ok := x.GetReason().(*ThreadHaltReason_ParentHalted); ok {
		return x.ParentHalted
	}
	return nil
}

func (x *ThreadHaltReason) GetInterrupted() *Interrupted {
	if x, ok := x.GetReason().(*ThreadHaltReason_Interrupted); ok {
		return x.Interrupted
	}
	return nil
}

func (x *ThreadHaltReason) GetPendingInterrupt() *PendingInterruptHaltReason {
	if x, ok := x.GetReason().(*ThreadHaltReason_PendingInterrupt); ok {
		return x.PendingInterrupt
	}
	return nil
}

func (x *ThreadHaltReason) GetPendingFailure() *PendingFailureHandlerHaltReason {
	if x, ok := x.GetReason().(*ThreadHaltReason_PendingFailure); ok {
		return x.PendingFailure
	}
	return nil
}

func (x *ThreadHaltReason) GetHandlingFailure() *HandlingFailureHaltReason {
	if x, ok := x.GetReason().(*ThreadHaltReason_HandlingFailure); ok {
		return x.HandlingFailure
	}
	return nil
}

func (x *ThreadHaltReason) GetManualHalt() *ManualHalt {
	if x, ok := x.GetReason().(*ThreadHaltReason_ManualHalt); ok {
		return x.ManualHalt
	}
	return nil
}

type isThreadHaltReason_Reason interface {
	isThreadHaltReason_Reason()
}

type ThreadHaltReason_ParentHalted struct {
	ParentHalted *ParentHalted `protobuf:"bytes,1,opt,name=parent_halted,json=parentHalted,proto3,oneof"`
}

type ThreadHaltReason_Interrupted struct {
	Interrupted *Interrupted `protobuf:"bytes,2,opt,name=interrupted,proto3,oneof"`
}

type ThreadHaltReason_PendingInterrupt struct {
	PendingInterrupt *PendingInterruptHaltReason `protobuf:"bytes,3,opt,name=pending_interrupt,json=pendingInterrupt,proto3,oneof"`
}

type ThreadHaltReason_PendingFailure struct {
	PendingFailure *PendingFailureHandlerHaltReason `protobuf:"bytes,4,opt,name=pending_failure,json=pendingFailure,proto3,oneof"`
}

type ThreadHaltReason_HandlingFailure struct {
	HandlingFailure *HandlingFailureHaltReason `protobuf:"bytes,5,opt,name=handling_failure,json=handlingFailure,proto3,oneof"`
}

type ThreadHaltReason_ManualHalt struct {
	ManualHalt *ManualHalt `protobuf:"bytes,6,opt,name=manual_halt,json=manualHalt,proto3,oneof"`
}

func (*ThreadHaltReason_ParentHalted) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_Interrupted) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_PendingInterrupt) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_PendingFailure) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_HandlingFailure) isThreadHaltReason_Reason() {}

func (*ThreadHaltReason_ManualHalt) isThreadHaltReason_Reason() {}

type NodeRunId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Position        int32  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *NodeRunId) Reset() {
	*x = NodeRunId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRunId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRunId) ProtoMessage() {}

func (x *NodeRunId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRunId.ProtoReflect.Descriptor instead.
func (*NodeRunId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{107}
}

func (x *NodeRunId) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *NodeRunId) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *NodeRunId) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

type TaskNodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRunId *TaskRunId `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3,oneof" json:"task_run_id,omitempty"`
}

func (x *TaskNodeRun) Reset() {
	*x = TaskNodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNodeRun) ProtoMessage() {}

func (x *TaskNodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNodeRun.ProtoReflect.Descriptor instead.
func (*TaskNodeRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{108}
}

func (x *TaskNodeRun) GetTaskRunId() *TaskRunId {
	if x != nil {
		return x.TaskRunId
	}
	return nil
}

type UserTaskNodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3,oneof" json:"user_task_run_id,omitempty"`
}

func (x *UserTaskNodeRun) Reset() {
	*x = UserTaskNodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskNodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskNodeRun) ProtoMessage() {}

func (x *UserTaskNodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskNodeRun.ProtoReflect.Descriptor instead.
func (*UserTaskNodeRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{109}
}

func (x *UserTaskNodeRun) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

type NodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Position        int32                  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Status          LHStatus               `protobuf:"varint,6,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	ArrivalTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	WfSpecId        *WfSpecId              `protobuf:"bytes,9,opt,name=wf_spec_id,json=wfSpecId,proto3" json:"wf_spec_id,omitempty"`
	ThreadSpecName  string                 `protobuf:"bytes,10,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	NodeName        string                 `protobuf:"bytes,11,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ErrorMessage    *string                `protobuf:"bytes,13,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	Failures        []*Failure             `protobuf:"bytes,14,rep,name=failures,proto3" json:"failures,omitempty"`
	// Types that are assignable to NodeType:
	//
	//	*NodeRun_Task
	//	*NodeRun_ExternalEvent
	//	*NodeRun_Entrypoint
	//	*NodeRun_Exit
	//	*NodeRun_StartThread
	//	*NodeRun_WaitThreads
	//	*NodeRun_Sleep
	//	*NodeRun_UserTask
	NodeType          isNodeRun_NodeType `protobuf_oneof:"node_type"`
	FailureHandlerIds []int32            `protobuf:"varint,23,rep,packed,name=failure_handler_ids,json=failureHandlerIds,proto3" json:"failure_handler_ids,omitempty"`
}

func (x *NodeRun) Reset() {
	*x = NodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRun) ProtoMessage() {}

func (x *NodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRun.ProtoReflect.Descriptor instead.
func (*NodeRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{110}
}

func (x *NodeRun) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *NodeRun) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *NodeRun) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *NodeRun) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *NodeRun) GetArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *NodeRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NodeRun) GetWfSpecId() *WfSpecId {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

func (x *NodeRun) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *NodeRun) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeRun) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *NodeRun) GetFailures() []*Failure {
	if x != nil {
		return x.Failures
	}
	return nil
}

func (m *NodeRun) GetNodeType() isNodeRun_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (x *NodeRun) GetTask() *TaskNodeRun {
	if x, ok := x.GetNodeType().(*NodeRun_Task); ok {
		return x.Task
	}
	return nil
}

func (x *NodeRun) GetExternalEvent() *ExternalEventRun {
	if x, ok := x.GetNodeType().(*NodeRun_ExternalEvent); ok {
		return x.ExternalEvent
	}
	return nil
}

func (x *NodeRun) GetEntrypoint() *EntrypointRun {
	if x, ok := x.GetNodeType().(*NodeRun_Entrypoint); ok {
		return x.Entrypoint
	}
	return nil
}

func (x *NodeRun) GetExit() *ExitRun {
	if x, ok := x.GetNodeType().(*NodeRun_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *NodeRun) GetStartThread() *StartThreadRun {
	if x, ok := x.GetNodeType().(*NodeRun_StartThread); ok {
		return x.StartThread
	}
	return nil
}

func (x *NodeRun) GetWaitThreads() *WaitForThreadsRun {
	if x, ok := x.GetNodeType().(*NodeRun_WaitThreads); ok {
		return x.WaitThreads
	}
	return nil
}

func (x *NodeRun) GetSleep() *SleepNodeRun {
	if x, ok := x.GetNodeType().(*NodeRun_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *NodeRun) GetUserTask() *UserTaskNodeRun {
	if x, ok := x.GetNodeType().(*NodeRun_UserTask); ok {
		return x.UserTask
	}
	return nil
}

func (x *NodeRun) GetFailureHandlerIds() []int32 {
	if x != nil {
		return x.FailureHandlerIds
	}
	return nil
}

type isNodeRun_NodeType interface {
	isNodeRun_NodeType()
}

type NodeRun_Task struct {
	Task *TaskNodeRun `protobuf:"bytes,15,opt,name=task,proto3,oneof"`
}

type NodeRun_ExternalEvent struct {
	ExternalEvent *ExternalEventRun `protobuf:"bytes,16,opt,name=external_event,json=externalEvent,proto3,oneof"`
}

type NodeRun_Entrypoint struct {
	Entrypoint *EntrypointRun `protobuf:"bytes,17,opt,name=entrypoint,proto3,oneof"`
}

type NodeRun_Exit struct {
	Exit *ExitRun `protobuf:"bytes,19,opt,name=exit,proto3,oneof"`
}

type NodeRun_StartThread struct {
	StartThread *StartThreadRun `protobuf:"bytes,20,opt,name=start_thread,json=startThread,proto3,oneof"`
}

type NodeRun_WaitThreads struct {
	WaitThreads *WaitForThreadsRun `protobuf:"bytes,21,opt,name=wait_threads,json=waitThreads,proto3,oneof"`
}

type NodeRun_Sleep struct {
	Sleep *SleepNodeRun `protobuf:"bytes,22,opt,name=sleep,proto3,oneof"`
}

type NodeRun_UserTask struct {
	UserTask *UserTaskNodeRun `protobuf:"bytes,24,opt,name=user_task,json=userTask,proto3,oneof"`
}

func (*NodeRun_Task) isNodeRun_NodeType() {}

func (*NodeRun_ExternalEvent) isNodeRun_NodeType() {}

func (*NodeRun_Entrypoint) isNodeRun_NodeType() {}

func (*NodeRun_Exit) isNodeRun_NodeType() {}

func (*NodeRun_StartThread) isNodeRun_NodeType() {}

func (*NodeRun_WaitThreads) isNodeRun_NodeType() {}

func (*NodeRun_Sleep) isNodeRun_NodeType() {}

func (*NodeRun_UserTask) isNodeRun_NodeType() {}

type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureName string         `protobuf:"bytes,1,opt,name=failure_name,json=failureName,proto3" json:"failure_name,omitempty"`
	Message     string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Content     *VariableValue `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{111}
}

func (x *Failure) GetFailureName() string {
	if x != nil {
		return x.FailureName
	}
	return ""
}

func (x *Failure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Failure) GetContent() *VariableValue {
	if x != nil {
		return x.Content
	}
	return nil
}

type TaskAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output            *VariableValue         `protobuf:"bytes,1,opt,name=output,proto3,oneof" json:"output,omitempty"`
	LogOutput         *VariableValue         `protobuf:"bytes,2,opt,name=log_output,json=logOutput,proto3,oneof" json:"log_output,omitempty"`
	ScheduleTime      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=schedule_time,json=scheduleTime,proto3,oneof" json:"schedule_time,omitempty"`
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	TaskWorkerId      string                 `protobuf:"bytes,7,opt,name=task_worker_id,json=taskWorkerId,proto3" json:"task_worker_id,omitempty"`
	TaskWorkerVersion *string                `protobuf:"bytes,8,opt,name=task_worker_version,json=taskWorkerVersion,proto3,oneof" json:"task_worker_version,omitempty"`
	Status            TaskStatus             `protobuf:"varint,9,opt,name=status,proto3,enum=littlehorse.TaskStatus" json:"status,omitempty"`
}

func (x *TaskAttempt) Reset() {
	*x = TaskAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttempt) ProtoMessage() {}

func (x *TaskAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttempt.ProtoReflect.Descriptor instead.
func (*TaskAttempt) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{112}
}

func (x *TaskAttempt) GetOutput() *VariableValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TaskAttempt) GetLogOutput() *VariableValue {
	if x != nil {
		return x.LogOutput
	}
	return nil
}

func (x *TaskAttempt) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

func (x *TaskAttempt) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskAttempt) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskAttempt) GetTaskWorkerId() string {
	if x != nil {
		return x.TaskWorkerId
	}
	return ""
}

func (x *TaskAttempt) GetTaskWorkerVersion() string {
	if x != nil && x.TaskWorkerVersion != nil {
		return *x.TaskWorkerVersion
	}
	return ""
}

func (x *TaskAttempt) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_SCHEDULED
}

type TaskRunId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId  string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	TaskGuid string `protobuf:"bytes,2,opt,name=task_guid,json=taskGuid,proto3" json:"task_guid,omitempty"`
}

func (x *TaskRunId) Reset() {
	*x = TaskRunId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRunId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunId) ProtoMessage() {}

func (x *TaskRunId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunId.ProtoReflect.Descriptor instead.
func (*TaskRunId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{113}
}

func (x *TaskRunId) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *TaskRunId) GetTaskGuid() string {
	if x != nil {
		return x.TaskGuid
	}
	return ""
}

type TaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *TaskRunId             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attempts       []*TaskAttempt         `protobuf:"bytes,2,rep,name=attempts,proto3" json:"attempts,omitempty"`
	MaxAttempts    int32                  `protobuf:"varint,3,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	TaskDefName    string                 `protobuf:"bytes,4,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	InputVariables []*VarNameAndVal       `protobuf:"bytes,5,rep,name=input_variables,json=inputVariables,proto3" json:"input_variables,omitempty"`
	Source         *TaskRunSource         `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	ScheduledAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	Status         TaskStatus             `protobuf:"varint,8,opt,name=status,proto3,enum=littlehorse.TaskStatus" json:"status,omitempty"`
	TimeoutSeconds int32                  `protobuf:"varint,9,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *TaskRun) Reset() {
	*x = TaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun) ProtoMessage() {}

func (x *TaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun.ProtoReflect.Descriptor instead.
func (*TaskRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{114}
}

func (x *TaskRun) GetId() *TaskRunId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskRun) GetAttempts() []*TaskAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *TaskRun) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *TaskRun) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskRun) GetInputVariables() []*VarNameAndVal {
	if x != nil {
		return x.InputVariables
	}
	return nil
}

func (x *TaskRun) GetSource() *TaskRunSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TaskRun) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *TaskRun) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_SCHEDULED
}

func (x *TaskRun) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type TaskNodeReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunId *NodeRunId `protobuf:"bytes,1,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
	WfSpecId  *WfSpecId  `protobuf:"bytes,2,opt,name=wf_spec_id,json=wfSpecId,proto3" json:"wf_spec_id,omitempty"`
}

func (x *TaskNodeReference) Reset() {
	*x = TaskNodeReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNodeReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNodeReference) ProtoMessage() {}

func (x *TaskNodeReference) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNodeReference.ProtoReflect.Descriptor instead.
func (*TaskNodeReference) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{115}
}

func (x *TaskNodeReference) GetNodeRunId() *NodeRunId {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

func (x *TaskNodeReference) GetWfSpecId() *WfSpecId {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

type UserTaskTriggerContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Owner:
	//
	//	*UserTaskTriggerContext_UserGroup
	//	*UserTaskTriggerContext_User
	Owner isUserTaskTriggerContext_Owner `protobuf_oneof:"owner"`
}

func (x *UserTaskTriggerContext) Reset() {
	*x = UserTaskTriggerContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskTriggerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskTriggerContext) ProtoMessage() {}

func (x *UserTaskTriggerContext) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskTriggerContext.ProtoReflect.Descriptor instead.
func (*UserTaskTriggerContext) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{116}
}

func (m *UserTaskTriggerContext) GetOwner() isUserTaskTriggerContext_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *UserTaskTriggerContext) GetUserGroup() *UserGroup {
	if x, ok := x.GetOwner().(*UserTaskTriggerContext_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

func (x *UserTaskTriggerContext) GetUser() *User {
	if x, ok := x.GetOwner().(*UserTaskTriggerContext_User); ok {
		return x.User
	}
	return nil
}

type isUserTaskTriggerContext_Owner interface {
	isUserTaskTriggerContext_Owner()
}

type UserTaskTriggerContext_UserGroup struct {
	UserGroup *UserGroup `protobuf:"bytes,1,opt,name=user_group,json=userGroup,proto3,oneof"`
}

type UserTaskTriggerContext_User struct {
	User *User `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

func (*UserTaskTriggerContext_UserGroup) isUserTaskTriggerContext_Owner() {}

func (*UserTaskTriggerContext_User) isUserTaskTriggerContext_Owner() {}

type UserTaskTriggerReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunId           *NodeRunId              `protobuf:"bytes,1,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
	UserTaskEventNumber int32                   `protobuf:"varint,2,opt,name=user_task_event_number,json=userTaskEventNumber,proto3" json:"user_task_event_number,omitempty"`
	WfSpecId            *WfSpecId               `protobuf:"bytes,3,opt,name=wf_spec_id,json=wfSpecId,proto3" json:"wf_spec_id,omitempty"`
	Context             *UserTaskTriggerContext `protobuf:"bytes,4,opt,name=context,proto3,oneof" json:"context,omitempty"`
}

func (x *UserTaskTriggerReference) Reset() {
	*x = UserTaskTriggerReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskTriggerReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskTriggerReference) ProtoMessage() {}

func (x *UserTaskTriggerReference) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskTriggerReference.ProtoReflect.Descriptor instead.
func (*UserTaskTriggerReference) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{117}
}

func (x *UserTaskTriggerReference) GetNodeRunId() *NodeRunId {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

func (x *UserTaskTriggerReference) GetUserTaskEventNumber() int32 {
	if x != nil {
		return x.UserTaskEventNumber
	}
	return 0
}

func (x *UserTaskTriggerReference) GetWfSpecId() *WfSpecId {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

func (x *UserTaskTriggerReference) GetContext() *UserTaskTriggerContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type EntrypointRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntrypointRun) Reset() {
	*x = EntrypointRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointRun) ProtoMessage() {}

func (x *EntrypointRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointRun.ProtoReflect.Descriptor instead.
func (*EntrypointRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{118}
}

type ExitRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitRun) Reset() {
	*x = ExitRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRun) ProtoMessage() {}

func (x *ExitRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRun.ProtoReflect.Descriptor instead.
func (*ExitRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{119}
}

type StartThreadRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildThreadId  *int32 `protobuf:"varint,1,opt,name=child_thread_id,json=childThreadId,proto3,oneof" json:"child_thread_id,omitempty"`
	ThreadSpecName string `protobuf:"bytes,2,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
}

func (x *StartThreadRun) Reset() {
	*x = StartThreadRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartThreadRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartThreadRun) ProtoMessage() {}

func (x *StartThreadRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartThreadRun.ProtoReflect.Descriptor instead.
func (*StartThreadRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{120}
}

func (x *StartThreadRun) GetChildThreadId() int32 {
	if x != nil && x.ChildThreadId != nil {
		return *x.ChildThreadId
	}
	return 0
}

func (x *StartThreadRun) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

type WaitForThreadsRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*WaitForThreadsRun_WaitForThread `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *WaitForThreadsRun) Reset() {
	*x = WaitForThreadsRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsRun) ProtoMessage() {}

func (x *WaitForThreadsRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsRun.ProtoReflect.Descriptor instead.
func (*WaitForThreadsRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{121}
}

func (x *WaitForThreadsRun) GetThreads() []*WaitForThreadsRun_WaitForThread {
	if x != nil {
		return x.Threads
	}
	return nil
}

type ExternalEventRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string                 `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	EventTime            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3,oneof" json:"event_time,omitempty"`
	ExternalEventId      *ExternalEventId       `protobuf:"bytes,3,opt,name=external_event_id,json=externalEventId,proto3,oneof" json:"external_event_id,omitempty"`
}

func (x *ExternalEventRun) Reset() {
	*x = ExternalEventRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventRun) ProtoMessage() {}

func (x *ExternalEventRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventRun.ProtoReflect.Descriptor instead.
func (*ExternalEventRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{122}
}

func (x *ExternalEventRun) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventRun) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *ExternalEventRun) GetExternalEventId() *ExternalEventId {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

type SleepNodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaturationTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=maturation_time,json=maturationTime,proto3" json:"maturation_time,omitempty"`
}

func (x *SleepNodeRun) Reset() {
	*x = SleepNodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepNodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepNodeRun) ProtoMessage() {}

func (x *SleepNodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepNodeRun.ProtoReflect.Descriptor instead.
func (*SleepNodeRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{123}
}

func (x *SleepNodeRun) GetMaturationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturationTime
	}
	return nil
}

type EdgeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparator Comparator          `protobuf:"varint,1,opt,name=comparator,proto3,enum=littlehorse.Comparator" json:"comparator,omitempty"`
	Left       *VariableAssignment `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right      *VariableAssignment `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *EdgeCondition) Reset() {
	*x = EdgeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeCondition) ProtoMessage() {}

func (x *EdgeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeCondition.ProtoReflect.Descriptor instead.
func (*EdgeCondition) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{124}
}

func (x *EdgeCondition) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_LESS_THAN
}

func (x *EdgeCondition) GetLeft() *VariableAssignment {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *EdgeCondition) GetRight() *VariableAssignment {
	if x != nil {
		return x.Right
	}
	return nil
}

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinkNodeName string         `protobuf:"bytes,1,opt,name=sink_node_name,json=sinkNodeName,proto3" json:"sink_node_name,omitempty"`
	Condition    *EdgeCondition `protobuf:"bytes,2,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{125}
}

func (x *Edge) GetSinkNodeName() string {
	if x != nil {
		return x.SinkNodeName
	}
	return ""
}

func (x *Edge) GetCondition() *EdgeCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type VariableAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonPath *string `protobuf:"bytes,1,opt,name=json_path,json=jsonPath,proto3,oneof" json:"json_path,omitempty"`
	// Types that are assignable to Source:
	//
	//	*VariableAssignment_VariableName
	//	*VariableAssignment_LiteralValue
	//	*VariableAssignment_FormatString_
	Source isVariableAssignment_Source `protobuf_oneof:"source"`
}

func (x *VariableAssignment) Reset() {
	*x = VariableAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAssignment) ProtoMessage() {}

func (x *VariableAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAssignment.ProtoReflect.Descriptor instead.
func (*VariableAssignment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{126}
}

func (x *VariableAssignment) GetJsonPath() string {
	if x != nil && x.JsonPath != nil {
		return *x.JsonPath
	}
	return ""
}

func (m *VariableAssignment) GetSource() isVariableAssignment_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *VariableAssignment) GetVariableName() string {
	if x, ok := x.GetSource().(*VariableAssignment_VariableName); ok {
		return x.VariableName
	}
	return ""
}

func (x *VariableAssignment) GetLiteralValue() *VariableValue {
	if x, ok := x.GetSource().(*VariableAssignment_LiteralValue); ok {
		return x.LiteralValue
	}
	return nil
}

func (x *VariableAssignment) GetFormatString() *VariableAssignment_FormatString {
	if x, ok := x.GetSource().(*VariableAssignment_FormatString_); ok {
		return x.FormatString
	}
	return nil
}

type isVariableAssignment_Source interface {
	isVariableAssignment_Source()
}

type VariableAssignment_VariableName struct {
	VariableName string `protobuf:"bytes,2,opt,name=variable_name,json=variableName,proto3,oneof"`
}

type VariableAssignment_LiteralValue struct {
	LiteralValue *VariableValue `protobuf:"bytes,3,opt,name=literal_value,json=literalValue,proto3,oneof"`
}

type VariableAssignment_FormatString_ struct {
	FormatString *VariableAssignment_FormatString `protobuf:"bytes,4,opt,name=format_string,json=formatString,proto3,oneof"`
}

func (*VariableAssignment_VariableName) isVariableAssignment_Source() {}

func (*VariableAssignment_LiteralValue) isVariableAssignment_Source() {}

func (*VariableAssignment_FormatString_) isVariableAssignment_Source() {}

type VariableMutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LhsName     string               `protobuf:"bytes,1,opt,name=lhs_name,json=lhsName,proto3" json:"lhs_name,omitempty"`
	LhsJsonPath *string              `protobuf:"bytes,2,opt,name=lhs_json_path,json=lhsJsonPath,proto3,oneof" json:"lhs_json_path,omitempty"`
	Operation   VariableMutationType `protobuf:"varint,3,opt,name=operation,proto3,enum=littlehorse.VariableMutationType" json:"operation,omitempty"`
	// Types that are assignable to RhsValue:
	//
	//	*VariableMutation_SourceVariable
	//	*VariableMutation_LiteralValue
	//	*VariableMutation_NodeOutput
	RhsValue isVariableMutation_RhsValue `protobuf_oneof:"rhs_value"`
}

func (x *VariableMutation) Reset() {
	*x = VariableMutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableMutation) ProtoMessage() {}

func (x *VariableMutation) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableMutation.ProtoReflect.Descriptor instead.
func (*VariableMutation) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{127}
}

func (x *VariableMutation) GetLhsName() string {
	if x != nil {
		return x.LhsName
	}
	return ""
}

func (x *VariableMutation) GetLhsJsonPath() string {
	if x != nil && x.LhsJsonPath != nil {
		return *x.LhsJsonPath
	}
	return ""
}

func (x *VariableMutation) GetOperation() VariableMutationType {
	if x != nil {
		return x.Operation
	}
	return VariableMutationType_ASSIGN
}

func (m *VariableMutation) GetRhsValue() isVariableMutation_RhsValue {
	if m != nil {
		return m.RhsValue
	}
	return nil
}

func (x *VariableMutation) GetSourceVariable() *VariableAssignment {
	if x, ok := x.GetRhsValue().(*VariableMutation_SourceVariable); ok {
		return x.SourceVariable
	}
	return nil
}

func (x *VariableMutation) GetLiteralValue() *VariableValue {
	if x, ok := x.GetRhsValue().(*VariableMutation_LiteralValue); ok {
		return x.LiteralValue
	}
	return nil
}

func (x *VariableMutation) GetNodeOutput() *VariableMutation_NodeOutputSource {
	if x, ok := x.GetRhsValue().(*VariableMutation_NodeOutput); ok {
		return x.NodeOutput
	}
	return nil
}

type isVariableMutation_RhsValue interface {
	isVariableMutation_RhsValue()
}

type VariableMutation_SourceVariable struct {
	SourceVariable *VariableAssignment `protobuf:"bytes,4,opt,name=source_variable,json=sourceVariable,proto3,oneof"`
}

type VariableMutation_LiteralValue struct {
	LiteralValue *VariableValue `protobuf:"bytes,5,opt,name=literal_value,json=literalValue,proto3,oneof"`
}

type VariableMutation_NodeOutput struct {
	NodeOutput *VariableMutation_NodeOutputSource `protobuf:"bytes,6,opt,name=node_output,json=nodeOutput,proto3,oneof"`
}

func (*VariableMutation_SourceVariable) isVariableMutation_RhsValue() {}

func (*VariableMutation_LiteralValue) isVariableMutation_RhsValue() {}

func (*VariableMutation_NodeOutput) isVariableMutation_RhsValue() {}

type NopNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NopNode) Reset() {
	*x = NopNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NopNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NopNode) ProtoMessage() {}

func (x *NopNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NopNode.ProtoReflect.Descriptor instead.
func (*NopNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{128}
}

type SleepNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SleepLength:
	//
	//	*SleepNode_RawSeconds
	//	*SleepNode_Timestamp
	//	*SleepNode_IsoDate
	SleepLength isSleepNode_SleepLength `protobuf_oneof:"sleep_length"`
}

func (x *SleepNode) Reset() {
	*x = SleepNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepNode) ProtoMessage() {}

func (x *SleepNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepNode.ProtoReflect.Descriptor instead.
func (*SleepNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{129}
}

func (m *SleepNode) GetSleepLength() isSleepNode_SleepLength {
	if m != nil {
		return m.SleepLength
	}
	return nil
}

func (x *SleepNode) GetRawSeconds() *VariableAssignment {
	if x, ok := x.GetSleepLength().(*SleepNode_RawSeconds); ok {
		return x.RawSeconds
	}
	return nil
}

func (x *SleepNode) GetTimestamp() *VariableAssignment {
	if x, ok := x.GetSleepLength().(*SleepNode_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *SleepNode) GetIsoDate() *VariableAssignment {
	if x, ok := x.GetSleepLength().(*SleepNode_IsoDate); ok {
		return x.IsoDate
	}
	return nil
}

type isSleepNode_SleepLength interface {
	isSleepNode_SleepLength()
}

type SleepNode_RawSeconds struct {
	RawSeconds *VariableAssignment `protobuf:"bytes,1,opt,name=raw_seconds,json=rawSeconds,proto3,oneof"`
}

type SleepNode_Timestamp struct {
	Timestamp *VariableAssignment `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type SleepNode_IsoDate struct {
	IsoDate *VariableAssignment `protobuf:"bytes,3,opt,name=iso_date,json=isoDate,proto3,oneof"`
}

func (*SleepNode_RawSeconds) isSleepNode_SleepLength() {}

func (*SleepNode_Timestamp) isSleepNode_SleepLength() {}

func (*SleepNode_IsoDate) isSleepNode_SleepLength() {}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutgoingEdges     []*Edge              `protobuf:"bytes,1,rep,name=outgoing_edges,json=outgoingEdges,proto3" json:"outgoing_edges,omitempty"`
	VariableMutations []*VariableMutation  `protobuf:"bytes,2,rep,name=variable_mutations,json=variableMutations,proto3" json:"variable_mutations,omitempty"`
	FailureHandlers   []*FailureHandlerDef `protobuf:"bytes,4,rep,name=failure_handlers,json=failureHandlers,proto3" json:"failure_handlers,omitempty"`
	// Types that are assignable to Node:
	//
	//	*Node_Entrypoint
	//	*Node_Exit
	//	*Node_Task
	//	*Node_ExternalEvent
	//	*Node_StartThread
	//	*Node_WaitForThreads
	//	*Node_Nop
	//	*Node_Sleep
	//	*Node_UserTask
	Node isNode_Node `protobuf_oneof:"node"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{130}
}

func (x *Node) GetOutgoingEdges() []*Edge {
	if x != nil {
		return x.OutgoingEdges
	}
	return nil
}

func (x *Node) GetVariableMutations() []*VariableMutation {
	if x != nil {
		return x.VariableMutations
	}
	return nil
}

func (x *Node) GetFailureHandlers() []*FailureHandlerDef {
	if x != nil {
		return x.FailureHandlers
	}
	return nil
}

func (m *Node) GetNode() isNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *Node) GetEntrypoint() *EntrypointNode {
	if x, ok := x.GetNode().(*Node_Entrypoint); ok {
		return x.Entrypoint
	}
	return nil
}

func (x *Node) GetExit() *ExitNode {
	if x, ok := x.GetNode().(*Node_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *Node) GetTask() *TaskNode {
	if x, ok := x.GetNode().(*Node_Task); ok {
		return x.Task
	}
	return nil
}

func (x *Node) GetExternalEvent() *ExternalEventNode {
	if x, ok := x.GetNode().(*Node_ExternalEvent); ok {
		return x.ExternalEvent
	}
	return nil
}

func (x *Node) GetStartThread() *StartThreadNode {
	if x, ok := x.GetNode().(*Node_StartThread); ok {
		return x.StartThread
	}
	return nil
}

func (x *Node) GetWaitForThreads() *WaitForThreadsNode {
	if x, ok := x.GetNode().(*Node_WaitForThreads); ok {
		return x.WaitForThreads
	}
	return nil
}

func (x *Node) GetNop() *NopNode {
	if x, ok := x.GetNode().(*Node_Nop); ok {
		return x.Nop
	}
	return nil
}

func (x *Node) GetSleep() *SleepNode {
	if x, ok := x.GetNode().(*Node_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *Node) GetUserTask() *UserTaskNode {
	if x, ok := x.GetNode().(*Node_UserTask); ok {
		return x.UserTask
	}
	return nil
}

type isNode_Node interface {
	isNode_Node()
}

type Node_Entrypoint struct {
	Entrypoint *EntrypointNode `protobuf:"bytes,5,opt,name=entrypoint,proto3,oneof"`
}

type Node_Exit struct {
	Exit *ExitNode `protobuf:"bytes,6,opt,name=exit,proto3,oneof"`
}

type Node_Task struct {
	Task *TaskNode `protobuf:"bytes,7,opt,name=task,proto3,oneof"`
}

type Node_ExternalEvent struct {
	ExternalEvent *ExternalEventNode `protobuf:"bytes,8,opt,name=external_event,json=externalEvent,proto3,oneof"`
}

type Node_StartThread struct {
	StartThread *StartThreadNode `protobuf:"bytes,9,opt,name=start_thread,json=startThread,proto3,oneof"`
}

type Node_WaitForThreads struct {
	WaitForThreads *WaitForThreadsNode `protobuf:"bytes,10,opt,name=wait_for_threads,json=waitForThreads,proto3,oneof"`
}

type Node_Nop struct {
	Nop *NopNode `protobuf:"bytes,11,opt,name=nop,proto3,oneof"`
}

type Node_Sleep struct {
	Sleep *SleepNode `protobuf:"bytes,12,opt,name=sleep,proto3,oneof"`
}

type Node_UserTask struct {
	UserTask *UserTaskNode `protobuf:"bytes,13,opt,name=user_task,json=userTask,proto3,oneof"`
}

func (*Node_Entrypoint) isNode_Node() {}

func (*Node_Exit) isNode_Node() {}

func (*Node_Task) isNode_Node() {}

func (*Node_ExternalEvent) isNode_Node() {}

func (*Node_StartThread) isNode_Node() {}

func (*Node_WaitForThreads) isNode_Node() {}

func (*Node_Nop) isNode_Node() {}

func (*Node_Sleep) isNode_Node() {}

func (*Node_UserTask) isNode_Node() {}

type UserTaskField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        VariableType `protobuf:"varint,2,opt,name=type,proto3,enum=littlehorse.VariableType" json:"type,omitempty"`
	Description *string      `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DisplayName string       `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Required    bool         `protobuf:"varint,5,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *UserTaskField) Reset() {
	*x = UserTaskField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskField) ProtoMessage() {}

func (x *UserTaskField) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskField.ProtoReflect.Descriptor instead.
func (*UserTaskField) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{131}
}

func (x *UserTaskField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskField) GetType() VariableType {
	if x != nil {
		return x.Type
	}
	return VariableType_JSON_OBJ
}

func (x *UserTaskField) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserTaskField) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserTaskField) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type UserTaskDefId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UserTaskDefId) Reset() {
	*x = UserTaskDefId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskDefId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskDefId) ProtoMessage() {}

func (x *UserTaskDefId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskDefId.ProtoReflect.Descriptor instead.
func (*UserTaskDefId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{132}
}

func (x *UserTaskDefId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskDefId) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UserTaskDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Description *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Fields      []*UserTaskField       `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserTaskDef) Reset() {
	*x = UserTaskDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskDef) ProtoMessage() {}

func (x *UserTaskDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskDef.ProtoReflect.Descriptor instead.
func (*UserTaskDef) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{133}
}

func (x *UserTaskDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskDef) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UserTaskDef) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserTaskDef) GetFields() []*UserTaskField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UserTaskDef) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UTActionTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*UTActionTrigger_Task
	//	*UTActionTrigger_Cancel
	//	*UTActionTrigger_Reassign
	Action isUTActionTrigger_Action `protobuf_oneof:"action"`
	// Action's delay
	DelaySeconds *VariableAssignment    `protobuf:"bytes,5,opt,name=delay_seconds,json=delaySeconds,proto3" json:"delay_seconds,omitempty"`
	Hook         UTActionTrigger_UTHook `protobuf:"varint,6,opt,name=hook,proto3,enum=littlehorse.UTActionTrigger_UTHook" json:"hook,omitempty"`
}

func (x *UTActionTrigger) Reset() {
	*x = UTActionTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger) ProtoMessage() {}

func (x *UTActionTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger.ProtoReflect.Descriptor instead.
func (*UTActionTrigger) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134}
}

func (m *UTActionTrigger) GetAction() isUTActionTrigger_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *UTActionTrigger) GetTask() *UTActionTrigger_UTATask {
	if x, ok := x.GetAction().(*UTActionTrigger_Task); ok {
		return x.Task
	}
	return nil
}

func (x *UTActionTrigger) GetCancel() *UTActionTrigger_UTACancel {
	if x, ok := x.GetAction().(*UTActionTrigger_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *UTActionTrigger) GetReassign() *UTActionTrigger_UTAReassign {
	if x, ok := x.GetAction().(*UTActionTrigger_Reassign); ok {
		return x.Reassign
	}
	return nil
}

func (x *UTActionTrigger) GetDelaySeconds() *VariableAssignment {
	if x != nil {
		return x.DelaySeconds
	}
	return nil
}

func (x *UTActionTrigger) GetHook() UTActionTrigger_UTHook {
	if x != nil {
		return x.Hook
	}
	return UTActionTrigger_ON_ARRIVAL
}

type isUTActionTrigger_Action interface {
	isUTActionTrigger_Action()
}

type UTActionTrigger_Task struct {
	Task *UTActionTrigger_UTATask `protobuf:"bytes,1,opt,name=task,proto3,oneof"`
}

type UTActionTrigger_Cancel struct {
	Cancel *UTActionTrigger_UTACancel `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

type UTActionTrigger_Reassign struct {
	Reassign *UTActionTrigger_UTAReassign `protobuf:"bytes,3,opt,name=reassign,proto3,oneof"` // later on, might enable scheduling entire ThreadRuns
}

func (*UTActionTrigger_Task) isUTActionTrigger_Action() {}

func (*UTActionTrigger_Cancel) isUTActionTrigger_Action() {}

func (*UTActionTrigger_Reassign) isUTActionTrigger_Action() {}

type UserTaskNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskDefName string `protobuf:"bytes,1,opt,name=user_task_def_name,json=userTaskDefName,proto3" json:"user_task_def_name,omitempty"`
	// to whom should the Node be assigned?
	//
	// Types that are assignable to Assignment:
	//
	//	*UserTaskNode_UserGroup
	//	*UserTaskNode_User
	Assignment isUserTaskNode_Assignment `protobuf_oneof:"assignment"`
	// This is used to, for example, send a push notification to a mobile app
	// to remind someone that they need to fill out a task, or to re-assign
	// the task to another group of people
	Actions []*UTActionTrigger `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// So, once the WfSpec is created, this will be pinned to a version. Customer
	// can optionally specify a specific version or can leave it null, in which
	// case we just use the latest
	UserTaskDefVersion *int32 `protobuf:"varint,5,opt,name=user_task_def_version,json=userTaskDefVersion,proto3,oneof" json:"user_task_def_version,omitempty"`
	// Allow WfRun-specific notes for this User Task.
	Notes *VariableAssignment `protobuf:"bytes,6,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *UserTaskNode) Reset() {
	*x = UserTaskNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskNode) ProtoMessage() {}

func (x *UserTaskNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskNode.ProtoReflect.Descriptor instead.
func (*UserTaskNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{135}
}

func (x *UserTaskNode) GetUserTaskDefName() string {
	if x != nil {
		return x.UserTaskDefName
	}
	return ""
}

func (m *UserTaskNode) GetAssignment() isUserTaskNode_Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (x *UserTaskNode) GetUserGroup() *VariableAssignment {
	if x, ok := x.GetAssignment().(*UserTaskNode_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

func (x *UserTaskNode) GetUser() *UserTaskNode_UserAssignment {
	if x, ok := x.GetAssignment().(*UserTaskNode_User); ok {
		return x.User
	}
	return nil
}

func (x *UserTaskNode) GetActions() []*UTActionTrigger {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *UserTaskNode) GetUserTaskDefVersion() int32 {
	if x != nil && x.UserTaskDefVersion != nil {
		return *x.UserTaskDefVersion
	}
	return 0
}

func (x *UserTaskNode) GetNotes() *VariableAssignment {
	if x != nil {
		return x.Notes
	}
	return nil
}

type isUserTaskNode_Assignment interface {
	isUserTaskNode_Assignment()
}

type UserTaskNode_UserGroup struct {
	UserGroup *VariableAssignment `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof"`
}

type UserTaskNode_User struct {
	User *UserTaskNode_UserAssignment `protobuf:"bytes,3,opt,name=user,proto3,oneof"`
}

func (*UserTaskNode_UserGroup) isUserTaskNode_Assignment() {}

func (*UserTaskNode_User) isUserTaskNode_Assignment() {}

type UserTaskEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*UserTaskEvent_TaskExecuted
	//	*UserTaskEvent_Reassigned
	//	*UserTaskEvent_Cancelled
	Event isUserTaskEvent_Event `protobuf_oneof:"event"`
}

func (x *UserTaskEvent) Reset() {
	*x = UserTaskEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent) ProtoMessage() {}

func (x *UserTaskEvent) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent.ProtoReflect.Descriptor instead.
func (*UserTaskEvent) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{136}
}

func (x *UserTaskEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (m *UserTaskEvent) GetEvent() isUserTaskEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *UserTaskEvent) GetTaskExecuted() *UserTaskEvent_UTETaskExecuted {
	if x, ok := x.GetEvent().(*UserTaskEvent_TaskExecuted); ok {
		return x.TaskExecuted
	}
	return nil
}

func (x *UserTaskEvent) GetReassigned() *UserTaskEvent_UTEReassigned {
	if x, ok := x.GetEvent().(*UserTaskEvent_Reassigned); ok {
		return x.Reassigned
	}
	return nil
}

func (x *UserTaskEvent) GetCancelled() *UserTaskEvent_UTECancelled {
	if x, ok := x.GetEvent().(*UserTaskEvent_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

type isUserTaskEvent_Event interface {
	isUserTaskEvent_Event()
}

type UserTaskEvent_TaskExecuted struct {
	TaskExecuted *UserTaskEvent_UTETaskExecuted `protobuf:"bytes,2,opt,name=task_executed,json=taskExecuted,proto3,oneof"`
}

type UserTaskEvent_Reassigned struct {
	Reassigned *UserTaskEvent_UTEReassigned `protobuf:"bytes,3,opt,name=reassigned,proto3,oneof"`
}

type UserTaskEvent_Cancelled struct {
	Cancelled *UserTaskEvent_UTECancelled `protobuf:"bytes,4,opt,name=cancelled,proto3,oneof"`
}

func (*UserTaskEvent_TaskExecuted) isUserTaskEvent_Event() {}

func (*UserTaskEvent_Reassigned) isUserTaskEvent_Event() {}

func (*UserTaskEvent_Cancelled) isUserTaskEvent_Event() {}

type UserTaskRunId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId      string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	UserTaskGuid string `protobuf:"bytes,2,opt,name=user_task_guid,json=userTaskGuid,proto3" json:"user_task_guid,omitempty"`
}

func (x *UserTaskRunId) Reset() {
	*x = UserTaskRunId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskRunId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskRunId) ProtoMessage() {}

func (x *UserTaskRunId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskRunId.ProtoReflect.Descriptor instead.
func (*UserTaskRunId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{137}
}

func (x *UserTaskRunId) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *UserTaskRunId) GetUserTaskGuid() string {
	if x != nil {
		return x.UserTaskGuid
	}
	return ""
}

type UserGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserGroup) Reset() {
	*x = UserGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroup) ProtoMessage() {}

func (x *UserGroup) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroup.ProtoReflect.Descriptor instead.
func (*UserGroup) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{138}
}

func (x *UserGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserGroup *UserGroup `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{139}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUserGroup() *UserGroup {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

// This is a Getable
type UserTaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *UserTaskRunId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserTaskDefId *UserTaskDefId         `protobuf:"bytes,2,opt,name=user_task_def_id,json=userTaskDefId,proto3" json:"user_task_def_id,omitempty"`
	Results       []*UserTaskFieldResult `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	Status        UserTaskRunStatus      `protobuf:"varint,7,opt,name=status,proto3,enum=littlehorse.UserTaskRunStatus" json:"status,omitempty"`
	Events        []*UserTaskEvent       `protobuf:"bytes,8,rep,name=events,proto3" json:"events,omitempty"`
	Notes         *string                `protobuf:"bytes,9,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// If we ever allow ad-hoc User Tasks, this will move to an optional
	// field, or a `oneof user_task_source` field. However, note that such
	// a change would be fine from the API Compatibility perspective.
	NodeRunId *NodeRunId `protobuf:"bytes,11,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
	// Types that are assignable to Owner:
	//
	//	*UserTaskRun_UserGroup
	//	*UserTaskRun_User
	Owner isUserTaskRun_Owner `protobuf_oneof:"owner"`
}

func (x *UserTaskRun) Reset() {
	*x = UserTaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskRun) ProtoMessage() {}

func (x *UserTaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskRun.ProtoReflect.Descriptor instead.
func (*UserTaskRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{140}
}

func (x *UserTaskRun) GetId() *UserTaskRunId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UserTaskRun) GetUserTaskDefId() *UserTaskDefId {
	if x != nil {
		return x.UserTaskDefId
	}
	return nil
}

func (x *UserTaskRun) GetResults() []*UserTaskFieldResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UserTaskRun) GetStatus() UserTaskRunStatus {
	if x != nil {
		return x.Status
	}
	return UserTaskRunStatus_UNASSIGNED
}

func (x *UserTaskRun) GetEvents() []*UserTaskEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *UserTaskRun) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *UserTaskRun) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *UserTaskRun) GetNodeRunId() *NodeRunId {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

func (m *UserTaskRun) GetOwner() isUserTaskRun_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *UserTaskRun) GetUserGroup() *UserGroup {
	if x, ok := x.GetOwner().(*UserTaskRun_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

func (x *UserTaskRun) GetUser() *User {
	if x, ok := x.GetOwner().(*UserTaskRun_User); ok {
		return x.User
	}
	return nil
}

type isUserTaskRun_Owner interface {
	isUserTaskRun_Owner()
}

type UserTaskRun_UserGroup struct {
	UserGroup *UserGroup `protobuf:"bytes,12,opt,name=user_group,json=userGroup,proto3,oneof"`
}

type UserTaskRun_User struct {
	User *User `protobuf:"bytes,13,opt,name=user,proto3,oneof"`
}

func (*UserTaskRun_UserGroup) isUserTaskRun_Owner() {}

func (*UserTaskRun_User) isUserTaskRun_Owner() {}

type AssignUserTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
	OverrideClaim bool           `protobuf:"varint,2,opt,name=override_claim,json=overrideClaim,proto3" json:"override_claim,omitempty"`
	// Types that are assignable to Assignee:
	//
	//	*AssignUserTaskRunRequest_User
	//	*AssignUserTaskRunRequest_UserGroup
	Assignee isAssignUserTaskRunRequest_Assignee `protobuf_oneof:"assignee"`
}

func (x *AssignUserTaskRunRequest) Reset() {
	*x = AssignUserTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUserTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUserTaskRunRequest) ProtoMessage() {}

func (x *AssignUserTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUserTaskRunRequest.ProtoReflect.Descriptor instead.
func (*AssignUserTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{141}
}

func (x *AssignUserTaskRunRequest) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

func (x *AssignUserTaskRunRequest) GetOverrideClaim() bool {
	if x != nil {
		return x.OverrideClaim
	}
	return false
}

func (m *AssignUserTaskRunRequest) GetAssignee() isAssignUserTaskRunRequest_Assignee {
	if m != nil {
		return m.Assignee
	}
	return nil
}

func (x *AssignUserTaskRunRequest) GetUser() *User {
	if x, ok := x.GetAssignee().(*AssignUserTaskRunRequest_User); ok {
		return x.User
	}
	return nil
}

func (x *AssignUserTaskRunRequest) GetUserGroup() *UserGroup {
	if x, ok := x.GetAssignee().(*AssignUserTaskRunRequest_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

type isAssignUserTaskRunRequest_Assignee interface {
	isAssignUserTaskRunRequest_Assignee()
}

type AssignUserTaskRunRequest_User struct {
	User *User `protobuf:"bytes,3,opt,name=user,proto3,oneof"`
}

type AssignUserTaskRunRequest_UserGroup struct {
	UserGroup *UserGroup `protobuf:"bytes,4,opt,name=user_group,json=userGroup,proto3,oneof"`
}

func (*AssignUserTaskRunRequest_User) isAssignUserTaskRunRequest_Assignee() {}

func (*AssignUserTaskRunRequest_UserGroup) isAssignUserTaskRunRequest_Assignee() {}

type AssignUserTaskRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *AssignUserTaskRunResponse) Reset() {
	*x = AssignUserTaskRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUserTaskRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUserTaskRunResponse) ProtoMessage() {}

func (x *AssignUserTaskRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUserTaskRunResponse.ProtoReflect.Descriptor instead.
func (*AssignUserTaskRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{142}
}

func (x *AssignUserTaskRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *AssignUserTaskRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CompleteUserTaskRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *CompleteUserTaskRunResponse) Reset() {
	*x = CompleteUserTaskRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteUserTaskRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUserTaskRunResponse) ProtoMessage() {}

func (x *CompleteUserTaskRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUserTaskRunResponse.ProtoReflect.Descriptor instead.
func (*CompleteUserTaskRunResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{143}
}

func (x *CompleteUserTaskRunResponse) GetCode() LHResponseCode {
	if x != nil {
		return x.Code
	}
	return LHResponseCode_OK
}

func (x *CompleteUserTaskRunResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type UserTaskFieldResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *VariableValue `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *UserTaskFieldResult) Reset() {
	*x = UserTaskFieldResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskFieldResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskFieldResult) ProtoMessage() {}

func (x *UserTaskFieldResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskFieldResult.ProtoReflect.Descriptor instead.
func (*UserTaskFieldResult) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{144}
}

func (x *UserTaskFieldResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskFieldResult) GetValue() *VariableValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type UserTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*UserTaskFieldResult `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *UserTaskResult) Reset() {
	*x = UserTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskResult) ProtoMessage() {}

func (x *UserTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskResult.ProtoReflect.Descriptor instead.
func (*UserTaskResult) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{145}
}

func (x *UserTaskResult) GetFields() []*UserTaskFieldResult {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SaveUserTaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *UserTaskResult        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	UserId  string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Results []*UserTaskFieldResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SaveUserTaskRun) Reset() {
	*x = SaveUserTaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserTaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserTaskRun) ProtoMessage() {}

func (x *SaveUserTaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserTaskRun.ProtoReflect.Descriptor instead.
func (*SaveUserTaskRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{146}
}

func (x *SaveUserTaskRun) GetResult() *UserTaskResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SaveUserTaskRun) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SaveUserTaskRun) GetResults() []*UserTaskFieldResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CompleteUserTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId  `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
	Result        *UserTaskResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	UserId        string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CompleteUserTaskRunRequest) Reset() {
	*x = CompleteUserTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteUserTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUserTaskRunRequest) ProtoMessage() {}

func (x *CompleteUserTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUserTaskRunRequest.ProtoReflect.Descriptor instead.
func (*CompleteUserTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{147}
}

func (x *CompleteUserTaskRunRequest) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

func (x *CompleteUserTaskRunRequest) GetResult() *UserTaskResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CompleteUserTaskRunRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CancelUserTaskRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
}

func (x *CancelUserTaskRunRequest) Reset() {
	*x = CancelUserTaskRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUserTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUserTaskRunRequest) ProtoMessage() {}

func (x *CancelUserTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUserTaskRunRequest.ProtoReflect.Descriptor instead.
func (*CancelUserTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{148}
}

func (x *CancelUserTaskRunRequest) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

type StartThreadNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadSpecName string                         `protobuf:"bytes,1,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	Variables      map[string]*VariableAssignment `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartThreadNode) Reset() {
	*x = StartThreadNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartThreadNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartThreadNode) ProtoMessage() {}

func (x *StartThreadNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartThreadNode.ProtoReflect.Descriptor instead.
func (*StartThreadNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{149}
}

func (x *StartThreadNode) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *StartThreadNode) GetVariables() map[string]*VariableAssignment {
	if x != nil {
		return x.Variables
	}
	return nil
}

type FailureHandlerDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecificFailure *string `protobuf:"bytes,1,opt,name=specific_failure,json=specificFailure,proto3,oneof" json:"specific_failure,omitempty"`
	HandlerSpecName string  `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *FailureHandlerDef) Reset() {
	*x = FailureHandlerDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureHandlerDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureHandlerDef) ProtoMessage() {}

func (x *FailureHandlerDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureHandlerDef.ProtoReflect.Descriptor instead.
func (*FailureHandlerDef) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{150}
}

func (x *FailureHandlerDef) GetSpecificFailure() string {
	if x != nil && x.SpecificFailure != nil {
		return *x.SpecificFailure
	}
	return ""
}

func (x *FailureHandlerDef) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type WaitForThreadsNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*WaitForThreadsNode_ThreadToWaitFor `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *WaitForThreadsNode) Reset() {
	*x = WaitForThreadsNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsNode) ProtoMessage() {}

func (x *WaitForThreadsNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsNode.ProtoReflect.Descriptor instead.
func (*WaitForThreadsNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{151}
}

func (x *WaitForThreadsNode) GetThreads() []*WaitForThreadsNode_ThreadToWaitFor {
	if x != nil {
		return x.Threads
	}
	return nil
}

type TaskNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName    string                `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	TimeoutSeconds int32                 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	Retries        int32                 `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`
	Variables      []*VariableAssignment `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *TaskNode) Reset() {
	*x = TaskNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNode) ProtoMessage() {}

func (x *TaskNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNode.ProtoReflect.Descriptor instead.
func (*TaskNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{152}
}

func (x *TaskNode) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskNode) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TaskNode) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *TaskNode) GetVariables() []*VariableAssignment {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ExternalEventNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string              `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	TimeoutSeconds       *VariableAssignment `protobuf:"bytes,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *ExternalEventNode) Reset() {
	*x = ExternalEventNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventNode) ProtoMessage() {}

func (x *ExternalEventNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventNode.ProtoReflect.Descriptor instead.
func (*ExternalEventNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{153}
}

func (x *ExternalEventNode) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventNode) GetTimeoutSeconds() *VariableAssignment {
	if x != nil {
		return x.TimeoutSeconds
	}
	return nil
}

type EntrypointNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntrypointNode) Reset() {
	*x = EntrypointNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointNode) ProtoMessage() {}

func (x *EntrypointNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointNode.ProtoReflect.Descriptor instead.
func (*EntrypointNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{154}
}

type ExitNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureDef *FailureDef `protobuf:"bytes,1,opt,name=failure_def,json=failureDef,proto3,oneof" json:"failure_def,omitempty"`
}

func (x *ExitNode) Reset() {
	*x = ExitNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitNode) ProtoMessage() {}

func (x *ExitNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitNode.ProtoReflect.Descriptor instead.
func (*ExitNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{155}
}

func (x *ExitNode) GetFailureDef() *FailureDef {
	if x != nil {
		return x.FailureDef
	}
	return nil
}

type FailureDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureName string              `protobuf:"bytes,1,opt,name=failure_name,json=failureName,proto3" json:"failure_name,omitempty"`
	Message     string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Content     *VariableAssignment `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *FailureDef) Reset() {
	*x = FailureDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureDef) ProtoMessage() {}

func (x *FailureDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureDef.ProtoReflect.Descriptor instead.
func (*FailureDef) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{156}
}

func (x *FailureDef) GetFailureName() string {
	if x != nil {
		return x.FailureName
	}
	return ""
}

func (x *FailureDef) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FailureDef) GetContent() *VariableAssignment {
	if x != nil {
		return x.Content
	}
	return nil
}

type VariableDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         VariableType   `protobuf:"varint,1,opt,name=type,proto3,enum=littlehorse.VariableType" json:"type,omitempty"`
	Name         string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IndexType    *IndexType     `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3,enum=littlehorse.IndexType,oneof" json:"index_type,omitempty"`
	JsonIndexes  []*JsonIndex   `protobuf:"bytes,4,rep,name=json_indexes,json=jsonIndexes,proto3" json:"json_indexes,omitempty"`
	DefaultValue *VariableValue `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *VariableDef) Reset() {
	*x = VariableDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDef) ProtoMessage() {}

func (x *VariableDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDef.ProtoReflect.Descriptor instead.
func (*VariableDef) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{157}
}

func (x *VariableDef) GetType() VariableType {
	if x != nil {
		return x.Type
	}
	return VariableType_JSON_OBJ
}

func (x *VariableDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableDef) GetIndexType() IndexType {
	if x != nil && x.IndexType != nil {
		return *x.IndexType
	}
	return IndexType_LOCAL_INDEX
}

func (x *VariableDef) GetJsonIndexes() []*JsonIndex {
	if x != nil {
		return x.JsonIndexes
	}
	return nil
}

func (x *VariableDef) GetDefaultValue() *VariableValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

type JsonIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	IndexType IndexType `protobuf:"varint,2,opt,name=index_type,json=indexType,proto3,enum=littlehorse.IndexType" json:"index_type,omitempty"`
}

func (x *JsonIndex) Reset() {
	*x = JsonIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonIndex) ProtoMessage() {}

func (x *JsonIndex) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonIndex.ProtoReflect.Descriptor instead.
func (*JsonIndex) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{158}
}

func (x *JsonIndex) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JsonIndex) GetIndexType() IndexType {
	if x != nil {
		return x.IndexType
	}
	return IndexType_LOCAL_INDEX
}

type InterruptDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	HandlerSpecName      string `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *InterruptDef) Reset() {
	*x = InterruptDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptDef) ProtoMessage() {}

func (x *InterruptDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptDef.ProtoReflect.Descriptor instead.
func (*InterruptDef) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{159}
}

func (x *InterruptDef) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *InterruptDef) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type ThreadSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes         map[string]*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VariableDefs  []*VariableDef   `protobuf:"bytes,2,rep,name=variable_defs,json=variableDefs,proto3" json:"variable_defs,omitempty"`
	InterruptDefs []*InterruptDef  `protobuf:"bytes,3,rep,name=interrupt_defs,json=interruptDefs,proto3" json:"interrupt_defs,omitempty"`
}

func (x *ThreadSpec) Reset() {
	*x = ThreadSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSpec) ProtoMessage() {}

func (x *ThreadSpec) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSpec.ProtoReflect.Descriptor instead.
func (*ThreadSpec) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{160}
}

func (x *ThreadSpec) GetNodes() map[string]*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ThreadSpec) GetVariableDefs() []*VariableDef {
	if x != nil {
		return x.VariableDefs
	}
	return nil
}

func (x *ThreadSpec) GetInterruptDefs() []*InterruptDef {
	if x != nil {
		return x.InterruptDefs
	}
	return nil
}

type WfSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status               LHStatus               `protobuf:"varint,4,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	ThreadSpecs          map[string]*ThreadSpec `protobuf:"bytes,5,rep,name=thread_specs,json=threadSpecs,proto3" json:"thread_specs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EntrypointThreadName string                 `protobuf:"bytes,6,opt,name=entrypoint_thread_name,json=entrypointThreadName,proto3" json:"entrypoint_thread_name,omitempty"`
	RetentionHours       int32                  `protobuf:"varint,7,opt,name=retention_hours,json=retentionHours,proto3" json:"retention_hours,omitempty"`
}

func (x *WfSpec) Reset() {
	*x = WfSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpec) ProtoMessage() {}

func (x *WfSpec) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpec.ProtoReflect.Descriptor instead.
func (*WfSpec) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{161}
}

func (x *WfSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WfSpec) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WfSpec) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WfSpec) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *WfSpec) GetThreadSpecs() map[string]*ThreadSpec {
	if x != nil {
		return x.ThreadSpecs
	}
	return nil
}

func (x *WfSpec) GetEntrypointThreadName() string {
	if x != nil {
		return x.EntrypointThreadName
	}
	return ""
}

func (x *WfSpec) GetRetentionHours() int32 {
	if x != nil {
		return x.RetentionHours
	}
	return 0
}

// TaskDef
type OutputSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputType VariableType `protobuf:"varint,1,opt,name=output_type,json=outputType,proto3,enum=littlehorse.VariableType" json:"output_type,omitempty"`
}

func (x *OutputSchema) Reset() {
	*x = OutputSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputSchema) ProtoMessage() {}

func (x *OutputSchema) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputSchema.ProtoReflect.Descriptor instead.
func (*OutputSchema) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{162}
}

func (x *OutputSchema) GetOutputType() VariableType {
	if x != nil {
		return x.OutputType
	}
	return VariableType_JSON_OBJ
}

type TaskDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputVars []*VariableDef         `protobuf:"bytes,2,rep,name=input_vars,json=inputVars,proto3" json:"input_vars,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TaskDef) Reset() {
	*x = TaskDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDef) ProtoMessage() {}

func (x *TaskDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDef.ProtoReflect.Descriptor instead.
func (*TaskDef) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{163}
}

func (x *TaskDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskDef) GetInputVars() []*VariableDef {
	if x != nil {
		return x.InputVars
	}
	return nil
}

func (x *TaskDef) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// ExternalEventDef
type ExternalEventDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	RetentionHours int32                  `protobuf:"varint,3,opt,name=retention_hours,json=retentionHours,proto3" json:"retention_hours,omitempty"`
}

func (x *ExternalEventDef) Reset() {
	*x = ExternalEventDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventDef) ProtoMessage() {}

func (x *ExternalEventDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventDef.ProtoReflect.Descriptor instead.
func (*ExternalEventDef) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{164}
}

func (x *ExternalEventDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalEventDef) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExternalEventDef) GetRetentionHours() int32 {
	if x != nil {
		return x.RetentionHours
	}
	return 0
}

type TaskDefMetricsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType  MetricsWindowLength    `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLength" json:"window_type,omitempty"`
	TaskDefName string                 `protobuf:"bytes,3,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
}

func (x *TaskDefMetricsId) Reset() {
	*x = TaskDefMetricsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetricsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetricsId) ProtoMessage() {}

func (x *TaskDefMetricsId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetricsId.ProtoReflect.Descriptor instead.
func (*TaskDefMetricsId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{165}
}

func (x *TaskDefMetricsId) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *TaskDefMetricsId) GetWindowType() MetricsWindowLength {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLength_MINUTES_5
}

func (x *TaskDefMetricsId) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

type TaskDefMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	Type               MetricsWindowLength    `protobuf:"varint,2,opt,name=type,proto3,enum=littlehorse.MetricsWindowLength" json:"type,omitempty"`
	TaskDefName        string                 `protobuf:"bytes,3,opt,name=taskDefName,proto3" json:"taskDefName,omitempty"`
	ScheduleToStartMax int64                  `protobuf:"varint,4,opt,name=schedule_to_start_max,json=scheduleToStartMax,proto3" json:"schedule_to_start_max,omitempty"`
	ScheduleToStartAvg int64                  `protobuf:"varint,5,opt,name=schedule_to_start_avg,json=scheduleToStartAvg,proto3" json:"schedule_to_start_avg,omitempty"`
	StartToCompleteMax int64                  `protobuf:"varint,6,opt,name=start_to_complete_max,json=startToCompleteMax,proto3" json:"start_to_complete_max,omitempty"`
	StartToCompleteAvg int64                  `protobuf:"varint,7,opt,name=start_to_complete_avg,json=startToCompleteAvg,proto3" json:"start_to_complete_avg,omitempty"`
	TotalCompleted     int64                  `protobuf:"varint,8,opt,name=total_completed,json=totalCompleted,proto3" json:"total_completed,omitempty"`
	TotalErrored       int64                  `protobuf:"varint,9,opt,name=total_errored,json=totalErrored,proto3" json:"total_errored,omitempty"`
	TotalStarted       int64                  `protobuf:"varint,10,opt,name=total_started,json=totalStarted,proto3" json:"total_started,omitempty"`
	TotalScheduled     int64                  `protobuf:"varint,11,opt,name=total_scheduled,json=totalScheduled,proto3" json:"total_scheduled,omitempty"`
}

func (x *TaskDefMetrics) Reset() {
	*x = TaskDefMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetrics) ProtoMessage() {}

func (x *TaskDefMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetrics.ProtoReflect.Descriptor instead.
func (*TaskDefMetrics) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{166}
}

func (x *TaskDefMetrics) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *TaskDefMetrics) GetType() MetricsWindowLength {
	if x != nil {
		return x.Type
	}
	return MetricsWindowLength_MINUTES_5
}

func (x *TaskDefMetrics) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskDefMetrics) GetScheduleToStartMax() int64 {
	if x != nil {
		return x.ScheduleToStartMax
	}
	return 0
}

func (x *TaskDefMetrics) GetScheduleToStartAvg() int64 {
	if x != nil {
		return x.ScheduleToStartAvg
	}
	return 0
}

func (x *TaskDefMetrics) GetStartToCompleteMax() int64 {
	if x != nil {
		return x.StartToCompleteMax
	}
	return 0
}

func (x *TaskDefMetrics) GetStartToCompleteAvg() int64 {
	if x != nil {
		return x.StartToCompleteAvg
	}
	return 0
}

func (x *TaskDefMetrics) GetTotalCompleted() int64 {
	if x != nil {
		return x.TotalCompleted
	}
	return 0
}

func (x *TaskDefMetrics) GetTotalErrored() int64 {
	if x != nil {
		return x.TotalErrored
	}
	return 0
}

func (x *TaskDefMetrics) GetTotalStarted() int64 {
	if x != nil {
		return x.TotalStarted
	}
	return 0
}

func (x *TaskDefMetrics) GetTotalScheduled() int64 {
	if x != nil {
		return x.TotalScheduled
	}
	return 0
}

type WfSpecMetricsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType    MetricsWindowLength    `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLength" json:"window_type,omitempty"`
	WfSpecName    string                 `protobuf:"bytes,3,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion int32                  `protobuf:"varint,4,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
}

func (x *WfSpecMetricsId) Reset() {
	*x = WfSpecMetricsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetricsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetricsId) ProtoMessage() {}

func (x *WfSpecMetricsId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetricsId.ProtoReflect.Descriptor instead.
func (*WfSpecMetricsId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{167}
}

func (x *WfSpecMetricsId) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *WfSpecMetricsId) GetWindowType() MetricsWindowLength {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLength_MINUTES_5
}

func (x *WfSpecMetricsId) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfSpecMetricsId) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

type WfSpecMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	Type               MetricsWindowLength    `protobuf:"varint,2,opt,name=type,proto3,enum=littlehorse.MetricsWindowLength" json:"type,omitempty"`
	WfSpecName         string                 `protobuf:"bytes,3,opt,name=wfSpecName,proto3" json:"wfSpecName,omitempty"`
	WfSpecVersion      int32                  `protobuf:"varint,4,opt,name=wfSpecVersion,proto3" json:"wfSpecVersion,omitempty"`
	TotalStarted       int64                  `protobuf:"varint,5,opt,name=total_started,json=totalStarted,proto3" json:"total_started,omitempty"`
	TotalCompleted     int64                  `protobuf:"varint,6,opt,name=total_completed,json=totalCompleted,proto3" json:"total_completed,omitempty"`
	TotalErrored       int64                  `protobuf:"varint,7,opt,name=total_errored,json=totalErrored,proto3" json:"total_errored,omitempty"`
	StartToCompleteMax int64                  `protobuf:"varint,8,opt,name=start_to_complete_max,json=startToCompleteMax,proto3" json:"start_to_complete_max,omitempty"`
	StartToCompleteAvg int64                  `protobuf:"varint,9,opt,name=start_to_complete_avg,json=startToCompleteAvg,proto3" json:"start_to_complete_avg,omitempty"`
}

func (x *WfSpecMetrics) Reset() {
	*x = WfSpecMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetrics) ProtoMessage() {}

func (x *WfSpecMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetrics.ProtoReflect.Descriptor instead.
func (*WfSpecMetrics) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{168}
}

func (x *WfSpecMetrics) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *WfSpecMetrics) GetType() MetricsWindowLength {
	if x != nil {
		return x.Type
	}
	return MetricsWindowLength_MINUTES_5
}

func (x *WfSpecMetrics) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfSpecMetrics) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *WfSpecMetrics) GetTotalStarted() int64 {
	if x != nil {
		return x.TotalStarted
	}
	return 0
}

func (x *WfSpecMetrics) GetTotalCompleted() int64 {
	if x != nil {
		return x.TotalCompleted
	}
	return 0
}

func (x *WfSpecMetrics) GetTotalErrored() int64 {
	if x != nil {
		return x.TotalErrored
	}
	return 0
}

func (x *WfSpecMetrics) GetStartToCompleteMax() int64 {
	if x != nil {
		return x.StartToCompleteMax
	}
	return 0
}

func (x *WfSpecMetrics) GetStartToCompleteAvg() int64 {
	if x != nil {
		return x.StartToCompleteAvg
	}
	return 0
}

type SearchWfRunRequest_StatusAndSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                 `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	Status        LHStatus               `protobuf:"varint,2,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	WfSpecVersion int32                  `protobuf:"varint,3,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchWfRunRequest_StatusAndSpecRequest) Reset() {
	*x = SearchWfRunRequest_StatusAndSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunRequest_StatusAndSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunRequest_StatusAndSpecRequest) ProtoMessage() {}

func (x *SearchWfRunRequest_StatusAndSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunRequest_StatusAndSpecRequest.ProtoReflect.Descriptor instead.
func (*SearchWfRunRequest_StatusAndSpecRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29, 0}
}

func (x *SearchWfRunRequest_StatusAndSpecRequest) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *SearchWfRunRequest_StatusAndSpecRequest) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *SearchWfRunRequest_StatusAndSpecRequest) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *SearchWfRunRequest_StatusAndSpecRequest) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchWfRunRequest_StatusAndSpecRequest) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchWfRunRequest_NameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                 `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchWfRunRequest_NameRequest) Reset() {
	*x = SearchWfRunRequest_NameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunRequest_NameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunRequest_NameRequest) ProtoMessage() {}

func (x *SearchWfRunRequest_NameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunRequest_NameRequest.ProtoReflect.Descriptor instead.
func (*SearchWfRunRequest_NameRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29, 1}
}

func (x *SearchWfRunRequest_NameRequest) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *SearchWfRunRequest_NameRequest) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchWfRunRequest_NameRequest) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchWfRunRequest_StatusAndNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                 `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	Status        LHStatus               `protobuf:"varint,2,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchWfRunRequest_StatusAndNameRequest) Reset() {
	*x = SearchWfRunRequest_StatusAndNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunRequest_StatusAndNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunRequest_StatusAndNameRequest) ProtoMessage() {}

func (x *SearchWfRunRequest_StatusAndNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunRequest_StatusAndNameRequest.ProtoReflect.Descriptor instead.
func (*SearchWfRunRequest_StatusAndNameRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29, 2}
}

func (x *SearchWfRunRequest_StatusAndNameRequest) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *SearchWfRunRequest_StatusAndNameRequest) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *SearchWfRunRequest_StatusAndNameRequest) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchWfRunRequest_StatusAndNameRequest) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchTaskRunRequest_StatusAndTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        TaskStatus             `protobuf:"varint,1,opt,name=status,proto3,enum=littlehorse.TaskStatus" json:"status,omitempty"`
	TaskDefName   string                 `protobuf:"bytes,2,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchTaskRunRequest_StatusAndTaskDefRequest) Reset() {
	*x = SearchTaskRunRequest_StatusAndTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunRequest_StatusAndTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunRequest_StatusAndTaskDefRequest) ProtoMessage() {}

func (x *SearchTaskRunRequest_StatusAndTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunRequest_StatusAndTaskDefRequest.ProtoReflect.Descriptor instead.
func (*SearchTaskRunRequest_StatusAndTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31, 0}
}

func (x *SearchTaskRunRequest_StatusAndTaskDefRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_SCHEDULED
}

func (x *SearchTaskRunRequest_StatusAndTaskDefRequest) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *SearchTaskRunRequest_StatusAndTaskDefRequest) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchTaskRunRequest_StatusAndTaskDefRequest) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchTaskRunRequest_ByTaskDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName   string                 `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchTaskRunRequest_ByTaskDefRequest) Reset() {
	*x = SearchTaskRunRequest_ByTaskDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunRequest_ByTaskDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunRequest_ByTaskDefRequest) ProtoMessage() {}

func (x *SearchTaskRunRequest_ByTaskDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunRequest_ByTaskDefRequest.ProtoReflect.Descriptor instead.
func (*SearchTaskRunRequest_ByTaskDefRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31, 1}
}

func (x *SearchTaskRunRequest_ByTaskDefRequest) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *SearchTaskRunRequest_ByTaskDefRequest) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchTaskRunRequest_ByTaskDefRequest) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchVariableRequest_NameAndValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value         *VariableValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	WfSpecVersion *int32         `protobuf:"varint,2,opt,name=wf_spec_version,json=wfSpecVersion,proto3,oneof" json:"wf_spec_version,omitempty"`
	VarName       string         `protobuf:"bytes,3,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	WfSpecName    string         `protobuf:"bytes,4,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
}

func (x *SearchVariableRequest_NameAndValueRequest) Reset() {
	*x = SearchVariableRequest_NameAndValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVariableRequest_NameAndValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVariableRequest_NameAndValueRequest) ProtoMessage() {}

func (x *SearchVariableRequest_NameAndValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVariableRequest_NameAndValueRequest.ProtoReflect.Descriptor instead.
func (*SearchVariableRequest_NameAndValueRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37, 0}
}

func (x *SearchVariableRequest_NameAndValueRequest) GetValue() *VariableValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SearchVariableRequest_NameAndValueRequest) GetWfSpecVersion() int32 {
	if x != nil && x.WfSpecVersion != nil {
		return *x.WfSpecVersion
	}
	return 0
}

func (x *SearchVariableRequest_NameAndValueRequest) GetVarName() string {
	if x != nil {
		return x.VarName
	}
	return ""
}

func (x *SearchVariableRequest_NameAndValueRequest) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

type SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	IsClaimed            *bool  `protobuf:"varint,2,opt,name=is_claimed,json=isClaimed,proto3,oneof" json:"is_claimed,omitempty"`
}

func (x *SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest) Reset() {
	*x = SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest) ProtoMessage() {}

func (x *SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest.ProtoReflect.Descriptor instead.
func (*SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{47, 0}
}

func (x *SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest) GetIsClaimed() bool {
	if x != nil && x.IsClaimed != nil {
		return *x.IsClaimed
	}
	return false
}

type WaitForThreadsRun_WaitForThread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadEndTime   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=thread_end_time,json=threadEndTime,proto3,oneof" json:"thread_end_time,omitempty"`
	ThreadStatus    LHStatus               `protobuf:"varint,2,opt,name=thread_status,json=threadStatus,proto3,enum=littlehorse.LHStatus" json:"thread_status,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,3,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *WaitForThreadsRun_WaitForThread) Reset() {
	*x = WaitForThreadsRun_WaitForThread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsRun_WaitForThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsRun_WaitForThread) ProtoMessage() {}

func (x *WaitForThreadsRun_WaitForThread) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsRun_WaitForThread.ProtoReflect.Descriptor instead.
func (*WaitForThreadsRun_WaitForThread) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{121, 0}
}

func (x *WaitForThreadsRun_WaitForThread) GetThreadEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ThreadEndTime
	}
	return nil
}

func (x *WaitForThreadsRun_WaitForThread) GetThreadStatus() LHStatus {
	if x != nil {
		return x.ThreadStatus
	}
	return LHStatus_STARTING
}

func (x *WaitForThreadsRun_WaitForThread) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

type VariableAssignment_FormatString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *VariableAssignment   `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Args   []*VariableAssignment `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *VariableAssignment_FormatString) Reset() {
	*x = VariableAssignment_FormatString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAssignment_FormatString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAssignment_FormatString) ProtoMessage() {}

func (x *VariableAssignment_FormatString) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAssignment_FormatString.ProtoReflect.Descriptor instead.
func (*VariableAssignment_FormatString) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{126, 0}
}

func (x *VariableAssignment_FormatString) GetFormat() *VariableAssignment {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *VariableAssignment_FormatString) GetArgs() []*VariableAssignment {
	if x != nil {
		return x.Args
	}
	return nil
}

type VariableMutation_NodeOutputSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jsonpath *string `protobuf:"bytes,10,opt,name=jsonpath,proto3,oneof" json:"jsonpath,omitempty"`
}

func (x *VariableMutation_NodeOutputSource) Reset() {
	*x = VariableMutation_NodeOutputSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableMutation_NodeOutputSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableMutation_NodeOutputSource) ProtoMessage() {}

func (x *VariableMutation_NodeOutputSource) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableMutation_NodeOutputSource.ProtoReflect.Descriptor instead.
func (*VariableMutation_NodeOutputSource) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{127, 0}
}

func (x *VariableMutation_NodeOutputSource) GetJsonpath() string {
	if x != nil && x.Jsonpath != nil {
		return *x.Jsonpath
	}
	return ""
}

type UTActionTrigger_UTACancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UTActionTrigger_UTACancel) Reset() {
	*x = UTActionTrigger_UTACancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger_UTACancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger_UTACancel) ProtoMessage() {}

func (x *UTActionTrigger_UTACancel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger_UTACancel.ProtoReflect.Descriptor instead.
func (*UTActionTrigger_UTACancel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134, 0}
}

type UTActionTrigger_UTATask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task      *TaskNode           `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Mutations []*VariableMutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
}

func (x *UTActionTrigger_UTATask) Reset() {
	*x = UTActionTrigger_UTATask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger_UTATask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger_UTATask) ProtoMessage() {}

func (x *UTActionTrigger_UTATask) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger_UTATask.ProtoReflect.Descriptor instead.
func (*UTActionTrigger_UTATask) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134, 1}
}

func (x *UTActionTrigger_UTATask) GetTask() *TaskNode {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *UTActionTrigger_UTATask) GetMutations() []*VariableMutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

type UTActionTrigger_UTAReassign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AssignTo:
	//
	//	*UTActionTrigger_UTAReassign_UserId
	//	*UTActionTrigger_UTAReassign_UserGroup
	AssignTo isUTActionTrigger_UTAReassign_AssignTo `protobuf_oneof:"assign_to"`
}

func (x *UTActionTrigger_UTAReassign) Reset() {
	*x = UTActionTrigger_UTAReassign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTrigger_UTAReassign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTrigger_UTAReassign) ProtoMessage() {}

func (x *UTActionTrigger_UTAReassign) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTrigger_UTAReassign.ProtoReflect.Descriptor instead.
func (*UTActionTrigger_UTAReassign) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134, 2}
}

func (m *UTActionTrigger_UTAReassign) GetAssignTo() isUTActionTrigger_UTAReassign_AssignTo {
	if m != nil {
		return m.AssignTo
	}
	return nil
}

func (x *UTActionTrigger_UTAReassign) GetUserId() *VariableAssignment {
	if x, ok := x.GetAssignTo().(*UTActionTrigger_UTAReassign_UserId); ok {
		return x.UserId
	}
	return nil
}

func (x *UTActionTrigger_UTAReassign) GetUserGroup() *VariableAssignment {
	if x, ok := x.GetAssignTo().(*UTActionTrigger_UTAReassign_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

type isUTActionTrigger_UTAReassign_AssignTo interface {
	isUTActionTrigger_UTAReassign_AssignTo()
}

type UTActionTrigger_UTAReassign_UserId struct {
	UserId *VariableAssignment `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof"`
}

type UTActionTrigger_UTAReassign_UserGroup struct {
	UserGroup *VariableAssignment `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof"`
}

func (*UTActionTrigger_UTAReassign_UserId) isUTActionTrigger_UTAReassign_AssignTo() {}

func (*UTActionTrigger_UTAReassign_UserGroup) isUTActionTrigger_UTAReassign_AssignTo() {}

type UserTaskNode_UserAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *VariableAssignment `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserGroup *VariableAssignment `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
}

func (x *UserTaskNode_UserAssignment) Reset() {
	*x = UserTaskNode_UserAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskNode_UserAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskNode_UserAssignment) ProtoMessage() {}

func (x *UserTaskNode_UserAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskNode_UserAssignment.ProtoReflect.Descriptor instead.
func (*UserTaskNode_UserAssignment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{135, 0}
}

func (x *UserTaskNode_UserAssignment) GetUserId() *VariableAssignment {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserTaskNode_UserAssignment) GetUserGroup() *VariableAssignment {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

type UserTaskEvent_UTECancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserTaskEvent_UTECancelled) Reset() {
	*x = UserTaskEvent_UTECancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent_UTECancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent_UTECancelled) ProtoMessage() {}

func (x *UserTaskEvent_UTECancelled) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent_UTECancelled.ProtoReflect.Descriptor instead.
func (*UserTaskEvent_UTECancelled) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{136, 0}
}

type UserTaskEvent_UTETaskExecuted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRun *TaskRunId `protobuf:"bytes,1,opt,name=task_run,json=taskRun,proto3" json:"task_run,omitempty"`
}

func (x *UserTaskEvent_UTETaskExecuted) Reset() {
	*x = UserTaskEvent_UTETaskExecuted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent_UTETaskExecuted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent_UTETaskExecuted) ProtoMessage() {}

func (x *UserTaskEvent_UTETaskExecuted) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent_UTETaskExecuted.ProtoReflect.Descriptor instead.
func (*UserTaskEvent_UTETaskExecuted) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{136, 1}
}

func (x *UserTaskEvent_UTETaskExecuted) GetTaskRun() *TaskRunId {
	if x != nil {
		return x.TaskRun
	}
	return nil
}

type UserTaskEvent_UTEReassigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OldOwner:
	//
	//	*UserTaskEvent_UTEReassigned_OldUser
	//	*UserTaskEvent_UTEReassigned_OldUserGroup
	OldOwner isUserTaskEvent_UTEReassigned_OldOwner `protobuf_oneof:"old_owner"`
	// Types that are assignable to NewOwner:
	//
	//	*UserTaskEvent_UTEReassigned_NewUser
	//	*UserTaskEvent_UTEReassigned_NewUserGroup
	NewOwner isUserTaskEvent_UTEReassigned_NewOwner `protobuf_oneof:"new_owner"`
}

func (x *UserTaskEvent_UTEReassigned) Reset() {
	*x = UserTaskEvent_UTEReassigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEvent_UTEReassigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEvent_UTEReassigned) ProtoMessage() {}

func (x *UserTaskEvent_UTEReassigned) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEvent_UTEReassigned.ProtoReflect.Descriptor instead.
func (*UserTaskEvent_UTEReassigned) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{136, 2}
}

func (m *UserTaskEvent_UTEReassigned) GetOldOwner() isUserTaskEvent_UTEReassigned_OldOwner {
	if m != nil {
		return m.OldOwner
	}
	return nil
}

func (x *UserTaskEvent_UTEReassigned) GetOldUser() *User {
	if x, ok := x.GetOldOwner().(*UserTaskEvent_UTEReassigned_OldUser); ok {
		return x.OldUser
	}
	return nil
}

func (x *UserTaskEvent_UTEReassigned) GetOldUserGroup() *UserGroup {
	if x, ok := x.GetOldOwner().(*UserTaskEvent_UTEReassigned_OldUserGroup); ok {
		return x.OldUserGroup
	}
	return nil
}

func (m *UserTaskEvent_UTEReassigned) GetNewOwner() isUserTaskEvent_UTEReassigned_NewOwner {
	if m != nil {
		return m.NewOwner
	}
	return nil
}

func (x *UserTaskEvent_UTEReassigned) GetNewUser() *User {
	if x, ok := x.GetNewOwner().(*UserTaskEvent_UTEReassigned_NewUser); ok {
		return x.NewUser
	}
	return nil
}

func (x *UserTaskEvent_UTEReassigned) GetNewUserGroup() *UserGroup {
	if x, ok := x.GetNewOwner().(*UserTaskEvent_UTEReassigned_NewUserGroup); ok {
		return x.NewUserGroup
	}
	return nil
}

type isUserTaskEvent_UTEReassigned_OldOwner interface {
	isUserTaskEvent_UTEReassigned_OldOwner()
}

type UserTaskEvent_UTEReassigned_OldUser struct {
	OldUser *User `protobuf:"bytes,5,opt,name=old_user,json=oldUser,proto3,oneof"`
}

type UserTaskEvent_UTEReassigned_OldUserGroup struct {
	OldUserGroup *UserGroup `protobuf:"bytes,6,opt,name=old_user_group,json=oldUserGroup,proto3,oneof"`
}

func (*UserTaskEvent_UTEReassigned_OldUser) isUserTaskEvent_UTEReassigned_OldOwner() {}

func (*UserTaskEvent_UTEReassigned_OldUserGroup) isUserTaskEvent_UTEReassigned_OldOwner() {}

type isUserTaskEvent_UTEReassigned_NewOwner interface {
	isUserTaskEvent_UTEReassigned_NewOwner()
}

type UserTaskEvent_UTEReassigned_NewUser struct {
	NewUser *User `protobuf:"bytes,7,opt,name=new_user,json=newUser,proto3,oneof"`
}

type UserTaskEvent_UTEReassigned_NewUserGroup struct {
	NewUserGroup *UserGroup `protobuf:"bytes,8,opt,name=new_user_group,json=newUserGroup,proto3,oneof"`
}

func (*UserTaskEvent_UTEReassigned_NewUser) isUserTaskEvent_UTEReassigned_NewOwner() {}

func (*UserTaskEvent_UTEReassigned_NewUserGroup) isUserTaskEvent_UTEReassigned_NewOwner() {}

type WaitForThreadsNode_ThreadToWaitFor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadRunNumber *VariableAssignment `protobuf:"bytes,1,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *WaitForThreadsNode_ThreadToWaitFor) Reset() {
	*x = WaitForThreadsNode_ThreadToWaitFor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsNode_ThreadToWaitFor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsNode_ThreadToWaitFor) ProtoMessage() {}

func (x *WaitForThreadsNode_ThreadToWaitFor) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsNode_ThreadToWaitFor.ProtoReflect.Descriptor instead.
func (*WaitForThreadsNode_ThreadToWaitFor) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{151, 0}
}

func (x *WaitForThreadsNode_ThreadToWaitFor) GetThreadRunNumber() *VariableAssignment {
	if x != nil {
		return x.ThreadRunNumber
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a,
	0x08, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x57,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x1a, 0x57, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xae, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x48, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x60, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56,
	0x61, 0x72, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x01,
	0x0a, 0x15, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x48, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x72, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x22, 0xc0, 0x01, 0x0a,
	0x1b, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x48, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xc0, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x48, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xae, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x48, 0x01, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xae, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x48, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xba, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xde, 0x02, 0x0a, 0x17, 0x50,
	0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0x83, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaf,
	0x02, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x57, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x57, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x58, 0x0a, 0x0e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x57, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x77,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xba,
	0x09, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57,
	0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbf, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0xdf, 0x01, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x97, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x77, 0x66, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc5, 0x06,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x6a, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x4f,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x1a,
	0x9e, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x1a, 0xe6, 0x01, 0x0a, 0x10, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72,
	0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9b, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0x9e, 0x04, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72,
	0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52,
	0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x22, 0xdb, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb5,
	0x03, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xc5, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0f,
	0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x91,
	0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x18, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xd2, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x77, 0x66,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xe5, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc6,
	0x03, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x66, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x22, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x79,
	0x45, 0x78, 0x74, 0x45, 0x76, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x8b,
	0x01, 0x0a, 0x1f, 0x42, 0x79, 0x45, 0x78, 0x74, 0x45, 0x76, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x65, 0x78, 0x74, 0x5f, 0x65, 0x76, 0x74, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x31, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xae, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x0a, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x79, 0x6f, 0x75, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x32, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x2b, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xa3, 0x02, 0x0a,
	0x0f, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x50, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x1a, 0x5f, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x37, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0f,
	0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x74, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x02,
	0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x36, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x49, 0x64, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xb6, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x53, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x6c,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe2, 0x02,
	0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12,
	0x36, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x70, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x66, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x6f, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x5c, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x71, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x48, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x33, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f,
	0x01, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x41,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a,
	0x16, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x57, 0x66, 0x53, 0x70, 0x65,
	0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xb7, 0x01, 0x0a, 0x15, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xa9, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x06, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x03, 0x73, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x61, 0x72, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x74, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x68, 0x0a, 0x0a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x08,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x8f,
	0x03, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x19, 0x0a, 0x07, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xea, 0x03, 0x0a, 0x05,
	0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x75, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x75, 0x6e, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x4c,
	0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x10,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xce, 0x07, 0x0a, 0x09, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77,
	0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x68, 0x61, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x61,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x59,
	0x0a, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x48,
	0x04, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x17, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x65, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xbc, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22,
	0x6f, 0x0a, 0x15, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x75, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x66, 0x0a, 0x1a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1f, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x22, 0x38, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x0a, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x4c, 0x69, 0x66, 0x65,
	0x22, 0xde, 0x03, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x48, 0x61, 0x6c, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x48,
	0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x57, 0x0a,
	0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x6f, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x70,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75,
	0x6e, 0x12, 0x48, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x22, 0xa4, 0x08, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x09,
	0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x66,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x49, 0x64, 0x52, 0x08, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04,
	0x65, 0x78, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x77, 0x61, 0x69, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x3b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb4, 0x04, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x77,
	0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x47, 0x75, 0x69, 0x64, 0x22, 0xc0, 0x03, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64,
	0x52, 0x08, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x22, 0x8c, 0x02, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x66,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x49, 0x64, 0x52, 0x08, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x0f, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x22, 0x09, 0x0a, 0x07, 0x45, 0x78, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x22, 0x7b, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x2b, 0x0a,
	0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x11, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x12, 0x46,
	0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x1a, 0xd4, 0x01, 0x0a, 0x0d, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0d, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfd, 0x01,
	0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x48, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x53, 0x0a,
	0x0c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x43, 0x0a,
	0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x79, 0x0a, 0x04, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x7c, 0x0a, 0x0c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xda, 0x03, 0x0a, 0x10, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x68, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x68, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x68, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x68, 0x73,
	0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x40,
	0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x0b, 0x0a, 0x09, 0x72, 0x68, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x68, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x09, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x61, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a,
	0x08, 0x69, 0x73, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xe7, 0x05, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x0d, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x10,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x78, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x47, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x4b, 0x0a, 0x10,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x6e, 0x6f, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x6e, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c,
	0x65, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3d, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xe1, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xab, 0x05, 0x0a, 0x0f, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x54, 0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x54, 0x41, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x44, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x54, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0b, 0x0a, 0x09,
	0x55, 0x54, 0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x1a, 0x71, 0x0a, 0x07, 0x55, 0x54, 0x41,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x3b, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x98, 0x01, 0x0a,
	0x0b, 0x55, 0x54, 0x41, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x3a, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x06, 0x55, 0x54, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbc, 0x04, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x3e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x9e, 0x01,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0x92, 0x05, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x54, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x54, 0x45, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x54, 0x45, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x0e, 0x0a, 0x0c, 0x55, 0x54,
	0x45, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x44, 0x0a, 0x0f, 0x55, 0x54,
	0x45, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x1a, 0x89, 0x02, 0x0a, 0x0d, 0x55, 0x54, 0x45, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb1, 0x04, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xf4, 0x01, 0x0a,
	0x18, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x22, 0x77, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x1b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x9b, 0x01, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x5f, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x12, 0x2e,
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x1a, 0x5e, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a,
	0x08, 0x45, 0x78, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x97, 0x02, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x09, 0x4a, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x71, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44,
	0x65, 0x66, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52,
	0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x65, 0x66,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x65, 0x66, 0x73, 0x1a,
	0x4b, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x03, 0x0a,
	0x06, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x1a, 0x57, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4a, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x07, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x8a, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0xb8, 0x01,
	0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x41, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x04, 0x0a, 0x0e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x76, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x61, 0x76, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x76, 0x67, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x57,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x41, 0x0a,
	0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x03, 0x0a, 0x0d, 0x57,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x76, 0x67,
	0x2a, 0xaa, 0x01, 0x0a, 0x0e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x58, 0x0a,
	0x08, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0xbc, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x04, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x57, 0x0a, 0x0e, 0x4c, 0x48, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x48, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x4c, 0x48, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x48,
	0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a,
	0x67, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x52, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x06, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x07, 0x2a, 0x4b, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x5f, 0x45, 0x51, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x2a, 0x98, 0x01, 0x0a,
	0x14, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x08, 0x2a, 0x4a, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x2e, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49,
	0x4e, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x35, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x4f, 0x55,
	0x52, 0x53, 0x5f, 0x32, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x31,
	0x10, 0x02, 0x32, 0xd9, 0x22, 0x0a, 0x0b, 0x4c, 0x48, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x70, 0x69, 0x12, 0x4f, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x12, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13,
	0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x12, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x12,
	0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64,
	0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09,
	0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x1a, 0x1e,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x57, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x50, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x22, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x49, 0x64, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x05, 0x52, 0x75,
	0x6e, 0x57, 0x66, 0x12, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x52, 0x75, 0x6e, 0x57, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x57, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x1a, 0x1d,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x27, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12,
	0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12,
	0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x12, 0x2a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x1a, 0x1f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57,
	0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x66,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x1f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e,
	0x12, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x25, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x12, 0x2a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0e,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x0d, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c,
	0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 193)
var file_service_proto_goTypes = []interface{}{
	(LHResponseCode)(0),                                  // 0: littlehorse.LHResponseCode
	(LHStatus)(0),                                        // 1: littlehorse.LHStatus
	(TaskStatus)(0),                                      // 2: littlehorse.TaskStatus
	(LHHealthResult)(0),                                  // 3: littlehorse.LHHealthResult
	(VariableType)(0),                                    // 4: littlehorse.VariableType
	(ThreadType)(0),                                      // 5: littlehorse.ThreadType
	(Comparator)(0),                                      // 6: littlehorse.Comparator
	(VariableMutationType)(0),                            // 7: littlehorse.VariableMutationType
	(UserTaskRunStatus)(0),                               // 8: littlehorse.UserTaskRunStatus
	(IndexType)(0),                                       // 9: littlehorse.IndexType
	(MetricsWindowLength)(0),                             // 10: littlehorse.MetricsWindowLength
	(UTActionTrigger_UTHook)(0),                          // 11: littlehorse.UTActionTrigger.UTHook
	(*WfSpecId)(nil),                                     // 12: littlehorse.WfSpecId
	(*TaskDefId)(nil),                                    // 13: littlehorse.TaskDefId
	(*ExternalEventDefId)(nil),                           // 14: littlehorse.ExternalEventDefId
	(*GetLatestWfSpecRequest)(nil),                       // 15: littlehorse.GetLatestWfSpecRequest
	(*GetLatestUserTaskDefRequest)(nil),                  // 16: littlehorse.GetLatestUserTaskDefRequest
	(*GetWfSpecResponse)(nil),                            // 17: littlehorse.GetWfSpecResponse
	(*PutWfSpecRequest)(nil),                             // 18: littlehorse.PutWfSpecRequest
	(*PutWfSpecResponse)(nil),                            // 19: littlehorse.PutWfSpecResponse
	(*GetTaskDefResponse)(nil),                           // 20: littlehorse.GetTaskDefResponse
	(*PutTaskDefRequest)(nil),                            // 21: littlehorse.PutTaskDefRequest
	(*PutTaskDefResponse)(nil),                           // 22: littlehorse.PutTaskDefResponse
	(*CancelUserTaskRunResponse)(nil),                    // 23: littlehorse.CancelUserTaskRunResponse
	(*PutUserTaskDefRequest)(nil),                        // 24: littlehorse.PutUserTaskDefRequest
	(*PutUserTaskDefResponse)(nil),                       // 25: littlehorse.PutUserTaskDefResponse
	(*GetUserTaskDefResponse)(nil),                       // 26: littlehorse.GetUserTaskDefResponse
	(*PutExternalEventDefRequest)(nil),                   // 27: littlehorse.PutExternalEventDefRequest
	(*PutExternalEventDefResponse)(nil),                  // 28: littlehorse.PutExternalEventDefResponse
	(*GetExternalEventDefResponse)(nil),                  // 29: littlehorse.GetExternalEventDefResponse
	(*GetWfRunResponse)(nil),                             // 30: littlehorse.GetWfRunResponse
	(*GetNodeRunResponse)(nil),                           // 31: littlehorse.GetNodeRunResponse
	(*GetTaskRunResponse)(nil),                           // 32: littlehorse.GetTaskRunResponse
	(*GetUserTaskRunResponse)(nil),                       // 33: littlehorse.GetUserTaskRunResponse
	(*GetVariableResponse)(nil),                          // 34: littlehorse.GetVariableResponse
	(*GetExternalEventResponse)(nil),                     // 35: littlehorse.GetExternalEventResponse
	(*PutExternalEventRequest)(nil),                      // 36: littlehorse.PutExternalEventRequest
	(*DeleteExternalEventRequest)(nil),                   // 37: littlehorse.DeleteExternalEventRequest
	(*PutExternalEventResponse)(nil),                     // 38: littlehorse.PutExternalEventResponse
	(*RunWfRequest)(nil),                                 // 39: littlehorse.RunWfRequest
	(*RunWfResponse)(nil),                                // 40: littlehorse.RunWfResponse
	(*SearchWfRunRequest)(nil),                           // 41: littlehorse.SearchWfRunRequest
	(*SearchWfRunResponse)(nil),                          // 42: littlehorse.SearchWfRunResponse
	(*SearchTaskRunRequest)(nil),                         // 43: littlehorse.SearchTaskRunRequest
	(*SearchTaskRunResponse)(nil),                        // 44: littlehorse.SearchTaskRunResponse
	(*SearchNodeRunRequest)(nil),                         // 45: littlehorse.SearchNodeRunRequest
	(*SearchNodeRunResponse)(nil),                        // 46: littlehorse.SearchNodeRunResponse
	(*SearchUserTaskRunRequest)(nil),                     // 47: littlehorse.SearchUserTaskRunRequest
	(*SearchUserTaskRunResponse)(nil),                    // 48: littlehorse.SearchUserTaskRunResponse
	(*SearchVariableRequest)(nil),                        // 49: littlehorse.SearchVariableRequest
	(*SearchVariableResponse)(nil),                       // 50: littlehorse.SearchVariableResponse
	(*SearchTaskDefRequest)(nil),                         // 51: littlehorse.SearchTaskDefRequest
	(*SearchTaskDefResponse)(nil),                        // 52: littlehorse.SearchTaskDefResponse
	(*SearchUserTaskDefRequest)(nil),                     // 53: littlehorse.SearchUserTaskDefRequest
	(*SearchUserTaskDefResponse)(nil),                    // 54: littlehorse.SearchUserTaskDefResponse
	(*SearchWfSpecRequest)(nil),                          // 55: littlehorse.SearchWfSpecRequest
	(*SearchWfSpecResponse)(nil),                         // 56: littlehorse.SearchWfSpecResponse
	(*SearchExternalEventDefRequest)(nil),                // 57: littlehorse.SearchExternalEventDefRequest
	(*SearchExternalEventDefResponse)(nil),               // 58: littlehorse.SearchExternalEventDefResponse
	(*SearchExternalEventRequest)(nil),                   // 59: littlehorse.SearchExternalEventRequest
	(*SearchExternalEventResponse)(nil),                  // 60: littlehorse.SearchExternalEventResponse
	(*ListNodeRunsRequest)(nil),                          // 61: littlehorse.ListNodeRunsRequest
	(*ListNodeRunsResponse)(nil),                         // 62: littlehorse.ListNodeRunsResponse
	(*ListVariablesRequest)(nil),                         // 63: littlehorse.ListVariablesRequest
	(*ListVariablesResponse)(nil),                        // 64: littlehorse.ListVariablesResponse
	(*ListExternalEventsRequest)(nil),                    // 65: littlehorse.ListExternalEventsRequest
	(*ListExternalEventsResponse)(nil),                   // 66: littlehorse.ListExternalEventsResponse
	(*RegisterTaskWorkerRequest)(nil),                    // 67: littlehorse.RegisterTaskWorkerRequest
	(*TaskWorkerHeartBeatRequest)(nil),                   // 68: littlehorse.TaskWorkerHeartBeatRequest
	(*RegisterTaskWorkerResponse)(nil),                   // 69: littlehorse.RegisterTaskWorkerResponse
	(*HostInfo)(nil),                                     // 70: littlehorse.HostInfo
	(*TaskWorkerMetadata)(nil),                           // 71: littlehorse.TaskWorkerMetadata
	(*TaskWorkerGroup)(nil),                              // 72: littlehorse.TaskWorkerGroup
	(*TaskWorkerGroupId)(nil),                            // 73: littlehorse.TaskWorkerGroupId
	(*PollTaskRequest)(nil),                              // 74: littlehorse.PollTaskRequest
	(*ScheduledTask)(nil),                                // 75: littlehorse.ScheduledTask
	(*TaskRunSource)(nil),                                // 76: littlehorse.TaskRunSource
	(*PollTaskResponse)(nil),                             // 77: littlehorse.PollTaskResponse
	(*ReportTaskRun)(nil),                                // 78: littlehorse.ReportTaskRun
	(*ReportTaskResponse)(nil),                           // 79: littlehorse.ReportTaskResponse
	(*StopWfRunRequest)(nil),                             // 80: littlehorse.StopWfRunRequest
	(*StopWfRunResponse)(nil),                            // 81: littlehorse.StopWfRunResponse
	(*ResumeWfRunRequest)(nil),                           // 82: littlehorse.ResumeWfRunRequest
	(*ResumeWfRunResponse)(nil),                          // 83: littlehorse.ResumeWfRunResponse
	(*DeleteWfRunRequest)(nil),                           // 84: littlehorse.DeleteWfRunRequest
	(*DeleteTaskDefRequest)(nil),                         // 85: littlehorse.DeleteTaskDefRequest
	(*DeleteUserTaskDefRequest)(nil),                     // 86: littlehorse.DeleteUserTaskDefRequest
	(*DeleteWfSpecRequest)(nil),                          // 87: littlehorse.DeleteWfSpecRequest
	(*DeleteExternalEventDefRequest)(nil),                // 88: littlehorse.DeleteExternalEventDefRequest
	(*DeleteObjectResponse)(nil),                         // 89: littlehorse.DeleteObjectResponse
	(*HealthCheckRequest)(nil),                           // 90: littlehorse.HealthCheckRequest
	(*HealthCheckResponse)(nil),                          // 91: littlehorse.HealthCheckResponse
	(*TaskDefMetricsQueryRequest)(nil),                   // 92: littlehorse.TaskDefMetricsQueryRequest
	(*TaskDefMetricsResponse)(nil),                       // 93: littlehorse.TaskDefMetricsResponse
	(*ListTaskMetricsRequest)(nil),                       // 94: littlehorse.ListTaskMetricsRequest
	(*ListTaskMetricsResponse)(nil),                      // 95: littlehorse.ListTaskMetricsResponse
	(*WfSpecMetricsQueryRequest)(nil),                    // 96: littlehorse.WfSpecMetricsQueryRequest
	(*WfSpecMetricsResponse)(nil),                        // 97: littlehorse.WfSpecMetricsResponse
	(*ListWfMetricsRequest)(nil),                         // 98: littlehorse.ListWfMetricsRequest
	(*ListWfMetricsResponse)(nil),                        // 99: littlehorse.ListWfMetricsResponse
	(*VariableValue)(nil),                                // 100: littlehorse.VariableValue
	(*VariableId)(nil),                                   // 101: littlehorse.VariableId
	(*Variable)(nil),                                     // 102: littlehorse.Variable
	(*VarNameAndVal)(nil),                                // 103: littlehorse.VarNameAndVal
	(*ExternalEventId)(nil),                              // 104: littlehorse.ExternalEventId
	(*ExternalEvent)(nil),                                // 105: littlehorse.ExternalEvent
	(*WfRunId)(nil),                                      // 106: littlehorse.WfRunId
	(*WfRun)(nil),                                        // 107: littlehorse.WfRun
	(*ThreadRun)(nil),                                    // 108: littlehorse.ThreadRun
	(*FailureBeingHandled)(nil),                          // 109: littlehorse.FailureBeingHandled
	(*PendingInterrupt)(nil),                             // 110: littlehorse.PendingInterrupt
	(*PendingFailureHandler)(nil),                        // 111: littlehorse.PendingFailureHandler
	(*PendingInterruptHaltReason)(nil),                   // 112: littlehorse.PendingInterruptHaltReason
	(*PendingFailureHandlerHaltReason)(nil),              // 113: littlehorse.PendingFailureHandlerHaltReason
	(*HandlingFailureHaltReason)(nil),                    // 114: littlehorse.HandlingFailureHaltReason
	(*ParentHalted)(nil),                                 // 115: littlehorse.ParentHalted
	(*Interrupted)(nil),                                  // 116: littlehorse.Interrupted
	(*ManualHalt)(nil),                                   // 117: littlehorse.ManualHalt
	(*ThreadHaltReason)(nil),                             // 118: littlehorse.ThreadHaltReason
	(*NodeRunId)(nil),                                    // 119: littlehorse.NodeRunId
	(*TaskNodeRun)(nil),                                  // 120: littlehorse.TaskNodeRun
	(*UserTaskNodeRun)(nil),                              // 121: littlehorse.UserTaskNodeRun
	(*NodeRun)(nil),                                      // 122: littlehorse.NodeRun
	(*Failure)(nil),                                      // 123: littlehorse.Failure
	(*TaskAttempt)(nil),                                  // 124: littlehorse.TaskAttempt
	(*TaskRunId)(nil),                                    // 125: littlehorse.TaskRunId
	(*TaskRun)(nil),                                      // 126: littlehorse.TaskRun
	(*TaskNodeReference)(nil),                            // 127: littlehorse.TaskNodeReference
	(*UserTaskTriggerContext)(nil),                       // 128: littlehorse.UserTaskTriggerContext
	(*UserTaskTriggerReference)(nil),                     // 129: littlehorse.UserTaskTriggerReference
	(*EntrypointRun)(nil),                                // 130: littlehorse.EntrypointRun
	(*ExitRun)(nil),                                      // 131: littlehorse.ExitRun
	(*StartThreadRun)(nil),                               // 132: littlehorse.StartThreadRun
	(*WaitForThreadsRun)(nil),                            // 133: littlehorse.WaitForThreadsRun
	(*ExternalEventRun)(nil),                             // 134: littlehorse.ExternalEventRun
	(*SleepNodeRun)(nil),                                 // 135: littlehorse.SleepNodeRun
	(*EdgeCondition)(nil),                                // 136: littlehorse.EdgeCondition
	(*Edge)(nil),                                         // 137: littlehorse.Edge
	(*VariableAssignment)(nil),                           // 138: littlehorse.VariableAssignment
	(*VariableMutation)(nil),                             // 139: littlehorse.VariableMutation
	(*NopNode)(nil),                                      // 140: littlehorse.NopNode
	(*SleepNode)(nil),                                    // 141: littlehorse.SleepNode
	(*Node)(nil),                                         // 142: littlehorse.Node
	(*UserTaskField)(nil),                                // 143: littlehorse.UserTaskField
	(*UserTaskDefId)(nil),                                // 144: littlehorse.UserTaskDefId
	(*UserTaskDef)(nil),                                  // 145: littlehorse.UserTaskDef
	(*UTActionTrigger)(nil),                              // 146: littlehorse.UTActionTrigger
	(*UserTaskNode)(nil),                                 // 147: littlehorse.UserTaskNode
	(*UserTaskEvent)(nil),                                // 148: littlehorse.UserTaskEvent
	(*UserTaskRunId)(nil),                                // 149: littlehorse.UserTaskRunId
	(*UserGroup)(nil),                                    // 150: littlehorse.UserGroup
	(*User)(nil),                                         // 151: littlehorse.User
	(*UserTaskRun)(nil),                                  // 152: littlehorse.UserTaskRun
	(*AssignUserTaskRunRequest)(nil),                     // 153: littlehorse.AssignUserTaskRunRequest
	(*AssignUserTaskRunResponse)(nil),                    // 154: littlehorse.AssignUserTaskRunResponse
	(*CompleteUserTaskRunResponse)(nil),                  // 155: littlehorse.CompleteUserTaskRunResponse
	(*UserTaskFieldResult)(nil),                          // 156: littlehorse.UserTaskFieldResult
	(*UserTaskResult)(nil),                               // 157: littlehorse.UserTaskResult
	(*SaveUserTaskRun)(nil),                              // 158: littlehorse.SaveUserTaskRun
	(*CompleteUserTaskRunRequest)(nil),                   // 159: littlehorse.CompleteUserTaskRunRequest
	(*CancelUserTaskRunRequest)(nil),                     // 160: littlehorse.CancelUserTaskRunRequest
	(*StartThreadNode)(nil),                              // 161: littlehorse.StartThreadNode
	(*FailureHandlerDef)(nil),                            // 162: littlehorse.FailureHandlerDef
	(*WaitForThreadsNode)(nil),                           // 163: littlehorse.WaitForThreadsNode
	(*TaskNode)(nil),                                     // 164: littlehorse.TaskNode
	(*ExternalEventNode)(nil),                            // 165: littlehorse.ExternalEventNode
	(*EntrypointNode)(nil),                               // 166: littlehorse.EntrypointNode
	(*ExitNode)(nil),                                     // 167: littlehorse.ExitNode
	(*FailureDef)(nil),                                   // 168: littlehorse.FailureDef
	(*VariableDef)(nil),                                  // 169: littlehorse.VariableDef
	(*JsonIndex)(nil),                                    // 170: littlehorse.JsonIndex
	(*InterruptDef)(nil),                                 // 171: littlehorse.InterruptDef
	(*ThreadSpec)(nil),                                   // 172: littlehorse.ThreadSpec
	(*WfSpec)(nil),                                       // 173: littlehorse.WfSpec
	(*OutputSchema)(nil),                                 // 174: littlehorse.OutputSchema
	(*TaskDef)(nil),                                      // 175: littlehorse.TaskDef
	(*ExternalEventDef)(nil),                             // 176: littlehorse.ExternalEventDef
	(*TaskDefMetricsId)(nil),                             // 177: littlehorse.TaskDefMetricsId
	(*TaskDefMetrics)(nil),                               // 178: littlehorse.TaskDefMetrics
	(*WfSpecMetricsId)(nil),                              // 179: littlehorse.WfSpecMetricsId
	(*WfSpecMetrics)(nil),                                // 180: littlehorse.WfSpecMetrics
	nil,                                                  // 181: littlehorse.PutWfSpecRequest.ThreadSpecsEntry
	nil,                                                  // 182: littlehorse.RunWfRequest.VariablesEntry
	(*SearchWfRunRequest_StatusAndSpecRequest)(nil),      // 183: littlehorse.SearchWfRunRequest.StatusAndSpecRequest
	(*SearchWfRunRequest_NameRequest)(nil),               // 184: littlehorse.SearchWfRunRequest.NameRequest
	(*SearchWfRunRequest_StatusAndNameRequest)(nil),      // 185: littlehorse.SearchWfRunRequest.StatusAndNameRequest
	(*SearchTaskRunRequest_StatusAndTaskDefRequest)(nil), // 186: littlehorse.SearchTaskRunRequest.StatusAndTaskDefRequest
	(*SearchTaskRunRequest_ByTaskDefRequest)(nil),        // 187: littlehorse.SearchTaskRunRequest.ByTaskDefRequest
	(*SearchVariableRequest_NameAndValueRequest)(nil),    // 188: littlehorse.SearchVariableRequest.NameAndValueRequest
	(*SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest)(nil), // 189: littlehorse.SearchExternalEventRequest.ByExtEvtDefNameAndStatusRequest
	nil,                                        // 190: littlehorse.TaskWorkerGroup.TaskWorkersEntry
	(*WaitForThreadsRun_WaitForThread)(nil),    // 191: littlehorse.WaitForThreadsRun.WaitForThread
	(*VariableAssignment_FormatString)(nil),    // 192: littlehorse.VariableAssignment.FormatString
	(*VariableMutation_NodeOutputSource)(nil),  // 193: littlehorse.VariableMutation.NodeOutputSource
	(*UTActionTrigger_UTACancel)(nil),          // 194: littlehorse.UTActionTrigger.UTACancel
	(*UTActionTrigger_UTATask)(nil),            // 195: littlehorse.UTActionTrigger.UTATask
	(*UTActionTrigger_UTAReassign)(nil),        // 196: littlehorse.UTActionTrigger.UTAReassign
	(*UserTaskNode_UserAssignment)(nil),        // 197: littlehorse.UserTaskNode.UserAssignment
	(*UserTaskEvent_UTECancelled)(nil),         // 198: littlehorse.UserTaskEvent.UTECancelled
	(*UserTaskEvent_UTETaskExecuted)(nil),      // 199: littlehorse.UserTaskEvent.UTETaskExecuted
	(*UserTaskEvent_UTEReassigned)(nil),        // 200: littlehorse.UserTaskEvent.UTEReassigned
	nil,                                        // 201: littlehorse.StartThreadNode.VariablesEntry
	(*WaitForThreadsNode_ThreadToWaitFor)(nil), // 202: littlehorse.WaitForThreadsNode.ThreadToWaitFor
	nil,                           // 203: littlehorse.ThreadSpec.NodesEntry
	nil,                           // 204: littlehorse.WfSpec.ThreadSpecsEntry
	(*timestamppb.Timestamp)(nil), // 205: google.protobuf.Timestamp
}
var file_service_proto_depIdxs = []int32{
	0,   // 0: littlehorse.GetWfSpecResponse.code:type_name -> littlehorse.LHResponseCode
	173, // 1: littlehorse.GetWfSpecResponse.result:type_name -> littlehorse.WfSpec
	181, // 2: littlehorse.PutWfSpecRequest.thread_specs:type_name -> littlehorse.PutWfSpecRequest.ThreadSpecsEntry
	0,   // 3: littlehorse.PutWfSpecResponse.code:type_name -> littlehorse.LHResponseCode
	173, // 4: littlehorse.PutWfSpecResponse.result:type_name -> littlehorse.WfSpec
	0,   // 5: littlehorse.GetTaskDefResponse.code:type_name -> littlehorse.LHResponseCode
	175, // 6: littlehorse.GetTaskDefResponse.result:type_name -> littlehorse.TaskDef
	169, // 7: littlehorse.PutTaskDefRequest.input_vars:type_name -> littlehorse.VariableDef
	0,   // 8: littlehorse.PutTaskDefResponse.code:type_name -> littlehorse.LHResponseCode
	175, // 9: littlehorse.PutTaskDefResponse.result:type_name -> littlehorse.TaskDef
	0,   // 10: littlehorse.CancelUserTaskRunResponse.code:type_name -> littlehorse.LHResponseCode
	143, // 11: littlehorse.PutUserTaskDefRequest.fields:type_name -> littlehorse.UserTaskField
	0,   // 12: littlehorse.PutUserTaskDefResponse.code:type_name -> littlehorse.LHResponseCode
	145, // 13: littlehorse.PutUserTaskDefResponse.result:type_name -> littlehorse.UserTaskDef
	0,   // 14: littlehorse.GetUserTaskDefResponse.code:type_name -> littlehorse.LHResponseCode
	145, // 15: littlehorse.GetUserTaskDefResponse.result:type_name -> littlehorse.UserTaskDef
	0,   // 16: littlehorse.PutExternalEventDefResponse.code:type_name -> littlehorse.LHResponseCode
	176, // 17: littlehorse.PutExternalEventDefResponse.result:type_name -> littlehorse.ExternalEventDef
	0,   // 18: littlehorse.GetExternalEventDefResponse.code:type_name -> littlehorse.LHResponseCode
	176, // 19: littlehorse.GetExternalEventDefResponse.result:type_name -> littlehorse.ExternalEventDef
	0,   // 20: littlehorse.GetWfRunResponse.code:type_name -> littlehorse.LHResponseCode
	107, // 21: littlehorse.GetWfRunResponse.result:type_name -> littlehorse.WfRun
	0,   // 22: littlehorse.GetNodeRunResponse.code:type_name -> littlehorse.LHResponseCode
	122, // 23: littlehorse.GetNodeRunResponse.result:type_name -> littlehorse.NodeRun
	0,   // 24: littlehorse.GetTaskRunResponse.code:type_name -> littlehorse.LHResponseCode
	126, // 25: littlehorse.GetTaskRunResponse.result:type_name -> littlehorse.TaskRun
	0,   // 26: littlehorse.GetUserTaskRunResponse.code:type_name -> littlehorse.LHResponseCode
	152, // 27: littlehorse.GetUserTaskRunResponse.result:type_name -> littlehorse.UserTaskRun
	0,   // 28: littlehorse.GetVariableResponse.code:type_name -> littlehorse.LHResponseCode
	102, // 29: littlehorse.GetVariableResponse.result:type_name -> littlehorse.Variable
	0,   // 30: littlehorse.GetExternalEventResponse.code:type_name -> littlehorse.LHResponseCode
	105, // 31: littlehorse.GetExternalEventResponse.result:type_name -> littlehorse.ExternalEvent
	100, // 32: littlehorse.PutExternalEventRequest.content:type_name -> littlehorse.VariableValue
	0,   // 33: littlehorse.PutExternalEventResponse.code:type_name -> littlehorse.LHResponseCode
	105, // 34: littlehorse.PutExternalEventResponse.result:type_name -> littlehorse.ExternalEvent
	182, // 35: littlehorse.RunWfRequest.variables:type_name -> littlehorse.RunWfRequest.VariablesEntry
	0,   // 36: littlehorse.RunWfResponse.code:type_name -> littlehorse.LHResponseCode
	183, // 37: littlehorse.SearchWfRunRequest.status_and_spec:type_name -> littlehorse.SearchWfRunRequest.StatusAndSpecRequest
	184, // 38: littlehorse.SearchWfRunRequest.name:type_name -> littlehorse.SearchWfRunRequest.NameRequest
	185, // 39: littlehorse.SearchWfRunRequest.status_and_name:type_name -> littlehorse.SearchWfRunRequest.StatusAndNameRequest
	0,   // 40: littlehorse.SearchWfRunResponse.code:type_name -> littlehorse.LHResponseCode
	106, // 41: littlehorse.SearchWfRunResponse.results:type_name -> littlehorse.WfRunId
	186, // 42: littlehorse.SearchTaskRunRequest.status_and_task_def:type_name -> littlehorse.SearchTaskRunRequest.StatusAndTaskDefRequest
	187, // 43: littlehorse.SearchTaskRunRequest.task_def:type_name -> littlehorse.SearchTaskRunRequest.ByTaskDefRequest
	0,   // 44: littlehorse.SearchTaskRunResponse.code:type_name -> littlehorse.LHResponseCode
	125, // 45: littlehorse.SearchTaskRunResponse.results:type_name -> littlehorse.TaskRunId
	0,   // 46: littlehorse.SearchNodeRunResponse.code:type_name -> littlehorse.LHResponseCode
	119, // 47: littlehorse.SearchNodeRunResponse.results:type_name -> littlehorse.NodeRunId
	8,   // 48: littlehorse.SearchUserTaskRunRequest.status:type_name -> littlehorse.UserTaskRunStatus
	151, // 49: littlehorse.SearchUserTaskRunRequest.user:type_name -> littlehorse.User
	150, // 50: littlehorse.SearchUserTaskRunRequest.user_group:type_name -> littlehorse.UserGroup
	205, // 51: littlehorse.SearchUserTaskRunRequest.earliest_start:type_name -> google.protobuf.Timestamp
	205, // 52: littlehorse.SearchUserTaskRunRequest.latest_start:type_name -> google.protobuf.Timestamp
	0,   // 53: littlehorse.SearchUserTaskRunResponse.code:type_name -> littlehorse.LHResponseCode
	149, // 54: littlehorse.SearchUserTaskRunResponse.results:type_name -> littlehorse.UserTaskRunId
	188, // 55: littlehorse.SearchVariableRequest.value:type_name -> littlehorse.SearchVariableRequest.NameAndValueRequest
	0,   // 56: littlehorse.SearchVariableResponse.code:type_name -> littlehorse.LHResponseCode
	101, // 57: littlehorse.SearchVariableResponse.results:type_name -> littlehorse.VariableId
	0,   // 58: littlehorse.SearchTaskDefResponse.code:type_name -> littlehorse.LHResponseCode
	13,  // 59: littlehorse.SearchTaskDefResponse.results:type_name -> littlehorse.TaskDefId
	0,   // 60: littlehorse.SearchUserTaskDefResponse.code:type_name -> littlehorse.LHResponseCode
	144, // 61: littlehorse.SearchUserTaskDefResponse.results:type_name -> littlehorse.UserTaskDefId
	0,   // 62: littlehorse.SearchWfSpecResponse.code:type_name -> littlehorse.LHResponseCode
	12,  // 63: littlehorse.SearchWfSpecResponse.results:type_name -> littlehorse.WfSpecId
	0,   // 64: littlehorse.SearchExternalEventDefResponse.code:type_name -> littlehorse.LHResponseCode
	14,  // 65: littlehorse.SearchExternalEventDefResponse.results:type_name -> littlehorse.ExternalEventDefId
	189, // 66: littlehorse.SearchExternalEventRequest.external_event_def_name_and_status:type_name -> littlehorse.SearchExternalEventRequest.ByExtEvtDefNameAndStatusRequest
	0,   // 67: littlehorse.SearchExternalEventResponse.code:type_name -> littlehorse.LHResponseCode
	104, // 68: littlehorse.SearchExternalEventResponse.results:type_name -> littlehorse.ExternalEventId
	0,   // 69: littlehorse.ListNodeRunsResponse.code:type_name -> littlehorse.LHResponseCode
	122, // 70: littlehorse.ListNodeRunsResponse.results:type_name -> littlehorse.NodeRun
	0,   // 71: littlehorse.ListVariablesResponse.code:type_name -> littlehorse.LHResponseCode
	102, // 72: littlehorse.ListVariablesResponse.results:type_name -> littlehorse.Variable
	0,   // 73: littlehorse.ListExternalEventsResponse.code:type_name -> littlehorse.LHResponseCode
	105, // 74: littlehorse.ListExternalEventsResponse.results:type_name -> littlehorse.ExternalEvent
	0,   // 75: littlehorse.RegisterTaskWorkerResponse.code:type_name -> littlehorse.LHResponseCode
	70,  // 76: littlehorse.RegisterTaskWorkerResponse.your_hosts:type_name -> littlehorse.HostInfo
	205, // 77: littlehorse.TaskWorkerMetadata.latest_heartbeat:type_name -> google.protobuf.Timestamp
	70,  // 78: littlehorse.TaskWorkerMetadata.hosts:type_name -> littlehorse.HostInfo
	205, // 79: littlehorse.TaskWorkerGroup.created_at:type_name -> google.protobuf.Timestamp
	190, // 80: littlehorse.TaskWorkerGroup.task_workers:type_name -> littlehorse.TaskWorkerGroup.TaskWorkersEntry
	125, // 81: littlehorse.ScheduledTask.task_run_id:type_name -> littlehorse.TaskRunId
	13,  // 82: littlehorse.ScheduledTask.task_def_id:type_name -> littlehorse.TaskDefId
	103, // 83: littlehorse.ScheduledTask.variables:type_name -> littlehorse.VarNameAndVal
	205, // 84: littlehorse.ScheduledTask.created_at:type_name -> google.protobuf.Timestamp
	76,  // 85: littlehorse.ScheduledTask.source:type_name -> littlehorse.TaskRunSource
	127, // 86: littlehorse.TaskRunSource.task_node:type_name -> littlehorse.TaskNodeReference
	129, // 87: littlehorse.TaskRunSource.user_task_trigger:type_name -> littlehorse.UserTaskTriggerReference
	0,   // 88: littlehorse.PollTaskResponse.code:type_name -> littlehorse.LHResponseCode
	75,  // 89: littlehorse.PollTaskResponse.result:type_name -> littlehorse.ScheduledTask
	125, // 90: littlehorse.ReportTaskRun.task_run_id:type_name -> littlehorse.TaskRunId
	205, // 91: littlehorse.ReportTaskRun.time:type_name -> google.protobuf.Timestamp
	2,   // 92: littlehorse.ReportTaskRun.status:type_name -> littlehorse.TaskStatus
	100, // 93: littlehorse.ReportTaskRun.output:type_name -> littlehorse.VariableValue
	100, // 94: littlehorse.ReportTaskRun.log_output:type_name -> littlehorse.VariableValue
	0,   // 95: littlehorse.ReportTaskResponse.code:type_name -> littlehorse.LHResponseCode
	0,   // 96: littlehorse.StopWfRunResponse.code:type_name -> littlehorse.LHResponseCode
	0,   // 97: littlehorse.ResumeWfRunResponse.code:type_name -> littlehorse.LHResponseCode
	0,   // 98: littlehorse.DeleteObjectResponse.code:type_name -> littlehorse.LHResponseCode
	3,   // 99: littlehorse.HealthCheckResponse.core_state:type_name -> littlehorse.LHHealthResult
	3,   // 100: littlehorse.HealthCheckResponse.timer_state:type_name -> littlehorse.LHHealthResult
	205, // 101: littlehorse.TaskDefMetricsQueryRequest.window_start:type_name -> google.protobuf.Timestamp
	10,  // 102: littlehorse.TaskDefMetricsQueryRequest.window_type:type_name -> littlehorse.MetricsWindowLength
	0,   // 103: littlehorse.TaskDefMetricsResponse.code:type_name -> littlehorse.LHResponseCode
	178, // 104: littlehorse.TaskDefMetricsResponse.result:type_name -> littlehorse.TaskDefMetrics
	205, // 105: littlehorse.ListTaskMetricsRequest.last_window_start:type_name -> google.protobuf.Timestamp
	10,  // 106: littlehorse.ListTaskMetricsRequest.window_length:type_name -> littlehorse.MetricsWindowLength
	0,   // 107: littlehorse.ListTaskMetricsResponse.code:type_name -> littlehorse.LHResponseCode
	178, // 108: littlehorse.ListTaskMetricsResponse.results:type_name -> littlehorse.TaskDefMetrics
	205, // 109: littlehorse.WfSpecMetricsQueryRequest.window_start:type_name -> google.protobuf.Timestamp
	10,  // 110: littlehorse.WfSpecMetricsQueryRequest.window_type:type_name -> littlehorse.MetricsWindowLength
	0,   // 111: littlehorse.WfSpecMetricsResponse.code:type_name -> littlehorse.LHResponseCode
	180, // 112: littlehorse.WfSpecMetricsResponse.result:type_name -> littlehorse.WfSpecMetrics
	205, // 113: littlehorse.ListWfMetricsRequest.last_window_start:type_name -> google.protobuf.Timestamp
	10,  // 114: littlehorse.ListWfMetricsRequest.window_length:type_name -> littlehorse.MetricsWindowLength
	0,   // 115: littlehorse.ListWfMetricsResponse.code:type_name -> littlehorse.LHResponseCode
	180, // 116: littlehorse.ListWfMetricsResponse.results:type_name -> littlehorse.WfSpecMetrics
	4,   // 117: littlehorse.VariableValue.type:type_name -> littlehorse.VariableType
	100, // 118: littlehorse.Variable.value:type_name -> littlehorse.VariableValue
	205, // 119: littlehorse.Variable.date:type_name -> google.protobuf.Timestamp
	100, // 120: littlehorse.VarNameAndVal.value:type_name -> littlehorse.VariableValue
	205, // 121: littlehorse.ExternalEvent.created_at:type_name -> google.protobuf.Timestamp
	100, // 122: littlehorse.ExternalEvent.content:type_name -> littlehorse.VariableValue
	1,   // 123: littlehorse.WfRun.status:type_name -> littlehorse.LHStatus
	205, // 124: littlehorse.WfRun.start_time:type_name -> google.protobuf.Timestamp
	205, // 125: littlehorse.WfRun.end_time:type_name -> google.protobuf.Timestamp
	108, // 126: littlehorse.WfRun.thread_runs:type_name -> littlehorse.ThreadRun
	110, // 127: littlehorse.WfRun.pending_interrupts:type_name -> littlehorse.PendingInterrupt
	111, // 128: littlehorse.WfRun.pending_failures:type_name -> littlehorse.PendingFailureHandler
	1,   // 129: littlehorse.ThreadRun.status:type_name -> littlehorse.LHStatus
	205, // 130: littlehorse.ThreadRun.start_time:type_name -> google.protobuf.Timestamp
	205, // 131: littlehorse.ThreadRun.end_time:type_name -> google.protobuf.Timestamp
	118, // 132: littlehorse.ThreadRun.halt_reasons:type_name -> littlehorse.ThreadHaltReason
	104, // 133: littlehorse.ThreadRun.interrupt_trigger_id:type_name -> littlehorse.ExternalEventId
	109, // 134: littlehorse.ThreadRun.failure_being_handled:type_name -> littlehorse.FailureBeingHandled
	5,   // 135: littlehorse.ThreadRun.type:type_name -> littlehorse.ThreadType
	104, // 136: littlehorse.PendingInterrupt.external_event_id:type_name -> littlehorse.ExternalEventId
	104, // 137: littlehorse.PendingInterruptHaltReason.external_event_id:type_name -> littlehorse.ExternalEventId
	115, // 138: littlehorse.ThreadHaltReason.parent_halted:type_name -> littlehorse.ParentHalted
	116, // 139: littlehorse.ThreadHaltReason.interrupted:type_name -> littlehorse.Interrupted
	112, // 140: littlehorse.ThreadHaltReason.pending_interrupt:type_name -> littlehorse.PendingInterruptHaltReason
	113, // 141: littlehorse.ThreadHaltReason.pending_failure:type_name -> littlehorse.PendingFailureHandlerHaltReason
	114, // 142: littlehorse.ThreadHaltReason.handling_failure:type_name -> littlehorse.HandlingFailureHaltReason
	117, // 143: littlehorse.ThreadHaltReason.manual_halt:type_name -> littlehorse.ManualHalt
	125, // 144: littlehorse.TaskNodeRun.task_run_id:type_name -> littlehorse.TaskRunId
	149, // 145: littlehorse.UserTaskNodeRun.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	1,   // 146: littlehorse.NodeRun.status:type_name -> littlehorse.LHStatus
	205, // 147: littlehorse.NodeRun.arrival_time:type_name -> google.protobuf.Timestamp
	205, // 148: littlehorse.NodeRun.end_time:type_name -> google.protobuf.Timestamp
	12,  // 149: littlehorse.NodeRun.wf_spec_id:type_name -> littlehorse.WfSpecId
	123, // 150: littlehorse.NodeRun.failures:type_name -> littlehorse.Failure
	120, // 151: littlehorse.NodeRun.task:type_name -> littlehorse.TaskNodeRun
	134, // 152: littlehorse.NodeRun.external_event:type_name -> littlehorse.ExternalEventRun
	130, // 153: littlehorse.NodeRun.entrypoint:type_name -> littlehorse.EntrypointRun
	131, // 154: littlehorse.NodeRun.exit:type_name -> littlehorse.ExitRun
	132, // 155: littlehorse.NodeRun.start_thread:type_name -> littlehorse.StartThreadRun
	133, // 156: littlehorse.NodeRun.wait_threads:type_name -> littlehorse.WaitForThreadsRun
	135, // 157: littlehorse.NodeRun.sleep:type_name -> littlehorse.SleepNodeRun
	121, // 158: littlehorse.NodeRun.user_task:type_name -> littlehorse.UserTaskNodeRun
	100, // 159: littlehorse.Failure.content:type_name -> littlehorse.VariableValue
	100, // 160: littlehorse.TaskAttempt.output:type_name -> littlehorse.VariableValue
	100, // 161: littlehorse.TaskAttempt.log_output:type_name -> littlehorse.VariableValue
	205, // 162: littlehorse.TaskAttempt.schedule_time:type_name -> google.protobuf.Timestamp
	205, // 163: littlehorse.TaskAttempt.start_time:type_name -> google.protobuf.Timestamp
	205, // 164: littlehorse.TaskAttempt.end_time:type_name -> google.protobuf.Timestamp
	2,   // 165: littlehorse.TaskAttempt.status:type_name -> littlehorse.TaskStatus
	125, // 166: littlehorse.TaskRun.id:type_name -> littlehorse.TaskRunId
	124, // 167: littlehorse.TaskRun.attempts:type_name -> littlehorse.TaskAttempt
	103, // 168: littlehorse.TaskRun.input_variables:type_name -> littlehorse.VarNameAndVal
	76,  // 169: littlehorse.TaskRun.source:type_name -> littlehorse.TaskRunSource
	205, // 170: littlehorse.TaskRun.scheduled_at:type_name -> google.protobuf.Timestamp
	2,   // 171: littlehorse.TaskRun.status:type_name -> littlehorse.TaskStatus
	119, // 172: littlehorse.TaskNodeReference.node_run_id:type_name -> littlehorse.NodeRunId
	12,  // 173: littlehorse.TaskNodeReference.wf_spec_id:type_name -> littlehorse.WfSpecId
	150, // 174: littlehorse.UserTaskTriggerContext.user_group:type_name -> littlehorse.UserGroup
	151, // 175: littlehorse.UserTaskTriggerContext.user:type_name -> littlehorse.User
	119, // 176: littlehorse.UserTaskTriggerReference.node_run_id:type_name -> littlehorse.NodeRunId
	12,  // 177: littlehorse.UserTaskTriggerReference.wf_spec_id:type_name -> littlehorse.WfSpecId
	128, // 178: littlehorse.UserTaskTriggerReference.context:type_name -> littlehorse.UserTaskTriggerContext
	191, // 179: littlehorse.WaitForThreadsRun.threads:type_name -> littlehorse.WaitForThreadsRun.WaitForThread
	205, // 180: littlehorse.ExternalEventRun.event_time:type_name -> google.protobuf.Timestamp
	104, // 181: littlehorse.ExternalEventRun.external_event_id:type_name -> littlehorse.ExternalEventId
	205, // 182: littlehorse.SleepNodeRun.maturation_time:type_name -> google.protobuf.Timestamp
	6,   // 183: littlehorse.EdgeCondition.comparator:type_name -> littlehorse.Comparator
	138, // 184: littlehorse.EdgeCondition.left:type_name -> littlehorse.VariableAssignment
	138, // 185: littlehorse.EdgeCondition.right:type_name -> littlehorse.VariableAssignment
	136, // 186: littlehorse.Edge.condition:type_name -> littlehorse.EdgeCondition
	100, // 187: littlehorse.VariableAssignment.literal_value:type_name -> littlehorse.VariableValue
	192, // 188: littlehorse.VariableAssignment.format_string:type_name -> littlehorse.VariableAssignment.FormatString
	7,   // 189: littlehorse.VariableMutation.operation:type_name -> littlehorse.VariableMutationType
	138, // 190: littlehorse.VariableMutation.source_variable:type_name -> littlehorse.VariableAssignment
	100, // 191: littlehorse.VariableMutation.literal_value:type_name -> littlehorse.VariableValue
	193, // 192: littlehorse.VariableMutation.node_output:type_name -> littlehorse.VariableMutation.NodeOutputSource
	138, // 193: littlehorse.SleepNode.raw_seconds:type_name -> littlehorse.VariableAssignment
	138, // 194: littlehorse.SleepNode.timestamp:type_name -> littlehorse.VariableAssignment
	138, // 195: littlehorse.SleepNode.iso_date:type_name -> littlehorse.VariableAssignment
	137, // 196: littlehorse.Node.outgoing_edges:type_name -> littlehorse.Edge
	139, // 197: littlehorse.Node.variable_mutations:type_name -> littlehorse.VariableMutation
	162, // 198: littlehorse.Node.failure_handlers:type_name -> littlehorse.FailureHandlerDef
	166, // 199: littlehorse.Node.entrypoint:type_name -> littlehorse.EntrypointNode
	167, // 200: littlehorse.Node.exit:type_name -> littlehorse.ExitNode
	164, // 201: littlehorse.Node.task:type_name -> littlehorse.TaskNode
	165, // 202: littlehorse.Node.external_event:type_name -> littlehorse.ExternalEventNode
	161, // 203: littlehorse.Node.start_thread:type_name -> littlehorse.StartThreadNode
	163, // 204: littlehorse.Node.wait_for_threads:type_name -> littlehorse.WaitForThreadsNode
	140, // 205: littlehorse.Node.nop:type_name -> littlehorse.NopNode
	141, // 206: littlehorse.Node.sleep:type_name -> littlehorse.SleepNode
	147, // 207: littlehorse.Node.user_task:type_name -> littlehorse.UserTaskNode
	4,   // 208: littlehorse.UserTaskField.type:type_name -> littlehorse.VariableType
	143, // 209: littlehorse.UserTaskDef.fields:type_name -> littlehorse.UserTaskField
	205, // 210: littlehorse.UserTaskDef.created_at:type_name -> google.protobuf.Timestamp
	195, // 211: littlehorse.UTActionTrigger.task:type_name -> littlehorse.UTActionTrigger.UTATask
	194, // 212: littlehorse.UTActionTrigger.cancel:type_name -> littlehorse.UTActionTrigger.UTACancel
	196, // 213: littlehorse.UTActionTrigger.reassign:type_name -> littlehorse.UTActionTrigger.UTAReassign
	138, // 214: littlehorse.UTActionTrigger.delay_seconds:type_name -> littlehorse.VariableAssignment
	11,  // 215: littlehorse.UTActionTrigger.hook:type_name -> littlehorse.UTActionTrigger.UTHook
	138, // 216: littlehorse.UserTaskNode.user_group:type_name -> littlehorse.VariableAssignment
	197, // 217: littlehorse.UserTaskNode.user:type_name -> littlehorse.UserTaskNode.UserAssignment
	146, // 218: littlehorse.UserTaskNode.actions:type_name -> littlehorse.UTActionTrigger
	138, // 219: littlehorse.UserTaskNode.notes:type_name -> littlehorse.VariableAssignment
	205, // 220: littlehorse.UserTaskEvent.time:type_name -> google.protobuf.Timestamp
	199, // 221: littlehorse.UserTaskEvent.task_executed:type_name -> littlehorse.UserTaskEvent.UTETaskExecuted
	200, // 222: littlehorse.UserTaskEvent.reassigned:type_name -> littlehorse.UserTaskEvent.UTEReassigned
	198, // 223: littlehorse.UserTaskEvent.cancelled:type_name -> littlehorse.UserTaskEvent.UTECancelled
	150, // 224: littlehorse.User.user_group:type_name -> littlehorse.UserGroup
	149, // 225: littlehorse.UserTaskRun.id:type_name -> littlehorse.UserTaskRunId
	144, // 226: littlehorse.UserTaskRun.user_task_def_id:type_name -> littlehorse.UserTaskDefId
	156, // 227: littlehorse.UserTaskRun.results:type_name -> littlehorse.UserTaskFieldResult
	8,   // 228: littlehorse.UserTaskRun.status:type_name -> littlehorse.UserTaskRunStatus
	148, // 229: littlehorse.UserTaskRun.events:type_name -> littlehorse.UserTaskEvent
	205, // 230: littlehorse.UserTaskRun.scheduled_time:type_name -> google.protobuf.Timestamp
	119, // 231: littlehorse.UserTaskRun.node_run_id:type_name -> littlehorse.NodeRunId
	150, // 232: littlehorse.UserTaskRun.user_group:type_name -> littlehorse.UserGroup
	151, // 233: littlehorse.UserTaskRun.user:type_name -> littlehorse.User
	149, // 234: littlehorse.AssignUserTaskRunRequest.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	151, // 235: littlehorse.AssignUserTaskRunRequest.user:type_name -> littlehorse.User
	150, // 236: littlehorse.AssignUserTaskRunRequest.user_group:type_name -> littlehorse.UserGroup
	0,   // 237: littlehorse.AssignUserTaskRunResponse.code:type_name -> littlehorse.LHResponseCode
	0,   // 238: littlehorse.CompleteUserTaskRunResponse.code:type_name -> littlehorse.LHResponseCode
	100, // 239: littlehorse.UserTaskFieldResult.value:type_name -> littlehorse.VariableValue
	156, // 240: littlehorse.UserTaskResult.fields:type_name -> littlehorse.UserTaskFieldResult
	157, // 241: littlehorse.SaveUserTaskRun.result:type_name -> littlehorse.UserTaskResult
	156, // 242: littlehorse.SaveUserTaskRun.results:type_name -> littlehorse.UserTaskFieldResult
	149, // 243: littlehorse.CompleteUserTaskRunRequest.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	157, // 244: littlehorse.CompleteUserTaskRunRequest.result:type_name -> littlehorse.UserTaskResult
	149, // 245: littlehorse.CancelUserTaskRunRequest.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	201, // 246: littlehorse.StartThreadNode.variables:type_name -> littlehorse.StartThreadNode.VariablesEntry
	202, // 247: littlehorse.WaitForThreadsNode.threads:type_name -> littlehorse.WaitForThreadsNode.ThreadToWaitFor
	138, // 248: littlehorse.TaskNode.variables:type_name -> littlehorse.VariableAssignment
	138, // 249: littlehorse.ExternalEventNode.timeout_seconds:type_name -> littlehorse.VariableAssignment
	168, // 250: littlehorse.ExitNode.failure_def:type_name -> littlehorse.FailureDef
	138, // 251: littlehorse.FailureDef.content:type_name -> littlehorse.VariableAssignment
	4,   // 252: littlehorse.VariableDef.type:type_name -> littlehorse.VariableType
	9,   // 253: littlehorse.VariableDef.index_type:type_name -> littlehorse.IndexType
	170, // 254: littlehorse.VariableDef.json_indexes:type_name -> littlehorse.JsonIndex
	100, // 255: littlehorse.VariableDef.default_value:type_name -> littlehorse.VariableValue
	9,   // 256: littlehorse.JsonIndex.index_type:type_name -> littlehorse.IndexType
	203, // 257: littlehorse.ThreadSpec.nodes:type_name -> littlehorse.ThreadSpec.NodesEntry
	169, // 258: littlehorse.ThreadSpec.variable_defs:type_name -> littlehorse.VariableDef
	171, // 259: littlehorse.ThreadSpec.interrupt_defs:type_name -> littlehorse.InterruptDef
	205, // 260: littlehorse.WfSpec.created_at:type_name -> google.protobuf.Timestamp
	1,   // 261: littlehorse.WfSpec.status:type_name -> littlehorse.LHStatus
	204, // 262: littlehorse.WfSpec.thread_specs:type_name -> littlehorse.WfSpec.ThreadSpecsEntry
	4,   // 263: littlehorse.OutputSchema.output_type:type_name -> littlehorse.VariableType
	169, // 264: littlehorse.TaskDef.input_vars:type_name -> littlehorse.VariableDef
	205, // 265: littlehorse.TaskDef.created_at:type_name -> google.protobuf.Timestamp
	205, // 266: littlehorse.ExternalEventDef.created_at:type_name -> google.protobuf.Timestamp
	205, // 267: littlehorse.TaskDefMetricsId.window_start:type_name -> google.protobuf.Timestamp
	10,  // 268: littlehorse.TaskDefMetricsId.window_type:type_name -> littlehorse.MetricsWindowLength
	205, // 269: littlehorse.TaskDefMetrics.window_start:type_name -> google.protobuf.Timestamp
	10,  // 270: littlehorse.TaskDefMetrics.type:type_name -> littlehorse.MetricsWindowLength
	205, // 271: littlehorse.WfSpecMetricsId.window_start:type_name -> google.protobuf.Timestamp
	10,  // 272: littlehorse.WfSpecMetricsId.window_type:type_name -> littlehorse.MetricsWindowLength
	205, // 273: littlehorse.WfSpecMetrics.window_start:type_name -> google.protobuf.Timestamp
	10,  // 274: littlehorse.WfSpecMetrics.type:type_name -> littlehorse.MetricsWindowLength
	172, // 275: littlehorse.PutWfSpecRequest.ThreadSpecsEntry.value:type_name -> littlehorse.ThreadSpec
	100, // 276: littlehorse.RunWfRequest.VariablesEntry.value:type_name -> littlehorse.VariableValue
	1,   // 277: littlehorse.SearchWfRunRequest.StatusAndSpecRequest.status:type_name -> littlehorse.LHStatus
	205, // 278: littlehorse.SearchWfRunRequest.StatusAndSpecRequest.earliest_start:type_name -> google.protobuf.Timestamp
	205, // 279: littlehorse.SearchWfRunRequest.StatusAndSpecRequest.latest_start:type_name -> google.protobuf.Timestamp
	205, // 280: littlehorse.SearchWfRunRequest.NameRequest.earliest_start:type_name -> google.protobuf.Timestamp
	205, // 281: littlehorse.SearchWfRunRequest.NameRequest.latest_start:type_name -> google.protobuf.Timestamp
	1,   // 282: littlehorse.SearchWfRunRequest.StatusAndNameRequest.status:type_name -> littlehorse.LHStatus
	205, // 283: littlehorse.SearchWfRunRequest.StatusAndNameRequest.earliest_start:type_name -> google.protobuf.Timestamp
	205, // 284: littlehorse.SearchWfRunRequest.StatusAndNameRequest.latest_start:type_name -> google.protobuf.Timestamp
	2,   // 285: littlehorse.SearchTaskRunRequest.StatusAndTaskDefRequest.status:type_name -> littlehorse.TaskStatus
	205, // 286: littlehorse.SearchTaskRunRequest.StatusAndTaskDefRequest.earliest_start:type_name -> google.protobuf.Timestamp
	205, // 287: littlehorse.SearchTaskRunRequest.StatusAndTaskDefRequest.latest_start:type_name -> google.protobuf.Timestamp
	205, // 288: littlehorse.SearchTaskRunRequest.ByTaskDefRequest.earliest_start:type_name -> google.protobuf.Timestamp
	205, // 289: littlehorse.SearchTaskRunRequest.ByTaskDefRequest.latest_start:type_name -> google.protobuf.Timestamp
	100, // 290: littlehorse.SearchVariableRequest.NameAndValueRequest.value:type_name -> littlehorse.VariableValue
	71,  // 291: littlehorse.TaskWorkerGroup.TaskWorkersEntry.value:type_name -> littlehorse.TaskWorkerMetadata
	205, // 292: littlehorse.WaitForThreadsRun.WaitForThread.thread_end_time:type_name -> google.protobuf.Timestamp
	1,   // 293: littlehorse.WaitForThreadsRun.WaitForThread.thread_status:type_name -> littlehorse.LHStatus
	138, // 294: littlehorse.VariableAssignment.FormatString.format:type_name -> littlehorse.VariableAssignment
	138, // 295: littlehorse.VariableAssignment.FormatString.args:type_name -> littlehorse.VariableAssignment
	164, // 296: littlehorse.UTActionTrigger.UTATask.task:type_name -> littlehorse.TaskNode
	139, // 297: littlehorse.UTActionTrigger.UTATask.mutations:type_name -> littlehorse.VariableMutation
	138, // 298: littlehorse.UTActionTrigger.UTAReassign.user_id:type_name -> littlehorse.VariableAssignment
	138, // 299: littlehorse.UTActionTrigger.UTAReassign.user_group:type_name -> littlehorse.VariableAssignment
	138, // 300: littlehorse.UserTaskNode.UserAssignment.user_id:type_name -> littlehorse.VariableAssignment
	138, // 301: littlehorse.UserTaskNode.UserAssignment.user_group:type_name -> littlehorse.VariableAssignment
	125, // 302: littlehorse.UserTaskEvent.UTETaskExecuted.task_run:type_name -> littlehorse.TaskRunId
	151, // 303: littlehorse.UserTaskEvent.UTEReassigned.old_user:type_name -> littlehorse.User
	150, // 304: littlehorse.UserTaskEvent.UTEReassigned.old_user_group:type_name -> littlehorse.UserGroup
	151, // 305: littlehorse.UserTaskEvent.UTEReassigned.new_user:type_name -> littlehorse.User
	150, // 306: littlehorse.UserTaskEvent.UTEReassigned.new_user_group:type_name -> littlehorse.UserGroup
	138, // 307: littlehorse.StartThreadNode.VariablesEntry.value:type_name -> littlehorse.VariableAssignment
	138, // 308: littlehorse.WaitForThreadsNode.ThreadToWaitFor.thread_run_number:type_name -> littlehorse.VariableAssignment
	142, // 309: littlehorse.ThreadSpec.NodesEntry.value:type_name -> littlehorse.Node
	172, // 310: littlehorse.WfSpec.ThreadSpecsEntry.value:type_name -> littlehorse.ThreadSpec
	21,  // 311: littlehorse.LHPublicApi.PutTaskDef:input_type -> littlehorse.PutTaskDefRequest
	13,  // 312: littlehorse.LHPublicApi.GetTaskDef:input_type -> littlehorse.TaskDefId
	27,  // 313: littlehorse.LHPublicApi.PutExternalEventDef:input_type -> littlehorse.PutExternalEventDefRequest
	14,  // 314: littlehorse.LHPublicApi.GetExternalEventDef:input_type -> littlehorse.ExternalEventDefId
	18,  // 315: littlehorse.LHPublicApi.PutWfSpec:input_type -> littlehorse.PutWfSpecRequest
	12,  // 316: littlehorse.LHPublicApi.GetWfSpec:input_type -> littlehorse.WfSpecId
	15,  // 317: littlehorse.LHPublicApi.GetLatestWfSpec:input_type -> littlehorse.GetLatestWfSpecRequest
	24,  // 318: littlehorse.LHPublicApi.PutUserTaskDef:input_type -> littlehorse.PutUserTaskDefRequest
	144, // 319: littlehorse.LHPublicApi.GetUserTaskDef:input_type -> littlehorse.UserTaskDefId
	16,  // 320: littlehorse.LHPublicApi.GetLatestUserTaskDef:input_type -> littlehorse.GetLatestUserTaskDefRequest
	149, // 321: littlehorse.LHPublicApi.GetUserTaskRun:input_type -> littlehorse.UserTaskRunId
	39,  // 322: littlehorse.LHPublicApi.RunWf:input_type -> littlehorse.RunWfRequest
	106, // 323: littlehorse.LHPublicApi.GetWfRun:input_type -> littlehorse.WfRunId
	153, // 324: littlehorse.LHPublicApi.AssignUserTaskRun:input_type -> littlehorse.AssignUserTaskRunRequest
	159, // 325: littlehorse.LHPublicApi.CompleteUserTaskRun:input_type -> littlehorse.CompleteUserTaskRunRequest
	119, // 326: littlehorse.LHPublicApi.GetNodeRun:input_type -> littlehorse.NodeRunId
	61,  // 327: littlehorse.LHPublicApi.ListNodeRuns:input_type -> littlehorse.ListNodeRunsRequest
	125, // 328: littlehorse.LHPublicApi.GetTaskRun:input_type -> littlehorse.TaskRunId
	101, // 329: littlehorse.LHPublicApi.GetVariable:input_type -> littlehorse.VariableId
	63,  // 330: littlehorse.LHPublicApi.ListVariables:input_type -> littlehorse.ListVariablesRequest
	36,  // 331: littlehorse.LHPublicApi.PutExternalEvent:input_type -> littlehorse.PutExternalEventRequest
	104, // 332: littlehorse.LHPublicApi.GetExternalEvent:input_type -> littlehorse.ExternalEventId
	65,  // 333: littlehorse.LHPublicApi.ListExternalEvents:input_type -> littlehorse.ListExternalEventsRequest
	41,  // 334: littlehorse.LHPublicApi.SearchWfRun:input_type -> littlehorse.SearchWfRunRequest
	45,  // 335: littlehorse.LHPublicApi.SearchNodeRun:input_type -> littlehorse.SearchNodeRunRequest
	43,  // 336: littlehorse.LHPublicApi.SearchTaskRun:input_type -> littlehorse.SearchTaskRunRequest
	47,  // 337: littlehorse.LHPublicApi.SearchUserTaskRun:input_type -> littlehorse.SearchUserTaskRunRequest
	49,  // 338: littlehorse.LHPublicApi.SearchVariable:input_type -> littlehorse.SearchVariableRequest
	51,  // 339: littlehorse.LHPublicApi.SearchTaskDef:input_type -> littlehorse.SearchTaskDefRequest
	53,  // 340: littlehorse.LHPublicApi.SearchUserTaskDef:input_type -> littlehorse.SearchUserTaskDefRequest
	55,  // 341: littlehorse.LHPublicApi.SearchWfSpec:input_type -> littlehorse.SearchWfSpecRequest
	57,  // 342: littlehorse.LHPublicApi.SearchExternalEventDef:input_type -> littlehorse.SearchExternalEventDefRequest
	59,  // 343: littlehorse.LHPublicApi.SearchExternalEvent:input_type -> littlehorse.SearchExternalEventRequest
	67,  // 344: littlehorse.LHPublicApi.RegisterTaskWorker:input_type -> littlehorse.RegisterTaskWorkerRequest
	74,  // 345: littlehorse.LHPublicApi.PollTask:input_type -> littlehorse.PollTaskRequest
	78,  // 346: littlehorse.LHPublicApi.ReportTask:input_type -> littlehorse.ReportTaskRun
	80,  // 347: littlehorse.LHPublicApi.StopWfRun:input_type -> littlehorse.StopWfRunRequest
	82,  // 348: littlehorse.LHPublicApi.ResumeWfRun:input_type -> littlehorse.ResumeWfRunRequest
	84,  // 349: littlehorse.LHPublicApi.DeleteWfRun:input_type -> littlehorse.DeleteWfRunRequest
	85,  // 350: littlehorse.LHPublicApi.DeleteTaskDef:input_type -> littlehorse.DeleteTaskDefRequest
	87,  // 351: littlehorse.LHPublicApi.DeleteWfSpec:input_type -> littlehorse.DeleteWfSpecRequest
	86,  // 352: littlehorse.LHPublicApi.DeleteUserTaskDef:input_type -> littlehorse.DeleteUserTaskDefRequest
	88,  // 353: littlehorse.LHPublicApi.DeleteExternalEventDef:input_type -> littlehorse.DeleteExternalEventDefRequest
	160, // 354: littlehorse.LHPublicApi.CancelUserTaskRun:input_type -> littlehorse.CancelUserTaskRunRequest
	90,  // 355: littlehorse.LHPublicApi.HealthCheck:input_type -> littlehorse.HealthCheckRequest
	92,  // 356: littlehorse.LHPublicApi.TaskDefMetrics:input_type -> littlehorse.TaskDefMetricsQueryRequest
	96,  // 357: littlehorse.LHPublicApi.WfSpecMetrics:input_type -> littlehorse.WfSpecMetricsQueryRequest
	94,  // 358: littlehorse.LHPublicApi.ListTaskDefMetrics:input_type -> littlehorse.ListTaskMetricsRequest
	98,  // 359: littlehorse.LHPublicApi.ListWfSpecMetrics:input_type -> littlehorse.ListWfMetricsRequest
	22,  // 360: littlehorse.LHPublicApi.PutTaskDef:output_type -> littlehorse.PutTaskDefResponse
	20,  // 361: littlehorse.LHPublicApi.GetTaskDef:output_type -> littlehorse.GetTaskDefResponse
	28,  // 362: littlehorse.LHPublicApi.PutExternalEventDef:output_type -> littlehorse.PutExternalEventDefResponse
	29,  // 363: littlehorse.LHPublicApi.GetExternalEventDef:output_type -> littlehorse.GetExternalEventDefResponse
	19,  // 364: littlehorse.LHPublicApi.PutWfSpec:output_type -> littlehorse.PutWfSpecResponse
	17,  // 365: littlehorse.LHPublicApi.GetWfSpec:output_type -> littlehorse.GetWfSpecResponse
	17,  // 366: littlehorse.LHPublicApi.GetLatestWfSpec:output_type -> littlehorse.GetWfSpecResponse
	25,  // 367: littlehorse.LHPublicApi.PutUserTaskDef:output_type -> littlehorse.PutUserTaskDefResponse
	26,  // 368: littlehorse.LHPublicApi.GetUserTaskDef:output_type -> littlehorse.GetUserTaskDefResponse
	26,  // 369: littlehorse.LHPublicApi.GetLatestUserTaskDef:output_type -> littlehorse.GetUserTaskDefResponse
	33,  // 370: littlehorse.LHPublicApi.GetUserTaskRun:output_type -> littlehorse.GetUserTaskRunResponse
	40,  // 371: littlehorse.LHPublicApi.RunWf:output_type -> littlehorse.RunWfResponse
	30,  // 372: littlehorse.LHPublicApi.GetWfRun:output_type -> littlehorse.GetWfRunResponse
	154, // 373: littlehorse.LHPublicApi.AssignUserTaskRun:output_type -> littlehorse.AssignUserTaskRunResponse
	155, // 374: littlehorse.LHPublicApi.CompleteUserTaskRun:output_type -> littlehorse.CompleteUserTaskRunResponse
	31,  // 375: littlehorse.LHPublicApi.GetNodeRun:output_type -> littlehorse.GetNodeRunResponse
	62,  // 376: littlehorse.LHPublicApi.ListNodeRuns:output_type -> littlehorse.ListNodeRunsResponse
	32,  // 377: littlehorse.LHPublicApi.GetTaskRun:output_type -> littlehorse.GetTaskRunResponse
	34,  // 378: littlehorse.LHPublicApi.GetVariable:output_type -> littlehorse.GetVariableResponse
	64,  // 379: littlehorse.LHPublicApi.ListVariables:output_type -> littlehorse.ListVariablesResponse
	38,  // 380: littlehorse.LHPublicApi.PutExternalEvent:output_type -> littlehorse.PutExternalEventResponse
	35,  // 381: littlehorse.LHPublicApi.GetExternalEvent:output_type -> littlehorse.GetExternalEventResponse
	66,  // 382: littlehorse.LHPublicApi.ListExternalEvents:output_type -> littlehorse.ListExternalEventsResponse
	42,  // 383: littlehorse.LHPublicApi.SearchWfRun:output_type -> littlehorse.SearchWfRunResponse
	46,  // 384: littlehorse.LHPublicApi.SearchNodeRun:output_type -> littlehorse.SearchNodeRunResponse
	44,  // 385: littlehorse.LHPublicApi.SearchTaskRun:output_type -> littlehorse.SearchTaskRunResponse
	48,  // 386: littlehorse.LHPublicApi.SearchUserTaskRun:output_type -> littlehorse.SearchUserTaskRunResponse
	50,  // 387: littlehorse.LHPublicApi.SearchVariable:output_type -> littlehorse.SearchVariableResponse
	52,  // 388: littlehorse.LHPublicApi.SearchTaskDef:output_type -> littlehorse.SearchTaskDefResponse
	54,  // 389: littlehorse.LHPublicApi.SearchUserTaskDef:output_type -> littlehorse.SearchUserTaskDefResponse
	56,  // 390: littlehorse.LHPublicApi.SearchWfSpec:output_type -> littlehorse.SearchWfSpecResponse
	58,  // 391: littlehorse.LHPublicApi.SearchExternalEventDef:output_type -> littlehorse.SearchExternalEventDefResponse
	60,  // 392: littlehorse.LHPublicApi.SearchExternalEvent:output_type -> littlehorse.SearchExternalEventResponse
	69,  // 393: littlehorse.LHPublicApi.RegisterTaskWorker:output_type -> littlehorse.RegisterTaskWorkerResponse
	77,  // 394: littlehorse.LHPublicApi.PollTask:output_type -> littlehorse.PollTaskResponse
	79,  // 395: littlehorse.LHPublicApi.ReportTask:output_type -> littlehorse.ReportTaskResponse
	81,  // 396: littlehorse.LHPublicApi.StopWfRun:output_type -> littlehorse.StopWfRunResponse
	83,  // 397: littlehorse.LHPublicApi.ResumeWfRun:output_type -> littlehorse.ResumeWfRunResponse
	89,  // 398: littlehorse.LHPublicApi.DeleteWfRun:output_type -> littlehorse.DeleteObjectResponse
	89,  // 399: littlehorse.LHPublicApi.DeleteTaskDef:output_type -> littlehorse.DeleteObjectResponse
	89,  // 400: littlehorse.LHPublicApi.DeleteWfSpec:output_type -> littlehorse.DeleteObjectResponse
	89,  // 401: littlehorse.LHPublicApi.DeleteUserTaskDef:output_type -> littlehorse.DeleteObjectResponse
	89,  // 402: littlehorse.LHPublicApi.DeleteExternalEventDef:output_type -> littlehorse.DeleteObjectResponse
	23,  // 403: littlehorse.LHPublicApi.CancelUserTaskRun:output_type -> littlehorse.CancelUserTaskRunResponse
	91,  // 404: littlehorse.LHPublicApi.HealthCheck:output_type -> littlehorse.HealthCheckResponse
	93,  // 405: littlehorse.LHPublicApi.TaskDefMetrics:output_type -> littlehorse.TaskDefMetricsResponse
	97,  // 406: littlehorse.LHPublicApi.WfSpecMetrics:output_type -> littlehorse.WfSpecMetricsResponse
	95,  // 407: littlehorse.LHPublicApi.ListTaskDefMetrics:output_type -> littlehorse.ListTaskMetricsResponse
	99,  // 408: littlehorse.LHPublicApi.ListWfSpecMetrics:output_type -> littlehorse.ListWfMetricsResponse
	360, // [360:409] is the sub-list for method output_type
	311, // [311:360] is the sub-list for method input_type
	311, // [311:311] is the sub-list for extension type_name
	311, // [311:311] is the sub-list for extension extendee
	0,   // [0:311] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventDefId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestWfSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestUserTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWfSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWfSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWfSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUserTaskRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUserTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUserTaskDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTaskDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalEventDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWfRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTaskRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVariableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExternalEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunWfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunWfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodeRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodeRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVariableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVariableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExternalEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExternalEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskWorkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerHeartBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskWorkerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRunSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWfRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWfRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeWfRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeWfRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWfRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWfSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExternalEventDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetricsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetricsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWfMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWfMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarNameAndVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfRunId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureBeingHandled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingInterrupt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingFailureHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingInterruptHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingFailureHandlerHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlingFailureHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentHalted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interrupted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadHaltReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRunId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskNodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRunId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNodeReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskTriggerContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskTriggerReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartThreadRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepNodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableMutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NopNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskDefId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskRunId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUserTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUserTaskRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteUserTaskRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskFieldResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserTaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteUserTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUserTaskRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartThreadNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureHandlerDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterruptDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetricsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetricsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunRequest_StatusAndSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunRequest_NameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunRequest_StatusAndNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunRequest_StatusAndTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunRequest_ByTaskDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVariableRequest_NameAndValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsRun_WaitForThread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAssignment_FormatString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableMutation_NodeOutputSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger_UTACancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger_UTATask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTrigger_UTAReassign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskNode_UserAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent_UTECancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent_UTETaskExecuted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEvent_UTEReassigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsNode_ThreadToWaitFor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*SearchWfRunRequest_StatusAndSpec)(nil),
		(*SearchWfRunRequest_Name)(nil),
		(*SearchWfRunRequest_StatusAndName)(nil),
	}
	file_service_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*SearchTaskRunRequest_StatusAndTaskDef)(nil),
		(*SearchTaskRunRequest_TaskDef)(nil),
	}
	file_service_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*SearchNodeRunRequest_WfRunId)(nil),
	}
	file_service_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*SearchUserTaskRunRequest_User)(nil),
		(*SearchUserTaskRunRequest_UserGroup)(nil),
	}
	file_service_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*SearchVariableRequest_WfRunId)(nil),
		(*SearchVariableRequest_Value)(nil),
	}
	file_service_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*SearchUserTaskDefRequest_Prefix)(nil),
		(*SearchUserTaskDefRequest_Name)(nil),
	}
	file_service_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*SearchWfSpecRequest_Name)(nil),
		(*SearchWfSpecRequest_Prefix)(nil),
		(*SearchWfSpecRequest_TaskDefName)(nil),
	}
	file_service_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*SearchExternalEventRequest_WfRunId)(nil),
		(*SearchExternalEventRequest_ExternalEventDefNameAndStatus)(nil),
	}
	file_service_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*TaskRunSource_TaskNode)(nil),
		(*TaskRunSource_UserTaskTrigger)(nil),
	}
	file_service_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[93].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[106].OneofWrappers = []interface{}{
		(*ThreadHaltReason_ParentHalted)(nil),
		(*ThreadHaltReason_Interrupted)(nil),
		(*ThreadHaltReason_PendingInterrupt)(nil),
		(*ThreadHaltReason_PendingFailure)(nil),
		(*ThreadHaltReason_HandlingFailure)(nil),
		(*ThreadHaltReason_ManualHalt)(nil),
	}
	file_service_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[109].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[110].OneofWrappers = []interface{}{
		(*NodeRun_Task)(nil),
		(*NodeRun_ExternalEvent)(nil),
		(*NodeRun_Entrypoint)(nil),
		(*NodeRun_Exit)(nil),
		(*NodeRun_StartThread)(nil),
		(*NodeRun_WaitThreads)(nil),
		(*NodeRun_Sleep)(nil),
		(*NodeRun_UserTask)(nil),
	}
	file_service_proto_msgTypes[111].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[116].OneofWrappers = []interface{}{
		(*UserTaskTriggerContext_UserGroup)(nil),
		(*UserTaskTriggerContext_User)(nil),
	}
	file_service_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[120].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[122].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[125].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[126].OneofWrappers = []interface{}{
		(*VariableAssignment_VariableName)(nil),
		(*VariableAssignment_LiteralValue)(nil),
		(*VariableAssignment_FormatString_)(nil),
	}
	file_service_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*VariableMutation_SourceVariable)(nil),
		(*VariableMutation_LiteralValue)(nil),
		(*VariableMutation_NodeOutput)(nil),
	}
	file_service_proto_msgTypes[129].OneofWrappers = []interface{}{
		(*SleepNode_RawSeconds)(nil),
		(*SleepNode_Timestamp)(nil),
		(*SleepNode_IsoDate)(nil),
	}
	file_service_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*Node_Entrypoint)(nil),
		(*Node_Exit)(nil),
		(*Node_Task)(nil),
		(*Node_ExternalEvent)(nil),
		(*Node_StartThread)(nil),
		(*Node_WaitForThreads)(nil),
		(*Node_Nop)(nil),
		(*Node_Sleep)(nil),
		(*Node_UserTask)(nil),
	}
	file_service_proto_msgTypes[131].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[133].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[134].OneofWrappers = []interface{}{
		(*UTActionTrigger_Task)(nil),
		(*UTActionTrigger_Cancel)(nil),
		(*UTActionTrigger_Reassign)(nil),
	}
	file_service_proto_msgTypes[135].OneofWrappers = []interface{}{
		(*UserTaskNode_UserGroup)(nil),
		(*UserTaskNode_User)(nil),
	}
	file_service_proto_msgTypes[136].OneofWrappers = []interface{}{
		(*UserTaskEvent_TaskExecuted)(nil),
		(*UserTaskEvent_Reassigned)(nil),
		(*UserTaskEvent_Cancelled)(nil),
	}
	file_service_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[140].OneofWrappers = []interface{}{
		(*UserTaskRun_UserGroup)(nil),
		(*UserTaskRun_User)(nil),
	}
	file_service_proto_msgTypes[141].OneofWrappers = []interface{}{
		(*AssignUserTaskRunRequest_User)(nil),
		(*AssignUserTaskRunRequest_UserGroup)(nil),
	}
	file_service_proto_msgTypes[142].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[143].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[150].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[155].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[156].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[157].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[171].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[172].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[173].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[174].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[175].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[176].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[177].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[179].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[181].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[184].OneofWrappers = []interface{}{
		(*UTActionTrigger_UTAReassign_UserId)(nil),
		(*UTActionTrigger_UTAReassign_UserGroup)(nil),
	}
	file_service_proto_msgTypes[185].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[188].OneofWrappers = []interface{}{
		(*UserTaskEvent_UTEReassigned_OldUser)(nil),
		(*UserTaskEvent_UTEReassigned_OldUserGroup)(nil),
		(*UserTaskEvent_UTEReassigned_NewUser)(nil),
		(*UserTaskEvent_UTEReassigned_NewUserGroup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   193,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
