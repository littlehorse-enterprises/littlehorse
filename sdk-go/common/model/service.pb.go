// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: service.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LHResponseCodePb int32

const (
	LHResponseCodePb_OK                         LHResponseCodePb = 0
	LHResponseCodePb_CONNECTION_ERROR           LHResponseCodePb = 1
	LHResponseCodePb_NOT_FOUND_ERROR            LHResponseCodePb = 2
	LHResponseCodePb_BAD_REQUEST_ERROR          LHResponseCodePb = 3
	LHResponseCodePb_VALIDATION_ERROR           LHResponseCodePb = 4
	LHResponseCodePb_ALREADY_EXISTS_ERROR       LHResponseCodePb = 5
	LHResponseCodePb_REPORTED_BUT_NOT_PROCESSED LHResponseCodePb = 6
)

// Enum value maps for LHResponseCodePb.
var (
	LHResponseCodePb_name = map[int32]string{
		0: "OK",
		1: "CONNECTION_ERROR",
		2: "NOT_FOUND_ERROR",
		3: "BAD_REQUEST_ERROR",
		4: "VALIDATION_ERROR",
		5: "ALREADY_EXISTS_ERROR",
		6: "REPORTED_BUT_NOT_PROCESSED",
	}
	LHResponseCodePb_value = map[string]int32{
		"OK":                         0,
		"CONNECTION_ERROR":           1,
		"NOT_FOUND_ERROR":            2,
		"BAD_REQUEST_ERROR":          3,
		"VALIDATION_ERROR":           4,
		"ALREADY_EXISTS_ERROR":       5,
		"REPORTED_BUT_NOT_PROCESSED": 6,
	}
)

func (x LHResponseCodePb) Enum() *LHResponseCodePb {
	p := new(LHResponseCodePb)
	*p = x
	return p
}

func (x LHResponseCodePb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LHResponseCodePb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (LHResponseCodePb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x LHResponseCodePb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LHResponseCodePb.Descriptor instead.
func (LHResponseCodePb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

type LHStatusPb int32

const (
	LHStatusPb_STARTING  LHStatusPb = 0
	LHStatusPb_RUNNING   LHStatusPb = 1
	LHStatusPb_COMPLETED LHStatusPb = 2
	LHStatusPb_HALTING   LHStatusPb = 3
	LHStatusPb_HALTED    LHStatusPb = 4
	LHStatusPb_ERROR     LHStatusPb = 5
)

// Enum value maps for LHStatusPb.
var (
	LHStatusPb_name = map[int32]string{
		0: "STARTING",
		1: "RUNNING",
		2: "COMPLETED",
		3: "HALTING",
		4: "HALTED",
		5: "ERROR",
	}
	LHStatusPb_value = map[string]int32{
		"STARTING":  0,
		"RUNNING":   1,
		"COMPLETED": 2,
		"HALTING":   3,
		"HALTED":    4,
		"ERROR":     5,
	}
)

func (x LHStatusPb) Enum() *LHStatusPb {
	p := new(LHStatusPb)
	*p = x
	return p
}

func (x LHStatusPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LHStatusPb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (LHStatusPb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x LHStatusPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LHStatusPb.Descriptor instead.
func (LHStatusPb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

type TaskStatusPb int32

const (
	TaskStatusPb_TASK_SCHEDULED                TaskStatusPb = 0
	TaskStatusPb_TASK_RUNNING                  TaskStatusPb = 1
	TaskStatusPb_TASK_SUCCESS                  TaskStatusPb = 2
	TaskStatusPb_TASK_FAILED                   TaskStatusPb = 3
	TaskStatusPb_TASK_TIMEOUT                  TaskStatusPb = 4
	TaskStatusPb_TASK_OUTPUT_SERIALIZING_ERROR TaskStatusPb = 5
	TaskStatusPb_TASK_INPUT_VAR_SUB_ERROR      TaskStatusPb = 6
)

// Enum value maps for TaskStatusPb.
var (
	TaskStatusPb_name = map[int32]string{
		0: "TASK_SCHEDULED",
		1: "TASK_RUNNING",
		2: "TASK_SUCCESS",
		3: "TASK_FAILED",
		4: "TASK_TIMEOUT",
		5: "TASK_OUTPUT_SERIALIZING_ERROR",
		6: "TASK_INPUT_VAR_SUB_ERROR",
	}
	TaskStatusPb_value = map[string]int32{
		"TASK_SCHEDULED":                0,
		"TASK_RUNNING":                  1,
		"TASK_SUCCESS":                  2,
		"TASK_FAILED":                   3,
		"TASK_TIMEOUT":                  4,
		"TASK_OUTPUT_SERIALIZING_ERROR": 5,
		"TASK_INPUT_VAR_SUB_ERROR":      6,
	}
)

func (x TaskStatusPb) Enum() *TaskStatusPb {
	p := new(TaskStatusPb)
	*p = x
	return p
}

func (x TaskStatusPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatusPb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[2].Descriptor()
}

func (TaskStatusPb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[2]
}

func (x TaskStatusPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatusPb.Descriptor instead.
func (TaskStatusPb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

type LHHealthResultPb int32

const (
	LHHealthResultPb_LH_HEALTH_RUNNING     LHHealthResultPb = 0
	LHHealthResultPb_LH_HEALTH_REBALANCING LHHealthResultPb = 1
	LHHealthResultPb_LH_HEALTH_ERROR       LHHealthResultPb = 2
)

// Enum value maps for LHHealthResultPb.
var (
	LHHealthResultPb_name = map[int32]string{
		0: "LH_HEALTH_RUNNING",
		1: "LH_HEALTH_REBALANCING",
		2: "LH_HEALTH_ERROR",
	}
	LHHealthResultPb_value = map[string]int32{
		"LH_HEALTH_RUNNING":     0,
		"LH_HEALTH_REBALANCING": 1,
		"LH_HEALTH_ERROR":       2,
	}
)

func (x LHHealthResultPb) Enum() *LHHealthResultPb {
	p := new(LHHealthResultPb)
	*p = x
	return p
}

func (x LHHealthResultPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LHHealthResultPb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[3].Descriptor()
}

func (LHHealthResultPb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[3]
}

func (x LHHealthResultPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LHHealthResultPb.Descriptor instead.
func (LHHealthResultPb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

// Variable
type VariableTypePb int32

const (
	VariableTypePb_JSON_OBJ VariableTypePb = 0
	VariableTypePb_JSON_ARR VariableTypePb = 1
	VariableTypePb_DOUBLE   VariableTypePb = 2
	VariableTypePb_BOOL     VariableTypePb = 3
	VariableTypePb_STR      VariableTypePb = 4
	VariableTypePb_INT      VariableTypePb = 5
	VariableTypePb_BYTES    VariableTypePb = 6
	VariableTypePb_NULL     VariableTypePb = 7
)

// Enum value maps for VariableTypePb.
var (
	VariableTypePb_name = map[int32]string{
		0: "JSON_OBJ",
		1: "JSON_ARR",
		2: "DOUBLE",
		3: "BOOL",
		4: "STR",
		5: "INT",
		6: "BYTES",
		7: "NULL",
	}
	VariableTypePb_value = map[string]int32{
		"JSON_OBJ": 0,
		"JSON_ARR": 1,
		"DOUBLE":   2,
		"BOOL":     3,
		"STR":      4,
		"INT":      5,
		"BYTES":    6,
		"NULL":     7,
	}
)

func (x VariableTypePb) Enum() *VariableTypePb {
	p := new(VariableTypePb)
	*p = x
	return p
}

func (x VariableTypePb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableTypePb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[4].Descriptor()
}

func (VariableTypePb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[4]
}

func (x VariableTypePb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableTypePb.Descriptor instead.
func (VariableTypePb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

type ThreadTypePb int32

const (
	ThreadTypePb_ENTRYPOINT      ThreadTypePb = 0
	ThreadTypePb_CHILD           ThreadTypePb = 1
	ThreadTypePb_INTERRUPT       ThreadTypePb = 2
	ThreadTypePb_FAILURE_HANDLER ThreadTypePb = 3
)

// Enum value maps for ThreadTypePb.
var (
	ThreadTypePb_name = map[int32]string{
		0: "ENTRYPOINT",
		1: "CHILD",
		2: "INTERRUPT",
		3: "FAILURE_HANDLER",
	}
	ThreadTypePb_value = map[string]int32{
		"ENTRYPOINT":      0,
		"CHILD":           1,
		"INTERRUPT":       2,
		"FAILURE_HANDLER": 3,
	}
)

func (x ThreadTypePb) Enum() *ThreadTypePb {
	p := new(ThreadTypePb)
	*p = x
	return p
}

func (x ThreadTypePb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThreadTypePb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[5].Descriptor()
}

func (ThreadTypePb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[5]
}

func (x ThreadTypePb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThreadTypePb.Descriptor instead.
func (ThreadTypePb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

type ComparatorPb int32

const (
	ComparatorPb_LESS_THAN       ComparatorPb = 0
	ComparatorPb_GREATER_THAN    ComparatorPb = 1
	ComparatorPb_LESS_THAN_EQ    ComparatorPb = 2
	ComparatorPb_GREATER_THAN_EQ ComparatorPb = 3
	ComparatorPb_EQUALS          ComparatorPb = 4
	ComparatorPb_NOT_EQUALS      ComparatorPb = 5
	ComparatorPb_IN              ComparatorPb = 6
	ComparatorPb_NOT_IN          ComparatorPb = 7
)

// Enum value maps for ComparatorPb.
var (
	ComparatorPb_name = map[int32]string{
		0: "LESS_THAN",
		1: "GREATER_THAN",
		2: "LESS_THAN_EQ",
		3: "GREATER_THAN_EQ",
		4: "EQUALS",
		5: "NOT_EQUALS",
		6: "IN",
		7: "NOT_IN",
	}
	ComparatorPb_value = map[string]int32{
		"LESS_THAN":       0,
		"GREATER_THAN":    1,
		"LESS_THAN_EQ":    2,
		"GREATER_THAN_EQ": 3,
		"EQUALS":          4,
		"NOT_EQUALS":      5,
		"IN":              6,
		"NOT_IN":          7,
	}
)

func (x ComparatorPb) Enum() *ComparatorPb {
	p := new(ComparatorPb)
	*p = x
	return p
}

func (x ComparatorPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparatorPb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[6].Descriptor()
}

func (ComparatorPb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[6]
}

func (x ComparatorPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparatorPb.Descriptor instead.
func (ComparatorPb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

type VariableMutationTypePb int32

const (
	VariableMutationTypePb_ASSIGN            VariableMutationTypePb = 0
	VariableMutationTypePb_ADD               VariableMutationTypePb = 1
	VariableMutationTypePb_EXTEND            VariableMutationTypePb = 2
	VariableMutationTypePb_SUBTRACT          VariableMutationTypePb = 3
	VariableMutationTypePb_MULTIPLY          VariableMutationTypePb = 4
	VariableMutationTypePb_DIVIDE            VariableMutationTypePb = 5
	VariableMutationTypePb_REMOVE_IF_PRESENT VariableMutationTypePb = 6
	VariableMutationTypePb_REMOVE_INDEX      VariableMutationTypePb = 7
	VariableMutationTypePb_REMOVE_KEY        VariableMutationTypePb = 8
)

// Enum value maps for VariableMutationTypePb.
var (
	VariableMutationTypePb_name = map[int32]string{
		0: "ASSIGN",
		1: "ADD",
		2: "EXTEND",
		3: "SUBTRACT",
		4: "MULTIPLY",
		5: "DIVIDE",
		6: "REMOVE_IF_PRESENT",
		7: "REMOVE_INDEX",
		8: "REMOVE_KEY",
	}
	VariableMutationTypePb_value = map[string]int32{
		"ASSIGN":            0,
		"ADD":               1,
		"EXTEND":            2,
		"SUBTRACT":          3,
		"MULTIPLY":          4,
		"DIVIDE":            5,
		"REMOVE_IF_PRESENT": 6,
		"REMOVE_INDEX":      7,
		"REMOVE_KEY":        8,
	}
)

func (x VariableMutationTypePb) Enum() *VariableMutationTypePb {
	p := new(VariableMutationTypePb)
	*p = x
	return p
}

func (x VariableMutationTypePb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableMutationTypePb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[7].Descriptor()
}

func (VariableMutationTypePb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[7]
}

func (x VariableMutationTypePb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableMutationTypePb.Descriptor instead.
func (VariableMutationTypePb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

type UserTaskRunStatusPb int32

const (
	UserTaskRunStatusPb_UNASSIGNED           UserTaskRunStatusPb = 0
	UserTaskRunStatusPb_ASSIGNED_NOT_CLAIMED UserTaskRunStatusPb = 1
	UserTaskRunStatusPb_CLAIMED              UserTaskRunStatusPb = 2
	UserTaskRunStatusPb_DONE                 UserTaskRunStatusPb = 3
	UserTaskRunStatusPb_CANCELLED            UserTaskRunStatusPb = 4
)

// Enum value maps for UserTaskRunStatusPb.
var (
	UserTaskRunStatusPb_name = map[int32]string{
		0: "UNASSIGNED",
		1: "ASSIGNED_NOT_CLAIMED",
		2: "CLAIMED",
		3: "DONE",
		4: "CANCELLED",
	}
	UserTaskRunStatusPb_value = map[string]int32{
		"UNASSIGNED":           0,
		"ASSIGNED_NOT_CLAIMED": 1,
		"CLAIMED":              2,
		"DONE":                 3,
		"CANCELLED":            4,
	}
)

func (x UserTaskRunStatusPb) Enum() *UserTaskRunStatusPb {
	p := new(UserTaskRunStatusPb)
	*p = x
	return p
}

func (x UserTaskRunStatusPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserTaskRunStatusPb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[8].Descriptor()
}

func (UserTaskRunStatusPb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[8]
}

func (x UserTaskRunStatusPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserTaskRunStatusPb.Descriptor instead.
func (UserTaskRunStatusPb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

type IndexTypePb int32

const (
	IndexTypePb_LOCAL_INDEX  IndexTypePb = 0
	IndexTypePb_REMOTE_INDEX IndexTypePb = 1
)

// Enum value maps for IndexTypePb.
var (
	IndexTypePb_name = map[int32]string{
		0: "LOCAL_INDEX",
		1: "REMOTE_INDEX",
	}
	IndexTypePb_value = map[string]int32{
		"LOCAL_INDEX":  0,
		"REMOTE_INDEX": 1,
	}
)

func (x IndexTypePb) Enum() *IndexTypePb {
	p := new(IndexTypePb)
	*p = x
	return p
}

func (x IndexTypePb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexTypePb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[9].Descriptor()
}

func (IndexTypePb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[9]
}

func (x IndexTypePb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexTypePb.Descriptor instead.
func (IndexTypePb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

// Metrics
type MetricsWindowLengthPb int32

const (
	MetricsWindowLengthPb_MINUTES_5 MetricsWindowLengthPb = 0
	MetricsWindowLengthPb_HOURS_2   MetricsWindowLengthPb = 1
	MetricsWindowLengthPb_DAYS_1    MetricsWindowLengthPb = 2
)

// Enum value maps for MetricsWindowLengthPb.
var (
	MetricsWindowLengthPb_name = map[int32]string{
		0: "MINUTES_5",
		1: "HOURS_2",
		2: "DAYS_1",
	}
	MetricsWindowLengthPb_value = map[string]int32{
		"MINUTES_5": 0,
		"HOURS_2":   1,
		"DAYS_1":    2,
	}
)

func (x MetricsWindowLengthPb) Enum() *MetricsWindowLengthPb {
	p := new(MetricsWindowLengthPb)
	*p = x
	return p
}

func (x MetricsWindowLengthPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsWindowLengthPb) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[10].Descriptor()
}

func (MetricsWindowLengthPb) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[10]
}

func (x MetricsWindowLengthPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsWindowLengthPb.Descriptor instead.
func (MetricsWindowLengthPb) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

type WfSpecIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *WfSpecIdPb) Reset() {
	*x = WfSpecIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecIdPb) ProtoMessage() {}

func (x *WfSpecIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecIdPb.ProtoReflect.Descriptor instead.
func (*WfSpecIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *WfSpecIdPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WfSpecIdPb) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type TaskDefIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TaskDefIdPb) Reset() {
	*x = TaskDefIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefIdPb) ProtoMessage() {}

func (x *TaskDefIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefIdPb.ProtoReflect.Descriptor instead.
func (*TaskDefIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *TaskDefIdPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExternalEventDefIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExternalEventDefIdPb) Reset() {
	*x = ExternalEventDefIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventDefIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventDefIdPb) ProtoMessage() {}

func (x *ExternalEventDefIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventDefIdPb.ProtoReflect.Descriptor instead.
func (*ExternalEventDefIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalEventDefIdPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLatestWfSpecPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLatestWfSpecPb) Reset() {
	*x = GetLatestWfSpecPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestWfSpecPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestWfSpecPb) ProtoMessage() {}

func (x *GetLatestWfSpecPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestWfSpecPb.ProtoReflect.Descriptor instead.
func (*GetLatestWfSpecPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestWfSpecPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLatestUserTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLatestUserTaskDefPb) Reset() {
	*x = GetLatestUserTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestUserTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestUserTaskDefPb) ProtoMessage() {}

func (x *GetLatestUserTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestUserTaskDefPb.ProtoReflect.Descriptor instead.
func (*GetLatestUserTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLatestUserTaskDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetWfSpecReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfSpecPb        `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetWfSpecReplyPb) Reset() {
	*x = GetWfSpecReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWfSpecReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWfSpecReplyPb) ProtoMessage() {}

func (x *GetWfSpecReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWfSpecReplyPb.ProtoReflect.Descriptor instead.
func (*GetWfSpecReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetWfSpecReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetWfSpecReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetWfSpecReplyPb) GetResult() *WfSpecPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutWfSpecPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ThreadSpecs          map[string]*ThreadSpecPb `protobuf:"bytes,5,rep,name=thread_specs,json=threadSpecs,proto3" json:"thread_specs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EntrypointThreadName string                   `protobuf:"bytes,6,opt,name=entrypoint_thread_name,json=entrypointThreadName,proto3" json:"entrypoint_thread_name,omitempty"`
	RetentionHours       *int32                   `protobuf:"varint,7,opt,name=retention_hours,json=retentionHours,proto3,oneof" json:"retention_hours,omitempty"`
}

func (x *PutWfSpecPb) Reset() {
	*x = PutWfSpecPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWfSpecPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWfSpecPb) ProtoMessage() {}

func (x *PutWfSpecPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWfSpecPb.ProtoReflect.Descriptor instead.
func (*PutWfSpecPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *PutWfSpecPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutWfSpecPb) GetThreadSpecs() map[string]*ThreadSpecPb {
	if x != nil {
		return x.ThreadSpecs
	}
	return nil
}

func (x *PutWfSpecPb) GetEntrypointThreadName() string {
	if x != nil {
		return x.EntrypointThreadName
	}
	return ""
}

func (x *PutWfSpecPb) GetRetentionHours() int32 {
	if x != nil && x.RetentionHours != nil {
		return *x.RetentionHours
	}
	return 0
}

type PutWfSpecReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfSpecPb        `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutWfSpecReplyPb) Reset() {
	*x = PutWfSpecReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWfSpecReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWfSpecReplyPb) ProtoMessage() {}

func (x *PutWfSpecReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWfSpecReplyPb.ProtoReflect.Descriptor instead.
func (*PutWfSpecReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *PutWfSpecReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *PutWfSpecReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutWfSpecReplyPb) GetResult() *WfSpecPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetTaskDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskDefPb       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetTaskDefReplyPb) Reset() {
	*x = GetTaskDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDefReplyPb) ProtoMessage() {}

func (x *GetTaskDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDefReplyPb.ProtoReflect.Descriptor instead.
func (*GetTaskDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetTaskDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetTaskDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetTaskDefReplyPb) GetResult() *TaskDefPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputVars []*VariableDefPb `protobuf:"bytes,2,rep,name=input_vars,json=inputVars,proto3" json:"input_vars,omitempty"`
}

func (x *PutTaskDefPb) Reset() {
	*x = PutTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskDefPb) ProtoMessage() {}

func (x *PutTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskDefPb.ProtoReflect.Descriptor instead.
func (*PutTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *PutTaskDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutTaskDefPb) GetInputVars() []*VariableDefPb {
	if x != nil {
		return x.InputVars
	}
	return nil
}

type PutTaskDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskDefPb       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutTaskDefReplyPb) Reset() {
	*x = PutTaskDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskDefReplyPb) ProtoMessage() {}

func (x *PutTaskDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskDefReplyPb.ProtoReflect.Descriptor instead.
func (*PutTaskDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *PutTaskDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *PutTaskDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutTaskDefReplyPb) GetResult() *TaskDefPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutUserTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields      []*UserTaskFieldPb `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Description *string            `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *PutUserTaskDefPb) Reset() {
	*x = PutUserTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUserTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUserTaskDefPb) ProtoMessage() {}

func (x *PutUserTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUserTaskDefPb.ProtoReflect.Descriptor instead.
func (*PutUserTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *PutUserTaskDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutUserTaskDefPb) GetFields() []*UserTaskFieldPb {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PutUserTaskDefPb) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type PutUserTaskDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *UserTaskDefPb   `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutUserTaskDefReplyPb) Reset() {
	*x = PutUserTaskDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUserTaskDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUserTaskDefReplyPb) ProtoMessage() {}

func (x *PutUserTaskDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUserTaskDefReplyPb.ProtoReflect.Descriptor instead.
func (*PutUserTaskDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *PutUserTaskDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *PutUserTaskDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutUserTaskDefReplyPb) GetResult() *UserTaskDefPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetUserTaskDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *UserTaskDefPb   `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetUserTaskDefReplyPb) Reset() {
	*x = GetUserTaskDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTaskDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskDefReplyPb) ProtoMessage() {}

func (x *GetUserTaskDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskDefReplyPb.ProtoReflect.Descriptor instead.
func (*GetUserTaskDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserTaskDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetUserTaskDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetUserTaskDefReplyPb) GetResult() *UserTaskDefPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutExternalEventDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RetentionHours *int32 `protobuf:"varint,2,opt,name=retention_hours,json=retentionHours,proto3,oneof" json:"retention_hours,omitempty"`
}

func (x *PutExternalEventDefPb) Reset() {
	*x = PutExternalEventDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventDefPb) ProtoMessage() {}

func (x *PutExternalEventDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventDefPb.ProtoReflect.Descriptor instead.
func (*PutExternalEventDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *PutExternalEventDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutExternalEventDefPb) GetRetentionHours() int32 {
	if x != nil && x.RetentionHours != nil {
		return *x.RetentionHours
	}
	return 0
}

type PutExternalEventDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb    `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string             `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEventDefPb `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutExternalEventDefReplyPb) Reset() {
	*x = PutExternalEventDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventDefReplyPb) ProtoMessage() {}

func (x *PutExternalEventDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventDefReplyPb.ProtoReflect.Descriptor instead.
func (*PutExternalEventDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *PutExternalEventDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *PutExternalEventDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutExternalEventDefReplyPb) GetResult() *ExternalEventDefPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetExternalEventDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb    `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string             `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEventDefPb `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetExternalEventDefReplyPb) Reset() {
	*x = GetExternalEventDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalEventDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalEventDefReplyPb) ProtoMessage() {}

func (x *GetExternalEventDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalEventDefReplyPb.ProtoReflect.Descriptor instead.
func (*GetExternalEventDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetExternalEventDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetExternalEventDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetExternalEventDefReplyPb) GetResult() *ExternalEventDefPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetWfRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfRunPb         `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetWfRunReplyPb) Reset() {
	*x = GetWfRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWfRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWfRunReplyPb) ProtoMessage() {}

func (x *GetWfRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWfRunReplyPb.ProtoReflect.Descriptor instead.
func (*GetWfRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetWfRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetWfRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetWfRunReplyPb) GetResult() *WfRunPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetNodeRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *NodeRunPb       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetNodeRunReplyPb) Reset() {
	*x = GetNodeRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRunReplyPb) ProtoMessage() {}

func (x *GetNodeRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRunReplyPb.ProtoReflect.Descriptor instead.
func (*GetNodeRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetNodeRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetNodeRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetNodeRunReplyPb) GetResult() *NodeRunPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetTaskRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskRunPb       `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetTaskRunReplyPb) Reset() {
	*x = GetTaskRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunReplyPb) ProtoMessage() {}

func (x *GetTaskRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunReplyPb.ProtoReflect.Descriptor instead.
func (*GetTaskRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetTaskRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetTaskRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetTaskRunReplyPb) GetResult() *TaskRunPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetUserTaskRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *UserTaskRunPb   `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetUserTaskRunReplyPb) Reset() {
	*x = GetUserTaskRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTaskRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskRunReplyPb) ProtoMessage() {}

func (x *GetUserTaskRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskRunReplyPb.ProtoReflect.Descriptor instead.
func (*GetUserTaskRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetUserTaskRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetUserTaskRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetUserTaskRunReplyPb) GetResult() *UserTaskRunPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetVariableReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *VariablePb      `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetVariableReplyPb) Reset() {
	*x = GetVariableReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVariableReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariableReplyPb) ProtoMessage() {}

func (x *GetVariableReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariableReplyPb.ProtoReflect.Descriptor instead.
func (*GetVariableReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetVariableReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetVariableReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetVariableReplyPb) GetResult() *VariablePb {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetExternalEventReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEventPb `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetExternalEventReplyPb) Reset() {
	*x = GetExternalEventReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalEventReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalEventReplyPb) ProtoMessage() {}

func (x *GetExternalEventReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalEventReplyPb.ProtoReflect.Descriptor instead.
func (*GetExternalEventReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetExternalEventReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *GetExternalEventReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetExternalEventReplyPb) GetResult() *ExternalEventPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type PutExternalEventPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string           `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string           `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 *string          `protobuf:"bytes,3,opt,name=guid,proto3,oneof" json:"guid,omitempty"`
	Content              *VariableValuePb `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ThreadRunNumber      *int32           `protobuf:"varint,6,opt,name=thread_run_number,json=threadRunNumber,proto3,oneof" json:"thread_run_number,omitempty"`
	NodeRunPosition      *int32           `protobuf:"varint,7,opt,name=node_run_position,json=nodeRunPosition,proto3,oneof" json:"node_run_position,omitempty"`
}

func (x *PutExternalEventPb) Reset() {
	*x = PutExternalEventPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventPb) ProtoMessage() {}

func (x *PutExternalEventPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventPb.ProtoReflect.Descriptor instead.
func (*PutExternalEventPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

func (x *PutExternalEventPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *PutExternalEventPb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *PutExternalEventPb) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *PutExternalEventPb) GetContent() *VariableValuePb {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PutExternalEventPb) GetThreadRunNumber() int32 {
	if x != nil && x.ThreadRunNumber != nil {
		return *x.ThreadRunNumber
	}
	return 0
}

func (x *PutExternalEventPb) GetNodeRunPosition() int32 {
	if x != nil && x.NodeRunPosition != nil {
		return *x.NodeRunPosition
	}
	return 0
}

type DeleteExternalEventPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 string `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *DeleteExternalEventPb) Reset() {
	*x = DeleteExternalEventPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExternalEventPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExternalEventPb) ProtoMessage() {}

func (x *DeleteExternalEventPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExternalEventPb.ProtoReflect.Descriptor instead.
func (*DeleteExternalEventPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteExternalEventPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *DeleteExternalEventPb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *DeleteExternalEventPb) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type PutExternalEventReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ExternalEventPb `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PutExternalEventReplyPb) Reset() {
	*x = PutExternalEventReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutExternalEventReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutExternalEventReplyPb) ProtoMessage() {}

func (x *PutExternalEventReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutExternalEventReplyPb.ProtoReflect.Descriptor instead.
func (*PutExternalEventReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *PutExternalEventReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *PutExternalEventReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PutExternalEventReplyPb) GetResult() *ExternalEventPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type RunWfPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                      `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion *int32                      `protobuf:"varint,2,opt,name=wf_spec_version,json=wfSpecVersion,proto3,oneof" json:"wf_spec_version,omitempty"`
	Variables     map[string]*VariableValuePb `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id            *string                     `protobuf:"bytes,4,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *RunWfPb) Reset() {
	*x = RunWfPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunWfPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunWfPb) ProtoMessage() {}

func (x *RunWfPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunWfPb.ProtoReflect.Descriptor instead.
func (*RunWfPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *RunWfPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *RunWfPb) GetWfSpecVersion() int32 {
	if x != nil && x.WfSpecVersion != nil {
		return *x.WfSpecVersion
	}
	return 0
}

func (x *RunWfPb) GetVariables() map[string]*VariableValuePb {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *RunWfPb) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type RunWfReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message       *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	WfSpecVersion *int32           `protobuf:"varint,3,opt,name=wf_spec_version,json=wfSpecVersion,proto3,oneof" json:"wf_spec_version,omitempty"`
	WfRunId       *string          `protobuf:"bytes,4,opt,name=wf_run_id,json=wfRunId,proto3,oneof" json:"wf_run_id,omitempty"`
}

func (x *RunWfReplyPb) Reset() {
	*x = RunWfReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunWfReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunWfReplyPb) ProtoMessage() {}

func (x *RunWfReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunWfReplyPb.ProtoReflect.Descriptor instead.
func (*RunWfReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

func (x *RunWfReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *RunWfReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *RunWfReplyPb) GetWfSpecVersion() int32 {
	if x != nil && x.WfSpecVersion != nil {
		return *x.WfSpecVersion
	}
	return 0
}

func (x *RunWfReplyPb) GetWfRunId() string {
	if x != nil && x.WfRunId != nil {
		return *x.WfRunId
	}
	return ""
}

type SearchWfRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to WfrunCriteria:
	//
	//	*SearchWfRunPb_StatusAndSpec
	//	*SearchWfRunPb_Name
	//	*SearchWfRunPb_StatusAndName
	WfrunCriteria isSearchWfRunPb_WfrunCriteria `protobuf_oneof:"wfrun_criteria"`
}

func (x *SearchWfRunPb) Reset() {
	*x = SearchWfRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunPb) ProtoMessage() {}

func (x *SearchWfRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunPb.ProtoReflect.Descriptor instead.
func (*SearchWfRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *SearchWfRunPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchWfRunPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchWfRunPb) GetWfrunCriteria() isSearchWfRunPb_WfrunCriteria {
	if m != nil {
		return m.WfrunCriteria
	}
	return nil
}

func (x *SearchWfRunPb) GetStatusAndSpec() *SearchWfRunPb_StatusAndSpecPb {
	if x, ok := x.GetWfrunCriteria().(*SearchWfRunPb_StatusAndSpec); ok {
		return x.StatusAndSpec
	}
	return nil
}

func (x *SearchWfRunPb) GetName() *SearchWfRunPb_NamePb {
	if x, ok := x.GetWfrunCriteria().(*SearchWfRunPb_Name); ok {
		return x.Name
	}
	return nil
}

func (x *SearchWfRunPb) GetStatusAndName() *SearchWfRunPb_StatusAndNamePb {
	if x, ok := x.GetWfrunCriteria().(*SearchWfRunPb_StatusAndName); ok {
		return x.StatusAndName
	}
	return nil
}

type isSearchWfRunPb_WfrunCriteria interface {
	isSearchWfRunPb_WfrunCriteria()
}

type SearchWfRunPb_StatusAndSpec struct {
	StatusAndSpec *SearchWfRunPb_StatusAndSpecPb `protobuf:"bytes,3,opt,name=status_and_spec,json=statusAndSpec,proto3,oneof"`
}

type SearchWfRunPb_Name struct {
	Name *SearchWfRunPb_NamePb `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

type SearchWfRunPb_StatusAndName struct {
	StatusAndName *SearchWfRunPb_StatusAndNamePb `protobuf:"bytes,5,opt,name=status_and_name,json=statusAndName,proto3,oneof"`
}

func (*SearchWfRunPb_StatusAndSpec) isSearchWfRunPb_WfrunCriteria() {}

func (*SearchWfRunPb_Name) isSearchWfRunPb_WfrunCriteria() {}

func (*SearchWfRunPb_StatusAndName) isSearchWfRunPb_WfrunCriteria() {}

type SearchWfRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*WfRunIdPb     `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// The bookmark is used internally by the backend implementation to enable
	// pagination. If you wish to do a multi-part paginated request, you should
	// pass in the bookmark (unaltered) to the next request.
	Bookmark []byte `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchWfRunReplyPb) Reset() {
	*x = SearchWfRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunReplyPb) ProtoMessage() {}

func (x *SearchWfRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunReplyPb.ProtoReflect.Descriptor instead.
func (*SearchWfRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *SearchWfRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchWfRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchWfRunReplyPb) GetResults() []*WfRunIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchWfRunReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchTaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to TaskRunCriteria:
	//
	//	*SearchTaskRunPb_StatusAndTaskDef
	//	*SearchTaskRunPb_TaskDef
	TaskRunCriteria isSearchTaskRunPb_TaskRunCriteria `protobuf_oneof:"task_run_criteria"`
}

func (x *SearchTaskRunPb) Reset() {
	*x = SearchTaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunPb) ProtoMessage() {}

func (x *SearchTaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunPb.ProtoReflect.Descriptor instead.
func (*SearchTaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *SearchTaskRunPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchTaskRunPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchTaskRunPb) GetTaskRunCriteria() isSearchTaskRunPb_TaskRunCriteria {
	if m != nil {
		return m.TaskRunCriteria
	}
	return nil
}

func (x *SearchTaskRunPb) GetStatusAndTaskDef() *SearchTaskRunPb_StatusAndTaskDefPb {
	if x, ok := x.GetTaskRunCriteria().(*SearchTaskRunPb_StatusAndTaskDef); ok {
		return x.StatusAndTaskDef
	}
	return nil
}

func (x *SearchTaskRunPb) GetTaskDef() *SearchTaskRunPb_ByTaskDefPb {
	if x, ok := x.GetTaskRunCriteria().(*SearchTaskRunPb_TaskDef); ok {
		return x.TaskDef
	}
	return nil
}

type isSearchTaskRunPb_TaskRunCriteria interface {
	isSearchTaskRunPb_TaskRunCriteria()
}

type SearchTaskRunPb_StatusAndTaskDef struct {
	StatusAndTaskDef *SearchTaskRunPb_StatusAndTaskDefPb `protobuf:"bytes,3,opt,name=status_and_task_def,json=statusAndTaskDef,proto3,oneof"`
}

type SearchTaskRunPb_TaskDef struct {
	TaskDef *SearchTaskRunPb_ByTaskDefPb `protobuf:"bytes,4,opt,name=task_def,json=taskDef,proto3,oneof"`
}

func (*SearchTaskRunPb_StatusAndTaskDef) isSearchTaskRunPb_TaskRunCriteria() {}

func (*SearchTaskRunPb_TaskDef) isSearchTaskRunPb_TaskRunCriteria() {}

type SearchTaskRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*TaskRunIdPb   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte           `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchTaskRunReplyPb) Reset() {
	*x = SearchTaskRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunReplyPb) ProtoMessage() {}

func (x *SearchTaskRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunReplyPb.ProtoReflect.Descriptor instead.
func (*SearchTaskRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *SearchTaskRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchTaskRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchTaskRunReplyPb) GetResults() []*TaskRunIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchTaskRunReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchNodeRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to NoderunCriteria:
	//
	//	*SearchNodeRunPb_WfRunId
	NoderunCriteria isSearchNodeRunPb_NoderunCriteria `protobuf_oneof:"noderun_criteria"`
}

func (x *SearchNodeRunPb) Reset() {
	*x = SearchNodeRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodeRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodeRunPb) ProtoMessage() {}

func (x *SearchNodeRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodeRunPb.ProtoReflect.Descriptor instead.
func (*SearchNodeRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *SearchNodeRunPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchNodeRunPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchNodeRunPb) GetNoderunCriteria() isSearchNodeRunPb_NoderunCriteria {
	if m != nil {
		return m.NoderunCriteria
	}
	return nil
}

func (x *SearchNodeRunPb) GetWfRunId() string {
	if x, ok := x.GetNoderunCriteria().(*SearchNodeRunPb_WfRunId); ok {
		return x.WfRunId
	}
	return ""
}

type isSearchNodeRunPb_NoderunCriteria interface {
	isSearchNodeRunPb_NoderunCriteria()
}

type SearchNodeRunPb_WfRunId struct {
	WfRunId string `protobuf:"bytes,3,opt,name=wf_run_id,json=wfRunId,proto3,oneof"`
}

func (*SearchNodeRunPb_WfRunId) isSearchNodeRunPb_NoderunCriteria() {}

type SearchNodeRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*NodeRunIdPb   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte           `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchNodeRunReplyPb) Reset() {
	*x = SearchNodeRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodeRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodeRunReplyPb) ProtoMessage() {}

func (x *SearchNodeRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodeRunReplyPb.ProtoReflect.Descriptor instead.
func (*SearchNodeRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33}
}

func (x *SearchNodeRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchNodeRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchNodeRunReplyPb) GetResults() []*NodeRunIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchNodeRunReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchUserTaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark        []byte               `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit           *int32               `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Status          *UserTaskRunStatusPb `protobuf:"varint,3,opt,name=status,proto3,enum=littlehorse.UserTaskRunStatusPb,oneof" json:"status,omitempty"`
	UserTaskDefName *string              `protobuf:"bytes,4,opt,name=user_task_def_name,json=userTaskDefName,proto3,oneof" json:"user_task_def_name,omitempty"`
	// Types that are assignable to TaskOwner:
	//
	//	*SearchUserTaskRunPb_UserId
	//	*SearchUserTaskRunPb_UserGroup
	TaskOwner     isSearchUserTaskRunPb_TaskOwner `protobuf_oneof:"task_owner"`
	EarliestStart *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp          `protobuf:"bytes,8,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchUserTaskRunPb) Reset() {
	*x = SearchUserTaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskRunPb) ProtoMessage() {}

func (x *SearchUserTaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskRunPb.ProtoReflect.Descriptor instead.
func (*SearchUserTaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34}
}

func (x *SearchUserTaskRunPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchUserTaskRunPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchUserTaskRunPb) GetStatus() UserTaskRunStatusPb {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserTaskRunStatusPb_UNASSIGNED
}

func (x *SearchUserTaskRunPb) GetUserTaskDefName() string {
	if x != nil && x.UserTaskDefName != nil {
		return *x.UserTaskDefName
	}
	return ""
}

func (m *SearchUserTaskRunPb) GetTaskOwner() isSearchUserTaskRunPb_TaskOwner {
	if m != nil {
		return m.TaskOwner
	}
	return nil
}

func (x *SearchUserTaskRunPb) GetUserId() string {
	if x, ok := x.GetTaskOwner().(*SearchUserTaskRunPb_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *SearchUserTaskRunPb) GetUserGroup() string {
	if x, ok := x.GetTaskOwner().(*SearchUserTaskRunPb_UserGroup); ok {
		return x.UserGroup
	}
	return ""
}

func (x *SearchUserTaskRunPb) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchUserTaskRunPb) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type isSearchUserTaskRunPb_TaskOwner interface {
	isSearchUserTaskRunPb_TaskOwner()
}

type SearchUserTaskRunPb_UserId struct {
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3,oneof"`
}

type SearchUserTaskRunPb_UserGroup struct {
	UserGroup string `protobuf:"bytes,6,opt,name=user_group,json=userGroup,proto3,oneof"`
}

func (*SearchUserTaskRunPb_UserId) isSearchUserTaskRunPb_TaskOwner() {}

func (*SearchUserTaskRunPb_UserGroup) isSearchUserTaskRunPb_TaskOwner() {}

type SearchUserTaskRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string            `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*UserTaskRunIdPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte             `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchUserTaskRunReplyPb) Reset() {
	*x = SearchUserTaskRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskRunReplyPb) ProtoMessage() {}

func (x *SearchUserTaskRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskRunReplyPb.ProtoReflect.Descriptor instead.
func (*SearchUserTaskRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35}
}

func (x *SearchUserTaskRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchUserTaskRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchUserTaskRunReplyPb) GetResults() []*UserTaskRunIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchUserTaskRunReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchVariablePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to VariableCriteria:
	//
	//	*SearchVariablePb_WfRunId
	//	*SearchVariablePb_Value
	VariableCriteria isSearchVariablePb_VariableCriteria `protobuf_oneof:"variable_criteria"`
}

func (x *SearchVariablePb) Reset() {
	*x = SearchVariablePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVariablePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVariablePb) ProtoMessage() {}

func (x *SearchVariablePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVariablePb.ProtoReflect.Descriptor instead.
func (*SearchVariablePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36}
}

func (x *SearchVariablePb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchVariablePb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchVariablePb) GetVariableCriteria() isSearchVariablePb_VariableCriteria {
	if m != nil {
		return m.VariableCriteria
	}
	return nil
}

func (x *SearchVariablePb) GetWfRunId() string {
	if x, ok := x.GetVariableCriteria().(*SearchVariablePb_WfRunId); ok {
		return x.WfRunId
	}
	return ""
}

func (x *SearchVariablePb) GetValue() *SearchVariablePb_NameAndValuePb {
	if x, ok := x.GetVariableCriteria().(*SearchVariablePb_Value); ok {
		return x.Value
	}
	return nil
}

type isSearchVariablePb_VariableCriteria interface {
	isSearchVariablePb_VariableCriteria()
}

type SearchVariablePb_WfRunId struct {
	WfRunId string `protobuf:"bytes,3,opt,name=wf_run_id,json=wfRunId,proto3,oneof"`
}

type SearchVariablePb_Value struct {
	Value *SearchVariablePb_NameAndValuePb `protobuf:"bytes,4,opt,name=value,proto3,oneof"`
}

func (*SearchVariablePb_WfRunId) isSearchVariablePb_VariableCriteria() {}

func (*SearchVariablePb_Value) isSearchVariablePb_VariableCriteria() {}

type SearchVariableReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*VariableIdPb  `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte           `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchVariableReplyPb) Reset() {
	*x = SearchVariableReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVariableReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVariableReplyPb) ProtoMessage() {}

func (x *SearchVariableReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVariableReplyPb.ProtoReflect.Descriptor instead.
func (*SearchVariableReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37}
}

func (x *SearchVariableReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchVariableReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchVariableReplyPb) GetResults() []*VariableIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchVariableReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte  `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32  `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Prefix   *string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *SearchTaskDefPb) Reset() {
	*x = SearchTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskDefPb) ProtoMessage() {}

func (x *SearchTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskDefPb.ProtoReflect.Descriptor instead.
func (*SearchTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38}
}

func (x *SearchTaskDefPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchTaskDefPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchTaskDefPb) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type SearchTaskDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*TaskDefIdPb   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte           `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchTaskDefReplyPb) Reset() {
	*x = SearchTaskDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskDefReplyPb) ProtoMessage() {}

func (x *SearchTaskDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskDefReplyPb.ProtoReflect.Descriptor instead.
func (*SearchTaskDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{39}
}

func (x *SearchTaskDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchTaskDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchTaskDefReplyPb) GetResults() []*TaskDefIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchTaskDefReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchUserTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to UserTaskDefCriteria:
	//
	//	*SearchUserTaskDefPb_Prefix
	//	*SearchUserTaskDefPb_Name
	UserTaskDefCriteria isSearchUserTaskDefPb_UserTaskDefCriteria `protobuf_oneof:"user_task_def_criteria"`
}

func (x *SearchUserTaskDefPb) Reset() {
	*x = SearchUserTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskDefPb) ProtoMessage() {}

func (x *SearchUserTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskDefPb.ProtoReflect.Descriptor instead.
func (*SearchUserTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{40}
}

func (x *SearchUserTaskDefPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchUserTaskDefPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchUserTaskDefPb) GetUserTaskDefCriteria() isSearchUserTaskDefPb_UserTaskDefCriteria {
	if m != nil {
		return m.UserTaskDefCriteria
	}
	return nil
}

func (x *SearchUserTaskDefPb) GetPrefix() string {
	if x, ok := x.GetUserTaskDefCriteria().(*SearchUserTaskDefPb_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *SearchUserTaskDefPb) GetName() string {
	if x, ok := x.GetUserTaskDefCriteria().(*SearchUserTaskDefPb_Name); ok {
		return x.Name
	}
	return ""
}

type isSearchUserTaskDefPb_UserTaskDefCriteria interface {
	isSearchUserTaskDefPb_UserTaskDefCriteria()
}

type SearchUserTaskDefPb_Prefix struct {
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof"`
}

type SearchUserTaskDefPb_Name struct {
	Name string `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

func (*SearchUserTaskDefPb_Prefix) isSearchUserTaskDefPb_UserTaskDefCriteria() {}

func (*SearchUserTaskDefPb_Name) isSearchUserTaskDefPb_UserTaskDefCriteria() {}

type SearchUserTaskDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string            `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*UserTaskDefIdPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte             `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchUserTaskDefReplyPb) Reset() {
	*x = SearchUserTaskDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserTaskDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserTaskDefReplyPb) ProtoMessage() {}

func (x *SearchUserTaskDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserTaskDefReplyPb.ProtoReflect.Descriptor instead.
func (*SearchUserTaskDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{41}
}

func (x *SearchUserTaskDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchUserTaskDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchUserTaskDefReplyPb) GetResults() []*UserTaskDefIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchUserTaskDefReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchWfSpecPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to WfSpecCriteria:
	//
	//	*SearchWfSpecPb_Name
	//	*SearchWfSpecPb_Prefix
	//	*SearchWfSpecPb_TaskDefName
	WfSpecCriteria isSearchWfSpecPb_WfSpecCriteria `protobuf_oneof:"wf_spec_criteria"`
}

func (x *SearchWfSpecPb) Reset() {
	*x = SearchWfSpecPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfSpecPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfSpecPb) ProtoMessage() {}

func (x *SearchWfSpecPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfSpecPb.ProtoReflect.Descriptor instead.
func (*SearchWfSpecPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{42}
}

func (x *SearchWfSpecPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchWfSpecPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchWfSpecPb) GetWfSpecCriteria() isSearchWfSpecPb_WfSpecCriteria {
	if m != nil {
		return m.WfSpecCriteria
	}
	return nil
}

func (x *SearchWfSpecPb) GetName() string {
	if x, ok := x.GetWfSpecCriteria().(*SearchWfSpecPb_Name); ok {
		return x.Name
	}
	return ""
}

func (x *SearchWfSpecPb) GetPrefix() string {
	if x, ok := x.GetWfSpecCriteria().(*SearchWfSpecPb_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *SearchWfSpecPb) GetTaskDefName() string {
	if x, ok := x.GetWfSpecCriteria().(*SearchWfSpecPb_TaskDefName); ok {
		return x.TaskDefName
	}
	return ""
}

type isSearchWfSpecPb_WfSpecCriteria interface {
	isSearchWfSpecPb_WfSpecCriteria()
}

type SearchWfSpecPb_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type SearchWfSpecPb_Prefix struct {
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3,oneof"`
}

type SearchWfSpecPb_TaskDefName struct {
	TaskDefName string `protobuf:"bytes,5,opt,name=task_def_name,json=taskDefName,proto3,oneof"`
}

func (*SearchWfSpecPb_Name) isSearchWfSpecPb_WfSpecCriteria() {}

func (*SearchWfSpecPb_Prefix) isSearchWfSpecPb_WfSpecCriteria() {}

func (*SearchWfSpecPb_TaskDefName) isSearchWfSpecPb_WfSpecCriteria() {}

type SearchWfSpecReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*WfSpecIdPb    `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte           `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchWfSpecReplyPb) Reset() {
	*x = SearchWfSpecReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfSpecReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfSpecReplyPb) ProtoMessage() {}

func (x *SearchWfSpecReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfSpecReplyPb.ProtoReflect.Descriptor instead.
func (*SearchWfSpecReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{43}
}

func (x *SearchWfSpecReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchWfSpecReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchWfSpecReplyPb) GetResults() []*WfSpecIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchWfSpecReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchExternalEventDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte  `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32  `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Prefix   *string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *SearchExternalEventDefPb) Reset() {
	*x = SearchExternalEventDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventDefPb) ProtoMessage() {}

func (x *SearchExternalEventDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventDefPb.ProtoReflect.Descriptor instead.
func (*SearchExternalEventDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{44}
}

func (x *SearchExternalEventDefPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchExternalEventDefPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchExternalEventDefPb) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type SearchExternalEventDefReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb        `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string                 `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*ExternalEventDefIdPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte                  `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchExternalEventDefReplyPb) Reset() {
	*x = SearchExternalEventDefReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventDefReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventDefReplyPb) ProtoMessage() {}

func (x *SearchExternalEventDefReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventDefReplyPb.ProtoReflect.Descriptor instead.
func (*SearchExternalEventDefReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{45}
}

func (x *SearchExternalEventDefReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchExternalEventDefReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchExternalEventDefReplyPb) GetResults() []*ExternalEventDefIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchExternalEventDefReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type SearchExternalEventPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark []byte `protobuf:"bytes,1,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
	Limit    *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Types that are assignable to ExtEvtCriteria:
	//
	//	*SearchExternalEventPb_WfRunId
	//	*SearchExternalEventPb_ExternalEventDefNameAndStatus
	ExtEvtCriteria isSearchExternalEventPb_ExtEvtCriteria `protobuf_oneof:"ext_evt_criteria"`
}

func (x *SearchExternalEventPb) Reset() {
	*x = SearchExternalEventPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventPb) ProtoMessage() {}

func (x *SearchExternalEventPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventPb.ProtoReflect.Descriptor instead.
func (*SearchExternalEventPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{46}
}

func (x *SearchExternalEventPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

func (x *SearchExternalEventPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *SearchExternalEventPb) GetExtEvtCriteria() isSearchExternalEventPb_ExtEvtCriteria {
	if m != nil {
		return m.ExtEvtCriteria
	}
	return nil
}

func (x *SearchExternalEventPb) GetWfRunId() string {
	if x, ok := x.GetExtEvtCriteria().(*SearchExternalEventPb_WfRunId); ok {
		return x.WfRunId
	}
	return ""
}

func (x *SearchExternalEventPb) GetExternalEventDefNameAndStatus() *SearchExternalEventPb_ByExtEvtDefNameAndStatusPb {
	if x, ok := x.GetExtEvtCriteria().(*SearchExternalEventPb_ExternalEventDefNameAndStatus); ok {
		return x.ExternalEventDefNameAndStatus
	}
	return nil
}

type isSearchExternalEventPb_ExtEvtCriteria interface {
	isSearchExternalEventPb_ExtEvtCriteria()
}

type SearchExternalEventPb_WfRunId struct {
	WfRunId string `protobuf:"bytes,3,opt,name=wf_run_id,json=wfRunId,proto3,oneof"`
}

type SearchExternalEventPb_ExternalEventDefNameAndStatus struct {
	ExternalEventDefNameAndStatus *SearchExternalEventPb_ByExtEvtDefNameAndStatusPb `protobuf:"bytes,4,opt,name=external_event_def_name_and_status,json=externalEventDefNameAndStatus,proto3,oneof"`
}

func (*SearchExternalEventPb_WfRunId) isSearchExternalEventPb_ExtEvtCriteria() {}

func (*SearchExternalEventPb_ExternalEventDefNameAndStatus) isSearchExternalEventPb_ExtEvtCriteria() {
}

type SearchExternalEventReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LHResponseCodePb     `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message  *string              `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results  []*ExternalEventIdPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark []byte               `protobuf:"bytes,4,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

func (x *SearchExternalEventReplyPb) Reset() {
	*x = SearchExternalEventReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventReplyPb) ProtoMessage() {}

func (x *SearchExternalEventReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventReplyPb.ProtoReflect.Descriptor instead.
func (*SearchExternalEventReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{47}
}

func (x *SearchExternalEventReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *SearchExternalEventReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SearchExternalEventReplyPb) GetResults() []*ExternalEventIdPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchExternalEventReplyPb) GetBookmark() []byte {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type ListNodeRunsPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *ListNodeRunsPb) Reset() {
	*x = ListNodeRunsPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRunsPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRunsPb) ProtoMessage() {}

func (x *ListNodeRunsPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRunsPb.ProtoReflect.Descriptor instead.
func (*ListNodeRunsPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{48}
}

func (x *ListNodeRunsPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type ListNodeRunsReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*NodeRunPb     `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListNodeRunsReplyPb) Reset() {
	*x = ListNodeRunsReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRunsReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRunsReplyPb) ProtoMessage() {}

func (x *ListNodeRunsReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRunsReplyPb.ProtoReflect.Descriptor instead.
func (*ListNodeRunsReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{49}
}

func (x *ListNodeRunsReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *ListNodeRunsReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListNodeRunsReplyPb) GetResults() []*NodeRunPb {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListVariablesPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *ListVariablesPb) Reset() {
	*x = ListVariablesPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariablesPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariablesPb) ProtoMessage() {}

func (x *ListVariablesPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariablesPb.ProtoReflect.Descriptor instead.
func (*ListVariablesPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{50}
}

func (x *ListVariablesPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type ListVariablesReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*VariablePb    `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListVariablesReplyPb) Reset() {
	*x = ListVariablesReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariablesReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariablesReplyPb) ProtoMessage() {}

func (x *ListVariablesReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariablesReplyPb.ProtoReflect.Descriptor instead.
func (*ListVariablesReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{51}
}

func (x *ListVariablesReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *ListVariablesReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListVariablesReplyPb) GetResults() []*VariablePb {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListExternalEventsPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *ListExternalEventsPb) Reset() {
	*x = ListExternalEventsPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExternalEventsPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExternalEventsPb) ProtoMessage() {}

func (x *ListExternalEventsPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExternalEventsPb.ProtoReflect.Descriptor instead.
func (*ListExternalEventsPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{52}
}

func (x *ListExternalEventsPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type ListExternalEventsReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string            `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*ExternalEventPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListExternalEventsReplyPb) Reset() {
	*x = ListExternalEventsReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExternalEventsReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExternalEventsReplyPb) ProtoMessage() {}

func (x *ListExternalEventsReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExternalEventsReplyPb.ProtoReflect.Descriptor instead.
func (*ListExternalEventsReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{53}
}

func (x *ListExternalEventsReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *ListExternalEventsReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListExternalEventsReplyPb) GetResults() []*ExternalEventPb {
	if x != nil {
		return x.Results
	}
	return nil
}

type RegisterTaskWorkerPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskDefName  string `protobuf:"bytes,2,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	ListenerName string `protobuf:"bytes,3,opt,name=listener_name,json=listenerName,proto3" json:"listener_name,omitempty"`
}

func (x *RegisterTaskWorkerPb) Reset() {
	*x = RegisterTaskWorkerPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskWorkerPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskWorkerPb) ProtoMessage() {}

func (x *RegisterTaskWorkerPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskWorkerPb.ProtoReflect.Descriptor instead.
func (*RegisterTaskWorkerPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{54}
}

func (x *RegisterTaskWorkerPb) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RegisterTaskWorkerPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *RegisterTaskWorkerPb) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

type TaskWorkerHeartBeatPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskDefName  string `protobuf:"bytes,2,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	ListenerName string `protobuf:"bytes,3,opt,name=listener_name,json=listenerName,proto3" json:"listener_name,omitempty"`
}

func (x *TaskWorkerHeartBeatPb) Reset() {
	*x = TaskWorkerHeartBeatPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerHeartBeatPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerHeartBeatPb) ProtoMessage() {}

func (x *TaskWorkerHeartBeatPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerHeartBeatPb.ProtoReflect.Descriptor instead.
func (*TaskWorkerHeartBeatPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{55}
}

func (x *TaskWorkerHeartBeatPb) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TaskWorkerHeartBeatPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskWorkerHeartBeatPb) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

type RegisterTaskWorkerReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message   *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	YourHosts []*HostInfoPb    `protobuf:"bytes,3,rep,name=your_hosts,json=yourHosts,proto3" json:"your_hosts,omitempty"`
}

func (x *RegisterTaskWorkerReplyPb) Reset() {
	*x = RegisterTaskWorkerReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskWorkerReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskWorkerReplyPb) ProtoMessage() {}

func (x *RegisterTaskWorkerReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskWorkerReplyPb.ProtoReflect.Descriptor instead.
func (*RegisterTaskWorkerReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{56}
}

func (x *RegisterTaskWorkerReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *RegisterTaskWorkerReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *RegisterTaskWorkerReplyPb) GetYourHosts() []*HostInfoPb {
	if x != nil {
		return x.YourHosts
	}
	return nil
}

type HostInfoPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *HostInfoPb) Reset() {
	*x = HostInfoPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfoPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfoPb) ProtoMessage() {}

func (x *HostInfoPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfoPb.ProtoReflect.Descriptor instead.
func (*HostInfoPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{57}
}

func (x *HostInfoPb) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HostInfoPb) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type TaskWorkerMetadataPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId        string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	LatestHeartbeat *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=latest_heartbeat,json=latestHeartbeat,proto3" json:"latest_heartbeat,omitempty"`
	Hosts           []*HostInfoPb          `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *TaskWorkerMetadataPb) Reset() {
	*x = TaskWorkerMetadataPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerMetadataPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerMetadataPb) ProtoMessage() {}

func (x *TaskWorkerMetadataPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerMetadataPb.ProtoReflect.Descriptor instead.
func (*TaskWorkerMetadataPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{58}
}

func (x *TaskWorkerMetadataPb) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TaskWorkerMetadataPb) GetLatestHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestHeartbeat
	}
	return nil
}

func (x *TaskWorkerMetadataPb) GetHosts() []*HostInfoPb {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type TaskWorkerGroupPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName string                           `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	CreatedAt   *timestamppb.Timestamp           `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TaskWorkers map[string]*TaskWorkerMetadataPb `protobuf:"bytes,3,rep,name=task_workers,json=taskWorkers,proto3" json:"task_workers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TaskWorkerGroupPb) Reset() {
	*x = TaskWorkerGroupPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerGroupPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerGroupPb) ProtoMessage() {}

func (x *TaskWorkerGroupPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerGroupPb.ProtoReflect.Descriptor instead.
func (*TaskWorkerGroupPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{59}
}

func (x *TaskWorkerGroupPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskWorkerGroupPb) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskWorkerGroupPb) GetTaskWorkers() map[string]*TaskWorkerMetadataPb {
	if x != nil {
		return x.TaskWorkers
	}
	return nil
}

type TaskWorkerGroupIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName string `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
}

func (x *TaskWorkerGroupIdPb) Reset() {
	*x = TaskWorkerGroupIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerGroupIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerGroupIdPb) ProtoMessage() {}

func (x *TaskWorkerGroupIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerGroupIdPb.ProtoReflect.Descriptor instead.
func (*TaskWorkerGroupIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{60}
}

func (x *TaskWorkerGroupIdPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

type PollTaskPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName       string  `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	ClientId          string  `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskWorkerVersion *string `protobuf:"bytes,3,opt,name=task_worker_version,json=taskWorkerVersion,proto3,oneof" json:"task_worker_version,omitempty"`
}

func (x *PollTaskPb) Reset() {
	*x = PollTaskPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollTaskPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTaskPb) ProtoMessage() {}

func (x *PollTaskPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTaskPb.ProtoReflect.Descriptor instead.
func (*PollTaskPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{61}
}

func (x *PollTaskPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *PollTaskPb) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PollTaskPb) GetTaskWorkerVersion() string {
	if x != nil && x.TaskWorkerVersion != nil {
		return *x.TaskWorkerVersion
	}
	return ""
}

type ScheduledTaskPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRunId     *TaskRunIdPb           `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3" json:"task_run_id,omitempty"`
	TaskDefId     *TaskDefIdPb           `protobuf:"bytes,2,opt,name=task_def_id,json=taskDefId,proto3" json:"task_def_id,omitempty"`
	AttemptNumber int32                  `protobuf:"varint,3,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	Variables     []*VarNameAndValPb     `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Source        *TaskRunSourcePb       `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ScheduledTaskPb) Reset() {
	*x = ScheduledTaskPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTaskPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTaskPb) ProtoMessage() {}

func (x *ScheduledTaskPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTaskPb.ProtoReflect.Descriptor instead.
func (*ScheduledTaskPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{62}
}

func (x *ScheduledTaskPb) GetTaskRunId() *TaskRunIdPb {
	if x != nil {
		return x.TaskRunId
	}
	return nil
}

func (x *ScheduledTaskPb) GetTaskDefId() *TaskDefIdPb {
	if x != nil {
		return x.TaskDefId
	}
	return nil
}

func (x *ScheduledTaskPb) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

func (x *ScheduledTaskPb) GetVariables() []*VarNameAndValPb {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ScheduledTaskPb) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScheduledTaskPb) GetSource() *TaskRunSourcePb {
	if x != nil {
		return x.Source
	}
	return nil
}

type TaskRunSourcePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TaskRunSource:
	//
	//	*TaskRunSourcePb_TaskNode
	//	*TaskRunSourcePb_UserTaskTrigger
	TaskRunSource isTaskRunSourcePb_TaskRunSource `protobuf_oneof:"task_run_source"`
}

func (x *TaskRunSourcePb) Reset() {
	*x = TaskRunSourcePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRunSourcePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSourcePb) ProtoMessage() {}

func (x *TaskRunSourcePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSourcePb.ProtoReflect.Descriptor instead.
func (*TaskRunSourcePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{63}
}

func (m *TaskRunSourcePb) GetTaskRunSource() isTaskRunSourcePb_TaskRunSource {
	if m != nil {
		return m.TaskRunSource
	}
	return nil
}

func (x *TaskRunSourcePb) GetTaskNode() *TaskNodeReferencePb {
	if x, ok := x.GetTaskRunSource().(*TaskRunSourcePb_TaskNode); ok {
		return x.TaskNode
	}
	return nil
}

func (x *TaskRunSourcePb) GetUserTaskTrigger() *UserTaskTriggerReferencePb {
	if x, ok := x.GetTaskRunSource().(*TaskRunSourcePb_UserTaskTrigger); ok {
		return x.UserTaskTrigger
	}
	return nil
}

type isTaskRunSourcePb_TaskRunSource interface {
	isTaskRunSourcePb_TaskRunSource()
}

type TaskRunSourcePb_TaskNode struct {
	TaskNode *TaskNodeReferencePb `protobuf:"bytes,1,opt,name=task_node,json=taskNode,proto3,oneof"`
}

type TaskRunSourcePb_UserTaskTrigger struct {
	UserTaskTrigger *UserTaskTriggerReferencePb `protobuf:"bytes,2,opt,name=user_task_trigger,json=userTaskTrigger,proto3,oneof"`
}

func (*TaskRunSourcePb_TaskNode) isTaskRunSourcePb_TaskRunSource() {}

func (*TaskRunSourcePb_UserTaskTrigger) isTaskRunSourcePb_TaskRunSource() {}

type PollTaskReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *ScheduledTaskPb `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *PollTaskReplyPb) Reset() {
	*x = PollTaskReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollTaskReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTaskReplyPb) ProtoMessage() {}

func (x *PollTaskReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTaskReplyPb.ProtoReflect.Descriptor instead.
func (*PollTaskReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{64}
}

func (x *PollTaskReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *PollTaskReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PollTaskReplyPb) GetResult() *ScheduledTaskPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReportTaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRunId     *TaskRunIdPb           `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3" json:"task_run_id,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status        TaskStatusPb           `protobuf:"varint,3,opt,name=status,proto3,enum=littlehorse.TaskStatusPb" json:"status,omitempty"`
	Output        *VariableValuePb       `protobuf:"bytes,4,opt,name=output,proto3,oneof" json:"output,omitempty"`
	LogOutput     *VariableValuePb       `protobuf:"bytes,5,opt,name=log_output,json=logOutput,proto3,oneof" json:"log_output,omitempty"`
	AttemptNumber int32                  `protobuf:"varint,6,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
}

func (x *ReportTaskRunPb) Reset() {
	*x = ReportTaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskRunPb) ProtoMessage() {}

func (x *ReportTaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskRunPb.ProtoReflect.Descriptor instead.
func (*ReportTaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{65}
}

func (x *ReportTaskRunPb) GetTaskRunId() *TaskRunIdPb {
	if x != nil {
		return x.TaskRunId
	}
	return nil
}

func (x *ReportTaskRunPb) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReportTaskRunPb) GetStatus() TaskStatusPb {
	if x != nil {
		return x.Status
	}
	return TaskStatusPb_TASK_SCHEDULED
}

func (x *ReportTaskRunPb) GetOutput() *VariableValuePb {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ReportTaskRunPb) GetLogOutput() *VariableValuePb {
	if x != nil {
		return x.LogOutput
	}
	return nil
}

func (x *ReportTaskRunPb) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

type ReportTaskReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ReportTaskReplyPb) Reset() {
	*x = ReportTaskReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTaskReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskReplyPb) ProtoMessage() {}

func (x *ReportTaskReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskReplyPb.ProtoReflect.Descriptor instead.
func (*ReportTaskReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{66}
}

func (x *ReportTaskReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *ReportTaskReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type StopWfRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *StopWfRunPb) Reset() {
	*x = StopWfRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWfRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWfRunPb) ProtoMessage() {}

func (x *StopWfRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWfRunPb.ProtoReflect.Descriptor instead.
func (*StopWfRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{67}
}

func (x *StopWfRunPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *StopWfRunPb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

type StopWfRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *StopWfRunReplyPb) Reset() {
	*x = StopWfRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWfRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWfRunReplyPb) ProtoMessage() {}

func (x *StopWfRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWfRunReplyPb.ProtoReflect.Descriptor instead.
func (*StopWfRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{68}
}

func (x *StopWfRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *StopWfRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ResumeWfRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *ResumeWfRunPb) Reset() {
	*x = ResumeWfRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeWfRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeWfRunPb) ProtoMessage() {}

func (x *ResumeWfRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeWfRunPb.ProtoReflect.Descriptor instead.
func (*ResumeWfRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{69}
}

func (x *ResumeWfRunPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ResumeWfRunPb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

type ResumeWfRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ResumeWfRunReplyPb) Reset() {
	*x = ResumeWfRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeWfRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeWfRunReplyPb) ProtoMessage() {}

func (x *ResumeWfRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeWfRunReplyPb.ProtoReflect.Descriptor instead.
func (*ResumeWfRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{70}
}

func (x *ResumeWfRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *ResumeWfRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type DeleteWfRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
}

func (x *DeleteWfRunPb) Reset() {
	*x = DeleteWfRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWfRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWfRunPb) ProtoMessage() {}

func (x *DeleteWfRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWfRunPb.ProtoReflect.Descriptor instead.
func (*DeleteWfRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteWfRunPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

type DeleteTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTaskDefPb) Reset() {
	*x = DeleteTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskDefPb) ProtoMessage() {}

func (x *DeleteTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskDefPb.ProtoReflect.Descriptor instead.
func (*DeleteTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteTaskDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteUserTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteUserTaskDefPb) Reset() {
	*x = DeleteUserTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserTaskDefPb) ProtoMessage() {}

func (x *DeleteUserTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserTaskDefPb.ProtoReflect.Descriptor instead.
func (*DeleteUserTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteUserTaskDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteUserTaskDefPb) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeleteWfSpecPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteWfSpecPb) Reset() {
	*x = DeleteWfSpecPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWfSpecPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWfSpecPb) ProtoMessage() {}

func (x *DeleteWfSpecPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWfSpecPb.ProtoReflect.Descriptor instead.
func (*DeleteWfSpecPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteWfSpecPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteWfSpecPb) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeleteExternalEventDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteExternalEventDefPb) Reset() {
	*x = DeleteExternalEventDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExternalEventDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExternalEventDefPb) ProtoMessage() {}

func (x *DeleteExternalEventDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExternalEventDefPb.ProtoReflect.Descriptor instead.
func (*DeleteExternalEventDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteExternalEventDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteObjectReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *DeleteObjectReplyPb) Reset() {
	*x = DeleteObjectReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectReplyPb) ProtoMessage() {}

func (x *DeleteObjectReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectReplyPb.ProtoReflect.Descriptor instead.
func (*DeleteObjectReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteObjectReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *DeleteObjectReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type HealthCheckPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckPb) Reset() {
	*x = HealthCheckPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckPb) ProtoMessage() {}

func (x *HealthCheckPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckPb.ProtoReflect.Descriptor instead.
func (*HealthCheckPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{77}
}

type HealthCheckReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreState  LHHealthResultPb `protobuf:"varint,1,opt,name=core_state,json=coreState,proto3,enum=littlehorse.LHHealthResultPb" json:"core_state,omitempty"`
	TimerState LHHealthResultPb `protobuf:"varint,2,opt,name=timer_state,json=timerState,proto3,enum=littlehorse.LHHealthResultPb" json:"timer_state,omitempty"`
}

func (x *HealthCheckReplyPb) Reset() {
	*x = HealthCheckReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckReplyPb) ProtoMessage() {}

func (x *HealthCheckReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckReplyPb.ProtoReflect.Descriptor instead.
func (*HealthCheckReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{78}
}

func (x *HealthCheckReplyPb) GetCoreState() LHHealthResultPb {
	if x != nil {
		return x.CoreState
	}
	return LHHealthResultPb_LH_HEALTH_RUNNING
}

func (x *HealthCheckReplyPb) GetTimerState() LHHealthResultPb {
	if x != nil {
		return x.TimerState
	}
	return LHHealthResultPb_LH_HEALTH_RUNNING
}

type TaskDefMetricsQueryPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType  MetricsWindowLengthPb  `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"window_type,omitempty"`
	TaskDefName *string                `protobuf:"bytes,3,opt,name=task_def_name,json=taskDefName,proto3,oneof" json:"task_def_name,omitempty"`
}

func (x *TaskDefMetricsQueryPb) Reset() {
	*x = TaskDefMetricsQueryPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetricsQueryPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetricsQueryPb) ProtoMessage() {}

func (x *TaskDefMetricsQueryPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetricsQueryPb.ProtoReflect.Descriptor instead.
func (*TaskDefMetricsQueryPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{79}
}

func (x *TaskDefMetricsQueryPb) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *TaskDefMetricsQueryPb) GetWindowType() MetricsWindowLengthPb {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLengthPb_MINUTES_5
}

func (x *TaskDefMetricsQueryPb) GetTaskDefName() string {
	if x != nil && x.TaskDefName != nil {
		return *x.TaskDefName
	}
	return ""
}

type TaskDefMetricsReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb  `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string           `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *TaskDefMetricsPb `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *TaskDefMetricsReplyPb) Reset() {
	*x = TaskDefMetricsReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetricsReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetricsReplyPb) ProtoMessage() {}

func (x *TaskDefMetricsReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetricsReplyPb.ProtoReflect.Descriptor instead.
func (*TaskDefMetricsReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{80}
}

func (x *TaskDefMetricsReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *TaskDefMetricsReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *TaskDefMetricsReplyPb) GetResult() *TaskDefMetricsPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListTaskMetricsPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastWindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_window_start,json=lastWindowStart,proto3" json:"last_window_start,omitempty"`
	NumWindows      int32                  `protobuf:"varint,2,opt,name=num_windows,json=numWindows,proto3" json:"num_windows,omitempty"`
	TaskDefName     string                 `protobuf:"bytes,3,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	WindowLength    MetricsWindowLengthPb  `protobuf:"varint,4,opt,name=window_length,json=windowLength,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"window_length,omitempty"`
}

func (x *ListTaskMetricsPb) Reset() {
	*x = ListTaskMetricsPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskMetricsPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskMetricsPb) ProtoMessage() {}

func (x *ListTaskMetricsPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskMetricsPb.ProtoReflect.Descriptor instead.
func (*ListTaskMetricsPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{81}
}

func (x *ListTaskMetricsPb) GetLastWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LastWindowStart
	}
	return nil
}

func (x *ListTaskMetricsPb) GetNumWindows() int32 {
	if x != nil {
		return x.NumWindows
	}
	return 0
}

func (x *ListTaskMetricsPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *ListTaskMetricsPb) GetWindowLength() MetricsWindowLengthPb {
	if x != nil {
		return x.WindowLength
	}
	return MetricsWindowLengthPb_MINUTES_5
}

type ListTaskMetricsReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb    `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string             `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*TaskDefMetricsPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListTaskMetricsReplyPb) Reset() {
	*x = ListTaskMetricsReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskMetricsReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskMetricsReplyPb) ProtoMessage() {}

func (x *ListTaskMetricsReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskMetricsReplyPb.ProtoReflect.Descriptor instead.
func (*ListTaskMetricsReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{82}
}

func (x *ListTaskMetricsReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *ListTaskMetricsReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListTaskMetricsReplyPb) GetResults() []*TaskDefMetricsPb {
	if x != nil {
		return x.Results
	}
	return nil
}

type WfSpecMetricsQueryPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType    MetricsWindowLengthPb  `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"window_type,omitempty"`
	WfSpecName    string                 `protobuf:"bytes,3,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion int32                  `protobuf:"varint,4,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
}

func (x *WfSpecMetricsQueryPb) Reset() {
	*x = WfSpecMetricsQueryPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetricsQueryPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetricsQueryPb) ProtoMessage() {}

func (x *WfSpecMetricsQueryPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetricsQueryPb.ProtoReflect.Descriptor instead.
func (*WfSpecMetricsQueryPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{83}
}

func (x *WfSpecMetricsQueryPb) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *WfSpecMetricsQueryPb) GetWindowType() MetricsWindowLengthPb {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLengthPb_MINUTES_5
}

func (x *WfSpecMetricsQueryPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfSpecMetricsQueryPb) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

type WfSpecMetricsReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Result  *WfSpecMetricsPb `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *WfSpecMetricsReplyPb) Reset() {
	*x = WfSpecMetricsReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetricsReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetricsReplyPb) ProtoMessage() {}

func (x *WfSpecMetricsReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetricsReplyPb.ProtoReflect.Descriptor instead.
func (*WfSpecMetricsReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{84}
}

func (x *WfSpecMetricsReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *WfSpecMetricsReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *WfSpecMetricsReplyPb) GetResult() *WfSpecMetricsPb {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListWfMetricsPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastWindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_window_start,json=lastWindowStart,proto3" json:"last_window_start,omitempty"`
	NumWindows      int32                  `protobuf:"varint,2,opt,name=num_windows,json=numWindows,proto3" json:"num_windows,omitempty"`
	WfSpecName      string                 `protobuf:"bytes,3,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion   int32                  `protobuf:"varint,4,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	WindowLength    MetricsWindowLengthPb  `protobuf:"varint,5,opt,name=window_length,json=windowLength,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"window_length,omitempty"`
}

func (x *ListWfMetricsPb) Reset() {
	*x = ListWfMetricsPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWfMetricsPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWfMetricsPb) ProtoMessage() {}

func (x *ListWfMetricsPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWfMetricsPb.ProtoReflect.Descriptor instead.
func (*ListWfMetricsPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{85}
}

func (x *ListWfMetricsPb) GetLastWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LastWindowStart
	}
	return nil
}

func (x *ListWfMetricsPb) GetNumWindows() int32 {
	if x != nil {
		return x.NumWindows
	}
	return 0
}

func (x *ListWfMetricsPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *ListWfMetricsPb) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *ListWfMetricsPb) GetWindowLength() MetricsWindowLengthPb {
	if x != nil {
		return x.WindowLength
	}
	return MetricsWindowLengthPb_MINUTES_5
}

type ListWfMetricsReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb   `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string            `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Results []*WfSpecMetricsPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListWfMetricsReplyPb) Reset() {
	*x = ListWfMetricsReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWfMetricsReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWfMetricsReplyPb) ProtoMessage() {}

func (x *ListWfMetricsReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWfMetricsReplyPb.ProtoReflect.Descriptor instead.
func (*ListWfMetricsReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{86}
}

func (x *ListWfMetricsReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *ListWfMetricsReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListWfMetricsReplyPb) GetResults() []*WfSpecMetricsPb {
	if x != nil {
		return x.Results
	}
	return nil
}

type VariableValuePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    VariableTypePb `protobuf:"varint,1,opt,name=type,proto3,enum=littlehorse.VariableTypePb" json:"type,omitempty"`
	JsonObj *string        `protobuf:"bytes,2,opt,name=json_obj,json=jsonObj,proto3,oneof" json:"json_obj,omitempty"`
	JsonArr *string        `protobuf:"bytes,3,opt,name=json_arr,json=jsonArr,proto3,oneof" json:"json_arr,omitempty"`
	Double  *float64       `protobuf:"fixed64,4,opt,name=double,proto3,oneof" json:"double,omitempty"`
	Bool    *bool          `protobuf:"varint,5,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
	Str     *string        `protobuf:"bytes,6,opt,name=str,proto3,oneof" json:"str,omitempty"`
	Int     *int64         `protobuf:"varint,7,opt,name=int,proto3,oneof" json:"int,omitempty"`
	Bytes   []byte         `protobuf:"bytes,8,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}

func (x *VariableValuePb) Reset() {
	*x = VariableValuePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableValuePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableValuePb) ProtoMessage() {}

func (x *VariableValuePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableValuePb.ProtoReflect.Descriptor instead.
func (*VariableValuePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{87}
}

func (x *VariableValuePb) GetType() VariableTypePb {
	if x != nil {
		return x.Type
	}
	return VariableTypePb_JSON_OBJ
}

func (x *VariableValuePb) GetJsonObj() string {
	if x != nil && x.JsonObj != nil {
		return *x.JsonObj
	}
	return ""
}

func (x *VariableValuePb) GetJsonArr() string {
	if x != nil && x.JsonArr != nil {
		return *x.JsonArr
	}
	return ""
}

func (x *VariableValuePb) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *VariableValuePb) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *VariableValuePb) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *VariableValuePb) GetInt() int64 {
	if x != nil && x.Int != nil {
		return *x.Int
	}
	return 0
}

func (x *VariableValuePb) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type VariableIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VariableIdPb) Reset() {
	*x = VariableIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableIdPb) ProtoMessage() {}

func (x *VariableIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableIdPb.ProtoReflect.Descriptor instead.
func (*VariableIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{88}
}

func (x *VariableIdPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *VariableIdPb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *VariableIdPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VariablePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           *VariableValuePb       `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	WfRunId         string                 `protobuf:"bytes,2,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,3,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Name            string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Date            *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *VariablePb) Reset() {
	*x = VariablePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariablePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariablePb) ProtoMessage() {}

func (x *VariablePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariablePb.ProtoReflect.Descriptor instead.
func (*VariablePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{89}
}

func (x *VariablePb) GetValue() *VariableValuePb {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VariablePb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *VariablePb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *VariablePb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariablePb) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type VarNameAndValPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarName string           `protobuf:"bytes,1,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	Value   *VariableValuePb `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VarNameAndValPb) Reset() {
	*x = VarNameAndValPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarNameAndValPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarNameAndValPb) ProtoMessage() {}

func (x *VarNameAndValPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarNameAndValPb.ProtoReflect.Descriptor instead.
func (*VarNameAndValPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{90}
}

func (x *VarNameAndValPb) GetVarName() string {
	if x != nil {
		return x.VarName
	}
	return ""
}

func (x *VarNameAndValPb) GetValue() *VariableValuePb {
	if x != nil {
		return x.Value
	}
	return nil
}

// External Event
type ExternalEventIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 string `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *ExternalEventIdPb) Reset() {
	*x = ExternalEventIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventIdPb) ProtoMessage() {}

func (x *ExternalEventIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventIdPb.ProtoReflect.Descriptor instead.
func (*ExternalEventIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{91}
}

func (x *ExternalEventIdPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ExternalEventIdPb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventIdPb) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type ExternalEventPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId              string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ExternalEventDefName string                 `protobuf:"bytes,2,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	Guid                 string                 `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Content              *VariableValuePb       `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ThreadRunNumber      *int32                 `protobuf:"varint,6,opt,name=thread_run_number,json=threadRunNumber,proto3,oneof" json:"thread_run_number,omitempty"`
	NodeRunPosition      *int32                 `protobuf:"varint,7,opt,name=node_run_position,json=nodeRunPosition,proto3,oneof" json:"node_run_position,omitempty"`
	Claimed              bool                   `protobuf:"varint,8,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (x *ExternalEventPb) Reset() {
	*x = ExternalEventPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventPb) ProtoMessage() {}

func (x *ExternalEventPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventPb.ProtoReflect.Descriptor instead.
func (*ExternalEventPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{92}
}

func (x *ExternalEventPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ExternalEventPb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventPb) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *ExternalEventPb) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExternalEventPb) GetContent() *VariableValuePb {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ExternalEventPb) GetThreadRunNumber() int32 {
	if x != nil && x.ThreadRunNumber != nil {
		return *x.ThreadRunNumber
	}
	return 0
}

func (x *ExternalEventPb) GetNodeRunPosition() int32 {
	if x != nil && x.NodeRunPosition != nil {
		return *x.NodeRunPosition
	}
	return 0
}

func (x *ExternalEventPb) GetClaimed() bool {
	if x != nil {
		return x.Claimed
	}
	return false
}

type WfRunIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WfRunIdPb) Reset() {
	*x = WfRunIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfRunIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfRunIdPb) ProtoMessage() {}

func (x *WfRunIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfRunIdPb.ProtoReflect.Descriptor instead.
func (*WfRunIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{93}
}

func (x *WfRunIdPb) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WfRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WfSpecName        string                     `protobuf:"bytes,2,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion     int32                      `protobuf:"varint,3,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	Status            LHStatusPb                 `protobuf:"varint,4,opt,name=status,proto3,enum=littlehorse.LHStatusPb" json:"status,omitempty"`
	StartTime         *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp     `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	ThreadRuns        []*ThreadRunPb             `protobuf:"bytes,8,rep,name=thread_runs,json=threadRuns,proto3" json:"thread_runs,omitempty"`
	PendingInterrupts []*PendingInterruptPb      `protobuf:"bytes,9,rep,name=pending_interrupts,json=pendingInterrupts,proto3" json:"pending_interrupts,omitempty"`
	PendingFailures   []*PendingFailureHandlerPb `protobuf:"bytes,10,rep,name=pending_failures,json=pendingFailures,proto3" json:"pending_failures,omitempty"`
}

func (x *WfRunPb) Reset() {
	*x = WfRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfRunPb) ProtoMessage() {}

func (x *WfRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfRunPb.ProtoReflect.Descriptor instead.
func (*WfRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{94}
}

func (x *WfRunPb) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WfRunPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfRunPb) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *WfRunPb) GetStatus() LHStatusPb {
	if x != nil {
		return x.Status
	}
	return LHStatusPb_STARTING
}

func (x *WfRunPb) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WfRunPb) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WfRunPb) GetThreadRuns() []*ThreadRunPb {
	if x != nil {
		return x.ThreadRuns
	}
	return nil
}

func (x *WfRunPb) GetPendingInterrupts() []*PendingInterruptPb {
	if x != nil {
		return x.PendingInterrupts
	}
	return nil
}

func (x *WfRunPb) GetPendingFailures() []*PendingFailureHandlerPb {
	if x != nil {
		return x.PendingFailures
	}
	return nil
}

type ThreadRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId               string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	Number                int32                  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Status                LHStatusPb             `protobuf:"varint,3,opt,name=status,proto3,enum=littlehorse.LHStatusPb" json:"status,omitempty"`
	WfSpecName            string                 `protobuf:"bytes,4,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion         int32                  `protobuf:"varint,5,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	ThreadSpecName        string                 `protobuf:"bytes,6,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	StartTime             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	ErrorMessage          *string                `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	ChildThreadIds        []int32                `protobuf:"varint,11,rep,packed,name=child_thread_ids,json=childThreadIds,proto3" json:"child_thread_ids,omitempty"`
	ParentThreadId        *int32                 `protobuf:"varint,12,opt,name=parent_thread_id,json=parentThreadId,proto3,oneof" json:"parent_thread_id,omitempty"`
	HaltReasons           []*ThreadHaltReasonPb  `protobuf:"bytes,13,rep,name=halt_reasons,json=haltReasons,proto3" json:"halt_reasons,omitempty"`
	InterruptTriggerId    *ExternalEventIdPb     `protobuf:"bytes,14,opt,name=interrupt_trigger_id,json=interruptTriggerId,proto3,oneof" json:"interrupt_trigger_id,omitempty"`
	FailureBeingHandled   *FailureBeingHandledPb `protobuf:"bytes,15,opt,name=failure_being_handled,json=failureBeingHandled,proto3,oneof" json:"failure_being_handled,omitempty"`
	CurrentNodePosition   int32                  `protobuf:"varint,16,opt,name=current_node_position,json=currentNodePosition,proto3" json:"current_node_position,omitempty"`
	HandledFailedChildren []int32                `protobuf:"varint,17,rep,packed,name=handled_failed_children,json=handledFailedChildren,proto3" json:"handled_failed_children,omitempty"`
	Type                  ThreadTypePb           `protobuf:"varint,18,opt,name=type,proto3,enum=littlehorse.ThreadTypePb" json:"type,omitempty"`
}

func (x *ThreadRunPb) Reset() {
	*x = ThreadRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadRunPb) ProtoMessage() {}

func (x *ThreadRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadRunPb.ProtoReflect.Descriptor instead.
func (*ThreadRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{95}
}

func (x *ThreadRunPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *ThreadRunPb) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ThreadRunPb) GetStatus() LHStatusPb {
	if x != nil {
		return x.Status
	}
	return LHStatusPb_STARTING
}

func (x *ThreadRunPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *ThreadRunPb) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *ThreadRunPb) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *ThreadRunPb) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ThreadRunPb) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ThreadRunPb) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ThreadRunPb) GetChildThreadIds() []int32 {
	if x != nil {
		return x.ChildThreadIds
	}
	return nil
}

func (x *ThreadRunPb) GetParentThreadId() int32 {
	if x != nil && x.ParentThreadId != nil {
		return *x.ParentThreadId
	}
	return 0
}

func (x *ThreadRunPb) GetHaltReasons() []*ThreadHaltReasonPb {
	if x != nil {
		return x.HaltReasons
	}
	return nil
}

func (x *ThreadRunPb) GetInterruptTriggerId() *ExternalEventIdPb {
	if x != nil {
		return x.InterruptTriggerId
	}
	return nil
}

func (x *ThreadRunPb) GetFailureBeingHandled() *FailureBeingHandledPb {
	if x != nil {
		return x.FailureBeingHandled
	}
	return nil
}

func (x *ThreadRunPb) GetCurrentNodePosition() int32 {
	if x != nil {
		return x.CurrentNodePosition
	}
	return 0
}

func (x *ThreadRunPb) GetHandledFailedChildren() []int32 {
	if x != nil {
		return x.HandledFailedChildren
	}
	return nil
}

func (x *ThreadRunPb) GetType() ThreadTypePb {
	if x != nil {
		return x.Type
	}
	return ThreadTypePb_ENTRYPOINT
}

type FailureBeingHandledPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadRunNumber int32 `protobuf:"varint,1,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	NodeRunPosition int32 `protobuf:"varint,2,opt,name=node_run_position,json=nodeRunPosition,proto3" json:"node_run_position,omitempty"`
	FailureNumber   int32 `protobuf:"varint,3,opt,name=failure_number,json=failureNumber,proto3" json:"failure_number,omitempty"`
}

func (x *FailureBeingHandledPb) Reset() {
	*x = FailureBeingHandledPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureBeingHandledPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureBeingHandledPb) ProtoMessage() {}

func (x *FailureBeingHandledPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureBeingHandledPb.ProtoReflect.Descriptor instead.
func (*FailureBeingHandledPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{96}
}

func (x *FailureBeingHandledPb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *FailureBeingHandledPb) GetNodeRunPosition() int32 {
	if x != nil {
		return x.NodeRunPosition
	}
	return 0
}

func (x *FailureBeingHandledPb) GetFailureNumber() int32 {
	if x != nil {
		return x.FailureNumber
	}
	return 0
}

type PendingInterruptPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventId     *ExternalEventIdPb `protobuf:"bytes,1,opt,name=external_event_id,json=externalEventId,proto3" json:"external_event_id,omitempty"`
	HandlerSpecName     string             `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
	InterruptedThreadId int32              `protobuf:"varint,3,opt,name=interrupted_thread_id,json=interruptedThreadId,proto3" json:"interrupted_thread_id,omitempty"`
}

func (x *PendingInterruptPb) Reset() {
	*x = PendingInterruptPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingInterruptPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingInterruptPb) ProtoMessage() {}

func (x *PendingInterruptPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingInterruptPb.ProtoReflect.Descriptor instead.
func (*PendingInterruptPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{97}
}

func (x *PendingInterruptPb) GetExternalEventId() *ExternalEventIdPb {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

func (x *PendingInterruptPb) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

func (x *PendingInterruptPb) GetInterruptedThreadId() int32 {
	if x != nil {
		return x.InterruptedThreadId
	}
	return 0
}

type PendingFailureHandlerPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedThreadRun int32  `protobuf:"varint,1,opt,name=failed_thread_run,json=failedThreadRun,proto3" json:"failed_thread_run,omitempty"`
	HandlerSpecName string `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *PendingFailureHandlerPb) Reset() {
	*x = PendingFailureHandlerPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingFailureHandlerPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingFailureHandlerPb) ProtoMessage() {}

func (x *PendingFailureHandlerPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingFailureHandlerPb.ProtoReflect.Descriptor instead.
func (*PendingFailureHandlerPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{98}
}

func (x *PendingFailureHandlerPb) GetFailedThreadRun() int32 {
	if x != nil {
		return x.FailedThreadRun
	}
	return 0
}

func (x *PendingFailureHandlerPb) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type PendingInterruptHaltReasonPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventId *ExternalEventIdPb `protobuf:"bytes,1,opt,name=external_event_id,json=externalEventId,proto3" json:"external_event_id,omitempty"`
}

func (x *PendingInterruptHaltReasonPb) Reset() {
	*x = PendingInterruptHaltReasonPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingInterruptHaltReasonPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingInterruptHaltReasonPb) ProtoMessage() {}

func (x *PendingInterruptHaltReasonPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingInterruptHaltReasonPb.ProtoReflect.Descriptor instead.
func (*PendingInterruptHaltReasonPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{99}
}

func (x *PendingInterruptHaltReasonPb) GetExternalEventId() *ExternalEventIdPb {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

type PendingFailureHandlerHaltReasonPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunPosition int32 `protobuf:"varint,1,opt,name=node_run_position,json=nodeRunPosition,proto3" json:"node_run_position,omitempty"`
}

func (x *PendingFailureHandlerHaltReasonPb) Reset() {
	*x = PendingFailureHandlerHaltReasonPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingFailureHandlerHaltReasonPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingFailureHandlerHaltReasonPb) ProtoMessage() {}

func (x *PendingFailureHandlerHaltReasonPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingFailureHandlerHaltReasonPb.ProtoReflect.Descriptor instead.
func (*PendingFailureHandlerHaltReasonPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{100}
}

func (x *PendingFailureHandlerHaltReasonPb) GetNodeRunPosition() int32 {
	if x != nil {
		return x.NodeRunPosition
	}
	return 0
}

type HandlingFailureHaltReasonPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandlerThreadId int32 `protobuf:"varint,1,opt,name=handler_thread_id,json=handlerThreadId,proto3" json:"handler_thread_id,omitempty"`
}

func (x *HandlingFailureHaltReasonPb) Reset() {
	*x = HandlingFailureHaltReasonPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlingFailureHaltReasonPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlingFailureHaltReasonPb) ProtoMessage() {}

func (x *HandlingFailureHaltReasonPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlingFailureHaltReasonPb.ProtoReflect.Descriptor instead.
func (*HandlingFailureHaltReasonPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{101}
}

func (x *HandlingFailureHaltReasonPb) GetHandlerThreadId() int32 {
	if x != nil {
		return x.HandlerThreadId
	}
	return 0
}

type ParentHaltedPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentThreadId int32 `protobuf:"varint,1,opt,name=parent_thread_id,json=parentThreadId,proto3" json:"parent_thread_id,omitempty"`
}

func (x *ParentHaltedPb) Reset() {
	*x = ParentHaltedPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentHaltedPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentHaltedPb) ProtoMessage() {}

func (x *ParentHaltedPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentHaltedPb.ProtoReflect.Descriptor instead.
func (*ParentHaltedPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{102}
}

func (x *ParentHaltedPb) GetParentThreadId() int32 {
	if x != nil {
		return x.ParentThreadId
	}
	return 0
}

type InterruptedPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterruptThreadId int32 `protobuf:"varint,1,opt,name=interrupt_thread_id,json=interruptThreadId,proto3" json:"interrupt_thread_id,omitempty"`
}

func (x *InterruptedPb) Reset() {
	*x = InterruptedPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptedPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptedPb) ProtoMessage() {}

func (x *InterruptedPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptedPb.ProtoReflect.Descriptor instead.
func (*InterruptedPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{103}
}

func (x *InterruptedPb) GetInterruptThreadId() int32 {
	if x != nil {
		return x.InterruptThreadId
	}
	return 0
}

type ManualHaltPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nothing to store.
	MeaningOfLife bool `protobuf:"varint,137,opt,name=meaning_of_life,json=meaningOfLife,proto3" json:"meaning_of_life,omitempty"`
}

func (x *ManualHaltPb) Reset() {
	*x = ManualHaltPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualHaltPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualHaltPb) ProtoMessage() {}

func (x *ManualHaltPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualHaltPb.ProtoReflect.Descriptor instead.
func (*ManualHaltPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{104}
}

func (x *ManualHaltPb) GetMeaningOfLife() bool {
	if x != nil {
		return x.MeaningOfLife
	}
	return false
}

type ThreadHaltReasonPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*ThreadHaltReasonPb_ParentHalted
	//	*ThreadHaltReasonPb_Interrupted
	//	*ThreadHaltReasonPb_PendingInterrupt
	//	*ThreadHaltReasonPb_PendingFailure
	//	*ThreadHaltReasonPb_HandlingFailure
	//	*ThreadHaltReasonPb_ManualHalt
	Reason isThreadHaltReasonPb_Reason `protobuf_oneof:"reason"`
}

func (x *ThreadHaltReasonPb) Reset() {
	*x = ThreadHaltReasonPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadHaltReasonPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadHaltReasonPb) ProtoMessage() {}

func (x *ThreadHaltReasonPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadHaltReasonPb.ProtoReflect.Descriptor instead.
func (*ThreadHaltReasonPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{105}
}

func (m *ThreadHaltReasonPb) GetReason() isThreadHaltReasonPb_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ThreadHaltReasonPb) GetParentHalted() *ParentHaltedPb {
	if x, ok := x.GetReason().(*ThreadHaltReasonPb_ParentHalted); ok {
		return x.ParentHalted
	}
	return nil
}

func (x *ThreadHaltReasonPb) GetInterrupted() *InterruptedPb {
	if x, ok := x.GetReason().(*ThreadHaltReasonPb_Interrupted); ok {
		return x.Interrupted
	}
	return nil
}

func (x *ThreadHaltReasonPb) GetPendingInterrupt() *PendingInterruptHaltReasonPb {
	if x, ok := x.GetReason().(*ThreadHaltReasonPb_PendingInterrupt); ok {
		return x.PendingInterrupt
	}
	return nil
}

func (x *ThreadHaltReasonPb) GetPendingFailure() *PendingFailureHandlerHaltReasonPb {
	if x, ok := x.GetReason().(*ThreadHaltReasonPb_PendingFailure); ok {
		return x.PendingFailure
	}
	return nil
}

func (x *ThreadHaltReasonPb) GetHandlingFailure() *HandlingFailureHaltReasonPb {
	if x, ok := x.GetReason().(*ThreadHaltReasonPb_HandlingFailure); ok {
		return x.HandlingFailure
	}
	return nil
}

func (x *ThreadHaltReasonPb) GetManualHalt() *ManualHaltPb {
	if x, ok := x.GetReason().(*ThreadHaltReasonPb_ManualHalt); ok {
		return x.ManualHalt
	}
	return nil
}

type isThreadHaltReasonPb_Reason interface {
	isThreadHaltReasonPb_Reason()
}

type ThreadHaltReasonPb_ParentHalted struct {
	ParentHalted *ParentHaltedPb `protobuf:"bytes,1,opt,name=parent_halted,json=parentHalted,proto3,oneof"`
}

type ThreadHaltReasonPb_Interrupted struct {
	Interrupted *InterruptedPb `protobuf:"bytes,2,opt,name=interrupted,proto3,oneof"`
}

type ThreadHaltReasonPb_PendingInterrupt struct {
	PendingInterrupt *PendingInterruptHaltReasonPb `protobuf:"bytes,3,opt,name=pending_interrupt,json=pendingInterrupt,proto3,oneof"`
}

type ThreadHaltReasonPb_PendingFailure struct {
	PendingFailure *PendingFailureHandlerHaltReasonPb `protobuf:"bytes,4,opt,name=pending_failure,json=pendingFailure,proto3,oneof"`
}

type ThreadHaltReasonPb_HandlingFailure struct {
	HandlingFailure *HandlingFailureHaltReasonPb `protobuf:"bytes,5,opt,name=handling_failure,json=handlingFailure,proto3,oneof"`
}

type ThreadHaltReasonPb_ManualHalt struct {
	ManualHalt *ManualHaltPb `protobuf:"bytes,6,opt,name=manual_halt,json=manualHalt,proto3,oneof"`
}

func (*ThreadHaltReasonPb_ParentHalted) isThreadHaltReasonPb_Reason() {}

func (*ThreadHaltReasonPb_Interrupted) isThreadHaltReasonPb_Reason() {}

func (*ThreadHaltReasonPb_PendingInterrupt) isThreadHaltReasonPb_Reason() {}

func (*ThreadHaltReasonPb_PendingFailure) isThreadHaltReasonPb_Reason() {}

func (*ThreadHaltReasonPb_HandlingFailure) isThreadHaltReasonPb_Reason() {}

func (*ThreadHaltReasonPb_ManualHalt) isThreadHaltReasonPb_Reason() {}

type NodeRunIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Position        int32  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *NodeRunIdPb) Reset() {
	*x = NodeRunIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRunIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRunIdPb) ProtoMessage() {}

func (x *NodeRunIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRunIdPb.ProtoReflect.Descriptor instead.
func (*NodeRunIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{106}
}

func (x *NodeRunIdPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *NodeRunIdPb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *NodeRunIdPb) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

type TaskNodeRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRunId *TaskRunIdPb `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3,oneof" json:"task_run_id,omitempty"`
}

func (x *TaskNodeRunPb) Reset() {
	*x = TaskNodeRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNodeRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNodeRunPb) ProtoMessage() {}

func (x *TaskNodeRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNodeRunPb.ProtoReflect.Descriptor instead.
func (*TaskNodeRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{107}
}

func (x *TaskNodeRunPb) GetTaskRunId() *TaskRunIdPb {
	if x != nil {
		return x.TaskRunId
	}
	return nil
}

type UserTaskNodeRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunIdPb `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3,oneof" json:"user_task_run_id,omitempty"`
}

func (x *UserTaskNodeRunPb) Reset() {
	*x = UserTaskNodeRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskNodeRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskNodeRunPb) ProtoMessage() {}

func (x *UserTaskNodeRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskNodeRunPb.ProtoReflect.Descriptor instead.
func (*UserTaskNodeRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{108}
}

func (x *UserTaskNodeRunPb) GetUserTaskRunId() *UserTaskRunIdPb {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

type NodeRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Position        int32                  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Status          LHStatusPb             `protobuf:"varint,6,opt,name=status,proto3,enum=littlehorse.LHStatusPb" json:"status,omitempty"`
	ArrivalTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	WfSpecId        *WfSpecIdPb            `protobuf:"bytes,9,opt,name=wf_spec_id,json=wfSpecId,proto3" json:"wf_spec_id,omitempty"`
	ThreadSpecName  string                 `protobuf:"bytes,10,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	NodeName        string                 `protobuf:"bytes,11,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ErrorMessage    *string                `protobuf:"bytes,13,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	Failures        []*FailurePb           `protobuf:"bytes,14,rep,name=failures,proto3" json:"failures,omitempty"`
	// Types that are assignable to NodeType:
	//
	//	*NodeRunPb_Task
	//	*NodeRunPb_ExternalEvent
	//	*NodeRunPb_Entrypoint
	//	*NodeRunPb_Exit
	//	*NodeRunPb_StartThread
	//	*NodeRunPb_WaitThreads
	//	*NodeRunPb_Sleep
	//	*NodeRunPb_UserTask
	NodeType          isNodeRunPb_NodeType `protobuf_oneof:"node_type"`
	FailureHandlerIds []int32              `protobuf:"varint,23,rep,packed,name=failure_handler_ids,json=failureHandlerIds,proto3" json:"failure_handler_ids,omitempty"`
}

func (x *NodeRunPb) Reset() {
	*x = NodeRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRunPb) ProtoMessage() {}

func (x *NodeRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRunPb.ProtoReflect.Descriptor instead.
func (*NodeRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{109}
}

func (x *NodeRunPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *NodeRunPb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *NodeRunPb) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *NodeRunPb) GetStatus() LHStatusPb {
	if x != nil {
		return x.Status
	}
	return LHStatusPb_STARTING
}

func (x *NodeRunPb) GetArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *NodeRunPb) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NodeRunPb) GetWfSpecId() *WfSpecIdPb {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

func (x *NodeRunPb) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *NodeRunPb) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeRunPb) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *NodeRunPb) GetFailures() []*FailurePb {
	if x != nil {
		return x.Failures
	}
	return nil
}

func (m *NodeRunPb) GetNodeType() isNodeRunPb_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (x *NodeRunPb) GetTask() *TaskNodeRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_Task); ok {
		return x.Task
	}
	return nil
}

func (x *NodeRunPb) GetExternalEvent() *ExternalEventRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_ExternalEvent); ok {
		return x.ExternalEvent
	}
	return nil
}

func (x *NodeRunPb) GetEntrypoint() *EntrypointRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_Entrypoint); ok {
		return x.Entrypoint
	}
	return nil
}

func (x *NodeRunPb) GetExit() *ExitRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *NodeRunPb) GetStartThread() *StartThreadRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_StartThread); ok {
		return x.StartThread
	}
	return nil
}

func (x *NodeRunPb) GetWaitThreads() *WaitForThreadsRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_WaitThreads); ok {
		return x.WaitThreads
	}
	return nil
}

func (x *NodeRunPb) GetSleep() *SleepNodeRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *NodeRunPb) GetUserTask() *UserTaskNodeRunPb {
	if x, ok := x.GetNodeType().(*NodeRunPb_UserTask); ok {
		return x.UserTask
	}
	return nil
}

func (x *NodeRunPb) GetFailureHandlerIds() []int32 {
	if x != nil {
		return x.FailureHandlerIds
	}
	return nil
}

type isNodeRunPb_NodeType interface {
	isNodeRunPb_NodeType()
}

type NodeRunPb_Task struct {
	Task *TaskNodeRunPb `protobuf:"bytes,15,opt,name=task,proto3,oneof"`
}

type NodeRunPb_ExternalEvent struct {
	ExternalEvent *ExternalEventRunPb `protobuf:"bytes,16,opt,name=external_event,json=externalEvent,proto3,oneof"`
}

type NodeRunPb_Entrypoint struct {
	Entrypoint *EntrypointRunPb `protobuf:"bytes,17,opt,name=entrypoint,proto3,oneof"`
}

type NodeRunPb_Exit struct {
	Exit *ExitRunPb `protobuf:"bytes,19,opt,name=exit,proto3,oneof"`
}

type NodeRunPb_StartThread struct {
	StartThread *StartThreadRunPb `protobuf:"bytes,20,opt,name=start_thread,json=startThread,proto3,oneof"`
}

type NodeRunPb_WaitThreads struct {
	WaitThreads *WaitForThreadsRunPb `protobuf:"bytes,21,opt,name=wait_threads,json=waitThreads,proto3,oneof"`
}

type NodeRunPb_Sleep struct {
	Sleep *SleepNodeRunPb `protobuf:"bytes,22,opt,name=sleep,proto3,oneof"`
}

type NodeRunPb_UserTask struct {
	UserTask *UserTaskNodeRunPb `protobuf:"bytes,24,opt,name=user_task,json=userTask,proto3,oneof"`
}

func (*NodeRunPb_Task) isNodeRunPb_NodeType() {}

func (*NodeRunPb_ExternalEvent) isNodeRunPb_NodeType() {}

func (*NodeRunPb_Entrypoint) isNodeRunPb_NodeType() {}

func (*NodeRunPb_Exit) isNodeRunPb_NodeType() {}

func (*NodeRunPb_StartThread) isNodeRunPb_NodeType() {}

func (*NodeRunPb_WaitThreads) isNodeRunPb_NodeType() {}

func (*NodeRunPb_Sleep) isNodeRunPb_NodeType() {}

func (*NodeRunPb_UserTask) isNodeRunPb_NodeType() {}

type FailurePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureName string           `protobuf:"bytes,1,opt,name=failure_name,json=failureName,proto3" json:"failure_name,omitempty"`
	Message     string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Content     *VariableValuePb `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *FailurePb) Reset() {
	*x = FailurePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailurePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailurePb) ProtoMessage() {}

func (x *FailurePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailurePb.ProtoReflect.Descriptor instead.
func (*FailurePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{110}
}

func (x *FailurePb) GetFailureName() string {
	if x != nil {
		return x.FailureName
	}
	return ""
}

func (x *FailurePb) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FailurePb) GetContent() *VariableValuePb {
	if x != nil {
		return x.Content
	}
	return nil
}

type TaskAttemptPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output            *VariableValuePb       `protobuf:"bytes,1,opt,name=output,proto3,oneof" json:"output,omitempty"`
	LogOutput         *VariableValuePb       `protobuf:"bytes,2,opt,name=log_output,json=logOutput,proto3,oneof" json:"log_output,omitempty"`
	ScheduleTime      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=schedule_time,json=scheduleTime,proto3,oneof" json:"schedule_time,omitempty"`
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	TaskWorkerId      string                 `protobuf:"bytes,7,opt,name=task_worker_id,json=taskWorkerId,proto3" json:"task_worker_id,omitempty"`
	TaskWorkerVersion *string                `protobuf:"bytes,8,opt,name=task_worker_version,json=taskWorkerVersion,proto3,oneof" json:"task_worker_version,omitempty"`
	Status            TaskStatusPb           `protobuf:"varint,9,opt,name=status,proto3,enum=littlehorse.TaskStatusPb" json:"status,omitempty"`
}

func (x *TaskAttemptPb) Reset() {
	*x = TaskAttemptPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttemptPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttemptPb) ProtoMessage() {}

func (x *TaskAttemptPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttemptPb.ProtoReflect.Descriptor instead.
func (*TaskAttemptPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{111}
}

func (x *TaskAttemptPb) GetOutput() *VariableValuePb {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TaskAttemptPb) GetLogOutput() *VariableValuePb {
	if x != nil {
		return x.LogOutput
	}
	return nil
}

func (x *TaskAttemptPb) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

func (x *TaskAttemptPb) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskAttemptPb) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskAttemptPb) GetTaskWorkerId() string {
	if x != nil {
		return x.TaskWorkerId
	}
	return ""
}

func (x *TaskAttemptPb) GetTaskWorkerVersion() string {
	if x != nil && x.TaskWorkerVersion != nil {
		return *x.TaskWorkerVersion
	}
	return ""
}

func (x *TaskAttemptPb) GetStatus() TaskStatusPb {
	if x != nil {
		return x.Status
	}
	return TaskStatusPb_TASK_SCHEDULED
}

type TaskRunIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId  string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	TaskGuid string `protobuf:"bytes,2,opt,name=task_guid,json=taskGuid,proto3" json:"task_guid,omitempty"`
}

func (x *TaskRunIdPb) Reset() {
	*x = TaskRunIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRunIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunIdPb) ProtoMessage() {}

func (x *TaskRunIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunIdPb.ProtoReflect.Descriptor instead.
func (*TaskRunIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{112}
}

func (x *TaskRunIdPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *TaskRunIdPb) GetTaskGuid() string {
	if x != nil {
		return x.TaskGuid
	}
	return ""
}

type TaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *TaskRunIdPb           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attempts       []*TaskAttemptPb       `protobuf:"bytes,2,rep,name=attempts,proto3" json:"attempts,omitempty"`
	MaxAttempts    int32                  `protobuf:"varint,3,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	TaskDefName    string                 `protobuf:"bytes,4,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	InputVariables []*VarNameAndValPb     `protobuf:"bytes,5,rep,name=input_variables,json=inputVariables,proto3" json:"input_variables,omitempty"`
	Source         *TaskRunSourcePb       `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	ScheduledAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	Status         TaskStatusPb           `protobuf:"varint,8,opt,name=status,proto3,enum=littlehorse.TaskStatusPb" json:"status,omitempty"`
	TimeoutSeconds int32                  `protobuf:"varint,9,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *TaskRunPb) Reset() {
	*x = TaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunPb) ProtoMessage() {}

func (x *TaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunPb.ProtoReflect.Descriptor instead.
func (*TaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{113}
}

func (x *TaskRunPb) GetId() *TaskRunIdPb {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskRunPb) GetAttempts() []*TaskAttemptPb {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *TaskRunPb) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *TaskRunPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskRunPb) GetInputVariables() []*VarNameAndValPb {
	if x != nil {
		return x.InputVariables
	}
	return nil
}

func (x *TaskRunPb) GetSource() *TaskRunSourcePb {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TaskRunPb) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *TaskRunPb) GetStatus() TaskStatusPb {
	if x != nil {
		return x.Status
	}
	return TaskStatusPb_TASK_SCHEDULED
}

func (x *TaskRunPb) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type TaskNodeReferencePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunId *NodeRunIdPb `protobuf:"bytes,1,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
	WfSpecId  *WfSpecIdPb  `protobuf:"bytes,2,opt,name=wf_spec_id,json=wfSpecId,proto3" json:"wf_spec_id,omitempty"`
}

func (x *TaskNodeReferencePb) Reset() {
	*x = TaskNodeReferencePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNodeReferencePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNodeReferencePb) ProtoMessage() {}

func (x *TaskNodeReferencePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNodeReferencePb.ProtoReflect.Descriptor instead.
func (*TaskNodeReferencePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{114}
}

func (x *TaskNodeReferencePb) GetNodeRunId() *NodeRunIdPb {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

func (x *TaskNodeReferencePb) GetWfSpecId() *WfSpecIdPb {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

type UserTaskTriggerReferencePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRunId           *NodeRunIdPb `protobuf:"bytes,1,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
	UserTaskEventNumber int32        `protobuf:"varint,2,opt,name=user_task_event_number,json=userTaskEventNumber,proto3" json:"user_task_event_number,omitempty"`
	WfSpecId            *WfSpecIdPb  `protobuf:"bytes,3,opt,name=wf_spec_id,json=wfSpecId,proto3" json:"wf_spec_id,omitempty"`
}

func (x *UserTaskTriggerReferencePb) Reset() {
	*x = UserTaskTriggerReferencePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskTriggerReferencePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskTriggerReferencePb) ProtoMessage() {}

func (x *UserTaskTriggerReferencePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskTriggerReferencePb.ProtoReflect.Descriptor instead.
func (*UserTaskTriggerReferencePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{115}
}

func (x *UserTaskTriggerReferencePb) GetNodeRunId() *NodeRunIdPb {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

func (x *UserTaskTriggerReferencePb) GetUserTaskEventNumber() int32 {
	if x != nil {
		return x.UserTaskEventNumber
	}
	return 0
}

func (x *UserTaskTriggerReferencePb) GetWfSpecId() *WfSpecIdPb {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

type EntrypointRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntrypointRunPb) Reset() {
	*x = EntrypointRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointRunPb) ProtoMessage() {}

func (x *EntrypointRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointRunPb.ProtoReflect.Descriptor instead.
func (*EntrypointRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{116}
}

type ExitRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitRunPb) Reset() {
	*x = ExitRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRunPb) ProtoMessage() {}

func (x *ExitRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRunPb.ProtoReflect.Descriptor instead.
func (*ExitRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{117}
}

type StartThreadRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildThreadId  *int32 `protobuf:"varint,1,opt,name=child_thread_id,json=childThreadId,proto3,oneof" json:"child_thread_id,omitempty"`
	ThreadSpecName string `protobuf:"bytes,2,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
}

func (x *StartThreadRunPb) Reset() {
	*x = StartThreadRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartThreadRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartThreadRunPb) ProtoMessage() {}

func (x *StartThreadRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartThreadRunPb.ProtoReflect.Descriptor instead.
func (*StartThreadRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{118}
}

func (x *StartThreadRunPb) GetChildThreadId() int32 {
	if x != nil && x.ChildThreadId != nil {
		return *x.ChildThreadId
	}
	return 0
}

func (x *StartThreadRunPb) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

type WaitForThreadsRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*WaitForThreadsRunPb_WaitForThreadPb `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *WaitForThreadsRunPb) Reset() {
	*x = WaitForThreadsRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsRunPb) ProtoMessage() {}

func (x *WaitForThreadsRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsRunPb.ProtoReflect.Descriptor instead.
func (*WaitForThreadsRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{119}
}

func (x *WaitForThreadsRunPb) GetThreads() []*WaitForThreadsRunPb_WaitForThreadPb {
	if x != nil {
		return x.Threads
	}
	return nil
}

type ExternalEventRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string                 `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	EventTime            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3,oneof" json:"event_time,omitempty"`
	ExternalEventId      *ExternalEventIdPb     `protobuf:"bytes,3,opt,name=external_event_id,json=externalEventId,proto3,oneof" json:"external_event_id,omitempty"`
}

func (x *ExternalEventRunPb) Reset() {
	*x = ExternalEventRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventRunPb) ProtoMessage() {}

func (x *ExternalEventRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventRunPb.ProtoReflect.Descriptor instead.
func (*ExternalEventRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{120}
}

func (x *ExternalEventRunPb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventRunPb) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *ExternalEventRunPb) GetExternalEventId() *ExternalEventIdPb {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

type SleepNodeRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaturationTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=maturation_time,json=maturationTime,proto3" json:"maturation_time,omitempty"`
}

func (x *SleepNodeRunPb) Reset() {
	*x = SleepNodeRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepNodeRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepNodeRunPb) ProtoMessage() {}

func (x *SleepNodeRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepNodeRunPb.ProtoReflect.Descriptor instead.
func (*SleepNodeRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{121}
}

func (x *SleepNodeRunPb) GetMaturationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturationTime
	}
	return nil
}

type EdgeConditionPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparator ComparatorPb          `protobuf:"varint,1,opt,name=comparator,proto3,enum=littlehorse.ComparatorPb" json:"comparator,omitempty"`
	Left       *VariableAssignmentPb `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right      *VariableAssignmentPb `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *EdgeConditionPb) Reset() {
	*x = EdgeConditionPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeConditionPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeConditionPb) ProtoMessage() {}

func (x *EdgeConditionPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeConditionPb.ProtoReflect.Descriptor instead.
func (*EdgeConditionPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{122}
}

func (x *EdgeConditionPb) GetComparator() ComparatorPb {
	if x != nil {
		return x.Comparator
	}
	return ComparatorPb_LESS_THAN
}

func (x *EdgeConditionPb) GetLeft() *VariableAssignmentPb {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *EdgeConditionPb) GetRight() *VariableAssignmentPb {
	if x != nil {
		return x.Right
	}
	return nil
}

type EdgePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinkNodeName string           `protobuf:"bytes,1,opt,name=sink_node_name,json=sinkNodeName,proto3" json:"sink_node_name,omitempty"`
	Condition    *EdgeConditionPb `protobuf:"bytes,2,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
}

func (x *EdgePb) Reset() {
	*x = EdgePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgePb) ProtoMessage() {}

func (x *EdgePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgePb.ProtoReflect.Descriptor instead.
func (*EdgePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{123}
}

func (x *EdgePb) GetSinkNodeName() string {
	if x != nil {
		return x.SinkNodeName
	}
	return ""
}

func (x *EdgePb) GetCondition() *EdgeConditionPb {
	if x != nil {
		return x.Condition
	}
	return nil
}

type VariableAssignmentPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonPath *string `protobuf:"bytes,1,opt,name=json_path,json=jsonPath,proto3,oneof" json:"json_path,omitempty"`
	// Types that are assignable to Source:
	//
	//	*VariableAssignmentPb_VariableName
	//	*VariableAssignmentPb_LiteralValue
	//	*VariableAssignmentPb_FormatString
	Source isVariableAssignmentPb_Source `protobuf_oneof:"source"`
}

func (x *VariableAssignmentPb) Reset() {
	*x = VariableAssignmentPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAssignmentPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAssignmentPb) ProtoMessage() {}

func (x *VariableAssignmentPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAssignmentPb.ProtoReflect.Descriptor instead.
func (*VariableAssignmentPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{124}
}

func (x *VariableAssignmentPb) GetJsonPath() string {
	if x != nil && x.JsonPath != nil {
		return *x.JsonPath
	}
	return ""
}

func (m *VariableAssignmentPb) GetSource() isVariableAssignmentPb_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *VariableAssignmentPb) GetVariableName() string {
	if x, ok := x.GetSource().(*VariableAssignmentPb_VariableName); ok {
		return x.VariableName
	}
	return ""
}

func (x *VariableAssignmentPb) GetLiteralValue() *VariableValuePb {
	if x, ok := x.GetSource().(*VariableAssignmentPb_LiteralValue); ok {
		return x.LiteralValue
	}
	return nil
}

func (x *VariableAssignmentPb) GetFormatString() *VariableAssignmentPb_FormatStringPb {
	if x, ok := x.GetSource().(*VariableAssignmentPb_FormatString); ok {
		return x.FormatString
	}
	return nil
}

type isVariableAssignmentPb_Source interface {
	isVariableAssignmentPb_Source()
}

type VariableAssignmentPb_VariableName struct {
	VariableName string `protobuf:"bytes,2,opt,name=variable_name,json=variableName,proto3,oneof"`
}

type VariableAssignmentPb_LiteralValue struct {
	LiteralValue *VariableValuePb `protobuf:"bytes,3,opt,name=literal_value,json=literalValue,proto3,oneof"`
}

type VariableAssignmentPb_FormatString struct {
	FormatString *VariableAssignmentPb_FormatStringPb `protobuf:"bytes,4,opt,name=format_string,json=formatString,proto3,oneof"`
}

func (*VariableAssignmentPb_VariableName) isVariableAssignmentPb_Source() {}

func (*VariableAssignmentPb_LiteralValue) isVariableAssignmentPb_Source() {}

func (*VariableAssignmentPb_FormatString) isVariableAssignmentPb_Source() {}

type VariableMutationPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LhsName     string                 `protobuf:"bytes,1,opt,name=lhs_name,json=lhsName,proto3" json:"lhs_name,omitempty"`
	LhsJsonPath *string                `protobuf:"bytes,2,opt,name=lhs_json_path,json=lhsJsonPath,proto3,oneof" json:"lhs_json_path,omitempty"`
	Operation   VariableMutationTypePb `protobuf:"varint,3,opt,name=operation,proto3,enum=littlehorse.VariableMutationTypePb" json:"operation,omitempty"`
	// Types that are assignable to RhsValue:
	//
	//	*VariableMutationPb_SourceVariable
	//	*VariableMutationPb_LiteralValue
	//	*VariableMutationPb_NodeOutput
	RhsValue isVariableMutationPb_RhsValue `protobuf_oneof:"rhs_value"`
}

func (x *VariableMutationPb) Reset() {
	*x = VariableMutationPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableMutationPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableMutationPb) ProtoMessage() {}

func (x *VariableMutationPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableMutationPb.ProtoReflect.Descriptor instead.
func (*VariableMutationPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{125}
}

func (x *VariableMutationPb) GetLhsName() string {
	if x != nil {
		return x.LhsName
	}
	return ""
}

func (x *VariableMutationPb) GetLhsJsonPath() string {
	if x != nil && x.LhsJsonPath != nil {
		return *x.LhsJsonPath
	}
	return ""
}

func (x *VariableMutationPb) GetOperation() VariableMutationTypePb {
	if x != nil {
		return x.Operation
	}
	return VariableMutationTypePb_ASSIGN
}

func (m *VariableMutationPb) GetRhsValue() isVariableMutationPb_RhsValue {
	if m != nil {
		return m.RhsValue
	}
	return nil
}

func (x *VariableMutationPb) GetSourceVariable() *VariableAssignmentPb {
	if x, ok := x.GetRhsValue().(*VariableMutationPb_SourceVariable); ok {
		return x.SourceVariable
	}
	return nil
}

func (x *VariableMutationPb) GetLiteralValue() *VariableValuePb {
	if x, ok := x.GetRhsValue().(*VariableMutationPb_LiteralValue); ok {
		return x.LiteralValue
	}
	return nil
}

func (x *VariableMutationPb) GetNodeOutput() *VariableMutationPb_NodeOutputSourcePb {
	if x, ok := x.GetRhsValue().(*VariableMutationPb_NodeOutput); ok {
		return x.NodeOutput
	}
	return nil
}

type isVariableMutationPb_RhsValue interface {
	isVariableMutationPb_RhsValue()
}

type VariableMutationPb_SourceVariable struct {
	SourceVariable *VariableAssignmentPb `protobuf:"bytes,4,opt,name=source_variable,json=sourceVariable,proto3,oneof"`
}

type VariableMutationPb_LiteralValue struct {
	LiteralValue *VariableValuePb `protobuf:"bytes,5,opt,name=literal_value,json=literalValue,proto3,oneof"`
}

type VariableMutationPb_NodeOutput struct {
	NodeOutput *VariableMutationPb_NodeOutputSourcePb `protobuf:"bytes,6,opt,name=node_output,json=nodeOutput,proto3,oneof"`
}

func (*VariableMutationPb_SourceVariable) isVariableMutationPb_RhsValue() {}

func (*VariableMutationPb_LiteralValue) isVariableMutationPb_RhsValue() {}

func (*VariableMutationPb_NodeOutput) isVariableMutationPb_RhsValue() {}

type NopNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NopNodePb) Reset() {
	*x = NopNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NopNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NopNodePb) ProtoMessage() {}

func (x *NopNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NopNodePb.ProtoReflect.Descriptor instead.
func (*NopNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{126}
}

type SleepNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SleepLength:
	//
	//	*SleepNodePb_RawSeconds
	//	*SleepNodePb_Timestamp
	//	*SleepNodePb_IsoDate
	SleepLength isSleepNodePb_SleepLength `protobuf_oneof:"sleep_length"`
}

func (x *SleepNodePb) Reset() {
	*x = SleepNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepNodePb) ProtoMessage() {}

func (x *SleepNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepNodePb.ProtoReflect.Descriptor instead.
func (*SleepNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{127}
}

func (m *SleepNodePb) GetSleepLength() isSleepNodePb_SleepLength {
	if m != nil {
		return m.SleepLength
	}
	return nil
}

func (x *SleepNodePb) GetRawSeconds() *VariableAssignmentPb {
	if x, ok := x.GetSleepLength().(*SleepNodePb_RawSeconds); ok {
		return x.RawSeconds
	}
	return nil
}

func (x *SleepNodePb) GetTimestamp() *VariableAssignmentPb {
	if x, ok := x.GetSleepLength().(*SleepNodePb_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *SleepNodePb) GetIsoDate() *VariableAssignmentPb {
	if x, ok := x.GetSleepLength().(*SleepNodePb_IsoDate); ok {
		return x.IsoDate
	}
	return nil
}

type isSleepNodePb_SleepLength interface {
	isSleepNodePb_SleepLength()
}

type SleepNodePb_RawSeconds struct {
	RawSeconds *VariableAssignmentPb `protobuf:"bytes,1,opt,name=raw_seconds,json=rawSeconds,proto3,oneof"`
}

type SleepNodePb_Timestamp struct {
	Timestamp *VariableAssignmentPb `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type SleepNodePb_IsoDate struct {
	IsoDate *VariableAssignmentPb `protobuf:"bytes,3,opt,name=iso_date,json=isoDate,proto3,oneof"`
}

func (*SleepNodePb_RawSeconds) isSleepNodePb_SleepLength() {}

func (*SleepNodePb_Timestamp) isSleepNodePb_SleepLength() {}

func (*SleepNodePb_IsoDate) isSleepNodePb_SleepLength() {}

type NodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutgoingEdges     []*EdgePb              `protobuf:"bytes,1,rep,name=outgoing_edges,json=outgoingEdges,proto3" json:"outgoing_edges,omitempty"`
	VariableMutations []*VariableMutationPb  `protobuf:"bytes,2,rep,name=variable_mutations,json=variableMutations,proto3" json:"variable_mutations,omitempty"`
	FailureHandlers   []*FailureHandlerDefPb `protobuf:"bytes,4,rep,name=failure_handlers,json=failureHandlers,proto3" json:"failure_handlers,omitempty"`
	// Types that are assignable to Node:
	//
	//	*NodePb_Entrypoint
	//	*NodePb_Exit
	//	*NodePb_Task
	//	*NodePb_ExternalEvent
	//	*NodePb_StartThread
	//	*NodePb_WaitForThreads
	//	*NodePb_Nop
	//	*NodePb_Sleep
	//	*NodePb_UserTask
	Node isNodePb_Node `protobuf_oneof:"node"`
}

func (x *NodePb) Reset() {
	*x = NodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePb) ProtoMessage() {}

func (x *NodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePb.ProtoReflect.Descriptor instead.
func (*NodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{128}
}

func (x *NodePb) GetOutgoingEdges() []*EdgePb {
	if x != nil {
		return x.OutgoingEdges
	}
	return nil
}

func (x *NodePb) GetVariableMutations() []*VariableMutationPb {
	if x != nil {
		return x.VariableMutations
	}
	return nil
}

func (x *NodePb) GetFailureHandlers() []*FailureHandlerDefPb {
	if x != nil {
		return x.FailureHandlers
	}
	return nil
}

func (m *NodePb) GetNode() isNodePb_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *NodePb) GetEntrypoint() *EntrypointNodePb {
	if x, ok := x.GetNode().(*NodePb_Entrypoint); ok {
		return x.Entrypoint
	}
	return nil
}

func (x *NodePb) GetExit() *ExitNodePb {
	if x, ok := x.GetNode().(*NodePb_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *NodePb) GetTask() *TaskNodePb {
	if x, ok := x.GetNode().(*NodePb_Task); ok {
		return x.Task
	}
	return nil
}

func (x *NodePb) GetExternalEvent() *ExternalEventNodePb {
	if x, ok := x.GetNode().(*NodePb_ExternalEvent); ok {
		return x.ExternalEvent
	}
	return nil
}

func (x *NodePb) GetStartThread() *StartThreadNodePb {
	if x, ok := x.GetNode().(*NodePb_StartThread); ok {
		return x.StartThread
	}
	return nil
}

func (x *NodePb) GetWaitForThreads() *WaitForThreadsNodePb {
	if x, ok := x.GetNode().(*NodePb_WaitForThreads); ok {
		return x.WaitForThreads
	}
	return nil
}

func (x *NodePb) GetNop() *NopNodePb {
	if x, ok := x.GetNode().(*NodePb_Nop); ok {
		return x.Nop
	}
	return nil
}

func (x *NodePb) GetSleep() *SleepNodePb {
	if x, ok := x.GetNode().(*NodePb_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *NodePb) GetUserTask() *UserTaskNodePb {
	if x, ok := x.GetNode().(*NodePb_UserTask); ok {
		return x.UserTask
	}
	return nil
}

type isNodePb_Node interface {
	isNodePb_Node()
}

type NodePb_Entrypoint struct {
	Entrypoint *EntrypointNodePb `protobuf:"bytes,5,opt,name=entrypoint,proto3,oneof"`
}

type NodePb_Exit struct {
	Exit *ExitNodePb `protobuf:"bytes,6,opt,name=exit,proto3,oneof"`
}

type NodePb_Task struct {
	Task *TaskNodePb `protobuf:"bytes,7,opt,name=task,proto3,oneof"`
}

type NodePb_ExternalEvent struct {
	ExternalEvent *ExternalEventNodePb `protobuf:"bytes,8,opt,name=external_event,json=externalEvent,proto3,oneof"`
}

type NodePb_StartThread struct {
	StartThread *StartThreadNodePb `protobuf:"bytes,9,opt,name=start_thread,json=startThread,proto3,oneof"`
}

type NodePb_WaitForThreads struct {
	WaitForThreads *WaitForThreadsNodePb `protobuf:"bytes,10,opt,name=wait_for_threads,json=waitForThreads,proto3,oneof"`
}

type NodePb_Nop struct {
	Nop *NopNodePb `protobuf:"bytes,11,opt,name=nop,proto3,oneof"`
}

type NodePb_Sleep struct {
	Sleep *SleepNodePb `protobuf:"bytes,12,opt,name=sleep,proto3,oneof"`
}

type NodePb_UserTask struct {
	UserTask *UserTaskNodePb `protobuf:"bytes,13,opt,name=user_task,json=userTask,proto3,oneof"`
}

func (*NodePb_Entrypoint) isNodePb_Node() {}

func (*NodePb_Exit) isNodePb_Node() {}

func (*NodePb_Task) isNodePb_Node() {}

func (*NodePb_ExternalEvent) isNodePb_Node() {}

func (*NodePb_StartThread) isNodePb_Node() {}

func (*NodePb_WaitForThreads) isNodePb_Node() {}

func (*NodePb_Nop) isNodePb_Node() {}

func (*NodePb_Sleep) isNodePb_Node() {}

func (*NodePb_UserTask) isNodePb_Node() {}

type UserTaskFieldPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        VariableTypePb `protobuf:"varint,2,opt,name=type,proto3,enum=littlehorse.VariableTypePb" json:"type,omitempty"`
	Description *string        `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DisplayName string         `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *UserTaskFieldPb) Reset() {
	*x = UserTaskFieldPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskFieldPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskFieldPb) ProtoMessage() {}

func (x *UserTaskFieldPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskFieldPb.ProtoReflect.Descriptor instead.
func (*UserTaskFieldPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{129}
}

func (x *UserTaskFieldPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskFieldPb) GetType() VariableTypePb {
	if x != nil {
		return x.Type
	}
	return VariableTypePb_JSON_OBJ
}

func (x *UserTaskFieldPb) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserTaskFieldPb) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type UserTaskDefIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UserTaskDefIdPb) Reset() {
	*x = UserTaskDefIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskDefIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskDefIdPb) ProtoMessage() {}

func (x *UserTaskDefIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskDefIdPb.ProtoReflect.Descriptor instead.
func (*UserTaskDefIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{130}
}

func (x *UserTaskDefIdPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskDefIdPb) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UserTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Description *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Fields      []*UserTaskFieldPb     `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserTaskDefPb) Reset() {
	*x = UserTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskDefPb) ProtoMessage() {}

func (x *UserTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskDefPb.ProtoReflect.Descriptor instead.
func (*UserTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{131}
}

func (x *UserTaskDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskDefPb) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UserTaskDefPb) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserTaskDefPb) GetFields() []*UserTaskFieldPb {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UserTaskDefPb) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UTActionTriggerPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*UTActionTriggerPb_Task
	//	*UTActionTriggerPb_Cancel
	//	*UTActionTriggerPb_Reassign
	Action isUTActionTriggerPb_Action `protobuf_oneof:"action"`
	// When this action should happen
	//
	// Types that are assignable to ScheduleTime:
	//
	//	*UTActionTriggerPb_DelaySeconds
	ScheduleTime isUTActionTriggerPb_ScheduleTime `protobuf_oneof:"schedule_time"`
}

func (x *UTActionTriggerPb) Reset() {
	*x = UTActionTriggerPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTriggerPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTriggerPb) ProtoMessage() {}

func (x *UTActionTriggerPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTriggerPb.ProtoReflect.Descriptor instead.
func (*UTActionTriggerPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{132}
}

func (m *UTActionTriggerPb) GetAction() isUTActionTriggerPb_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *UTActionTriggerPb) GetTask() *UTActionTriggerPb_UTATaskPb {
	if x, ok := x.GetAction().(*UTActionTriggerPb_Task); ok {
		return x.Task
	}
	return nil
}

func (x *UTActionTriggerPb) GetCancel() *UTActionTriggerPb_UTACancelPb {
	if x, ok := x.GetAction().(*UTActionTriggerPb_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *UTActionTriggerPb) GetReassign() *UTActionTriggerPb_UTAReassignPb {
	if x, ok := x.GetAction().(*UTActionTriggerPb_Reassign); ok {
		return x.Reassign
	}
	return nil
}

func (m *UTActionTriggerPb) GetScheduleTime() isUTActionTriggerPb_ScheduleTime {
	if m != nil {
		return m.ScheduleTime
	}
	return nil
}

func (x *UTActionTriggerPb) GetDelaySeconds() *VariableAssignmentPb {
	if x, ok := x.GetScheduleTime().(*UTActionTriggerPb_DelaySeconds); ok {
		return x.DelaySeconds
	}
	return nil
}

type isUTActionTriggerPb_Action interface {
	isUTActionTriggerPb_Action()
}

type UTActionTriggerPb_Task struct {
	Task *UTActionTriggerPb_UTATaskPb `protobuf:"bytes,1,opt,name=task,proto3,oneof"`
}

type UTActionTriggerPb_Cancel struct {
	Cancel *UTActionTriggerPb_UTACancelPb `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

type UTActionTriggerPb_Reassign struct {
	Reassign *UTActionTriggerPb_UTAReassignPb `protobuf:"bytes,3,opt,name=reassign,proto3,oneof"` // later on, might enable scheduling entire ThreadRuns
}

func (*UTActionTriggerPb_Task) isUTActionTriggerPb_Action() {}

func (*UTActionTriggerPb_Cancel) isUTActionTriggerPb_Action() {}

func (*UTActionTriggerPb_Reassign) isUTActionTriggerPb_Action() {}

type isUTActionTriggerPb_ScheduleTime interface {
	isUTActionTriggerPb_ScheduleTime()
}

type UTActionTriggerPb_DelaySeconds struct {
	DelaySeconds *VariableAssignmentPb `protobuf:"bytes,5,opt,name=delay_seconds,json=delaySeconds,proto3,oneof"`
}

func (*UTActionTriggerPb_DelaySeconds) isUTActionTriggerPb_ScheduleTime() {}

type UserTaskNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskDefName string `protobuf:"bytes,1,opt,name=user_task_def_name,json=userTaskDefName,proto3" json:"user_task_def_name,omitempty"`
	// to whom should the Node be assigned?
	//
	// Types that are assignable to Assignment:
	//
	//	*UserTaskNodePb_UserGroup
	//	*UserTaskNodePb_UserId
	Assignment isUserTaskNodePb_Assignment `protobuf_oneof:"assignment"`
	// This is used to, for example, send a push notification to a mobile app
	// to remind someone that they need to fill out a task, or to re-assign
	// the task to another group of people
	Actions []*UTActionTriggerPb `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// So, once the WfSpec is created, this will be pinned to a version. Customer
	// can optionally specify a specific version or can leave it null, in which
	// case we just use the latest
	UserTaskDefVersion *int32 `protobuf:"varint,5,opt,name=user_task_def_version,json=userTaskDefVersion,proto3,oneof" json:"user_task_def_version,omitempty"`
	// Allow WfRun-specific notes for this User Task.
	Notes *VariableAssignmentPb `protobuf:"bytes,6,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *UserTaskNodePb) Reset() {
	*x = UserTaskNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskNodePb) ProtoMessage() {}

func (x *UserTaskNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskNodePb.ProtoReflect.Descriptor instead.
func (*UserTaskNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{133}
}

func (x *UserTaskNodePb) GetUserTaskDefName() string {
	if x != nil {
		return x.UserTaskDefName
	}
	return ""
}

func (m *UserTaskNodePb) GetAssignment() isUserTaskNodePb_Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (x *UserTaskNodePb) GetUserGroup() *VariableAssignmentPb {
	if x, ok := x.GetAssignment().(*UserTaskNodePb_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

func (x *UserTaskNodePb) GetUserId() *VariableAssignmentPb {
	if x, ok := x.GetAssignment().(*UserTaskNodePb_UserId); ok {
		return x.UserId
	}
	return nil
}

func (x *UserTaskNodePb) GetActions() []*UTActionTriggerPb {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *UserTaskNodePb) GetUserTaskDefVersion() int32 {
	if x != nil && x.UserTaskDefVersion != nil {
		return *x.UserTaskDefVersion
	}
	return 0
}

func (x *UserTaskNodePb) GetNotes() *VariableAssignmentPb {
	if x != nil {
		return x.Notes
	}
	return nil
}

type isUserTaskNodePb_Assignment interface {
	isUserTaskNodePb_Assignment()
}

type UserTaskNodePb_UserGroup struct {
	UserGroup *VariableAssignmentPb `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof"`
}

type UserTaskNodePb_UserId struct {
	UserId *VariableAssignmentPb `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*UserTaskNodePb_UserGroup) isUserTaskNodePb_Assignment() {}

func (*UserTaskNodePb_UserId) isUserTaskNodePb_Assignment() {}

type UserTaskEventPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*UserTaskEventPb_TaskExecuted
	//	*UserTaskEventPb_Reassigned
	//	*UserTaskEventPb_Cancelled
	Event isUserTaskEventPb_Event `protobuf_oneof:"event"`
}

func (x *UserTaskEventPb) Reset() {
	*x = UserTaskEventPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEventPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEventPb) ProtoMessage() {}

func (x *UserTaskEventPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEventPb.ProtoReflect.Descriptor instead.
func (*UserTaskEventPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134}
}

func (x *UserTaskEventPb) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (m *UserTaskEventPb) GetEvent() isUserTaskEventPb_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *UserTaskEventPb) GetTaskExecuted() *UserTaskEventPb_UTETaskExecutedPb {
	if x, ok := x.GetEvent().(*UserTaskEventPb_TaskExecuted); ok {
		return x.TaskExecuted
	}
	return nil
}

func (x *UserTaskEventPb) GetReassigned() *UserTaskEventPb_UTEReassignedPb {
	if x, ok := x.GetEvent().(*UserTaskEventPb_Reassigned); ok {
		return x.Reassigned
	}
	return nil
}

func (x *UserTaskEventPb) GetCancelled() *UserTaskEventPb_UTECancelledPb {
	if x, ok := x.GetEvent().(*UserTaskEventPb_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

type isUserTaskEventPb_Event interface {
	isUserTaskEventPb_Event()
}

type UserTaskEventPb_TaskExecuted struct {
	TaskExecuted *UserTaskEventPb_UTETaskExecutedPb `protobuf:"bytes,2,opt,name=task_executed,json=taskExecuted,proto3,oneof"`
}

type UserTaskEventPb_Reassigned struct {
	Reassigned *UserTaskEventPb_UTEReassignedPb `protobuf:"bytes,3,opt,name=reassigned,proto3,oneof"`
}

type UserTaskEventPb_Cancelled struct {
	Cancelled *UserTaskEventPb_UTECancelledPb `protobuf:"bytes,4,opt,name=cancelled,proto3,oneof"`
}

func (*UserTaskEventPb_TaskExecuted) isUserTaskEventPb_Event() {}

func (*UserTaskEventPb_Reassigned) isUserTaskEventPb_Event() {}

func (*UserTaskEventPb_Cancelled) isUserTaskEventPb_Event() {}

type UserTaskRunIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId      string `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	UserTaskGuid string `protobuf:"bytes,2,opt,name=user_task_guid,json=userTaskGuid,proto3" json:"user_task_guid,omitempty"`
}

func (x *UserTaskRunIdPb) Reset() {
	*x = UserTaskRunIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskRunIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskRunIdPb) ProtoMessage() {}

func (x *UserTaskRunIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskRunIdPb.ProtoReflect.Descriptor instead.
func (*UserTaskRunIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{135}
}

func (x *UserTaskRunIdPb) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *UserTaskRunIdPb) GetUserTaskGuid() string {
	if x != nil {
		return x.UserTaskGuid
	}
	return ""
}

// This is a Getable
type UserTaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *UserTaskRunIdPb `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserTaskDefId *UserTaskDefIdPb `protobuf:"bytes,2,opt,name=user_task_def_id,json=userTaskDefId,proto3" json:"user_task_def_id,omitempty"`
	// There are two ways the task could have been assigned
	// 1. The task can be taken by one specific person
	// 2. The task can be taken by anyone who is a member of a certain set of groups
	//
	// Types that are assignable to AssignedTo:
	//
	//	*UserTaskRunPb_SpecificUserId
	//	*UserTaskRunPb_UserGroup
	AssignedTo isUserTaskRunPb_AssignedTo `protobuf_oneof:"assigned_to"`
	// The task may be in one of two states:
	// 1. Claimed by a specific person.
	// 2. Not yet claimed.
	UserId        *string                  `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Results       []*UserTaskFieldResultPb `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	Status        UserTaskRunStatusPb      `protobuf:"varint,7,opt,name=status,proto3,enum=littlehorse.UserTaskRunStatusPb" json:"status,omitempty"`
	Events        []*UserTaskEventPb       `protobuf:"bytes,8,rep,name=events,proto3" json:"events,omitempty"`
	Notes         *string                  `protobuf:"bytes,9,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	ScheduledTime *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// If we ever allow ad-hoc User Tasks, this will move to an optional
	// field, or a `oneof user_task_source` field. However, note that such
	// a change would be fine from the API Compatibility perspective.
	NodeRunId *NodeRunIdPb `protobuf:"bytes,11,opt,name=node_run_id,json=nodeRunId,proto3" json:"node_run_id,omitempty"`
}

func (x *UserTaskRunPb) Reset() {
	*x = UserTaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskRunPb) ProtoMessage() {}

func (x *UserTaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskRunPb.ProtoReflect.Descriptor instead.
func (*UserTaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{136}
}

func (x *UserTaskRunPb) GetId() *UserTaskRunIdPb {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UserTaskRunPb) GetUserTaskDefId() *UserTaskDefIdPb {
	if x != nil {
		return x.UserTaskDefId
	}
	return nil
}

func (m *UserTaskRunPb) GetAssignedTo() isUserTaskRunPb_AssignedTo {
	if m != nil {
		return m.AssignedTo
	}
	return nil
}

func (x *UserTaskRunPb) GetSpecificUserId() string {
	if x, ok := x.GetAssignedTo().(*UserTaskRunPb_SpecificUserId); ok {
		return x.SpecificUserId
	}
	return ""
}

func (x *UserTaskRunPb) GetUserGroup() string {
	if x, ok := x.GetAssignedTo().(*UserTaskRunPb_UserGroup); ok {
		return x.UserGroup
	}
	return ""
}

func (x *UserTaskRunPb) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserTaskRunPb) GetResults() []*UserTaskFieldResultPb {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UserTaskRunPb) GetStatus() UserTaskRunStatusPb {
	if x != nil {
		return x.Status
	}
	return UserTaskRunStatusPb_UNASSIGNED
}

func (x *UserTaskRunPb) GetEvents() []*UserTaskEventPb {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *UserTaskRunPb) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *UserTaskRunPb) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *UserTaskRunPb) GetNodeRunId() *NodeRunIdPb {
	if x != nil {
		return x.NodeRunId
	}
	return nil
}

type isUserTaskRunPb_AssignedTo interface {
	isUserTaskRunPb_AssignedTo()
}

type UserTaskRunPb_SpecificUserId struct {
	SpecificUserId string `protobuf:"bytes,3,opt,name=specific_user_id,json=specificUserId,proto3,oneof"`
}

type UserTaskRunPb_UserGroup struct {
	UserGroup string `protobuf:"bytes,4,opt,name=user_group,json=userGroup,proto3,oneof"`
}

func (*UserTaskRunPb_SpecificUserId) isUserTaskRunPb_AssignedTo() {}

func (*UserTaskRunPb_UserGroup) isUserTaskRunPb_AssignedTo() {}

type AssignUserTaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunIdPb `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
	OverrideClaim bool             `protobuf:"varint,2,opt,name=override_claim,json=overrideClaim,proto3" json:"override_claim,omitempty"`
	// Types that are assignable to Assignee:
	//
	//	*AssignUserTaskRunPb_UserId
	//	*AssignUserTaskRunPb_UserGroup
	Assignee isAssignUserTaskRunPb_Assignee `protobuf_oneof:"assignee"`
}

func (x *AssignUserTaskRunPb) Reset() {
	*x = AssignUserTaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUserTaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUserTaskRunPb) ProtoMessage() {}

func (x *AssignUserTaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUserTaskRunPb.ProtoReflect.Descriptor instead.
func (*AssignUserTaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{137}
}

func (x *AssignUserTaskRunPb) GetUserTaskRunId() *UserTaskRunIdPb {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

func (x *AssignUserTaskRunPb) GetOverrideClaim() bool {
	if x != nil {
		return x.OverrideClaim
	}
	return false
}

func (m *AssignUserTaskRunPb) GetAssignee() isAssignUserTaskRunPb_Assignee {
	if m != nil {
		return m.Assignee
	}
	return nil
}

func (x *AssignUserTaskRunPb) GetUserId() string {
	if x, ok := x.GetAssignee().(*AssignUserTaskRunPb_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *AssignUserTaskRunPb) GetUserGroup() string {
	if x, ok := x.GetAssignee().(*AssignUserTaskRunPb_UserGroup); ok {
		return x.UserGroup
	}
	return ""
}

type isAssignUserTaskRunPb_Assignee interface {
	isAssignUserTaskRunPb_Assignee()
}

type AssignUserTaskRunPb_UserId struct {
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof"`
}

type AssignUserTaskRunPb_UserGroup struct {
	UserGroup string `protobuf:"bytes,4,opt,name=user_group,json=userGroup,proto3,oneof"`
}

func (*AssignUserTaskRunPb_UserId) isAssignUserTaskRunPb_Assignee() {}

func (*AssignUserTaskRunPb_UserGroup) isAssignUserTaskRunPb_Assignee() {}

type AssignUserTaskRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *AssignUserTaskRunReplyPb) Reset() {
	*x = AssignUserTaskRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUserTaskRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUserTaskRunReplyPb) ProtoMessage() {}

func (x *AssignUserTaskRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUserTaskRunReplyPb.ProtoReflect.Descriptor instead.
func (*AssignUserTaskRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{138}
}

func (x *AssignUserTaskRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *AssignUserTaskRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CompleteUserTaskRunReplyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    LHResponseCodePb `protobuf:"varint,1,opt,name=code,proto3,enum=littlehorse.LHResponseCodePb" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *CompleteUserTaskRunReplyPb) Reset() {
	*x = CompleteUserTaskRunReplyPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteUserTaskRunReplyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUserTaskRunReplyPb) ProtoMessage() {}

func (x *CompleteUserTaskRunReplyPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUserTaskRunReplyPb.ProtoReflect.Descriptor instead.
func (*CompleteUserTaskRunReplyPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{139}
}

func (x *CompleteUserTaskRunReplyPb) GetCode() LHResponseCodePb {
	if x != nil {
		return x.Code
	}
	return LHResponseCodePb_OK
}

func (x *CompleteUserTaskRunReplyPb) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type UserTaskFieldResultPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *VariableValuePb `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *UserTaskFieldResultPb) Reset() {
	*x = UserTaskFieldResultPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskFieldResultPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskFieldResultPb) ProtoMessage() {}

func (x *UserTaskFieldResultPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskFieldResultPb.ProtoReflect.Descriptor instead.
func (*UserTaskFieldResultPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{140}
}

func (x *UserTaskFieldResultPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskFieldResultPb) GetValue() *VariableValuePb {
	if x != nil {
		return x.Value
	}
	return nil
}

type UserTaskResultPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*UserTaskFieldResultPb `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *UserTaskResultPb) Reset() {
	*x = UserTaskResultPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskResultPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskResultPb) ProtoMessage() {}

func (x *UserTaskResultPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskResultPb.ProtoReflect.Descriptor instead.
func (*UserTaskResultPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{141}
}

func (x *UserTaskResultPb) GetFields() []*UserTaskFieldResultPb {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SaveUserTaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *UserTaskResultPb        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	UserId  string                   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Results []*UserTaskFieldResultPb `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SaveUserTaskRunPb) Reset() {
	*x = SaveUserTaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserTaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserTaskRunPb) ProtoMessage() {}

func (x *SaveUserTaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserTaskRunPb.ProtoReflect.Descriptor instead.
func (*SaveUserTaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{142}
}

func (x *SaveUserTaskRunPb) GetResult() *UserTaskResultPb {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SaveUserTaskRunPb) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SaveUserTaskRunPb) GetResults() []*UserTaskFieldResultPb {
	if x != nil {
		return x.Results
	}
	return nil
}

type CompleteUserTaskRunPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunIdPb  `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3" json:"user_task_run_id,omitempty"`
	Result        *UserTaskResultPb `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	UserId        string            `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CompleteUserTaskRunPb) Reset() {
	*x = CompleteUserTaskRunPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteUserTaskRunPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUserTaskRunPb) ProtoMessage() {}

func (x *CompleteUserTaskRunPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUserTaskRunPb.ProtoReflect.Descriptor instead.
func (*CompleteUserTaskRunPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{143}
}

func (x *CompleteUserTaskRunPb) GetUserTaskRunId() *UserTaskRunIdPb {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

func (x *CompleteUserTaskRunPb) GetResult() *UserTaskResultPb {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CompleteUserTaskRunPb) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type StartThreadNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadSpecName string                           `protobuf:"bytes,1,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	Variables      map[string]*VariableAssignmentPb `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartThreadNodePb) Reset() {
	*x = StartThreadNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartThreadNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartThreadNodePb) ProtoMessage() {}

func (x *StartThreadNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartThreadNodePb.ProtoReflect.Descriptor instead.
func (*StartThreadNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{144}
}

func (x *StartThreadNodePb) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *StartThreadNodePb) GetVariables() map[string]*VariableAssignmentPb {
	if x != nil {
		return x.Variables
	}
	return nil
}

type FailureHandlerDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecificFailure *string `protobuf:"bytes,1,opt,name=specific_failure,json=specificFailure,proto3,oneof" json:"specific_failure,omitempty"`
	HandlerSpecName string  `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *FailureHandlerDefPb) Reset() {
	*x = FailureHandlerDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureHandlerDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureHandlerDefPb) ProtoMessage() {}

func (x *FailureHandlerDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureHandlerDefPb.ProtoReflect.Descriptor instead.
func (*FailureHandlerDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{145}
}

func (x *FailureHandlerDefPb) GetSpecificFailure() string {
	if x != nil && x.SpecificFailure != nil {
		return *x.SpecificFailure
	}
	return ""
}

func (x *FailureHandlerDefPb) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type WaitForThreadsNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*WaitForThreadsNodePb_ThreadToWaitForPb `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *WaitForThreadsNodePb) Reset() {
	*x = WaitForThreadsNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsNodePb) ProtoMessage() {}

func (x *WaitForThreadsNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsNodePb.ProtoReflect.Descriptor instead.
func (*WaitForThreadsNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{146}
}

func (x *WaitForThreadsNodePb) GetThreads() []*WaitForThreadsNodePb_ThreadToWaitForPb {
	if x != nil {
		return x.Threads
	}
	return nil
}

type TaskNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName    string                  `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	TimeoutSeconds int32                   `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	Retries        int32                   `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`
	Variables      []*VariableAssignmentPb `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *TaskNodePb) Reset() {
	*x = TaskNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNodePb) ProtoMessage() {}

func (x *TaskNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNodePb.ProtoReflect.Descriptor instead.
func (*TaskNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{147}
}

func (x *TaskNodePb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskNodePb) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TaskNodePb) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *TaskNodePb) GetVariables() []*VariableAssignmentPb {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ExternalEventNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string                `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	TimeoutSeconds       *VariableAssignmentPb `protobuf:"bytes,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *ExternalEventNodePb) Reset() {
	*x = ExternalEventNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventNodePb) ProtoMessage() {}

func (x *ExternalEventNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventNodePb.ProtoReflect.Descriptor instead.
func (*ExternalEventNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{148}
}

func (x *ExternalEventNodePb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventNodePb) GetTimeoutSeconds() *VariableAssignmentPb {
	if x != nil {
		return x.TimeoutSeconds
	}
	return nil
}

type EntrypointNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntrypointNodePb) Reset() {
	*x = EntrypointNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointNodePb) ProtoMessage() {}

func (x *EntrypointNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointNodePb.ProtoReflect.Descriptor instead.
func (*EntrypointNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{149}
}

type ExitNodePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureDef *FailureDefPb `protobuf:"bytes,1,opt,name=failure_def,json=failureDef,proto3,oneof" json:"failure_def,omitempty"`
}

func (x *ExitNodePb) Reset() {
	*x = ExitNodePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitNodePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitNodePb) ProtoMessage() {}

func (x *ExitNodePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitNodePb.ProtoReflect.Descriptor instead.
func (*ExitNodePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{150}
}

func (x *ExitNodePb) GetFailureDef() *FailureDefPb {
	if x != nil {
		return x.FailureDef
	}
	return nil
}

type FailureDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureName string                `protobuf:"bytes,1,opt,name=failure_name,json=failureName,proto3" json:"failure_name,omitempty"`
	Message     string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Content     *VariableAssignmentPb `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *FailureDefPb) Reset() {
	*x = FailureDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureDefPb) ProtoMessage() {}

func (x *FailureDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureDefPb.ProtoReflect.Descriptor instead.
func (*FailureDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{151}
}

func (x *FailureDefPb) GetFailureName() string {
	if x != nil {
		return x.FailureName
	}
	return ""
}

func (x *FailureDefPb) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FailureDefPb) GetContent() *VariableAssignmentPb {
	if x != nil {
		return x.Content
	}
	return nil
}

type VariableDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        VariableTypePb `protobuf:"varint,1,opt,name=type,proto3,enum=littlehorse.VariableTypePb" json:"type,omitempty"`
	Name        string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IndexType   *IndexTypePb   `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3,enum=littlehorse.IndexTypePb,oneof" json:"index_type,omitempty"`
	JsonIndexes []*JsonIndexPb `protobuf:"bytes,4,rep,name=json_indexes,json=jsonIndexes,proto3" json:"json_indexes,omitempty"`
}

func (x *VariableDefPb) Reset() {
	*x = VariableDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDefPb) ProtoMessage() {}

func (x *VariableDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDefPb.ProtoReflect.Descriptor instead.
func (*VariableDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{152}
}

func (x *VariableDefPb) GetType() VariableTypePb {
	if x != nil {
		return x.Type
	}
	return VariableTypePb_JSON_OBJ
}

func (x *VariableDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableDefPb) GetIndexType() IndexTypePb {
	if x != nil && x.IndexType != nil {
		return *x.IndexType
	}
	return IndexTypePb_LOCAL_INDEX
}

func (x *VariableDefPb) GetJsonIndexes() []*JsonIndexPb {
	if x != nil {
		return x.JsonIndexes
	}
	return nil
}

type JsonIndexPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	IndexType IndexTypePb `protobuf:"varint,2,opt,name=index_type,json=indexType,proto3,enum=littlehorse.IndexTypePb" json:"index_type,omitempty"`
}

func (x *JsonIndexPb) Reset() {
	*x = JsonIndexPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonIndexPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonIndexPb) ProtoMessage() {}

func (x *JsonIndexPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonIndexPb.ProtoReflect.Descriptor instead.
func (*JsonIndexPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{153}
}

func (x *JsonIndexPb) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JsonIndexPb) GetIndexType() IndexTypePb {
	if x != nil {
		return x.IndexType
	}
	return IndexTypePb_LOCAL_INDEX
}

type InterruptDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	HandlerSpecName      string `protobuf:"bytes,2,opt,name=handler_spec_name,json=handlerSpecName,proto3" json:"handler_spec_name,omitempty"`
}

func (x *InterruptDefPb) Reset() {
	*x = InterruptDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptDefPb) ProtoMessage() {}

func (x *InterruptDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptDefPb.ProtoReflect.Descriptor instead.
func (*InterruptDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{154}
}

func (x *InterruptDefPb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *InterruptDefPb) GetHandlerSpecName() string {
	if x != nil {
		return x.HandlerSpecName
	}
	return ""
}

type ThreadSpecPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes         map[string]*NodePb `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VariableDefs  []*VariableDefPb   `protobuf:"bytes,2,rep,name=variable_defs,json=variableDefs,proto3" json:"variable_defs,omitempty"`
	InterruptDefs []*InterruptDefPb  `protobuf:"bytes,3,rep,name=interrupt_defs,json=interruptDefs,proto3" json:"interrupt_defs,omitempty"`
}

func (x *ThreadSpecPb) Reset() {
	*x = ThreadSpecPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSpecPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSpecPb) ProtoMessage() {}

func (x *ThreadSpecPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSpecPb.ProtoReflect.Descriptor instead.
func (*ThreadSpecPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{155}
}

func (x *ThreadSpecPb) GetNodes() map[string]*NodePb {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ThreadSpecPb) GetVariableDefs() []*VariableDefPb {
	if x != nil {
		return x.VariableDefs
	}
	return nil
}

func (x *ThreadSpecPb) GetInterruptDefs() []*InterruptDefPb {
	if x != nil {
		return x.InterruptDefs
	}
	return nil
}

type WfSpecPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              int32                    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt            *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status               LHStatusPb               `protobuf:"varint,4,opt,name=status,proto3,enum=littlehorse.LHStatusPb" json:"status,omitempty"`
	ThreadSpecs          map[string]*ThreadSpecPb `protobuf:"bytes,5,rep,name=thread_specs,json=threadSpecs,proto3" json:"thread_specs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EntrypointThreadName string                   `protobuf:"bytes,6,opt,name=entrypoint_thread_name,json=entrypointThreadName,proto3" json:"entrypoint_thread_name,omitempty"`
	RetentionHours       int32                    `protobuf:"varint,7,opt,name=retention_hours,json=retentionHours,proto3" json:"retention_hours,omitempty"`
}

func (x *WfSpecPb) Reset() {
	*x = WfSpecPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecPb) ProtoMessage() {}

func (x *WfSpecPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecPb.ProtoReflect.Descriptor instead.
func (*WfSpecPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{156}
}

func (x *WfSpecPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WfSpecPb) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WfSpecPb) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WfSpecPb) GetStatus() LHStatusPb {
	if x != nil {
		return x.Status
	}
	return LHStatusPb_STARTING
}

func (x *WfSpecPb) GetThreadSpecs() map[string]*ThreadSpecPb {
	if x != nil {
		return x.ThreadSpecs
	}
	return nil
}

func (x *WfSpecPb) GetEntrypointThreadName() string {
	if x != nil {
		return x.EntrypointThreadName
	}
	return ""
}

func (x *WfSpecPb) GetRetentionHours() int32 {
	if x != nil {
		return x.RetentionHours
	}
	return 0
}

// TaskDef
type OutputSchemaPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputType VariableTypePb `protobuf:"varint,1,opt,name=output_type,json=outputType,proto3,enum=littlehorse.VariableTypePb" json:"output_type,omitempty"`
}

func (x *OutputSchemaPb) Reset() {
	*x = OutputSchemaPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputSchemaPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputSchemaPb) ProtoMessage() {}

func (x *OutputSchemaPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputSchemaPb.ProtoReflect.Descriptor instead.
func (*OutputSchemaPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{157}
}

func (x *OutputSchemaPb) GetOutputType() VariableTypePb {
	if x != nil {
		return x.OutputType
	}
	return VariableTypePb_JSON_OBJ
}

type TaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputVars []*VariableDefPb       `protobuf:"bytes,2,rep,name=input_vars,json=inputVars,proto3" json:"input_vars,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TaskDefPb) Reset() {
	*x = TaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefPb) ProtoMessage() {}

func (x *TaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefPb.ProtoReflect.Descriptor instead.
func (*TaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{158}
}

func (x *TaskDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskDefPb) GetInputVars() []*VariableDefPb {
	if x != nil {
		return x.InputVars
	}
	return nil
}

func (x *TaskDefPb) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// ExternalEventDef
type ExternalEventDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	RetentionHours int32                  `protobuf:"varint,3,opt,name=retention_hours,json=retentionHours,proto3" json:"retention_hours,omitempty"`
}

func (x *ExternalEventDefPb) Reset() {
	*x = ExternalEventDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventDefPb) ProtoMessage() {}

func (x *ExternalEventDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventDefPb.ProtoReflect.Descriptor instead.
func (*ExternalEventDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{159}
}

func (x *ExternalEventDefPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalEventDefPb) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExternalEventDefPb) GetRetentionHours() int32 {
	if x != nil {
		return x.RetentionHours
	}
	return 0
}

type TaskDefMetricsIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType  MetricsWindowLengthPb  `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"window_type,omitempty"`
	TaskDefName string                 `protobuf:"bytes,3,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
}

func (x *TaskDefMetricsIdPb) Reset() {
	*x = TaskDefMetricsIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetricsIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetricsIdPb) ProtoMessage() {}

func (x *TaskDefMetricsIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetricsIdPb.ProtoReflect.Descriptor instead.
func (*TaskDefMetricsIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{160}
}

func (x *TaskDefMetricsIdPb) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *TaskDefMetricsIdPb) GetWindowType() MetricsWindowLengthPb {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLengthPb_MINUTES_5
}

func (x *TaskDefMetricsIdPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

type TaskDefMetricsPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	Type               MetricsWindowLengthPb  `protobuf:"varint,2,opt,name=type,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"type,omitempty"`
	TaskDefName        string                 `protobuf:"bytes,3,opt,name=taskDefName,proto3" json:"taskDefName,omitempty"`
	ScheduleToStartMax int64                  `protobuf:"varint,4,opt,name=schedule_to_start_max,json=scheduleToStartMax,proto3" json:"schedule_to_start_max,omitempty"`
	ScheduleToStartAvg int64                  `protobuf:"varint,5,opt,name=schedule_to_start_avg,json=scheduleToStartAvg,proto3" json:"schedule_to_start_avg,omitempty"`
	StartToCompleteMax int64                  `protobuf:"varint,6,opt,name=start_to_complete_max,json=startToCompleteMax,proto3" json:"start_to_complete_max,omitempty"`
	StartToCompleteAvg int64                  `protobuf:"varint,7,opt,name=start_to_complete_avg,json=startToCompleteAvg,proto3" json:"start_to_complete_avg,omitempty"`
	TotalCompleted     int64                  `protobuf:"varint,8,opt,name=total_completed,json=totalCompleted,proto3" json:"total_completed,omitempty"`
	TotalErrored       int64                  `protobuf:"varint,9,opt,name=total_errored,json=totalErrored,proto3" json:"total_errored,omitempty"`
	TotalStarted       int64                  `protobuf:"varint,10,opt,name=total_started,json=totalStarted,proto3" json:"total_started,omitempty"`
	TotalScheduled     int64                  `protobuf:"varint,11,opt,name=total_scheduled,json=totalScheduled,proto3" json:"total_scheduled,omitempty"`
}

func (x *TaskDefMetricsPb) Reset() {
	*x = TaskDefMetricsPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDefMetricsPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDefMetricsPb) ProtoMessage() {}

func (x *TaskDefMetricsPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDefMetricsPb.ProtoReflect.Descriptor instead.
func (*TaskDefMetricsPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{161}
}

func (x *TaskDefMetricsPb) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *TaskDefMetricsPb) GetType() MetricsWindowLengthPb {
	if x != nil {
		return x.Type
	}
	return MetricsWindowLengthPb_MINUTES_5
}

func (x *TaskDefMetricsPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *TaskDefMetricsPb) GetScheduleToStartMax() int64 {
	if x != nil {
		return x.ScheduleToStartMax
	}
	return 0
}

func (x *TaskDefMetricsPb) GetScheduleToStartAvg() int64 {
	if x != nil {
		return x.ScheduleToStartAvg
	}
	return 0
}

func (x *TaskDefMetricsPb) GetStartToCompleteMax() int64 {
	if x != nil {
		return x.StartToCompleteMax
	}
	return 0
}

func (x *TaskDefMetricsPb) GetStartToCompleteAvg() int64 {
	if x != nil {
		return x.StartToCompleteAvg
	}
	return 0
}

func (x *TaskDefMetricsPb) GetTotalCompleted() int64 {
	if x != nil {
		return x.TotalCompleted
	}
	return 0
}

func (x *TaskDefMetricsPb) GetTotalErrored() int64 {
	if x != nil {
		return x.TotalErrored
	}
	return 0
}

func (x *TaskDefMetricsPb) GetTotalStarted() int64 {
	if x != nil {
		return x.TotalStarted
	}
	return 0
}

func (x *TaskDefMetricsPb) GetTotalScheduled() int64 {
	if x != nil {
		return x.TotalScheduled
	}
	return 0
}

type WfSpecMetricsIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowType    MetricsWindowLengthPb  `protobuf:"varint,2,opt,name=window_type,json=windowType,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"window_type,omitempty"`
	WfSpecName    string                 `protobuf:"bytes,3,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	WfSpecVersion int32                  `protobuf:"varint,4,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
}

func (x *WfSpecMetricsIdPb) Reset() {
	*x = WfSpecMetricsIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetricsIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetricsIdPb) ProtoMessage() {}

func (x *WfSpecMetricsIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetricsIdPb.ProtoReflect.Descriptor instead.
func (*WfSpecMetricsIdPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{162}
}

func (x *WfSpecMetricsIdPb) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *WfSpecMetricsIdPb) GetWindowType() MetricsWindowLengthPb {
	if x != nil {
		return x.WindowType
	}
	return MetricsWindowLengthPb_MINUTES_5
}

func (x *WfSpecMetricsIdPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfSpecMetricsIdPb) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

type WfSpecMetricsPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowStart        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	Type               MetricsWindowLengthPb  `protobuf:"varint,2,opt,name=type,proto3,enum=littlehorse.MetricsWindowLengthPb" json:"type,omitempty"`
	WfSpecName         string                 `protobuf:"bytes,3,opt,name=wfSpecName,proto3" json:"wfSpecName,omitempty"`
	WfSpecVersion      int32                  `protobuf:"varint,4,opt,name=wfSpecVersion,proto3" json:"wfSpecVersion,omitempty"`
	TotalStarted       int64                  `protobuf:"varint,5,opt,name=total_started,json=totalStarted,proto3" json:"total_started,omitempty"`
	TotalCompleted     int64                  `protobuf:"varint,6,opt,name=total_completed,json=totalCompleted,proto3" json:"total_completed,omitempty"`
	TotalErrored       int64                  `protobuf:"varint,7,opt,name=total_errored,json=totalErrored,proto3" json:"total_errored,omitempty"`
	StartToCompleteMax int64                  `protobuf:"varint,8,opt,name=start_to_complete_max,json=startToCompleteMax,proto3" json:"start_to_complete_max,omitempty"`
	StartToCompleteAvg int64                  `protobuf:"varint,9,opt,name=start_to_complete_avg,json=startToCompleteAvg,proto3" json:"start_to_complete_avg,omitempty"`
}

func (x *WfSpecMetricsPb) Reset() {
	*x = WfSpecMetricsPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfSpecMetricsPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfSpecMetricsPb) ProtoMessage() {}

func (x *WfSpecMetricsPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfSpecMetricsPb.ProtoReflect.Descriptor instead.
func (*WfSpecMetricsPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{163}
}

func (x *WfSpecMetricsPb) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *WfSpecMetricsPb) GetType() MetricsWindowLengthPb {
	if x != nil {
		return x.Type
	}
	return MetricsWindowLengthPb_MINUTES_5
}

func (x *WfSpecMetricsPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *WfSpecMetricsPb) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *WfSpecMetricsPb) GetTotalStarted() int64 {
	if x != nil {
		return x.TotalStarted
	}
	return 0
}

func (x *WfSpecMetricsPb) GetTotalCompleted() int64 {
	if x != nil {
		return x.TotalCompleted
	}
	return 0
}

func (x *WfSpecMetricsPb) GetTotalErrored() int64 {
	if x != nil {
		return x.TotalErrored
	}
	return 0
}

func (x *WfSpecMetricsPb) GetStartToCompleteMax() int64 {
	if x != nil {
		return x.StartToCompleteMax
	}
	return 0
}

func (x *WfSpecMetricsPb) GetStartToCompleteAvg() int64 {
	if x != nil {
		return x.StartToCompleteAvg
	}
	return 0
}

type SearchWfRunPb_StatusAndSpecPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                 `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	Status        LHStatusPb             `protobuf:"varint,2,opt,name=status,proto3,enum=littlehorse.LHStatusPb" json:"status,omitempty"`
	WfSpecVersion int32                  `protobuf:"varint,3,opt,name=wf_spec_version,json=wfSpecVersion,proto3" json:"wf_spec_version,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchWfRunPb_StatusAndSpecPb) Reset() {
	*x = SearchWfRunPb_StatusAndSpecPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunPb_StatusAndSpecPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunPb_StatusAndSpecPb) ProtoMessage() {}

func (x *SearchWfRunPb_StatusAndSpecPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunPb_StatusAndSpecPb.ProtoReflect.Descriptor instead.
func (*SearchWfRunPb_StatusAndSpecPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28, 0}
}

func (x *SearchWfRunPb_StatusAndSpecPb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *SearchWfRunPb_StatusAndSpecPb) GetStatus() LHStatusPb {
	if x != nil {
		return x.Status
	}
	return LHStatusPb_STARTING
}

func (x *SearchWfRunPb_StatusAndSpecPb) GetWfSpecVersion() int32 {
	if x != nil {
		return x.WfSpecVersion
	}
	return 0
}

func (x *SearchWfRunPb_StatusAndSpecPb) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchWfRunPb_StatusAndSpecPb) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchWfRunPb_NamePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                 `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchWfRunPb_NamePb) Reset() {
	*x = SearchWfRunPb_NamePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunPb_NamePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunPb_NamePb) ProtoMessage() {}

func (x *SearchWfRunPb_NamePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunPb_NamePb.ProtoReflect.Descriptor instead.
func (*SearchWfRunPb_NamePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28, 1}
}

func (x *SearchWfRunPb_NamePb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *SearchWfRunPb_NamePb) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchWfRunPb_NamePb) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchWfRunPb_StatusAndNamePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfSpecName    string                 `protobuf:"bytes,1,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
	Status        LHStatusPb             `protobuf:"varint,2,opt,name=status,proto3,enum=littlehorse.LHStatusPb" json:"status,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchWfRunPb_StatusAndNamePb) Reset() {
	*x = SearchWfRunPb_StatusAndNamePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWfRunPb_StatusAndNamePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWfRunPb_StatusAndNamePb) ProtoMessage() {}

func (x *SearchWfRunPb_StatusAndNamePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWfRunPb_StatusAndNamePb.ProtoReflect.Descriptor instead.
func (*SearchWfRunPb_StatusAndNamePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28, 2}
}

func (x *SearchWfRunPb_StatusAndNamePb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

func (x *SearchWfRunPb_StatusAndNamePb) GetStatus() LHStatusPb {
	if x != nil {
		return x.Status
	}
	return LHStatusPb_STARTING
}

func (x *SearchWfRunPb_StatusAndNamePb) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchWfRunPb_StatusAndNamePb) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchTaskRunPb_StatusAndTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        TaskStatusPb           `protobuf:"varint,1,opt,name=status,proto3,enum=littlehorse.TaskStatusPb" json:"status,omitempty"`
	TaskDefName   string                 `protobuf:"bytes,2,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchTaskRunPb_StatusAndTaskDefPb) Reset() {
	*x = SearchTaskRunPb_StatusAndTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunPb_StatusAndTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunPb_StatusAndTaskDefPb) ProtoMessage() {}

func (x *SearchTaskRunPb_StatusAndTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunPb_StatusAndTaskDefPb.ProtoReflect.Descriptor instead.
func (*SearchTaskRunPb_StatusAndTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30, 0}
}

func (x *SearchTaskRunPb_StatusAndTaskDefPb) GetStatus() TaskStatusPb {
	if x != nil {
		return x.Status
	}
	return TaskStatusPb_TASK_SCHEDULED
}

func (x *SearchTaskRunPb_StatusAndTaskDefPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *SearchTaskRunPb_StatusAndTaskDefPb) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchTaskRunPb_StatusAndTaskDefPb) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchTaskRunPb_ByTaskDefPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskDefName   string                 `protobuf:"bytes,1,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	EarliestStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=earliest_start,json=earliestStart,proto3,oneof" json:"earliest_start,omitempty"`
	LatestStart   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=latest_start,json=latestStart,proto3,oneof" json:"latest_start,omitempty"`
}

func (x *SearchTaskRunPb_ByTaskDefPb) Reset() {
	*x = SearchTaskRunPb_ByTaskDefPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTaskRunPb_ByTaskDefPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTaskRunPb_ByTaskDefPb) ProtoMessage() {}

func (x *SearchTaskRunPb_ByTaskDefPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTaskRunPb_ByTaskDefPb.ProtoReflect.Descriptor instead.
func (*SearchTaskRunPb_ByTaskDefPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30, 1}
}

func (x *SearchTaskRunPb_ByTaskDefPb) GetTaskDefName() string {
	if x != nil {
		return x.TaskDefName
	}
	return ""
}

func (x *SearchTaskRunPb_ByTaskDefPb) GetEarliestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestStart
	}
	return nil
}

func (x *SearchTaskRunPb_ByTaskDefPb) GetLatestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestStart
	}
	return nil
}

type SearchVariablePb_NameAndValuePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value         *VariableValuePb `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	WfSpecVersion *int32           `protobuf:"varint,2,opt,name=wf_spec_version,json=wfSpecVersion,proto3,oneof" json:"wf_spec_version,omitempty"`
	VarName       string           `protobuf:"bytes,3,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	WfSpecName    string           `protobuf:"bytes,4,opt,name=wf_spec_name,json=wfSpecName,proto3" json:"wf_spec_name,omitempty"`
}

func (x *SearchVariablePb_NameAndValuePb) Reset() {
	*x = SearchVariablePb_NameAndValuePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVariablePb_NameAndValuePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVariablePb_NameAndValuePb) ProtoMessage() {}

func (x *SearchVariablePb_NameAndValuePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVariablePb_NameAndValuePb.ProtoReflect.Descriptor instead.
func (*SearchVariablePb_NameAndValuePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36, 0}
}

func (x *SearchVariablePb_NameAndValuePb) GetValue() *VariableValuePb {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SearchVariablePb_NameAndValuePb) GetWfSpecVersion() int32 {
	if x != nil && x.WfSpecVersion != nil {
		return *x.WfSpecVersion
	}
	return 0
}

func (x *SearchVariablePb_NameAndValuePb) GetVarName() string {
	if x != nil {
		return x.VarName
	}
	return ""
}

func (x *SearchVariablePb_NameAndValuePb) GetWfSpecName() string {
	if x != nil {
		return x.WfSpecName
	}
	return ""
}

type SearchExternalEventPb_ByExtEvtDefNameAndStatusPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	IsClaimed            *bool  `protobuf:"varint,2,opt,name=is_claimed,json=isClaimed,proto3,oneof" json:"is_claimed,omitempty"`
}

func (x *SearchExternalEventPb_ByExtEvtDefNameAndStatusPb) Reset() {
	*x = SearchExternalEventPb_ByExtEvtDefNameAndStatusPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchExternalEventPb_ByExtEvtDefNameAndStatusPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExternalEventPb_ByExtEvtDefNameAndStatusPb) ProtoMessage() {}

func (x *SearchExternalEventPb_ByExtEvtDefNameAndStatusPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExternalEventPb_ByExtEvtDefNameAndStatusPb.ProtoReflect.Descriptor instead.
func (*SearchExternalEventPb_ByExtEvtDefNameAndStatusPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{46, 0}
}

func (x *SearchExternalEventPb_ByExtEvtDefNameAndStatusPb) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *SearchExternalEventPb_ByExtEvtDefNameAndStatusPb) GetIsClaimed() bool {
	if x != nil && x.IsClaimed != nil {
		return *x.IsClaimed
	}
	return false
}

type WaitForThreadsRunPb_WaitForThreadPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadEndTime   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=thread_end_time,json=threadEndTime,proto3,oneof" json:"thread_end_time,omitempty"`
	ThreadStatus    LHStatusPb             `protobuf:"varint,2,opt,name=thread_status,json=threadStatus,proto3,enum=littlehorse.LHStatusPb" json:"thread_status,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,3,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *WaitForThreadsRunPb_WaitForThreadPb) Reset() {
	*x = WaitForThreadsRunPb_WaitForThreadPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsRunPb_WaitForThreadPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsRunPb_WaitForThreadPb) ProtoMessage() {}

func (x *WaitForThreadsRunPb_WaitForThreadPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsRunPb_WaitForThreadPb.ProtoReflect.Descriptor instead.
func (*WaitForThreadsRunPb_WaitForThreadPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{119, 0}
}

func (x *WaitForThreadsRunPb_WaitForThreadPb) GetThreadEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ThreadEndTime
	}
	return nil
}

func (x *WaitForThreadsRunPb_WaitForThreadPb) GetThreadStatus() LHStatusPb {
	if x != nil {
		return x.ThreadStatus
	}
	return LHStatusPb_STARTING
}

func (x *WaitForThreadsRunPb_WaitForThreadPb) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

type VariableAssignmentPb_FormatStringPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *VariableAssignmentPb   `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Args   []*VariableAssignmentPb `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *VariableAssignmentPb_FormatStringPb) Reset() {
	*x = VariableAssignmentPb_FormatStringPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAssignmentPb_FormatStringPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAssignmentPb_FormatStringPb) ProtoMessage() {}

func (x *VariableAssignmentPb_FormatStringPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAssignmentPb_FormatStringPb.ProtoReflect.Descriptor instead.
func (*VariableAssignmentPb_FormatStringPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{124, 0}
}

func (x *VariableAssignmentPb_FormatStringPb) GetFormat() *VariableAssignmentPb {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *VariableAssignmentPb_FormatStringPb) GetArgs() []*VariableAssignmentPb {
	if x != nil {
		return x.Args
	}
	return nil
}

type VariableMutationPb_NodeOutputSourcePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jsonpath *string `protobuf:"bytes,10,opt,name=jsonpath,proto3,oneof" json:"jsonpath,omitempty"`
}

func (x *VariableMutationPb_NodeOutputSourcePb) Reset() {
	*x = VariableMutationPb_NodeOutputSourcePb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableMutationPb_NodeOutputSourcePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableMutationPb_NodeOutputSourcePb) ProtoMessage() {}

func (x *VariableMutationPb_NodeOutputSourcePb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableMutationPb_NodeOutputSourcePb.ProtoReflect.Descriptor instead.
func (*VariableMutationPb_NodeOutputSourcePb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{125, 0}
}

func (x *VariableMutationPb_NodeOutputSourcePb) GetJsonpath() string {
	if x != nil && x.Jsonpath != nil {
		return *x.Jsonpath
	}
	return ""
}

type UTActionTriggerPb_UTACancelPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UTActionTriggerPb_UTACancelPb) Reset() {
	*x = UTActionTriggerPb_UTACancelPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTriggerPb_UTACancelPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTriggerPb_UTACancelPb) ProtoMessage() {}

func (x *UTActionTriggerPb_UTACancelPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTriggerPb_UTACancelPb.ProtoReflect.Descriptor instead.
func (*UTActionTriggerPb_UTACancelPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{132, 0}
}

type UTActionTriggerPb_UTATaskPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task      *TaskNodePb           `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Mutations []*VariableMutationPb `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
}

func (x *UTActionTriggerPb_UTATaskPb) Reset() {
	*x = UTActionTriggerPb_UTATaskPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTriggerPb_UTATaskPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTriggerPb_UTATaskPb) ProtoMessage() {}

func (x *UTActionTriggerPb_UTATaskPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTriggerPb_UTATaskPb.ProtoReflect.Descriptor instead.
func (*UTActionTriggerPb_UTATaskPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{132, 1}
}

func (x *UTActionTriggerPb_UTATaskPb) GetTask() *TaskNodePb {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *UTActionTriggerPb_UTATaskPb) GetMutations() []*VariableMutationPb {
	if x != nil {
		return x.Mutations
	}
	return nil
}

type UTActionTriggerPb_UTAReassignPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AssignTo:
	//
	//	*UTActionTriggerPb_UTAReassignPb_UserId
	//	*UTActionTriggerPb_UTAReassignPb_UserGroup
	AssignTo isUTActionTriggerPb_UTAReassignPb_AssignTo `protobuf_oneof:"assign_to"`
}

func (x *UTActionTriggerPb_UTAReassignPb) Reset() {
	*x = UTActionTriggerPb_UTAReassignPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTActionTriggerPb_UTAReassignPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTActionTriggerPb_UTAReassignPb) ProtoMessage() {}

func (x *UTActionTriggerPb_UTAReassignPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTActionTriggerPb_UTAReassignPb.ProtoReflect.Descriptor instead.
func (*UTActionTriggerPb_UTAReassignPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{132, 2}
}

func (m *UTActionTriggerPb_UTAReassignPb) GetAssignTo() isUTActionTriggerPb_UTAReassignPb_AssignTo {
	if m != nil {
		return m.AssignTo
	}
	return nil
}

func (x *UTActionTriggerPb_UTAReassignPb) GetUserId() *VariableAssignmentPb {
	if x, ok := x.GetAssignTo().(*UTActionTriggerPb_UTAReassignPb_UserId); ok {
		return x.UserId
	}
	return nil
}

func (x *UTActionTriggerPb_UTAReassignPb) GetUserGroup() *VariableAssignmentPb {
	if x, ok := x.GetAssignTo().(*UTActionTriggerPb_UTAReassignPb_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

type isUTActionTriggerPb_UTAReassignPb_AssignTo interface {
	isUTActionTriggerPb_UTAReassignPb_AssignTo()
}

type UTActionTriggerPb_UTAReassignPb_UserId struct {
	UserId *VariableAssignmentPb `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof"`
}

type UTActionTriggerPb_UTAReassignPb_UserGroup struct {
	UserGroup *VariableAssignmentPb `protobuf:"bytes,2,opt,name=user_group,json=userGroup,proto3,oneof"`
}

func (*UTActionTriggerPb_UTAReassignPb_UserId) isUTActionTriggerPb_UTAReassignPb_AssignTo() {}

func (*UTActionTriggerPb_UTAReassignPb_UserGroup) isUTActionTriggerPb_UTAReassignPb_AssignTo() {}

type UserTaskEventPb_UTECancelledPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserTaskEventPb_UTECancelledPb) Reset() {
	*x = UserTaskEventPb_UTECancelledPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEventPb_UTECancelledPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEventPb_UTECancelledPb) ProtoMessage() {}

func (x *UserTaskEventPb_UTECancelledPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEventPb_UTECancelledPb.ProtoReflect.Descriptor instead.
func (*UserTaskEventPb_UTECancelledPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134, 0}
}

type UserTaskEventPb_UTETaskExecutedPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRun *TaskRunIdPb `protobuf:"bytes,1,opt,name=task_run,json=taskRun,proto3" json:"task_run,omitempty"`
}

func (x *UserTaskEventPb_UTETaskExecutedPb) Reset() {
	*x = UserTaskEventPb_UTETaskExecutedPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEventPb_UTETaskExecutedPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEventPb_UTETaskExecutedPb) ProtoMessage() {}

func (x *UserTaskEventPb_UTETaskExecutedPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEventPb_UTETaskExecutedPb.ProtoReflect.Descriptor instead.
func (*UserTaskEventPb_UTETaskExecutedPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134, 1}
}

func (x *UserTaskEventPb_UTETaskExecutedPb) GetTaskRun() *TaskRunIdPb {
	if x != nil {
		return x.TaskRun
	}
	return nil
}

type UserTaskEventPb_UTEReassignedPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldUserId    *string `protobuf:"bytes,1,opt,name=old_user_id,json=oldUserId,proto3,oneof" json:"old_user_id,omitempty"`
	OldUserGroup *string `protobuf:"bytes,2,opt,name=old_user_group,json=oldUserGroup,proto3,oneof" json:"old_user_group,omitempty"`
	NewUserId    *string `protobuf:"bytes,3,opt,name=new_user_id,json=newUserId,proto3,oneof" json:"new_user_id,omitempty"`
	NewUserGroup *string `protobuf:"bytes,4,opt,name=new_user_group,json=newUserGroup,proto3,oneof" json:"new_user_group,omitempty"`
}

func (x *UserTaskEventPb_UTEReassignedPb) Reset() {
	*x = UserTaskEventPb_UTEReassignedPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskEventPb_UTEReassignedPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskEventPb_UTEReassignedPb) ProtoMessage() {}

func (x *UserTaskEventPb_UTEReassignedPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskEventPb_UTEReassignedPb.ProtoReflect.Descriptor instead.
func (*UserTaskEventPb_UTEReassignedPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{134, 2}
}

func (x *UserTaskEventPb_UTEReassignedPb) GetOldUserId() string {
	if x != nil && x.OldUserId != nil {
		return *x.OldUserId
	}
	return ""
}

func (x *UserTaskEventPb_UTEReassignedPb) GetOldUserGroup() string {
	if x != nil && x.OldUserGroup != nil {
		return *x.OldUserGroup
	}
	return ""
}

func (x *UserTaskEventPb_UTEReassignedPb) GetNewUserId() string {
	if x != nil && x.NewUserId != nil {
		return *x.NewUserId
	}
	return ""
}

func (x *UserTaskEventPb_UTEReassignedPb) GetNewUserGroup() string {
	if x != nil && x.NewUserGroup != nil {
		return *x.NewUserGroup
	}
	return ""
}

type WaitForThreadsNodePb_ThreadToWaitForPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadRunNumber *VariableAssignmentPb `protobuf:"bytes,1,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
}

func (x *WaitForThreadsNodePb_ThreadToWaitForPb) Reset() {
	*x = WaitForThreadsNodePb_ThreadToWaitForPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsNodePb_ThreadToWaitForPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsNodePb_ThreadToWaitForPb) ProtoMessage() {}

func (x *WaitForThreadsNodePb_ThreadToWaitForPb) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsNodePb_ThreadToWaitForPb.ProtoReflect.Descriptor instead.
func (*WaitForThreadsNodePb_ThreadToWaitForPb) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{146, 0}
}

func (x *WaitForThreadsNodePb_ThreadToWaitForPb) GetThreadRunNumber() *VariableAssignmentPb {
	if x != nil {
		return x.ThreadRunNumber
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a,
	0x0a, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x14,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x49, 0x64, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50,
	0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x48, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xd4, 0x02, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x62, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x59, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x74,
	0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5d,
	0x0a, 0x0c, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x50, 0x62, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x73, 0x22, 0xb1, 0x01,
	0x0a, 0x11, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x48, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x62, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x48,
	0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x6d, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x22, 0xc3,
	0x01, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62,
	0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57,
	0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50,
	0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb3,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62,
	0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62,
	0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77,
	0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x09, 0x22, 0x7e, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77,
	0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x48, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x57, 0x66, 0x50, 0x62, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52,
	0x75, 0x6e, 0x57, 0x66, 0x50, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x5a, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a,
	0x0c, 0x52, 0x75, 0x6e, 0x57, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70,
	0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x09,
	0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x66,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x8c, 0x09, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x1f, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbc,
	0x02, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x62, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0xda, 0x01,
	0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x62, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x94, 0x02, 0x0a, 0x0f, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x62, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x77, 0x66, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0xa4, 0x06, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x50, 0x62, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x60, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50,
	0x62, 0x2e, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x1a, 0x9b, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0xe1, 0x01, 0x0a, 0x0b, 0x42, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12,
	0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0x96, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75,
	0x6e, 0x50, 0x62, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x6e, 0x6f, 0x64, 0x65, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0xf5, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x0b,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa3, 0x03, 0x0a, 0x10, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62, 0x12,
	0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xc2, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x62, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xd8, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x8c, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12,
	0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x1f, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x12, 0x1f, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x95, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x1f, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xe8, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0xb2, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x1f, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x66, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x22, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x2e, 0x42, 0x79, 0x45, 0x78, 0x74, 0x45, 0x76,
	0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x62, 0x48, 0x00, 0x52, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x1a, 0x42, 0x79, 0x45, 0x78, 0x74, 0x45, 0x76,
	0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x62, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x76, 0x74, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x2c, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x62, 0x12,
	0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x22, 0xb1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x62, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12,
	0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0a, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x62, 0x52, 0x09,
	0x79, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x14,
	0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x62,
	0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x62, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x1a, 0x61, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x50, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x62, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x74,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x0f,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x62, 0x12,
	0x38, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x50, 0x62, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x12, 0x3f, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x62, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xec,
	0x02, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x50, 0x62, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50,
	0x62, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x48, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x71, 0x0a,
	0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x55, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12,
	0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x57,
	0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x72, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x57, 0x66, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50,
	0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x3e, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x73, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x62, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x3c, 0x0a, 0x0a,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c,
	0x48, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62, 0x52,
	0x09, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x15, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x62, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x62, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62, 0x48, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x62,
	0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xaf,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x14, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x62, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50,
	0x62, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x57, 0x66, 0x53, 0x70,
	0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62,
	0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x50, 0x62, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x62, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x6f, 0x62, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x61, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6a, 0x73,
	0x6f, 0x6e, 0x41, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x73,
	0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x05, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x6f, 0x62, 0x6a, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x72,
	0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x6a, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x50, 0x62, 0x12,
	0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0a,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x0f, 0x56, 0x61,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x50, 0x62, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7a, 0x0a, 0x11,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x50,
	0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x93, 0x03, 0x0a, 0x0f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09,
	0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b,
	0x0a, 0x09, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf4, 0x03, 0x0a, 0x07,
	0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x75, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x50,
	0x62, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x50, 0x62, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xda, 0x07, 0x0a, 0x0b, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e,
	0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x62, 0x52, 0x0b, 0x68, 0x61,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x50, 0x62, 0x48, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x5b, 0x0a, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x65, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x50, 0x62, 0x48, 0x04, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x65,
	0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x62, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x22,
	0x96, 0x01, 0x0a, 0x15, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x50, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x50, 0x62, 0x12,
	0x4a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x50, 0x62, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x17, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x50, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x75, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a,
	0x0a, 0x1c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x62, 0x12, 0x4a,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x50, 0x62, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x21, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x62, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x75, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x1b, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x50, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65,
	0x64, 0x50, 0x62, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c,
	0x74, 0x50, 0x62, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d,
	0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x22, 0xec, 0x03, 0x0a,
	0x12, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x50, 0x62, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x6c, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x6c, 0x74, 0x65, 0x64, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x48, 0x61,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x61,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c,
	0x74, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x6c,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e,
	0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12,
	0x3d, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x74,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75,
	0x6e, 0x50, 0x62, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0xbc, 0x08, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e,
	0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x50, 0x62, 0x52,
	0x08, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x50, 0x62, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x48, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x65, 0x78,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0c,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52,
	0x75, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50,
	0x62, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x04, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x50, 0x62, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0c, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x11, 0x74,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x22, 0xcc,
	0x03, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x28, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x50, 0x62, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x50, 0x62, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x50, 0x62, 0x52, 0x0e, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x62, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x50, 0x62, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x0a, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x50, 0x62, 0x52, 0x08, 0x77, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x62, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x50, 0x62, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x50,
	0x62, 0x52, 0x08, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x22, 0x0b,
	0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x22, 0x7d, 0x0a, 0x10, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12,
	0x2b, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x13, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e,
	0x50, 0x62, 0x12, 0x4a, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x52, 0x75, 0x6e, 0x50, 0x62, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x50, 0x62, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x1a, 0xd8,
	0x01, 0x0a, 0x0f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x50, 0x62, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x0c, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x50, 0x62,
	0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x50, 0x62, 0x48, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x55, 0x0a,
	0x0e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12,
	0x43, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x62, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x62, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x52, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x7d, 0x0a, 0x06, 0x45, 0x64, 0x67, 0x65, 0x50, 0x62, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x14, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x20, 0x0a, 0x09, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x62, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x82, 0x01, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x62, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x35, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x62, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22,
	0xe8, 0x03, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x68, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x68, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x68, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x68, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x62, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x55, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x42, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x12, 0x1f, 0x0a,
	0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x72,
	0x68, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x68, 0x73,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x0b, 0x0a, 0x09, 0x4e, 0x6f,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x62, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3e, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x62, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0x81, 0x06, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x12, 0x3a, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x62, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x62, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x50, 0x62, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x04,
	0x65, 0x78, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x49, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x70, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70,
	0x12, 0x3a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x62, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x62, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf3, 0x04, 0x0a, 0x11, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x62, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x50, 0x62, 0x2e, 0x55, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x62, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x62, 0x2e, 0x55, 0x54, 0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x50, 0x62, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x62, 0x2e, 0x55,
	0x54, 0x41, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x62, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x62, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x1a, 0x0d, 0x0a, 0x0b, 0x55, 0x54, 0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50,
	0x62, 0x1a, 0x77, 0x0a, 0x09, 0x55, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x62, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x6d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x52,
	0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x9e, 0x01, 0x0a, 0x0d, 0x55,
	0x54, 0x41, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x62, 0x12, 0x3c, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x62, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0b,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x62, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x64, 0x65, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x48, 0x02, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x94, 0x05, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x62, 0x2e, 0x55, 0x54, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x2e, 0x55, 0x54, 0x45, 0x52, 0x65, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x2e, 0x55, 0x54, 0x45, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x50, 0x62, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x1a, 0x10, 0x0a, 0x0e, 0x55, 0x54, 0x45, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x50, 0x62, 0x1a, 0x48, 0x0a, 0x11, 0x55, 0x54, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x50, 0x62, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x50, 0x62, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x1a, 0xf7,
	0x01, 0x0a, 0x0f, 0x55, 0x54, 0x45, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x50, 0x62, 0x12, 0x23, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x53, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x22, 0xda, 0x04, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x50, 0x62, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x50, 0x62, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x45, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x50, 0x62, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x22, 0x78, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x1a, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x62, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62, 0x12, 0x3a, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x35, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x62, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x50, 0x62, 0x12, 0x45, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x62, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x50, 0x62, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x12, 0x4d, 0x0a, 0x07,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x62, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x1a, 0x62, 0x0a, 0x11, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x62,
	0x12, 0x4d, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x52, 0x0f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xb4, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x12, 0x35,
	0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x62, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x12, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x62, 0x22, 0x5d, 0x0a, 0x0a, 0x45, 0x78, 0x69, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x62, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x50, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xde, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x50, 0x62, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x62, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x62, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x62, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x5a, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x62, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0x73, 0x0a,
	0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12,
	0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x62, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x50, 0x62, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x73,
	0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x44, 0x65, 0x66, 0x50, 0x62, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x44, 0x65, 0x66, 0x73, 0x1a, 0x4d, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa9, 0x03, 0x0a, 0x08, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x62, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x1a, 0x59, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4e, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x62, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x62, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x50,
	0x62, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x64, 0x50, 0x62, 0x12, 0x3d, 0x0a,
	0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0b,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x50, 0x62, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x04, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x62, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x76, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x76, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x11,
	0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x64, 0x50,
	0x62, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x43, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x62, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x66, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xa7, 0x03, 0x0a, 0x0f, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x50, 0x62, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x50, 0x62, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x76, 0x67, 0x2a, 0xac, 0x01, 0x0a, 0x10, 0x4c, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x5a, 0x0a, 0x0a, 0x4c, 0x48, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x62, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x2a, 0xaa, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x06, 0x2a, 0x59, 0x0a, 0x10, 0x4c, 0x48, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x50, 0x62, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x48, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x4c, 0x48, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x48, 0x5f, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x0e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x62, 0x12, 0x0c,
	0x0a, 0x08, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x52, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x07, 0x2a, 0x4d, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x62, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x49, 0x4c, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x62, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x2a,
	0x9a, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x62, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x49, 0x44,
	0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x46,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x08, 0x2a, 0x65, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x62, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x30, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x62, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x10, 0x01, 0x2a, 0x3f, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x62, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x35, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x32, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41,
	0x59, 0x53, 0x5f, 0x31, 0x10, 0x02, 0x32, 0xa0, 0x20, 0x0a, 0x0b, 0x4c, 0x48, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x70, 0x69, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x12, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a,
	0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12,
	0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x50,
	0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62, 0x1a, 0x27, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x50, 0x75, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x1a, 0x1d, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x57,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x17, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x49, 0x64, 0x50, 0x62, 0x1a, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x1a, 0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x50, 0x75, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x1d, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x66, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x49, 0x64, 0x50, 0x62,
	0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x23,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x50, 0x62, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x57, 0x66, 0x12, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x57, 0x66, 0x50, 0x62, 0x1a, 0x19,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x57, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x1a,
	0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x75, 0x6e, 0x12, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x1a, 0x1e, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12,
	0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x62, 0x1a, 0x20, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x18,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x50, 0x62, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x50, 0x62, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x50, 0x62, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x50,
	0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x75,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x62,
	0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x75, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x50, 0x62, 0x1a, 0x24, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x62, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x62, 0x1a, 0x26, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e,
	0x50, 0x62, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x75, 0x6e, 0x50, 0x62, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x50, 0x62, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62, 0x1a, 0x22,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x62, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x50, 0x62, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x20, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a,
	0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x62, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a, 0x2a, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x62, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x62, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x62, 0x1a, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0a, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70,
	0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x1a,
	0x1d, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12,
	0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x1a, 0x1f, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x57, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x66, 0x52, 0x75, 0x6e, 0x50, 0x62, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x1c,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a, 0x20, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x50, 0x62, 0x1a, 0x20, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x50, 0x62, 0x1a, 0x20, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x62, 0x1a, 0x1f, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x62, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x57,
	0x66, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66, 0x53, 0x70, 0x65,
	0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x62, 0x1a,
	0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x66,
	0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x62, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x62, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x50, 0x62, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x62, 0x22, 0x00, 0x42, 0x2c, 0x0a, 0x1f, 0x69, 0x6f, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07,
	0x2e, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 187)
var file_service_proto_goTypes = []interface{}{
	(LHResponseCodePb)(0),                                    // 0: littlehorse.LHResponseCodePb
	(LHStatusPb)(0),                                          // 1: littlehorse.LHStatusPb
	(TaskStatusPb)(0),                                        // 2: littlehorse.TaskStatusPb
	(LHHealthResultPb)(0),                                    // 3: littlehorse.LHHealthResultPb
	(VariableTypePb)(0),                                      // 4: littlehorse.VariableTypePb
	(ThreadTypePb)(0),                                        // 5: littlehorse.ThreadTypePb
	(ComparatorPb)(0),                                        // 6: littlehorse.ComparatorPb
	(VariableMutationTypePb)(0),                              // 7: littlehorse.VariableMutationTypePb
	(UserTaskRunStatusPb)(0),                                 // 8: littlehorse.UserTaskRunStatusPb
	(IndexTypePb)(0),                                         // 9: littlehorse.IndexTypePb
	(MetricsWindowLengthPb)(0),                               // 10: littlehorse.MetricsWindowLengthPb
	(*WfSpecIdPb)(nil),                                       // 11: littlehorse.WfSpecIdPb
	(*TaskDefIdPb)(nil),                                      // 12: littlehorse.TaskDefIdPb
	(*ExternalEventDefIdPb)(nil),                             // 13: littlehorse.ExternalEventDefIdPb
	(*GetLatestWfSpecPb)(nil),                                // 14: littlehorse.GetLatestWfSpecPb
	(*GetLatestUserTaskDefPb)(nil),                           // 15: littlehorse.GetLatestUserTaskDefPb
	(*GetWfSpecReplyPb)(nil),                                 // 16: littlehorse.GetWfSpecReplyPb
	(*PutWfSpecPb)(nil),                                      // 17: littlehorse.PutWfSpecPb
	(*PutWfSpecReplyPb)(nil),                                 // 18: littlehorse.PutWfSpecReplyPb
	(*GetTaskDefReplyPb)(nil),                                // 19: littlehorse.GetTaskDefReplyPb
	(*PutTaskDefPb)(nil),                                     // 20: littlehorse.PutTaskDefPb
	(*PutTaskDefReplyPb)(nil),                                // 21: littlehorse.PutTaskDefReplyPb
	(*PutUserTaskDefPb)(nil),                                 // 22: littlehorse.PutUserTaskDefPb
	(*PutUserTaskDefReplyPb)(nil),                            // 23: littlehorse.PutUserTaskDefReplyPb
	(*GetUserTaskDefReplyPb)(nil),                            // 24: littlehorse.GetUserTaskDefReplyPb
	(*PutExternalEventDefPb)(nil),                            // 25: littlehorse.PutExternalEventDefPb
	(*PutExternalEventDefReplyPb)(nil),                       // 26: littlehorse.PutExternalEventDefReplyPb
	(*GetExternalEventDefReplyPb)(nil),                       // 27: littlehorse.GetExternalEventDefReplyPb
	(*GetWfRunReplyPb)(nil),                                  // 28: littlehorse.GetWfRunReplyPb
	(*GetNodeRunReplyPb)(nil),                                // 29: littlehorse.GetNodeRunReplyPb
	(*GetTaskRunReplyPb)(nil),                                // 30: littlehorse.GetTaskRunReplyPb
	(*GetUserTaskRunReplyPb)(nil),                            // 31: littlehorse.GetUserTaskRunReplyPb
	(*GetVariableReplyPb)(nil),                               // 32: littlehorse.GetVariableReplyPb
	(*GetExternalEventReplyPb)(nil),                          // 33: littlehorse.GetExternalEventReplyPb
	(*PutExternalEventPb)(nil),                               // 34: littlehorse.PutExternalEventPb
	(*DeleteExternalEventPb)(nil),                            // 35: littlehorse.DeleteExternalEventPb
	(*PutExternalEventReplyPb)(nil),                          // 36: littlehorse.PutExternalEventReplyPb
	(*RunWfPb)(nil),                                          // 37: littlehorse.RunWfPb
	(*RunWfReplyPb)(nil),                                     // 38: littlehorse.RunWfReplyPb
	(*SearchWfRunPb)(nil),                                    // 39: littlehorse.SearchWfRunPb
	(*SearchWfRunReplyPb)(nil),                               // 40: littlehorse.SearchWfRunReplyPb
	(*SearchTaskRunPb)(nil),                                  // 41: littlehorse.SearchTaskRunPb
	(*SearchTaskRunReplyPb)(nil),                             // 42: littlehorse.SearchTaskRunReplyPb
	(*SearchNodeRunPb)(nil),                                  // 43: littlehorse.SearchNodeRunPb
	(*SearchNodeRunReplyPb)(nil),                             // 44: littlehorse.SearchNodeRunReplyPb
	(*SearchUserTaskRunPb)(nil),                              // 45: littlehorse.SearchUserTaskRunPb
	(*SearchUserTaskRunReplyPb)(nil),                         // 46: littlehorse.SearchUserTaskRunReplyPb
	(*SearchVariablePb)(nil),                                 // 47: littlehorse.SearchVariablePb
	(*SearchVariableReplyPb)(nil),                            // 48: littlehorse.SearchVariableReplyPb
	(*SearchTaskDefPb)(nil),                                  // 49: littlehorse.SearchTaskDefPb
	(*SearchTaskDefReplyPb)(nil),                             // 50: littlehorse.SearchTaskDefReplyPb
	(*SearchUserTaskDefPb)(nil),                              // 51: littlehorse.SearchUserTaskDefPb
	(*SearchUserTaskDefReplyPb)(nil),                         // 52: littlehorse.SearchUserTaskDefReplyPb
	(*SearchWfSpecPb)(nil),                                   // 53: littlehorse.SearchWfSpecPb
	(*SearchWfSpecReplyPb)(nil),                              // 54: littlehorse.SearchWfSpecReplyPb
	(*SearchExternalEventDefPb)(nil),                         // 55: littlehorse.SearchExternalEventDefPb
	(*SearchExternalEventDefReplyPb)(nil),                    // 56: littlehorse.SearchExternalEventDefReplyPb
	(*SearchExternalEventPb)(nil),                            // 57: littlehorse.SearchExternalEventPb
	(*SearchExternalEventReplyPb)(nil),                       // 58: littlehorse.SearchExternalEventReplyPb
	(*ListNodeRunsPb)(nil),                                   // 59: littlehorse.ListNodeRunsPb
	(*ListNodeRunsReplyPb)(nil),                              // 60: littlehorse.ListNodeRunsReplyPb
	(*ListVariablesPb)(nil),                                  // 61: littlehorse.ListVariablesPb
	(*ListVariablesReplyPb)(nil),                             // 62: littlehorse.ListVariablesReplyPb
	(*ListExternalEventsPb)(nil),                             // 63: littlehorse.ListExternalEventsPb
	(*ListExternalEventsReplyPb)(nil),                        // 64: littlehorse.ListExternalEventsReplyPb
	(*RegisterTaskWorkerPb)(nil),                             // 65: littlehorse.RegisterTaskWorkerPb
	(*TaskWorkerHeartBeatPb)(nil),                            // 66: littlehorse.TaskWorkerHeartBeatPb
	(*RegisterTaskWorkerReplyPb)(nil),                        // 67: littlehorse.RegisterTaskWorkerReplyPb
	(*HostInfoPb)(nil),                                       // 68: littlehorse.HostInfoPb
	(*TaskWorkerMetadataPb)(nil),                             // 69: littlehorse.TaskWorkerMetadataPb
	(*TaskWorkerGroupPb)(nil),                                // 70: littlehorse.TaskWorkerGroupPb
	(*TaskWorkerGroupIdPb)(nil),                              // 71: littlehorse.TaskWorkerGroupIdPb
	(*PollTaskPb)(nil),                                       // 72: littlehorse.PollTaskPb
	(*ScheduledTaskPb)(nil),                                  // 73: littlehorse.ScheduledTaskPb
	(*TaskRunSourcePb)(nil),                                  // 74: littlehorse.TaskRunSourcePb
	(*PollTaskReplyPb)(nil),                                  // 75: littlehorse.PollTaskReplyPb
	(*ReportTaskRunPb)(nil),                                  // 76: littlehorse.ReportTaskRunPb
	(*ReportTaskReplyPb)(nil),                                // 77: littlehorse.ReportTaskReplyPb
	(*StopWfRunPb)(nil),                                      // 78: littlehorse.StopWfRunPb
	(*StopWfRunReplyPb)(nil),                                 // 79: littlehorse.StopWfRunReplyPb
	(*ResumeWfRunPb)(nil),                                    // 80: littlehorse.ResumeWfRunPb
	(*ResumeWfRunReplyPb)(nil),                               // 81: littlehorse.ResumeWfRunReplyPb
	(*DeleteWfRunPb)(nil),                                    // 82: littlehorse.DeleteWfRunPb
	(*DeleteTaskDefPb)(nil),                                  // 83: littlehorse.DeleteTaskDefPb
	(*DeleteUserTaskDefPb)(nil),                              // 84: littlehorse.DeleteUserTaskDefPb
	(*DeleteWfSpecPb)(nil),                                   // 85: littlehorse.DeleteWfSpecPb
	(*DeleteExternalEventDefPb)(nil),                         // 86: littlehorse.DeleteExternalEventDefPb
	(*DeleteObjectReplyPb)(nil),                              // 87: littlehorse.DeleteObjectReplyPb
	(*HealthCheckPb)(nil),                                    // 88: littlehorse.HealthCheckPb
	(*HealthCheckReplyPb)(nil),                               // 89: littlehorse.HealthCheckReplyPb
	(*TaskDefMetricsQueryPb)(nil),                            // 90: littlehorse.TaskDefMetricsQueryPb
	(*TaskDefMetricsReplyPb)(nil),                            // 91: littlehorse.TaskDefMetricsReplyPb
	(*ListTaskMetricsPb)(nil),                                // 92: littlehorse.ListTaskMetricsPb
	(*ListTaskMetricsReplyPb)(nil),                           // 93: littlehorse.ListTaskMetricsReplyPb
	(*WfSpecMetricsQueryPb)(nil),                             // 94: littlehorse.WfSpecMetricsQueryPb
	(*WfSpecMetricsReplyPb)(nil),                             // 95: littlehorse.WfSpecMetricsReplyPb
	(*ListWfMetricsPb)(nil),                                  // 96: littlehorse.ListWfMetricsPb
	(*ListWfMetricsReplyPb)(nil),                             // 97: littlehorse.ListWfMetricsReplyPb
	(*VariableValuePb)(nil),                                  // 98: littlehorse.VariableValuePb
	(*VariableIdPb)(nil),                                     // 99: littlehorse.VariableIdPb
	(*VariablePb)(nil),                                       // 100: littlehorse.VariablePb
	(*VarNameAndValPb)(nil),                                  // 101: littlehorse.VarNameAndValPb
	(*ExternalEventIdPb)(nil),                                // 102: littlehorse.ExternalEventIdPb
	(*ExternalEventPb)(nil),                                  // 103: littlehorse.ExternalEventPb
	(*WfRunIdPb)(nil),                                        // 104: littlehorse.WfRunIdPb
	(*WfRunPb)(nil),                                          // 105: littlehorse.WfRunPb
	(*ThreadRunPb)(nil),                                      // 106: littlehorse.ThreadRunPb
	(*FailureBeingHandledPb)(nil),                            // 107: littlehorse.FailureBeingHandledPb
	(*PendingInterruptPb)(nil),                               // 108: littlehorse.PendingInterruptPb
	(*PendingFailureHandlerPb)(nil),                          // 109: littlehorse.PendingFailureHandlerPb
	(*PendingInterruptHaltReasonPb)(nil),                     // 110: littlehorse.PendingInterruptHaltReasonPb
	(*PendingFailureHandlerHaltReasonPb)(nil),                // 111: littlehorse.PendingFailureHandlerHaltReasonPb
	(*HandlingFailureHaltReasonPb)(nil),                      // 112: littlehorse.HandlingFailureHaltReasonPb
	(*ParentHaltedPb)(nil),                                   // 113: littlehorse.ParentHaltedPb
	(*InterruptedPb)(nil),                                    // 114: littlehorse.InterruptedPb
	(*ManualHaltPb)(nil),                                     // 115: littlehorse.ManualHaltPb
	(*ThreadHaltReasonPb)(nil),                               // 116: littlehorse.ThreadHaltReasonPb
	(*NodeRunIdPb)(nil),                                      // 117: littlehorse.NodeRunIdPb
	(*TaskNodeRunPb)(nil),                                    // 118: littlehorse.TaskNodeRunPb
	(*UserTaskNodeRunPb)(nil),                                // 119: littlehorse.UserTaskNodeRunPb
	(*NodeRunPb)(nil),                                        // 120: littlehorse.NodeRunPb
	(*FailurePb)(nil),                                        // 121: littlehorse.FailurePb
	(*TaskAttemptPb)(nil),                                    // 122: littlehorse.TaskAttemptPb
	(*TaskRunIdPb)(nil),                                      // 123: littlehorse.TaskRunIdPb
	(*TaskRunPb)(nil),                                        // 124: littlehorse.TaskRunPb
	(*TaskNodeReferencePb)(nil),                              // 125: littlehorse.TaskNodeReferencePb
	(*UserTaskTriggerReferencePb)(nil),                       // 126: littlehorse.UserTaskTriggerReferencePb
	(*EntrypointRunPb)(nil),                                  // 127: littlehorse.EntrypointRunPb
	(*ExitRunPb)(nil),                                        // 128: littlehorse.ExitRunPb
	(*StartThreadRunPb)(nil),                                 // 129: littlehorse.StartThreadRunPb
	(*WaitForThreadsRunPb)(nil),                              // 130: littlehorse.WaitForThreadsRunPb
	(*ExternalEventRunPb)(nil),                               // 131: littlehorse.ExternalEventRunPb
	(*SleepNodeRunPb)(nil),                                   // 132: littlehorse.SleepNodeRunPb
	(*EdgeConditionPb)(nil),                                  // 133: littlehorse.EdgeConditionPb
	(*EdgePb)(nil),                                           // 134: littlehorse.EdgePb
	(*VariableAssignmentPb)(nil),                             // 135: littlehorse.VariableAssignmentPb
	(*VariableMutationPb)(nil),                               // 136: littlehorse.VariableMutationPb
	(*NopNodePb)(nil),                                        // 137: littlehorse.NopNodePb
	(*SleepNodePb)(nil),                                      // 138: littlehorse.SleepNodePb
	(*NodePb)(nil),                                           // 139: littlehorse.NodePb
	(*UserTaskFieldPb)(nil),                                  // 140: littlehorse.UserTaskFieldPb
	(*UserTaskDefIdPb)(nil),                                  // 141: littlehorse.UserTaskDefIdPb
	(*UserTaskDefPb)(nil),                                    // 142: littlehorse.UserTaskDefPb
	(*UTActionTriggerPb)(nil),                                // 143: littlehorse.UTActionTriggerPb
	(*UserTaskNodePb)(nil),                                   // 144: littlehorse.UserTaskNodePb
	(*UserTaskEventPb)(nil),                                  // 145: littlehorse.UserTaskEventPb
	(*UserTaskRunIdPb)(nil),                                  // 146: littlehorse.UserTaskRunIdPb
	(*UserTaskRunPb)(nil),                                    // 147: littlehorse.UserTaskRunPb
	(*AssignUserTaskRunPb)(nil),                              // 148: littlehorse.AssignUserTaskRunPb
	(*AssignUserTaskRunReplyPb)(nil),                         // 149: littlehorse.AssignUserTaskRunReplyPb
	(*CompleteUserTaskRunReplyPb)(nil),                       // 150: littlehorse.CompleteUserTaskRunReplyPb
	(*UserTaskFieldResultPb)(nil),                            // 151: littlehorse.UserTaskFieldResultPb
	(*UserTaskResultPb)(nil),                                 // 152: littlehorse.UserTaskResultPb
	(*SaveUserTaskRunPb)(nil),                                // 153: littlehorse.SaveUserTaskRunPb
	(*CompleteUserTaskRunPb)(nil),                            // 154: littlehorse.CompleteUserTaskRunPb
	(*StartThreadNodePb)(nil),                                // 155: littlehorse.StartThreadNodePb
	(*FailureHandlerDefPb)(nil),                              // 156: littlehorse.FailureHandlerDefPb
	(*WaitForThreadsNodePb)(nil),                             // 157: littlehorse.WaitForThreadsNodePb
	(*TaskNodePb)(nil),                                       // 158: littlehorse.TaskNodePb
	(*ExternalEventNodePb)(nil),                              // 159: littlehorse.ExternalEventNodePb
	(*EntrypointNodePb)(nil),                                 // 160: littlehorse.EntrypointNodePb
	(*ExitNodePb)(nil),                                       // 161: littlehorse.ExitNodePb
	(*FailureDefPb)(nil),                                     // 162: littlehorse.FailureDefPb
	(*VariableDefPb)(nil),                                    // 163: littlehorse.VariableDefPb
	(*JsonIndexPb)(nil),                                      // 164: littlehorse.JsonIndexPb
	(*InterruptDefPb)(nil),                                   // 165: littlehorse.InterruptDefPb
	(*ThreadSpecPb)(nil),                                     // 166: littlehorse.ThreadSpecPb
	(*WfSpecPb)(nil),                                         // 167: littlehorse.WfSpecPb
	(*OutputSchemaPb)(nil),                                   // 168: littlehorse.OutputSchemaPb
	(*TaskDefPb)(nil),                                        // 169: littlehorse.TaskDefPb
	(*ExternalEventDefPb)(nil),                               // 170: littlehorse.ExternalEventDefPb
	(*TaskDefMetricsIdPb)(nil),                               // 171: littlehorse.TaskDefMetricsIdPb
	(*TaskDefMetricsPb)(nil),                                 // 172: littlehorse.TaskDefMetricsPb
	(*WfSpecMetricsIdPb)(nil),                                // 173: littlehorse.WfSpecMetricsIdPb
	(*WfSpecMetricsPb)(nil),                                  // 174: littlehorse.WfSpecMetricsPb
	nil,                                                      // 175: littlehorse.PutWfSpecPb.ThreadSpecsEntry
	nil,                                                      // 176: littlehorse.RunWfPb.VariablesEntry
	(*SearchWfRunPb_StatusAndSpecPb)(nil),                    // 177: littlehorse.SearchWfRunPb.StatusAndSpecPb
	(*SearchWfRunPb_NamePb)(nil),                             // 178: littlehorse.SearchWfRunPb.NamePb
	(*SearchWfRunPb_StatusAndNamePb)(nil),                    // 179: littlehorse.SearchWfRunPb.StatusAndNamePb
	(*SearchTaskRunPb_StatusAndTaskDefPb)(nil),               // 180: littlehorse.SearchTaskRunPb.StatusAndTaskDefPb
	(*SearchTaskRunPb_ByTaskDefPb)(nil),                      // 181: littlehorse.SearchTaskRunPb.ByTaskDefPb
	(*SearchVariablePb_NameAndValuePb)(nil),                  // 182: littlehorse.SearchVariablePb.NameAndValuePb
	(*SearchExternalEventPb_ByExtEvtDefNameAndStatusPb)(nil), // 183: littlehorse.SearchExternalEventPb.ByExtEvtDefNameAndStatusPb
	nil, // 184: littlehorse.TaskWorkerGroupPb.TaskWorkersEntry
	(*WaitForThreadsRunPb_WaitForThreadPb)(nil),    // 185: littlehorse.WaitForThreadsRunPb.WaitForThreadPb
	(*VariableAssignmentPb_FormatStringPb)(nil),    // 186: littlehorse.VariableAssignmentPb.FormatStringPb
	(*VariableMutationPb_NodeOutputSourcePb)(nil),  // 187: littlehorse.VariableMutationPb.NodeOutputSourcePb
	(*UTActionTriggerPb_UTACancelPb)(nil),          // 188: littlehorse.UTActionTriggerPb.UTACancelPb
	(*UTActionTriggerPb_UTATaskPb)(nil),            // 189: littlehorse.UTActionTriggerPb.UTATaskPb
	(*UTActionTriggerPb_UTAReassignPb)(nil),        // 190: littlehorse.UTActionTriggerPb.UTAReassignPb
	(*UserTaskEventPb_UTECancelledPb)(nil),         // 191: littlehorse.UserTaskEventPb.UTECancelledPb
	(*UserTaskEventPb_UTETaskExecutedPb)(nil),      // 192: littlehorse.UserTaskEventPb.UTETaskExecutedPb
	(*UserTaskEventPb_UTEReassignedPb)(nil),        // 193: littlehorse.UserTaskEventPb.UTEReassignedPb
	nil,                                            // 194: littlehorse.StartThreadNodePb.VariablesEntry
	(*WaitForThreadsNodePb_ThreadToWaitForPb)(nil), // 195: littlehorse.WaitForThreadsNodePb.ThreadToWaitForPb
	nil,                           // 196: littlehorse.ThreadSpecPb.NodesEntry
	nil,                           // 197: littlehorse.WfSpecPb.ThreadSpecsEntry
	(*timestamppb.Timestamp)(nil), // 198: google.protobuf.Timestamp
}
var file_service_proto_depIdxs = []int32{
	0,   // 0: littlehorse.GetWfSpecReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	167, // 1: littlehorse.GetWfSpecReplyPb.result:type_name -> littlehorse.WfSpecPb
	175, // 2: littlehorse.PutWfSpecPb.thread_specs:type_name -> littlehorse.PutWfSpecPb.ThreadSpecsEntry
	0,   // 3: littlehorse.PutWfSpecReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	167, // 4: littlehorse.PutWfSpecReplyPb.result:type_name -> littlehorse.WfSpecPb
	0,   // 5: littlehorse.GetTaskDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	169, // 6: littlehorse.GetTaskDefReplyPb.result:type_name -> littlehorse.TaskDefPb
	163, // 7: littlehorse.PutTaskDefPb.input_vars:type_name -> littlehorse.VariableDefPb
	0,   // 8: littlehorse.PutTaskDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	169, // 9: littlehorse.PutTaskDefReplyPb.result:type_name -> littlehorse.TaskDefPb
	140, // 10: littlehorse.PutUserTaskDefPb.fields:type_name -> littlehorse.UserTaskFieldPb
	0,   // 11: littlehorse.PutUserTaskDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	142, // 12: littlehorse.PutUserTaskDefReplyPb.result:type_name -> littlehorse.UserTaskDefPb
	0,   // 13: littlehorse.GetUserTaskDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	142, // 14: littlehorse.GetUserTaskDefReplyPb.result:type_name -> littlehorse.UserTaskDefPb
	0,   // 15: littlehorse.PutExternalEventDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	170, // 16: littlehorse.PutExternalEventDefReplyPb.result:type_name -> littlehorse.ExternalEventDefPb
	0,   // 17: littlehorse.GetExternalEventDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	170, // 18: littlehorse.GetExternalEventDefReplyPb.result:type_name -> littlehorse.ExternalEventDefPb
	0,   // 19: littlehorse.GetWfRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	105, // 20: littlehorse.GetWfRunReplyPb.result:type_name -> littlehorse.WfRunPb
	0,   // 21: littlehorse.GetNodeRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	120, // 22: littlehorse.GetNodeRunReplyPb.result:type_name -> littlehorse.NodeRunPb
	0,   // 23: littlehorse.GetTaskRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	124, // 24: littlehorse.GetTaskRunReplyPb.result:type_name -> littlehorse.TaskRunPb
	0,   // 25: littlehorse.GetUserTaskRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	147, // 26: littlehorse.GetUserTaskRunReplyPb.result:type_name -> littlehorse.UserTaskRunPb
	0,   // 27: littlehorse.GetVariableReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	100, // 28: littlehorse.GetVariableReplyPb.result:type_name -> littlehorse.VariablePb
	0,   // 29: littlehorse.GetExternalEventReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	103, // 30: littlehorse.GetExternalEventReplyPb.result:type_name -> littlehorse.ExternalEventPb
	98,  // 31: littlehorse.PutExternalEventPb.content:type_name -> littlehorse.VariableValuePb
	0,   // 32: littlehorse.PutExternalEventReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	103, // 33: littlehorse.PutExternalEventReplyPb.result:type_name -> littlehorse.ExternalEventPb
	176, // 34: littlehorse.RunWfPb.variables:type_name -> littlehorse.RunWfPb.VariablesEntry
	0,   // 35: littlehorse.RunWfReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	177, // 36: littlehorse.SearchWfRunPb.status_and_spec:type_name -> littlehorse.SearchWfRunPb.StatusAndSpecPb
	178, // 37: littlehorse.SearchWfRunPb.name:type_name -> littlehorse.SearchWfRunPb.NamePb
	179, // 38: littlehorse.SearchWfRunPb.status_and_name:type_name -> littlehorse.SearchWfRunPb.StatusAndNamePb
	0,   // 39: littlehorse.SearchWfRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	104, // 40: littlehorse.SearchWfRunReplyPb.results:type_name -> littlehorse.WfRunIdPb
	180, // 41: littlehorse.SearchTaskRunPb.status_and_task_def:type_name -> littlehorse.SearchTaskRunPb.StatusAndTaskDefPb
	181, // 42: littlehorse.SearchTaskRunPb.task_def:type_name -> littlehorse.SearchTaskRunPb.ByTaskDefPb
	0,   // 43: littlehorse.SearchTaskRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	123, // 44: littlehorse.SearchTaskRunReplyPb.results:type_name -> littlehorse.TaskRunIdPb
	0,   // 45: littlehorse.SearchNodeRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	117, // 46: littlehorse.SearchNodeRunReplyPb.results:type_name -> littlehorse.NodeRunIdPb
	8,   // 47: littlehorse.SearchUserTaskRunPb.status:type_name -> littlehorse.UserTaskRunStatusPb
	198, // 48: littlehorse.SearchUserTaskRunPb.earliest_start:type_name -> google.protobuf.Timestamp
	198, // 49: littlehorse.SearchUserTaskRunPb.latest_start:type_name -> google.protobuf.Timestamp
	0,   // 50: littlehorse.SearchUserTaskRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	146, // 51: littlehorse.SearchUserTaskRunReplyPb.results:type_name -> littlehorse.UserTaskRunIdPb
	182, // 52: littlehorse.SearchVariablePb.value:type_name -> littlehorse.SearchVariablePb.NameAndValuePb
	0,   // 53: littlehorse.SearchVariableReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	99,  // 54: littlehorse.SearchVariableReplyPb.results:type_name -> littlehorse.VariableIdPb
	0,   // 55: littlehorse.SearchTaskDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	12,  // 56: littlehorse.SearchTaskDefReplyPb.results:type_name -> littlehorse.TaskDefIdPb
	0,   // 57: littlehorse.SearchUserTaskDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	141, // 58: littlehorse.SearchUserTaskDefReplyPb.results:type_name -> littlehorse.UserTaskDefIdPb
	0,   // 59: littlehorse.SearchWfSpecReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	11,  // 60: littlehorse.SearchWfSpecReplyPb.results:type_name -> littlehorse.WfSpecIdPb
	0,   // 61: littlehorse.SearchExternalEventDefReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	13,  // 62: littlehorse.SearchExternalEventDefReplyPb.results:type_name -> littlehorse.ExternalEventDefIdPb
	183, // 63: littlehorse.SearchExternalEventPb.external_event_def_name_and_status:type_name -> littlehorse.SearchExternalEventPb.ByExtEvtDefNameAndStatusPb
	0,   // 64: littlehorse.SearchExternalEventReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	102, // 65: littlehorse.SearchExternalEventReplyPb.results:type_name -> littlehorse.ExternalEventIdPb
	0,   // 66: littlehorse.ListNodeRunsReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	120, // 67: littlehorse.ListNodeRunsReplyPb.results:type_name -> littlehorse.NodeRunPb
	0,   // 68: littlehorse.ListVariablesReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	100, // 69: littlehorse.ListVariablesReplyPb.results:type_name -> littlehorse.VariablePb
	0,   // 70: littlehorse.ListExternalEventsReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	103, // 71: littlehorse.ListExternalEventsReplyPb.results:type_name -> littlehorse.ExternalEventPb
	0,   // 72: littlehorse.RegisterTaskWorkerReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	68,  // 73: littlehorse.RegisterTaskWorkerReplyPb.your_hosts:type_name -> littlehorse.HostInfoPb
	198, // 74: littlehorse.TaskWorkerMetadataPb.latest_heartbeat:type_name -> google.protobuf.Timestamp
	68,  // 75: littlehorse.TaskWorkerMetadataPb.hosts:type_name -> littlehorse.HostInfoPb
	198, // 76: littlehorse.TaskWorkerGroupPb.created_at:type_name -> google.protobuf.Timestamp
	184, // 77: littlehorse.TaskWorkerGroupPb.task_workers:type_name -> littlehorse.TaskWorkerGroupPb.TaskWorkersEntry
	123, // 78: littlehorse.ScheduledTaskPb.task_run_id:type_name -> littlehorse.TaskRunIdPb
	12,  // 79: littlehorse.ScheduledTaskPb.task_def_id:type_name -> littlehorse.TaskDefIdPb
	101, // 80: littlehorse.ScheduledTaskPb.variables:type_name -> littlehorse.VarNameAndValPb
	198, // 81: littlehorse.ScheduledTaskPb.created_at:type_name -> google.protobuf.Timestamp
	74,  // 82: littlehorse.ScheduledTaskPb.source:type_name -> littlehorse.TaskRunSourcePb
	125, // 83: littlehorse.TaskRunSourcePb.task_node:type_name -> littlehorse.TaskNodeReferencePb
	126, // 84: littlehorse.TaskRunSourcePb.user_task_trigger:type_name -> littlehorse.UserTaskTriggerReferencePb
	0,   // 85: littlehorse.PollTaskReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	73,  // 86: littlehorse.PollTaskReplyPb.result:type_name -> littlehorse.ScheduledTaskPb
	123, // 87: littlehorse.ReportTaskRunPb.task_run_id:type_name -> littlehorse.TaskRunIdPb
	198, // 88: littlehorse.ReportTaskRunPb.time:type_name -> google.protobuf.Timestamp
	2,   // 89: littlehorse.ReportTaskRunPb.status:type_name -> littlehorse.TaskStatusPb
	98,  // 90: littlehorse.ReportTaskRunPb.output:type_name -> littlehorse.VariableValuePb
	98,  // 91: littlehorse.ReportTaskRunPb.log_output:type_name -> littlehorse.VariableValuePb
	0,   // 92: littlehorse.ReportTaskReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	0,   // 93: littlehorse.StopWfRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	0,   // 94: littlehorse.ResumeWfRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	0,   // 95: littlehorse.DeleteObjectReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	3,   // 96: littlehorse.HealthCheckReplyPb.core_state:type_name -> littlehorse.LHHealthResultPb
	3,   // 97: littlehorse.HealthCheckReplyPb.timer_state:type_name -> littlehorse.LHHealthResultPb
	198, // 98: littlehorse.TaskDefMetricsQueryPb.window_start:type_name -> google.protobuf.Timestamp
	10,  // 99: littlehorse.TaskDefMetricsQueryPb.window_type:type_name -> littlehorse.MetricsWindowLengthPb
	0,   // 100: littlehorse.TaskDefMetricsReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	172, // 101: littlehorse.TaskDefMetricsReplyPb.result:type_name -> littlehorse.TaskDefMetricsPb
	198, // 102: littlehorse.ListTaskMetricsPb.last_window_start:type_name -> google.protobuf.Timestamp
	10,  // 103: littlehorse.ListTaskMetricsPb.window_length:type_name -> littlehorse.MetricsWindowLengthPb
	0,   // 104: littlehorse.ListTaskMetricsReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	172, // 105: littlehorse.ListTaskMetricsReplyPb.results:type_name -> littlehorse.TaskDefMetricsPb
	198, // 106: littlehorse.WfSpecMetricsQueryPb.window_start:type_name -> google.protobuf.Timestamp
	10,  // 107: littlehorse.WfSpecMetricsQueryPb.window_type:type_name -> littlehorse.MetricsWindowLengthPb
	0,   // 108: littlehorse.WfSpecMetricsReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	174, // 109: littlehorse.WfSpecMetricsReplyPb.result:type_name -> littlehorse.WfSpecMetricsPb
	198, // 110: littlehorse.ListWfMetricsPb.last_window_start:type_name -> google.protobuf.Timestamp
	10,  // 111: littlehorse.ListWfMetricsPb.window_length:type_name -> littlehorse.MetricsWindowLengthPb
	0,   // 112: littlehorse.ListWfMetricsReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	174, // 113: littlehorse.ListWfMetricsReplyPb.results:type_name -> littlehorse.WfSpecMetricsPb
	4,   // 114: littlehorse.VariableValuePb.type:type_name -> littlehorse.VariableTypePb
	98,  // 115: littlehorse.VariablePb.value:type_name -> littlehorse.VariableValuePb
	198, // 116: littlehorse.VariablePb.date:type_name -> google.protobuf.Timestamp
	98,  // 117: littlehorse.VarNameAndValPb.value:type_name -> littlehorse.VariableValuePb
	198, // 118: littlehorse.ExternalEventPb.created_at:type_name -> google.protobuf.Timestamp
	98,  // 119: littlehorse.ExternalEventPb.content:type_name -> littlehorse.VariableValuePb
	1,   // 120: littlehorse.WfRunPb.status:type_name -> littlehorse.LHStatusPb
	198, // 121: littlehorse.WfRunPb.start_time:type_name -> google.protobuf.Timestamp
	198, // 122: littlehorse.WfRunPb.end_time:type_name -> google.protobuf.Timestamp
	106, // 123: littlehorse.WfRunPb.thread_runs:type_name -> littlehorse.ThreadRunPb
	108, // 124: littlehorse.WfRunPb.pending_interrupts:type_name -> littlehorse.PendingInterruptPb
	109, // 125: littlehorse.WfRunPb.pending_failures:type_name -> littlehorse.PendingFailureHandlerPb
	1,   // 126: littlehorse.ThreadRunPb.status:type_name -> littlehorse.LHStatusPb
	198, // 127: littlehorse.ThreadRunPb.start_time:type_name -> google.protobuf.Timestamp
	198, // 128: littlehorse.ThreadRunPb.end_time:type_name -> google.protobuf.Timestamp
	116, // 129: littlehorse.ThreadRunPb.halt_reasons:type_name -> littlehorse.ThreadHaltReasonPb
	102, // 130: littlehorse.ThreadRunPb.interrupt_trigger_id:type_name -> littlehorse.ExternalEventIdPb
	107, // 131: littlehorse.ThreadRunPb.failure_being_handled:type_name -> littlehorse.FailureBeingHandledPb
	5,   // 132: littlehorse.ThreadRunPb.type:type_name -> littlehorse.ThreadTypePb
	102, // 133: littlehorse.PendingInterruptPb.external_event_id:type_name -> littlehorse.ExternalEventIdPb
	102, // 134: littlehorse.PendingInterruptHaltReasonPb.external_event_id:type_name -> littlehorse.ExternalEventIdPb
	113, // 135: littlehorse.ThreadHaltReasonPb.parent_halted:type_name -> littlehorse.ParentHaltedPb
	114, // 136: littlehorse.ThreadHaltReasonPb.interrupted:type_name -> littlehorse.InterruptedPb
	110, // 137: littlehorse.ThreadHaltReasonPb.pending_interrupt:type_name -> littlehorse.PendingInterruptHaltReasonPb
	111, // 138: littlehorse.ThreadHaltReasonPb.pending_failure:type_name -> littlehorse.PendingFailureHandlerHaltReasonPb
	112, // 139: littlehorse.ThreadHaltReasonPb.handling_failure:type_name -> littlehorse.HandlingFailureHaltReasonPb
	115, // 140: littlehorse.ThreadHaltReasonPb.manual_halt:type_name -> littlehorse.ManualHaltPb
	123, // 141: littlehorse.TaskNodeRunPb.task_run_id:type_name -> littlehorse.TaskRunIdPb
	146, // 142: littlehorse.UserTaskNodeRunPb.user_task_run_id:type_name -> littlehorse.UserTaskRunIdPb
	1,   // 143: littlehorse.NodeRunPb.status:type_name -> littlehorse.LHStatusPb
	198, // 144: littlehorse.NodeRunPb.arrival_time:type_name -> google.protobuf.Timestamp
	198, // 145: littlehorse.NodeRunPb.end_time:type_name -> google.protobuf.Timestamp
	11,  // 146: littlehorse.NodeRunPb.wf_spec_id:type_name -> littlehorse.WfSpecIdPb
	121, // 147: littlehorse.NodeRunPb.failures:type_name -> littlehorse.FailurePb
	118, // 148: littlehorse.NodeRunPb.task:type_name -> littlehorse.TaskNodeRunPb
	131, // 149: littlehorse.NodeRunPb.external_event:type_name -> littlehorse.ExternalEventRunPb
	127, // 150: littlehorse.NodeRunPb.entrypoint:type_name -> littlehorse.EntrypointRunPb
	128, // 151: littlehorse.NodeRunPb.exit:type_name -> littlehorse.ExitRunPb
	129, // 152: littlehorse.NodeRunPb.start_thread:type_name -> littlehorse.StartThreadRunPb
	130, // 153: littlehorse.NodeRunPb.wait_threads:type_name -> littlehorse.WaitForThreadsRunPb
	132, // 154: littlehorse.NodeRunPb.sleep:type_name -> littlehorse.SleepNodeRunPb
	119, // 155: littlehorse.NodeRunPb.user_task:type_name -> littlehorse.UserTaskNodeRunPb
	98,  // 156: littlehorse.FailurePb.content:type_name -> littlehorse.VariableValuePb
	98,  // 157: littlehorse.TaskAttemptPb.output:type_name -> littlehorse.VariableValuePb
	98,  // 158: littlehorse.TaskAttemptPb.log_output:type_name -> littlehorse.VariableValuePb
	198, // 159: littlehorse.TaskAttemptPb.schedule_time:type_name -> google.protobuf.Timestamp
	198, // 160: littlehorse.TaskAttemptPb.start_time:type_name -> google.protobuf.Timestamp
	198, // 161: littlehorse.TaskAttemptPb.end_time:type_name -> google.protobuf.Timestamp
	2,   // 162: littlehorse.TaskAttemptPb.status:type_name -> littlehorse.TaskStatusPb
	123, // 163: littlehorse.TaskRunPb.id:type_name -> littlehorse.TaskRunIdPb
	122, // 164: littlehorse.TaskRunPb.attempts:type_name -> littlehorse.TaskAttemptPb
	101, // 165: littlehorse.TaskRunPb.input_variables:type_name -> littlehorse.VarNameAndValPb
	74,  // 166: littlehorse.TaskRunPb.source:type_name -> littlehorse.TaskRunSourcePb
	198, // 167: littlehorse.TaskRunPb.scheduled_at:type_name -> google.protobuf.Timestamp
	2,   // 168: littlehorse.TaskRunPb.status:type_name -> littlehorse.TaskStatusPb
	117, // 169: littlehorse.TaskNodeReferencePb.node_run_id:type_name -> littlehorse.NodeRunIdPb
	11,  // 170: littlehorse.TaskNodeReferencePb.wf_spec_id:type_name -> littlehorse.WfSpecIdPb
	117, // 171: littlehorse.UserTaskTriggerReferencePb.node_run_id:type_name -> littlehorse.NodeRunIdPb
	11,  // 172: littlehorse.UserTaskTriggerReferencePb.wf_spec_id:type_name -> littlehorse.WfSpecIdPb
	185, // 173: littlehorse.WaitForThreadsRunPb.threads:type_name -> littlehorse.WaitForThreadsRunPb.WaitForThreadPb
	198, // 174: littlehorse.ExternalEventRunPb.event_time:type_name -> google.protobuf.Timestamp
	102, // 175: littlehorse.ExternalEventRunPb.external_event_id:type_name -> littlehorse.ExternalEventIdPb
	198, // 176: littlehorse.SleepNodeRunPb.maturation_time:type_name -> google.protobuf.Timestamp
	6,   // 177: littlehorse.EdgeConditionPb.comparator:type_name -> littlehorse.ComparatorPb
	135, // 178: littlehorse.EdgeConditionPb.left:type_name -> littlehorse.VariableAssignmentPb
	135, // 179: littlehorse.EdgeConditionPb.right:type_name -> littlehorse.VariableAssignmentPb
	133, // 180: littlehorse.EdgePb.condition:type_name -> littlehorse.EdgeConditionPb
	98,  // 181: littlehorse.VariableAssignmentPb.literal_value:type_name -> littlehorse.VariableValuePb
	186, // 182: littlehorse.VariableAssignmentPb.format_string:type_name -> littlehorse.VariableAssignmentPb.FormatStringPb
	7,   // 183: littlehorse.VariableMutationPb.operation:type_name -> littlehorse.VariableMutationTypePb
	135, // 184: littlehorse.VariableMutationPb.source_variable:type_name -> littlehorse.VariableAssignmentPb
	98,  // 185: littlehorse.VariableMutationPb.literal_value:type_name -> littlehorse.VariableValuePb
	187, // 186: littlehorse.VariableMutationPb.node_output:type_name -> littlehorse.VariableMutationPb.NodeOutputSourcePb
	135, // 187: littlehorse.SleepNodePb.raw_seconds:type_name -> littlehorse.VariableAssignmentPb
	135, // 188: littlehorse.SleepNodePb.timestamp:type_name -> littlehorse.VariableAssignmentPb
	135, // 189: littlehorse.SleepNodePb.iso_date:type_name -> littlehorse.VariableAssignmentPb
	134, // 190: littlehorse.NodePb.outgoing_edges:type_name -> littlehorse.EdgePb
	136, // 191: littlehorse.NodePb.variable_mutations:type_name -> littlehorse.VariableMutationPb
	156, // 192: littlehorse.NodePb.failure_handlers:type_name -> littlehorse.FailureHandlerDefPb
	160, // 193: littlehorse.NodePb.entrypoint:type_name -> littlehorse.EntrypointNodePb
	161, // 194: littlehorse.NodePb.exit:type_name -> littlehorse.ExitNodePb
	158, // 195: littlehorse.NodePb.task:type_name -> littlehorse.TaskNodePb
	159, // 196: littlehorse.NodePb.external_event:type_name -> littlehorse.ExternalEventNodePb
	155, // 197: littlehorse.NodePb.start_thread:type_name -> littlehorse.StartThreadNodePb
	157, // 198: littlehorse.NodePb.wait_for_threads:type_name -> littlehorse.WaitForThreadsNodePb
	137, // 199: littlehorse.NodePb.nop:type_name -> littlehorse.NopNodePb
	138, // 200: littlehorse.NodePb.sleep:type_name -> littlehorse.SleepNodePb
	144, // 201: littlehorse.NodePb.user_task:type_name -> littlehorse.UserTaskNodePb
	4,   // 202: littlehorse.UserTaskFieldPb.type:type_name -> littlehorse.VariableTypePb
	140, // 203: littlehorse.UserTaskDefPb.fields:type_name -> littlehorse.UserTaskFieldPb
	198, // 204: littlehorse.UserTaskDefPb.created_at:type_name -> google.protobuf.Timestamp
	189, // 205: littlehorse.UTActionTriggerPb.task:type_name -> littlehorse.UTActionTriggerPb.UTATaskPb
	188, // 206: littlehorse.UTActionTriggerPb.cancel:type_name -> littlehorse.UTActionTriggerPb.UTACancelPb
	190, // 207: littlehorse.UTActionTriggerPb.reassign:type_name -> littlehorse.UTActionTriggerPb.UTAReassignPb
	135, // 208: littlehorse.UTActionTriggerPb.delay_seconds:type_name -> littlehorse.VariableAssignmentPb
	135, // 209: littlehorse.UserTaskNodePb.user_group:type_name -> littlehorse.VariableAssignmentPb
	135, // 210: littlehorse.UserTaskNodePb.user_id:type_name -> littlehorse.VariableAssignmentPb
	143, // 211: littlehorse.UserTaskNodePb.actions:type_name -> littlehorse.UTActionTriggerPb
	135, // 212: littlehorse.UserTaskNodePb.notes:type_name -> littlehorse.VariableAssignmentPb
	198, // 213: littlehorse.UserTaskEventPb.time:type_name -> google.protobuf.Timestamp
	192, // 214: littlehorse.UserTaskEventPb.task_executed:type_name -> littlehorse.UserTaskEventPb.UTETaskExecutedPb
	193, // 215: littlehorse.UserTaskEventPb.reassigned:type_name -> littlehorse.UserTaskEventPb.UTEReassignedPb
	191, // 216: littlehorse.UserTaskEventPb.cancelled:type_name -> littlehorse.UserTaskEventPb.UTECancelledPb
	146, // 217: littlehorse.UserTaskRunPb.id:type_name -> littlehorse.UserTaskRunIdPb
	141, // 218: littlehorse.UserTaskRunPb.user_task_def_id:type_name -> littlehorse.UserTaskDefIdPb
	151, // 219: littlehorse.UserTaskRunPb.results:type_name -> littlehorse.UserTaskFieldResultPb
	8,   // 220: littlehorse.UserTaskRunPb.status:type_name -> littlehorse.UserTaskRunStatusPb
	145, // 221: littlehorse.UserTaskRunPb.events:type_name -> littlehorse.UserTaskEventPb
	198, // 222: littlehorse.UserTaskRunPb.scheduled_time:type_name -> google.protobuf.Timestamp
	117, // 223: littlehorse.UserTaskRunPb.node_run_id:type_name -> littlehorse.NodeRunIdPb
	146, // 224: littlehorse.AssignUserTaskRunPb.user_task_run_id:type_name -> littlehorse.UserTaskRunIdPb
	0,   // 225: littlehorse.AssignUserTaskRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	0,   // 226: littlehorse.CompleteUserTaskRunReplyPb.code:type_name -> littlehorse.LHResponseCodePb
	98,  // 227: littlehorse.UserTaskFieldResultPb.value:type_name -> littlehorse.VariableValuePb
	151, // 228: littlehorse.UserTaskResultPb.fields:type_name -> littlehorse.UserTaskFieldResultPb
	152, // 229: littlehorse.SaveUserTaskRunPb.result:type_name -> littlehorse.UserTaskResultPb
	151, // 230: littlehorse.SaveUserTaskRunPb.results:type_name -> littlehorse.UserTaskFieldResultPb
	146, // 231: littlehorse.CompleteUserTaskRunPb.user_task_run_id:type_name -> littlehorse.UserTaskRunIdPb
	152, // 232: littlehorse.CompleteUserTaskRunPb.result:type_name -> littlehorse.UserTaskResultPb
	194, // 233: littlehorse.StartThreadNodePb.variables:type_name -> littlehorse.StartThreadNodePb.VariablesEntry
	195, // 234: littlehorse.WaitForThreadsNodePb.threads:type_name -> littlehorse.WaitForThreadsNodePb.ThreadToWaitForPb
	135, // 235: littlehorse.TaskNodePb.variables:type_name -> littlehorse.VariableAssignmentPb
	135, // 236: littlehorse.ExternalEventNodePb.timeout_seconds:type_name -> littlehorse.VariableAssignmentPb
	162, // 237: littlehorse.ExitNodePb.failure_def:type_name -> littlehorse.FailureDefPb
	135, // 238: littlehorse.FailureDefPb.content:type_name -> littlehorse.VariableAssignmentPb
	4,   // 239: littlehorse.VariableDefPb.type:type_name -> littlehorse.VariableTypePb
	9,   // 240: littlehorse.VariableDefPb.index_type:type_name -> littlehorse.IndexTypePb
	164, // 241: littlehorse.VariableDefPb.json_indexes:type_name -> littlehorse.JsonIndexPb
	9,   // 242: littlehorse.JsonIndexPb.index_type:type_name -> littlehorse.IndexTypePb
	196, // 243: littlehorse.ThreadSpecPb.nodes:type_name -> littlehorse.ThreadSpecPb.NodesEntry
	163, // 244: littlehorse.ThreadSpecPb.variable_defs:type_name -> littlehorse.VariableDefPb
	165, // 245: littlehorse.ThreadSpecPb.interrupt_defs:type_name -> littlehorse.InterruptDefPb
	198, // 246: littlehorse.WfSpecPb.created_at:type_name -> google.protobuf.Timestamp
	1,   // 247: littlehorse.WfSpecPb.status:type_name -> littlehorse.LHStatusPb
	197, // 248: littlehorse.WfSpecPb.thread_specs:type_name -> littlehorse.WfSpecPb.ThreadSpecsEntry
	4,   // 249: littlehorse.OutputSchemaPb.output_type:type_name -> littlehorse.VariableTypePb
	163, // 250: littlehorse.TaskDefPb.input_vars:type_name -> littlehorse.VariableDefPb
	198, // 251: littlehorse.TaskDefPb.created_at:type_name -> google.protobuf.Timestamp
	198, // 252: littlehorse.ExternalEventDefPb.created_at:type_name -> google.protobuf.Timestamp
	198, // 253: littlehorse.TaskDefMetricsIdPb.window_start:type_name -> google.protobuf.Timestamp
	10,  // 254: littlehorse.TaskDefMetricsIdPb.window_type:type_name -> littlehorse.MetricsWindowLengthPb
	198, // 255: littlehorse.TaskDefMetricsPb.window_start:type_name -> google.protobuf.Timestamp
	10,  // 256: littlehorse.TaskDefMetricsPb.type:type_name -> littlehorse.MetricsWindowLengthPb
	198, // 257: littlehorse.WfSpecMetricsIdPb.window_start:type_name -> google.protobuf.Timestamp
	10,  // 258: littlehorse.WfSpecMetricsIdPb.window_type:type_name -> littlehorse.MetricsWindowLengthPb
	198, // 259: littlehorse.WfSpecMetricsPb.window_start:type_name -> google.protobuf.Timestamp
	10,  // 260: littlehorse.WfSpecMetricsPb.type:type_name -> littlehorse.MetricsWindowLengthPb
	166, // 261: littlehorse.PutWfSpecPb.ThreadSpecsEntry.value:type_name -> littlehorse.ThreadSpecPb
	98,  // 262: littlehorse.RunWfPb.VariablesEntry.value:type_name -> littlehorse.VariableValuePb
	1,   // 263: littlehorse.SearchWfRunPb.StatusAndSpecPb.status:type_name -> littlehorse.LHStatusPb
	198, // 264: littlehorse.SearchWfRunPb.StatusAndSpecPb.earliest_start:type_name -> google.protobuf.Timestamp
	198, // 265: littlehorse.SearchWfRunPb.StatusAndSpecPb.latest_start:type_name -> google.protobuf.Timestamp
	198, // 266: littlehorse.SearchWfRunPb.NamePb.earliest_start:type_name -> google.protobuf.Timestamp
	198, // 267: littlehorse.SearchWfRunPb.NamePb.latest_start:type_name -> google.protobuf.Timestamp
	1,   // 268: littlehorse.SearchWfRunPb.StatusAndNamePb.status:type_name -> littlehorse.LHStatusPb
	198, // 269: littlehorse.SearchWfRunPb.StatusAndNamePb.earliest_start:type_name -> google.protobuf.Timestamp
	198, // 270: littlehorse.SearchWfRunPb.StatusAndNamePb.latest_start:type_name -> google.protobuf.Timestamp
	2,   // 271: littlehorse.SearchTaskRunPb.StatusAndTaskDefPb.status:type_name -> littlehorse.TaskStatusPb
	198, // 272: littlehorse.SearchTaskRunPb.StatusAndTaskDefPb.earliest_start:type_name -> google.protobuf.Timestamp
	198, // 273: littlehorse.SearchTaskRunPb.StatusAndTaskDefPb.latest_start:type_name -> google.protobuf.Timestamp
	198, // 274: littlehorse.SearchTaskRunPb.ByTaskDefPb.earliest_start:type_name -> google.protobuf.Timestamp
	198, // 275: littlehorse.SearchTaskRunPb.ByTaskDefPb.latest_start:type_name -> google.protobuf.Timestamp
	98,  // 276: littlehorse.SearchVariablePb.NameAndValuePb.value:type_name -> littlehorse.VariableValuePb
	69,  // 277: littlehorse.TaskWorkerGroupPb.TaskWorkersEntry.value:type_name -> littlehorse.TaskWorkerMetadataPb
	198, // 278: littlehorse.WaitForThreadsRunPb.WaitForThreadPb.thread_end_time:type_name -> google.protobuf.Timestamp
	1,   // 279: littlehorse.WaitForThreadsRunPb.WaitForThreadPb.thread_status:type_name -> littlehorse.LHStatusPb
	135, // 280: littlehorse.VariableAssignmentPb.FormatStringPb.format:type_name -> littlehorse.VariableAssignmentPb
	135, // 281: littlehorse.VariableAssignmentPb.FormatStringPb.args:type_name -> littlehorse.VariableAssignmentPb
	158, // 282: littlehorse.UTActionTriggerPb.UTATaskPb.task:type_name -> littlehorse.TaskNodePb
	136, // 283: littlehorse.UTActionTriggerPb.UTATaskPb.mutations:type_name -> littlehorse.VariableMutationPb
	135, // 284: littlehorse.UTActionTriggerPb.UTAReassignPb.user_id:type_name -> littlehorse.VariableAssignmentPb
	135, // 285: littlehorse.UTActionTriggerPb.UTAReassignPb.user_group:type_name -> littlehorse.VariableAssignmentPb
	123, // 286: littlehorse.UserTaskEventPb.UTETaskExecutedPb.task_run:type_name -> littlehorse.TaskRunIdPb
	135, // 287: littlehorse.StartThreadNodePb.VariablesEntry.value:type_name -> littlehorse.VariableAssignmentPb
	135, // 288: littlehorse.WaitForThreadsNodePb.ThreadToWaitForPb.thread_run_number:type_name -> littlehorse.VariableAssignmentPb
	139, // 289: littlehorse.ThreadSpecPb.NodesEntry.value:type_name -> littlehorse.NodePb
	166, // 290: littlehorse.WfSpecPb.ThreadSpecsEntry.value:type_name -> littlehorse.ThreadSpecPb
	20,  // 291: littlehorse.LHPublicApi.PutTaskDef:input_type -> littlehorse.PutTaskDefPb
	12,  // 292: littlehorse.LHPublicApi.GetTaskDef:input_type -> littlehorse.TaskDefIdPb
	25,  // 293: littlehorse.LHPublicApi.PutExternalEventDef:input_type -> littlehorse.PutExternalEventDefPb
	13,  // 294: littlehorse.LHPublicApi.GetExternalEventDef:input_type -> littlehorse.ExternalEventDefIdPb
	17,  // 295: littlehorse.LHPublicApi.PutWfSpec:input_type -> littlehorse.PutWfSpecPb
	11,  // 296: littlehorse.LHPublicApi.GetWfSpec:input_type -> littlehorse.WfSpecIdPb
	14,  // 297: littlehorse.LHPublicApi.GetLatestWfSpec:input_type -> littlehorse.GetLatestWfSpecPb
	22,  // 298: littlehorse.LHPublicApi.PutUserTaskDef:input_type -> littlehorse.PutUserTaskDefPb
	141, // 299: littlehorse.LHPublicApi.GetUserTaskDef:input_type -> littlehorse.UserTaskDefIdPb
	15,  // 300: littlehorse.LHPublicApi.GetLatestUserTaskDef:input_type -> littlehorse.GetLatestUserTaskDefPb
	146, // 301: littlehorse.LHPublicApi.GetUserTaskRun:input_type -> littlehorse.UserTaskRunIdPb
	37,  // 302: littlehorse.LHPublicApi.RunWf:input_type -> littlehorse.RunWfPb
	104, // 303: littlehorse.LHPublicApi.GetWfRun:input_type -> littlehorse.WfRunIdPb
	148, // 304: littlehorse.LHPublicApi.AssignUserTaskRun:input_type -> littlehorse.AssignUserTaskRunPb
	154, // 305: littlehorse.LHPublicApi.CompleteUserTaskRun:input_type -> littlehorse.CompleteUserTaskRunPb
	117, // 306: littlehorse.LHPublicApi.GetNodeRun:input_type -> littlehorse.NodeRunIdPb
	59,  // 307: littlehorse.LHPublicApi.ListNodeRuns:input_type -> littlehorse.ListNodeRunsPb
	123, // 308: littlehorse.LHPublicApi.GetTaskRun:input_type -> littlehorse.TaskRunIdPb
	99,  // 309: littlehorse.LHPublicApi.GetVariable:input_type -> littlehorse.VariableIdPb
	61,  // 310: littlehorse.LHPublicApi.ListVariables:input_type -> littlehorse.ListVariablesPb
	34,  // 311: littlehorse.LHPublicApi.PutExternalEvent:input_type -> littlehorse.PutExternalEventPb
	102, // 312: littlehorse.LHPublicApi.GetExternalEvent:input_type -> littlehorse.ExternalEventIdPb
	63,  // 313: littlehorse.LHPublicApi.ListExternalEvents:input_type -> littlehorse.ListExternalEventsPb
	39,  // 314: littlehorse.LHPublicApi.SearchWfRun:input_type -> littlehorse.SearchWfRunPb
	43,  // 315: littlehorse.LHPublicApi.SearchNodeRun:input_type -> littlehorse.SearchNodeRunPb
	41,  // 316: littlehorse.LHPublicApi.SearchTaskRun:input_type -> littlehorse.SearchTaskRunPb
	45,  // 317: littlehorse.LHPublicApi.SearchUserTaskRun:input_type -> littlehorse.SearchUserTaskRunPb
	47,  // 318: littlehorse.LHPublicApi.SearchVariable:input_type -> littlehorse.SearchVariablePb
	49,  // 319: littlehorse.LHPublicApi.SearchTaskDef:input_type -> littlehorse.SearchTaskDefPb
	51,  // 320: littlehorse.LHPublicApi.SearchUserTaskDef:input_type -> littlehorse.SearchUserTaskDefPb
	53,  // 321: littlehorse.LHPublicApi.SearchWfSpec:input_type -> littlehorse.SearchWfSpecPb
	55,  // 322: littlehorse.LHPublicApi.SearchExternalEventDef:input_type -> littlehorse.SearchExternalEventDefPb
	57,  // 323: littlehorse.LHPublicApi.SearchExternalEvent:input_type -> littlehorse.SearchExternalEventPb
	65,  // 324: littlehorse.LHPublicApi.RegisterTaskWorker:input_type -> littlehorse.RegisterTaskWorkerPb
	72,  // 325: littlehorse.LHPublicApi.PollTask:input_type -> littlehorse.PollTaskPb
	76,  // 326: littlehorse.LHPublicApi.ReportTask:input_type -> littlehorse.ReportTaskRunPb
	78,  // 327: littlehorse.LHPublicApi.StopWfRun:input_type -> littlehorse.StopWfRunPb
	80,  // 328: littlehorse.LHPublicApi.ResumeWfRun:input_type -> littlehorse.ResumeWfRunPb
	82,  // 329: littlehorse.LHPublicApi.DeleteWfRun:input_type -> littlehorse.DeleteWfRunPb
	83,  // 330: littlehorse.LHPublicApi.DeleteTaskDef:input_type -> littlehorse.DeleteTaskDefPb
	85,  // 331: littlehorse.LHPublicApi.DeleteWfSpec:input_type -> littlehorse.DeleteWfSpecPb
	84,  // 332: littlehorse.LHPublicApi.DeleteUserTaskDef:input_type -> littlehorse.DeleteUserTaskDefPb
	86,  // 333: littlehorse.LHPublicApi.DeleteExternalEventDef:input_type -> littlehorse.DeleteExternalEventDefPb
	88,  // 334: littlehorse.LHPublicApi.HealthCheck:input_type -> littlehorse.HealthCheckPb
	90,  // 335: littlehorse.LHPublicApi.TaskDefMetrics:input_type -> littlehorse.TaskDefMetricsQueryPb
	94,  // 336: littlehorse.LHPublicApi.WfSpecMetrics:input_type -> littlehorse.WfSpecMetricsQueryPb
	92,  // 337: littlehorse.LHPublicApi.ListTaskDefMetrics:input_type -> littlehorse.ListTaskMetricsPb
	96,  // 338: littlehorse.LHPublicApi.ListWfSpecMetrics:input_type -> littlehorse.ListWfMetricsPb
	21,  // 339: littlehorse.LHPublicApi.PutTaskDef:output_type -> littlehorse.PutTaskDefReplyPb
	19,  // 340: littlehorse.LHPublicApi.GetTaskDef:output_type -> littlehorse.GetTaskDefReplyPb
	26,  // 341: littlehorse.LHPublicApi.PutExternalEventDef:output_type -> littlehorse.PutExternalEventDefReplyPb
	27,  // 342: littlehorse.LHPublicApi.GetExternalEventDef:output_type -> littlehorse.GetExternalEventDefReplyPb
	18,  // 343: littlehorse.LHPublicApi.PutWfSpec:output_type -> littlehorse.PutWfSpecReplyPb
	16,  // 344: littlehorse.LHPublicApi.GetWfSpec:output_type -> littlehorse.GetWfSpecReplyPb
	16,  // 345: littlehorse.LHPublicApi.GetLatestWfSpec:output_type -> littlehorse.GetWfSpecReplyPb
	23,  // 346: littlehorse.LHPublicApi.PutUserTaskDef:output_type -> littlehorse.PutUserTaskDefReplyPb
	24,  // 347: littlehorse.LHPublicApi.GetUserTaskDef:output_type -> littlehorse.GetUserTaskDefReplyPb
	24,  // 348: littlehorse.LHPublicApi.GetLatestUserTaskDef:output_type -> littlehorse.GetUserTaskDefReplyPb
	31,  // 349: littlehorse.LHPublicApi.GetUserTaskRun:output_type -> littlehorse.GetUserTaskRunReplyPb
	38,  // 350: littlehorse.LHPublicApi.RunWf:output_type -> littlehorse.RunWfReplyPb
	28,  // 351: littlehorse.LHPublicApi.GetWfRun:output_type -> littlehorse.GetWfRunReplyPb
	149, // 352: littlehorse.LHPublicApi.AssignUserTaskRun:output_type -> littlehorse.AssignUserTaskRunReplyPb
	150, // 353: littlehorse.LHPublicApi.CompleteUserTaskRun:output_type -> littlehorse.CompleteUserTaskRunReplyPb
	29,  // 354: littlehorse.LHPublicApi.GetNodeRun:output_type -> littlehorse.GetNodeRunReplyPb
	60,  // 355: littlehorse.LHPublicApi.ListNodeRuns:output_type -> littlehorse.ListNodeRunsReplyPb
	30,  // 356: littlehorse.LHPublicApi.GetTaskRun:output_type -> littlehorse.GetTaskRunReplyPb
	32,  // 357: littlehorse.LHPublicApi.GetVariable:output_type -> littlehorse.GetVariableReplyPb
	62,  // 358: littlehorse.LHPublicApi.ListVariables:output_type -> littlehorse.ListVariablesReplyPb
	36,  // 359: littlehorse.LHPublicApi.PutExternalEvent:output_type -> littlehorse.PutExternalEventReplyPb
	33,  // 360: littlehorse.LHPublicApi.GetExternalEvent:output_type -> littlehorse.GetExternalEventReplyPb
	64,  // 361: littlehorse.LHPublicApi.ListExternalEvents:output_type -> littlehorse.ListExternalEventsReplyPb
	40,  // 362: littlehorse.LHPublicApi.SearchWfRun:output_type -> littlehorse.SearchWfRunReplyPb
	44,  // 363: littlehorse.LHPublicApi.SearchNodeRun:output_type -> littlehorse.SearchNodeRunReplyPb
	42,  // 364: littlehorse.LHPublicApi.SearchTaskRun:output_type -> littlehorse.SearchTaskRunReplyPb
	46,  // 365: littlehorse.LHPublicApi.SearchUserTaskRun:output_type -> littlehorse.SearchUserTaskRunReplyPb
	48,  // 366: littlehorse.LHPublicApi.SearchVariable:output_type -> littlehorse.SearchVariableReplyPb
	50,  // 367: littlehorse.LHPublicApi.SearchTaskDef:output_type -> littlehorse.SearchTaskDefReplyPb
	52,  // 368: littlehorse.LHPublicApi.SearchUserTaskDef:output_type -> littlehorse.SearchUserTaskDefReplyPb
	54,  // 369: littlehorse.LHPublicApi.SearchWfSpec:output_type -> littlehorse.SearchWfSpecReplyPb
	56,  // 370: littlehorse.LHPublicApi.SearchExternalEventDef:output_type -> littlehorse.SearchExternalEventDefReplyPb
	58,  // 371: littlehorse.LHPublicApi.SearchExternalEvent:output_type -> littlehorse.SearchExternalEventReplyPb
	67,  // 372: littlehorse.LHPublicApi.RegisterTaskWorker:output_type -> littlehorse.RegisterTaskWorkerReplyPb
	75,  // 373: littlehorse.LHPublicApi.PollTask:output_type -> littlehorse.PollTaskReplyPb
	77,  // 374: littlehorse.LHPublicApi.ReportTask:output_type -> littlehorse.ReportTaskReplyPb
	79,  // 375: littlehorse.LHPublicApi.StopWfRun:output_type -> littlehorse.StopWfRunReplyPb
	81,  // 376: littlehorse.LHPublicApi.ResumeWfRun:output_type -> littlehorse.ResumeWfRunReplyPb
	87,  // 377: littlehorse.LHPublicApi.DeleteWfRun:output_type -> littlehorse.DeleteObjectReplyPb
	87,  // 378: littlehorse.LHPublicApi.DeleteTaskDef:output_type -> littlehorse.DeleteObjectReplyPb
	87,  // 379: littlehorse.LHPublicApi.DeleteWfSpec:output_type -> littlehorse.DeleteObjectReplyPb
	87,  // 380: littlehorse.LHPublicApi.DeleteUserTaskDef:output_type -> littlehorse.DeleteObjectReplyPb
	87,  // 381: littlehorse.LHPublicApi.DeleteExternalEventDef:output_type -> littlehorse.DeleteObjectReplyPb
	89,  // 382: littlehorse.LHPublicApi.HealthCheck:output_type -> littlehorse.HealthCheckReplyPb
	91,  // 383: littlehorse.LHPublicApi.TaskDefMetrics:output_type -> littlehorse.TaskDefMetricsReplyPb
	95,  // 384: littlehorse.LHPublicApi.WfSpecMetrics:output_type -> littlehorse.WfSpecMetricsReplyPb
	93,  // 385: littlehorse.LHPublicApi.ListTaskDefMetrics:output_type -> littlehorse.ListTaskMetricsReplyPb
	97,  // 386: littlehorse.LHPublicApi.ListWfSpecMetrics:output_type -> littlehorse.ListWfMetricsReplyPb
	339, // [339:387] is the sub-list for method output_type
	291, // [291:339] is the sub-list for method input_type
	291, // [291:291] is the sub-list for extension type_name
	291, // [291:291] is the sub-list for extension extendee
	0,   // [0:291] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventDefIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestWfSpecPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestUserTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWfSpecReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWfSpecPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWfSpecReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUserTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUserTaskDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTaskDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalEventDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWfRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTaskRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVariableReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalEventReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExternalEventPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutExternalEventReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunWfPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunWfReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodeRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodeRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVariablePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVariableReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserTaskDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfSpecPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfSpecReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventDefReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRunsPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRunsReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariablesPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariablesReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExternalEventsPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExternalEventsReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskWorkerPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerHeartBeatPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskWorkerReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfoPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerMetadataPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerGroupPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerGroupIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollTaskPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTaskPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRunSourcePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollTaskReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTaskReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWfRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWfRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeWfRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeWfRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWfRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWfSpecPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExternalEventDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetricsQueryPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetricsReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskMetricsPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskMetricsReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetricsQueryPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetricsReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWfMetricsPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWfMetricsReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableValuePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariablePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarNameAndValPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfRunIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureBeingHandledPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingInterruptPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingFailureHandlerPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingInterruptHaltReasonPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingFailureHandlerHaltReasonPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlingFailureHaltReasonPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentHaltedPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterruptedPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualHaltPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadHaltReasonPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRunIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNodeRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskNodeRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailurePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttemptPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRunIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNodeReferencePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskTriggerReferencePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartThreadRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepNodeRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeConditionPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAssignmentPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableMutationPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NopNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskFieldPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskDefIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTriggerPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEventPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskRunIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUserTaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUserTaskRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteUserTaskRunReplyPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskFieldResultPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskResultPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserTaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteUserTaskRunPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartThreadNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureHandlerDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitNodePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonIndexPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterruptDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSpecPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputSchemaPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetricsIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDefMetricsPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetricsIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfSpecMetricsPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunPb_StatusAndSpecPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunPb_NamePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWfRunPb_StatusAndNamePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunPb_StatusAndTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTaskRunPb_ByTaskDefPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVariablePb_NameAndValuePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchExternalEventPb_ByExtEvtDefNameAndStatusPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsRunPb_WaitForThreadPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAssignmentPb_FormatStringPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableMutationPb_NodeOutputSourcePb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTriggerPb_UTACancelPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTriggerPb_UTATaskPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTActionTriggerPb_UTAReassignPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEventPb_UTECancelledPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEventPb_UTETaskExecutedPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskEventPb_UTEReassignedPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsNodePb_ThreadToWaitForPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*SearchWfRunPb_StatusAndSpec)(nil),
		(*SearchWfRunPb_Name)(nil),
		(*SearchWfRunPb_StatusAndName)(nil),
	}
	file_service_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*SearchTaskRunPb_StatusAndTaskDef)(nil),
		(*SearchTaskRunPb_TaskDef)(nil),
	}
	file_service_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*SearchNodeRunPb_WfRunId)(nil),
	}
	file_service_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*SearchUserTaskRunPb_UserId)(nil),
		(*SearchUserTaskRunPb_UserGroup)(nil),
	}
	file_service_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*SearchVariablePb_WfRunId)(nil),
		(*SearchVariablePb_Value)(nil),
	}
	file_service_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*SearchUserTaskDefPb_Prefix)(nil),
		(*SearchUserTaskDefPb_Name)(nil),
	}
	file_service_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*SearchWfSpecPb_Name)(nil),
		(*SearchWfSpecPb_Prefix)(nil),
		(*SearchWfSpecPb_TaskDefName)(nil),
	}
	file_service_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*SearchExternalEventPb_WfRunId)(nil),
		(*SearchExternalEventPb_ExternalEventDefNameAndStatus)(nil),
	}
	file_service_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*TaskRunSourcePb_TaskNode)(nil),
		(*TaskRunSourcePb_UserTaskTrigger)(nil),
	}
	file_service_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[105].OneofWrappers = []interface{}{
		(*ThreadHaltReasonPb_ParentHalted)(nil),
		(*ThreadHaltReasonPb_Interrupted)(nil),
		(*ThreadHaltReasonPb_PendingInterrupt)(nil),
		(*ThreadHaltReasonPb_PendingFailure)(nil),
		(*ThreadHaltReasonPb_HandlingFailure)(nil),
		(*ThreadHaltReasonPb_ManualHalt)(nil),
	}
	file_service_proto_msgTypes[107].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[109].OneofWrappers = []interface{}{
		(*NodeRunPb_Task)(nil),
		(*NodeRunPb_ExternalEvent)(nil),
		(*NodeRunPb_Entrypoint)(nil),
		(*NodeRunPb_Exit)(nil),
		(*NodeRunPb_StartThread)(nil),
		(*NodeRunPb_WaitThreads)(nil),
		(*NodeRunPb_Sleep)(nil),
		(*NodeRunPb_UserTask)(nil),
	}
	file_service_proto_msgTypes[110].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[111].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[118].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[120].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[123].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[124].OneofWrappers = []interface{}{
		(*VariableAssignmentPb_VariableName)(nil),
		(*VariableAssignmentPb_LiteralValue)(nil),
		(*VariableAssignmentPb_FormatString)(nil),
	}
	file_service_proto_msgTypes[125].OneofWrappers = []interface{}{
		(*VariableMutationPb_SourceVariable)(nil),
		(*VariableMutationPb_LiteralValue)(nil),
		(*VariableMutationPb_NodeOutput)(nil),
	}
	file_service_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*SleepNodePb_RawSeconds)(nil),
		(*SleepNodePb_Timestamp)(nil),
		(*SleepNodePb_IsoDate)(nil),
	}
	file_service_proto_msgTypes[128].OneofWrappers = []interface{}{
		(*NodePb_Entrypoint)(nil),
		(*NodePb_Exit)(nil),
		(*NodePb_Task)(nil),
		(*NodePb_ExternalEvent)(nil),
		(*NodePb_StartThread)(nil),
		(*NodePb_WaitForThreads)(nil),
		(*NodePb_Nop)(nil),
		(*NodePb_Sleep)(nil),
		(*NodePb_UserTask)(nil),
	}
	file_service_proto_msgTypes[129].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[131].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[132].OneofWrappers = []interface{}{
		(*UTActionTriggerPb_Task)(nil),
		(*UTActionTriggerPb_Cancel)(nil),
		(*UTActionTriggerPb_Reassign)(nil),
		(*UTActionTriggerPb_DelaySeconds)(nil),
	}
	file_service_proto_msgTypes[133].OneofWrappers = []interface{}{
		(*UserTaskNodePb_UserGroup)(nil),
		(*UserTaskNodePb_UserId)(nil),
	}
	file_service_proto_msgTypes[134].OneofWrappers = []interface{}{
		(*UserTaskEventPb_TaskExecuted)(nil),
		(*UserTaskEventPb_Reassigned)(nil),
		(*UserTaskEventPb_Cancelled)(nil),
	}
	file_service_proto_msgTypes[136].OneofWrappers = []interface{}{
		(*UserTaskRunPb_SpecificUserId)(nil),
		(*UserTaskRunPb_UserGroup)(nil),
	}
	file_service_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*AssignUserTaskRunPb_UserId)(nil),
		(*AssignUserTaskRunPb_UserGroup)(nil),
	}
	file_service_proto_msgTypes[138].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[140].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[145].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[150].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[151].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[152].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[166].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[167].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[168].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[169].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[170].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[171].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[172].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[174].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[176].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[179].OneofWrappers = []interface{}{
		(*UTActionTriggerPb_UTAReassignPb_UserId)(nil),
		(*UTActionTriggerPb_UTAReassignPb_UserGroup)(nil),
	}
	file_service_proto_msgTypes[182].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   187,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
