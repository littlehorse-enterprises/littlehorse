// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: node_run.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WfRunId         string                 `protobuf:"bytes,1,opt,name=wf_run_id,json=wfRunId,proto3" json:"wf_run_id,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,2,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	Position        int32                  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Status          LHStatus               `protobuf:"varint,6,opt,name=status,proto3,enum=littlehorse.LHStatus" json:"status,omitempty"`
	ArrivalTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	WfSpecId        *WfSpecId              `protobuf:"bytes,9,opt,name=wf_spec_id,json=wfSpecId,proto3" json:"wf_spec_id,omitempty"`
	ThreadSpecName  string                 `protobuf:"bytes,10,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
	NodeName        string                 `protobuf:"bytes,11,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ErrorMessage    *string                `protobuf:"bytes,13,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	Failures        []*Failure             `protobuf:"bytes,14,rep,name=failures,proto3" json:"failures,omitempty"`
	// Types that are assignable to NodeType:
	//	*NodeRun_Task
	//	*NodeRun_ExternalEvent
	//	*NodeRun_Entrypoint
	//	*NodeRun_Exit
	//	*NodeRun_StartThread
	//	*NodeRun_WaitThreads
	//	*NodeRun_Sleep
	//	*NodeRun_UserTask
	//	*NodeRun_StartMultipleThreads
	NodeType          isNodeRun_NodeType `protobuf_oneof:"node_type"`
	FailureHandlerIds []int32            `protobuf:"varint,23,rep,packed,name=failure_handler_ids,json=failureHandlerIds,proto3" json:"failure_handler_ids,omitempty"`
}

func (x *NodeRun) Reset() {
	*x = NodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRun) ProtoMessage() {}

func (x *NodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRun.ProtoReflect.Descriptor instead.
func (*NodeRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{0}
}

func (x *NodeRun) GetWfRunId() string {
	if x != nil {
		return x.WfRunId
	}
	return ""
}

func (x *NodeRun) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *NodeRun) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *NodeRun) GetStatus() LHStatus {
	if x != nil {
		return x.Status
	}
	return LHStatus_STARTING
}

func (x *NodeRun) GetArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *NodeRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NodeRun) GetWfSpecId() *WfSpecId {
	if x != nil {
		return x.WfSpecId
	}
	return nil
}

func (x *NodeRun) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

func (x *NodeRun) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeRun) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *NodeRun) GetFailures() []*Failure {
	if x != nil {
		return x.Failures
	}
	return nil
}

func (m *NodeRun) GetNodeType() isNodeRun_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (x *NodeRun) GetTask() *TaskNodeRun {
	if x, ok := x.GetNodeType().(*NodeRun_Task); ok {
		return x.Task
	}
	return nil
}

func (x *NodeRun) GetExternalEvent() *ExternalEventRun {
	if x, ok := x.GetNodeType().(*NodeRun_ExternalEvent); ok {
		return x.ExternalEvent
	}
	return nil
}

func (x *NodeRun) GetEntrypoint() *EntrypointRun {
	if x, ok := x.GetNodeType().(*NodeRun_Entrypoint); ok {
		return x.Entrypoint
	}
	return nil
}

func (x *NodeRun) GetExit() *ExitRun {
	if x, ok := x.GetNodeType().(*NodeRun_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *NodeRun) GetStartThread() *StartThreadRun {
	if x, ok := x.GetNodeType().(*NodeRun_StartThread); ok {
		return x.StartThread
	}
	return nil
}

func (x *NodeRun) GetWaitThreads() *WaitForThreadsRun {
	if x, ok := x.GetNodeType().(*NodeRun_WaitThreads); ok {
		return x.WaitThreads
	}
	return nil
}

func (x *NodeRun) GetSleep() *SleepNodeRun {
	if x, ok := x.GetNodeType().(*NodeRun_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *NodeRun) GetUserTask() *UserTaskNodeRun {
	if x, ok := x.GetNodeType().(*NodeRun_UserTask); ok {
		return x.UserTask
	}
	return nil
}

func (x *NodeRun) GetStartMultipleThreads() *StartMultipleThreadsRun {
	if x, ok := x.GetNodeType().(*NodeRun_StartMultipleThreads); ok {
		return x.StartMultipleThreads
	}
	return nil
}

func (x *NodeRun) GetFailureHandlerIds() []int32 {
	if x != nil {
		return x.FailureHandlerIds
	}
	return nil
}

type isNodeRun_NodeType interface {
	isNodeRun_NodeType()
}

type NodeRun_Task struct {
	Task *TaskNodeRun `protobuf:"bytes,15,opt,name=task,proto3,oneof"`
}

type NodeRun_ExternalEvent struct {
	ExternalEvent *ExternalEventRun `protobuf:"bytes,16,opt,name=external_event,json=externalEvent,proto3,oneof"`
}

type NodeRun_Entrypoint struct {
	Entrypoint *EntrypointRun `protobuf:"bytes,17,opt,name=entrypoint,proto3,oneof"`
}

type NodeRun_Exit struct {
	Exit *ExitRun `protobuf:"bytes,19,opt,name=exit,proto3,oneof"`
}

type NodeRun_StartThread struct {
	StartThread *StartThreadRun `protobuf:"bytes,20,opt,name=start_thread,json=startThread,proto3,oneof"`
}

type NodeRun_WaitThreads struct {
	WaitThreads *WaitForThreadsRun `protobuf:"bytes,21,opt,name=wait_threads,json=waitThreads,proto3,oneof"`
}

type NodeRun_Sleep struct {
	Sleep *SleepNodeRun `protobuf:"bytes,22,opt,name=sleep,proto3,oneof"`
}

type NodeRun_UserTask struct {
	UserTask *UserTaskNodeRun `protobuf:"bytes,24,opt,name=user_task,json=userTask,proto3,oneof"`
}

type NodeRun_StartMultipleThreads struct {
	StartMultipleThreads *StartMultipleThreadsRun `protobuf:"bytes,25,opt,name=start_multiple_threads,json=startMultipleThreads,proto3,oneof"`
}

func (*NodeRun_Task) isNodeRun_NodeType() {}

func (*NodeRun_ExternalEvent) isNodeRun_NodeType() {}

func (*NodeRun_Entrypoint) isNodeRun_NodeType() {}

func (*NodeRun_Exit) isNodeRun_NodeType() {}

func (*NodeRun_StartThread) isNodeRun_NodeType() {}

func (*NodeRun_WaitThreads) isNodeRun_NodeType() {}

func (*NodeRun_Sleep) isNodeRun_NodeType() {}

func (*NodeRun_UserTask) isNodeRun_NodeType() {}

func (*NodeRun_StartMultipleThreads) isNodeRun_NodeType() {}

type TaskNodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskRunId *TaskRunId `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3,oneof" json:"task_run_id,omitempty"`
}

func (x *TaskNodeRun) Reset() {
	*x = TaskNodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNodeRun) ProtoMessage() {}

func (x *TaskNodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNodeRun.ProtoReflect.Descriptor instead.
func (*TaskNodeRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{1}
}

func (x *TaskNodeRun) GetTaskRunId() *TaskRunId {
	if x != nil {
		return x.TaskRunId
	}
	return nil
}

type UserTaskNodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTaskRunId *UserTaskRunId `protobuf:"bytes,1,opt,name=user_task_run_id,json=userTaskRunId,proto3,oneof" json:"user_task_run_id,omitempty"`
}

func (x *UserTaskNodeRun) Reset() {
	*x = UserTaskNodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskNodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskNodeRun) ProtoMessage() {}

func (x *UserTaskNodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskNodeRun.ProtoReflect.Descriptor instead.
func (*UserTaskNodeRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{2}
}

func (x *UserTaskNodeRun) GetUserTaskRunId() *UserTaskRunId {
	if x != nil {
		return x.UserTaskRunId
	}
	return nil
}

type EntrypointRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntrypointRun) Reset() {
	*x = EntrypointRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointRun) ProtoMessage() {}

func (x *EntrypointRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointRun.ProtoReflect.Descriptor instead.
func (*EntrypointRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{3}
}

type ExitRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitRun) Reset() {
	*x = ExitRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRun) ProtoMessage() {}

func (x *ExitRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRun.ProtoReflect.Descriptor instead.
func (*ExitRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{4}
}

type StartThreadRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildThreadId  *int32 `protobuf:"varint,1,opt,name=child_thread_id,json=childThreadId,proto3,oneof" json:"child_thread_id,omitempty"`
	ThreadSpecName string `protobuf:"bytes,2,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
}

func (x *StartThreadRun) Reset() {
	*x = StartThreadRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartThreadRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartThreadRun) ProtoMessage() {}

func (x *StartThreadRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartThreadRun.ProtoReflect.Descriptor instead.
func (*StartThreadRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{5}
}

func (x *StartThreadRun) GetChildThreadId() int32 {
	if x != nil && x.ChildThreadId != nil {
		return *x.ChildThreadId
	}
	return 0
}

func (x *StartThreadRun) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

type StartMultipleThreadsRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadSpecName string `protobuf:"bytes,1,opt,name=thread_spec_name,json=threadSpecName,proto3" json:"thread_spec_name,omitempty"`
}

func (x *StartMultipleThreadsRun) Reset() {
	*x = StartMultipleThreadsRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMultipleThreadsRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMultipleThreadsRun) ProtoMessage() {}

func (x *StartMultipleThreadsRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMultipleThreadsRun.ProtoReflect.Descriptor instead.
func (*StartMultipleThreadsRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{6}
}

func (x *StartMultipleThreadsRun) GetThreadSpecName() string {
	if x != nil {
		return x.ThreadSpecName
	}
	return ""
}

type WaitForThreadsRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*WaitForThreadsRun_WaitForThread `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
	Policy  WaitForThreadsPolicy               `protobuf:"varint,2,opt,name=policy,proto3,enum=littlehorse.WaitForThreadsPolicy" json:"policy,omitempty"`
}

func (x *WaitForThreadsRun) Reset() {
	*x = WaitForThreadsRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsRun) ProtoMessage() {}

func (x *WaitForThreadsRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsRun.ProtoReflect.Descriptor instead.
func (*WaitForThreadsRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{7}
}

func (x *WaitForThreadsRun) GetThreads() []*WaitForThreadsRun_WaitForThread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *WaitForThreadsRun) GetPolicy() WaitForThreadsPolicy {
	if x != nil {
		return x.Policy
	}
	return WaitForThreadsPolicy_STOP_ON_FAILURE
}

type ExternalEventRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEventDefName string                 `protobuf:"bytes,1,opt,name=external_event_def_name,json=externalEventDefName,proto3" json:"external_event_def_name,omitempty"`
	EventTime            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3,oneof" json:"event_time,omitempty"`
	ExternalEventId      *ExternalEventId       `protobuf:"bytes,3,opt,name=external_event_id,json=externalEventId,proto3,oneof" json:"external_event_id,omitempty"`
}

func (x *ExternalEventRun) Reset() {
	*x = ExternalEventRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEventRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEventRun) ProtoMessage() {}

func (x *ExternalEventRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEventRun.ProtoReflect.Descriptor instead.
func (*ExternalEventRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{8}
}

func (x *ExternalEventRun) GetExternalEventDefName() string {
	if x != nil {
		return x.ExternalEventDefName
	}
	return ""
}

func (x *ExternalEventRun) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *ExternalEventRun) GetExternalEventId() *ExternalEventId {
	if x != nil {
		return x.ExternalEventId
	}
	return nil
}

type SleepNodeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaturationTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=maturation_time,json=maturationTime,proto3" json:"maturation_time,omitempty"`
}

func (x *SleepNodeRun) Reset() {
	*x = SleepNodeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepNodeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepNodeRun) ProtoMessage() {}

func (x *SleepNodeRun) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepNodeRun.ProtoReflect.Descriptor instead.
func (*SleepNodeRun) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{9}
}

func (x *SleepNodeRun) GetMaturationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturationTime
	}
	return nil
}

type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureName        string         `protobuf:"bytes,1,opt,name=failure_name,json=failureName,proto3" json:"failure_name,omitempty"`
	Message            string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Content            *VariableValue `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
	WasProperlyHandled bool           `protobuf:"varint,4,opt,name=was_properly_handled,json=wasProperlyHandled,proto3" json:"was_properly_handled,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{10}
}

func (x *Failure) GetFailureName() string {
	if x != nil {
		return x.FailureName
	}
	return ""
}

func (x *Failure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Failure) GetContent() *VariableValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Failure) GetWasProperlyHandled() bool {
	if x != nil {
		return x.WasProperlyHandled
	}
	return false
}

type WaitForThreadsRun_WaitForThread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadEndTime   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=thread_end_time,json=threadEndTime,proto3,oneof" json:"thread_end_time,omitempty"`
	ThreadStatus    LHStatus               `protobuf:"varint,2,opt,name=thread_status,json=threadStatus,proto3,enum=littlehorse.LHStatus" json:"thread_status,omitempty"`
	ThreadRunNumber int32                  `protobuf:"varint,3,opt,name=thread_run_number,json=threadRunNumber,proto3" json:"thread_run_number,omitempty"`
	AlreadyHandled  bool                   `protobuf:"varint,5,opt,name=already_handled,json=alreadyHandled,proto3" json:"already_handled,omitempty"`
}

func (x *WaitForThreadsRun_WaitForThread) Reset() {
	*x = WaitForThreadsRun_WaitForThread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_run_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForThreadsRun_WaitForThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForThreadsRun_WaitForThread) ProtoMessage() {}

func (x *WaitForThreadsRun_WaitForThread) ProtoReflect() protoreflect.Message {
	mi := &file_node_run_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForThreadsRun_WaitForThread.ProtoReflect.Descriptor instead.
func (*WaitForThreadsRun_WaitForThread) Descriptor() ([]byte, []int) {
	return file_node_run_proto_rawDescGZIP(), []int{7, 0}
}

func (x *WaitForThreadsRun_WaitForThread) GetThreadEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ThreadEndTime
	}
	return nil
}

func (x *WaitForThreadsRun_WaitForThread) GetThreadStatus() LHStatus {
	if x != nil {
		return x.ThreadStatus
	}
	return LHStatus_STARTING
}

func (x *WaitForThreadsRun_WaitForThread) GetThreadRunNumber() int32 {
	if x != nil {
		return x.ThreadRunNumber
	}
	return 0
}

func (x *WaitForThreadsRun_WaitForThread) GetAlreadyHandled() bool {
	if x != nil {
		return x.AlreadyHandled
	}
	return false
}

var File_node_run_proto protoreflect.FileDescriptor

var file_node_run_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x82, 0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12,
	0x1a, 0x0a, 0x09, 0x77, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x66, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x48, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0a, 0x77, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x57, 0x66, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x52, 0x08, 0x77, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x65,
	0x78, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65,
	0x70, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x75, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x5c,
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x48, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x22, 0x09, 0x0a, 0x07, 0x45, 0x78, 0x69, 0x74, 0x52,
	0x75, 0x6e, 0x22, 0x7b, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x75, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x22,
	0x43, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xfd, 0x01,
	0x0a, 0x0d, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x47, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x48,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfd, 0x01,
	0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x48, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x53, 0x0a,
	0x0c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x43, 0x0a,
	0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x61, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x6c, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x6c,
	0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x2c, 0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_node_run_proto_rawDescOnce sync.Once
	file_node_run_proto_rawDescData = file_node_run_proto_rawDesc
)

func file_node_run_proto_rawDescGZIP() []byte {
	file_node_run_proto_rawDescOnce.Do(func() {
		file_node_run_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_run_proto_rawDescData)
	})
	return file_node_run_proto_rawDescData
}

var file_node_run_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_node_run_proto_goTypes = []interface{}{
	(*NodeRun)(nil),                         // 0: littlehorse.NodeRun
	(*TaskNodeRun)(nil),                     // 1: littlehorse.TaskNodeRun
	(*UserTaskNodeRun)(nil),                 // 2: littlehorse.UserTaskNodeRun
	(*EntrypointRun)(nil),                   // 3: littlehorse.EntrypointRun
	(*ExitRun)(nil),                         // 4: littlehorse.ExitRun
	(*StartThreadRun)(nil),                  // 5: littlehorse.StartThreadRun
	(*StartMultipleThreadsRun)(nil),         // 6: littlehorse.StartMultipleThreadsRun
	(*WaitForThreadsRun)(nil),               // 7: littlehorse.WaitForThreadsRun
	(*ExternalEventRun)(nil),                // 8: littlehorse.ExternalEventRun
	(*SleepNodeRun)(nil),                    // 9: littlehorse.SleepNodeRun
	(*Failure)(nil),                         // 10: littlehorse.Failure
	(*WaitForThreadsRun_WaitForThread)(nil), // 11: littlehorse.WaitForThreadsRun.WaitForThread
	(LHStatus)(0),                           // 12: littlehorse.LHStatus
	(*timestamppb.Timestamp)(nil),           // 13: google.protobuf.Timestamp
	(*WfSpecId)(nil),                        // 14: littlehorse.WfSpecId
	(*TaskRunId)(nil),                       // 15: littlehorse.TaskRunId
	(*UserTaskRunId)(nil),                   // 16: littlehorse.UserTaskRunId
	(WaitForThreadsPolicy)(0),               // 17: littlehorse.WaitForThreadsPolicy
	(*ExternalEventId)(nil),                 // 18: littlehorse.ExternalEventId
	(*VariableValue)(nil),                   // 19: littlehorse.VariableValue
}
var file_node_run_proto_depIdxs = []int32{
	12, // 0: littlehorse.NodeRun.status:type_name -> littlehorse.LHStatus
	13, // 1: littlehorse.NodeRun.arrival_time:type_name -> google.protobuf.Timestamp
	13, // 2: littlehorse.NodeRun.end_time:type_name -> google.protobuf.Timestamp
	14, // 3: littlehorse.NodeRun.wf_spec_id:type_name -> littlehorse.WfSpecId
	10, // 4: littlehorse.NodeRun.failures:type_name -> littlehorse.Failure
	1,  // 5: littlehorse.NodeRun.task:type_name -> littlehorse.TaskNodeRun
	8,  // 6: littlehorse.NodeRun.external_event:type_name -> littlehorse.ExternalEventRun
	3,  // 7: littlehorse.NodeRun.entrypoint:type_name -> littlehorse.EntrypointRun
	4,  // 8: littlehorse.NodeRun.exit:type_name -> littlehorse.ExitRun
	5,  // 9: littlehorse.NodeRun.start_thread:type_name -> littlehorse.StartThreadRun
	7,  // 10: littlehorse.NodeRun.wait_threads:type_name -> littlehorse.WaitForThreadsRun
	9,  // 11: littlehorse.NodeRun.sleep:type_name -> littlehorse.SleepNodeRun
	2,  // 12: littlehorse.NodeRun.user_task:type_name -> littlehorse.UserTaskNodeRun
	6,  // 13: littlehorse.NodeRun.start_multiple_threads:type_name -> littlehorse.StartMultipleThreadsRun
	15, // 14: littlehorse.TaskNodeRun.task_run_id:type_name -> littlehorse.TaskRunId
	16, // 15: littlehorse.UserTaskNodeRun.user_task_run_id:type_name -> littlehorse.UserTaskRunId
	11, // 16: littlehorse.WaitForThreadsRun.threads:type_name -> littlehorse.WaitForThreadsRun.WaitForThread
	17, // 17: littlehorse.WaitForThreadsRun.policy:type_name -> littlehorse.WaitForThreadsPolicy
	13, // 18: littlehorse.ExternalEventRun.event_time:type_name -> google.protobuf.Timestamp
	18, // 19: littlehorse.ExternalEventRun.external_event_id:type_name -> littlehorse.ExternalEventId
	13, // 20: littlehorse.SleepNodeRun.maturation_time:type_name -> google.protobuf.Timestamp
	19, // 21: littlehorse.Failure.content:type_name -> littlehorse.VariableValue
	13, // 22: littlehorse.WaitForThreadsRun.WaitForThread.thread_end_time:type_name -> google.protobuf.Timestamp
	12, // 23: littlehorse.WaitForThreadsRun.WaitForThread.thread_status:type_name -> littlehorse.LHStatus
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_node_run_proto_init() }
func file_node_run_proto_init() {
	if File_node_run_proto != nil {
		return
	}
	file_common_enums_proto_init()
	file_variable_proto_init()
	file_object_id_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_node_run_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskNodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartThreadRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMultipleThreadsRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEventRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepNodeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_run_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForThreadsRun_WaitForThread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_node_run_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NodeRun_Task)(nil),
		(*NodeRun_ExternalEvent)(nil),
		(*NodeRun_Entrypoint)(nil),
		(*NodeRun_Exit)(nil),
		(*NodeRun_StartThread)(nil),
		(*NodeRun_WaitThreads)(nil),
		(*NodeRun_Sleep)(nil),
		(*NodeRun_UserTask)(nil),
		(*NodeRun_StartMultipleThreads)(nil),
	}
	file_node_run_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_node_run_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_node_run_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_node_run_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_node_run_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_node_run_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_run_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_run_proto_goTypes,
		DependencyIndexes: file_node_run_proto_depIdxs,
		MessageInfos:      file_node_run_proto_msgTypes,
	}.Build()
	File_node_run_proto = out.File
	file_node_run_proto_rawDesc = nil
	file_node_run_proto_goTypes = nil
	file_node_run_proto_depIdxs = nil
}
