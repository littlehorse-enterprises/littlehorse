// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_wfspec.proto

package io.littlehorse.sdk.common.proto;

public interface TaskNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.TaskNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The type of TaskRun to schedule.
   * </pre>
   *
   * <code>.littlehorse.TaskDefId task_def_id = 1;</code>
   * @return Whether the taskDefId field is set.
   */
  boolean hasTaskDefId();
  /**
   * <pre>
   * The type of TaskRun to schedule.
   * </pre>
   *
   * <code>.littlehorse.TaskDefId task_def_id = 1;</code>
   * @return The taskDefId.
   */
  io.littlehorse.sdk.common.proto.TaskDefId getTaskDefId();
  /**
   * <pre>
   * The type of TaskRun to schedule.
   * </pre>
   *
   * <code>.littlehorse.TaskDefId task_def_id = 1;</code>
   */
  io.littlehorse.sdk.common.proto.TaskDefIdOrBuilder getTaskDefIdOrBuilder();

  /**
   * <pre>
   * How long until LittleHorse determines that the Task Worker had a technical ERROR if
   * the worker does not yet reply to the Server. This is determined on a per-Attempt
   * basis.
   * </pre>
   *
   * <code>int32 timeout_seconds = 2;</code>
   * @return The timeoutSeconds.
   */
  int getTimeoutSeconds();

  /**
   * <pre>
   * Simplest retry policy. Retries are immediately put back on the Task Queue, up to
   * the configured number of retries.
   * </pre>
   *
   * <code>int32 simple_retries = 3;</code>
   * @return Whether the simpleRetries field is set.
   */
  boolean hasSimpleRetries();
  /**
   * <pre>
   * Simplest retry policy. Retries are immediately put back on the Task Queue, up to
   * the configured number of retries.
   * </pre>
   *
   * <code>int32 simple_retries = 3;</code>
   * @return The simpleRetries.
   */
  int getSimpleRetries();

  /**
   * <pre>
   * Retry with Exponential Backoff.
   * </pre>
   *
   * <code>.littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 5;</code>
   * @return Whether the exponentialBackoff field is set.
   */
  boolean hasExponentialBackoff();
  /**
   * <pre>
   * Retry with Exponential Backoff.
   * </pre>
   *
   * <code>.littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 5;</code>
   * @return The exponentialBackoff.
   */
  io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy getExponentialBackoff();
  /**
   * <pre>
   * Retry with Exponential Backoff.
   * </pre>
   *
   * <code>.littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 5;</code>
   */
  io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicyOrBuilder getExponentialBackoffOrBuilder();

  /**
   * <pre>
   * Input variables into the TaskDef.
   * </pre>
   *
   * <code>repeated .littlehorse.VariableAssignment variables = 4;</code>
   */
  java.util.List<io.littlehorse.sdk.common.proto.VariableAssignment> 
      getVariablesList();
  /**
   * <pre>
   * Input variables into the TaskDef.
   * </pre>
   *
   * <code>repeated .littlehorse.VariableAssignment variables = 4;</code>
   */
  io.littlehorse.sdk.common.proto.VariableAssignment getVariables(int index);
  /**
   * <pre>
   * Input variables into the TaskDef.
   * </pre>
   *
   * <code>repeated .littlehorse.VariableAssignment variables = 4;</code>
   */
  int getVariablesCount();
  /**
   * <pre>
   * Input variables into the TaskDef.
   * </pre>
   *
   * <code>repeated .littlehorse.VariableAssignment variables = 4;</code>
   */
  java.util.List<? extends io.littlehorse.sdk.common.proto.VariableAssignmentOrBuilder> 
      getVariablesOrBuilderList();
  /**
   * <pre>
   * Input variables into the TaskDef.
   * </pre>
   *
   * <code>repeated .littlehorse.VariableAssignment variables = 4;</code>
   */
  io.littlehorse.sdk.common.proto.VariableAssignmentOrBuilder getVariablesOrBuilder(
      int index);

  io.littlehorse.sdk.common.proto.TaskNode.RetryPolicyCase getRetryPolicyCase();
}
