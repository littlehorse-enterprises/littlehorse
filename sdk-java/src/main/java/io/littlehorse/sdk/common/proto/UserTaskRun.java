// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_tasks.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * A UserTaskRun is a running instance of a UserTaskDef. It is created when a
 * ThreadRun arrives at a Node of type `USER_TASK`.
 * </pre>
 *
 * Protobuf type {@code littlehorse.UserTaskRun}
 */
public final class UserTaskRun extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.UserTaskRun)
    UserTaskRunOrBuilder {
private static final long serialVersionUID = 0L;
  // Use UserTaskRun.newBuilder() to construct.
  private UserTaskRun(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UserTaskRun() {
    userGroup_ = "";
    userId_ = "";
    status_ = 0;
    events_ = java.util.Collections.emptyList();
    notes_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new UserTaskRun();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.UserTasks.internal_static_littlehorse_UserTaskRun_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 6:
        return internalGetResults();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.UserTasks.internal_static_littlehorse_UserTaskRun_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.UserTaskRun.class, io.littlehorse.sdk.common.proto.UserTaskRun.Builder.class);
  }

  private int bitField0_;
  public static final int ID_FIELD_NUMBER = 1;
  private io.littlehorse.sdk.common.proto.UserTaskRunId id_;
  /**
   * <pre>
   * The ID of the UserTaskRun.
   * </pre>
   *
   * <code>.littlehorse.UserTaskRunId id = 1;</code>
   * @return Whether the id field is set.
   */
  @java.lang.Override
  public boolean hasId() {
    return id_ != null;
  }
  /**
   * <pre>
   * The ID of the UserTaskRun.
   * </pre>
   *
   * <code>.littlehorse.UserTaskRunId id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.UserTaskRunId getId() {
    return id_ == null ? io.littlehorse.sdk.common.proto.UserTaskRunId.getDefaultInstance() : id_;
  }
  /**
   * <pre>
   * The ID of the UserTaskRun.
   * </pre>
   *
   * <code>.littlehorse.UserTaskRunId id = 1;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.UserTaskRunIdOrBuilder getIdOrBuilder() {
    return id_ == null ? io.littlehorse.sdk.common.proto.UserTaskRunId.getDefaultInstance() : id_;
  }

  public static final int USER_TASK_DEF_ID_FIELD_NUMBER = 2;
  private io.littlehorse.sdk.common.proto.UserTaskDefId userTaskDefId_;
  /**
   * <pre>
   * The ID of the UserTaskDef that this UserTaskRun comes from.
   * </pre>
   *
   * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
   * @return Whether the userTaskDefId field is set.
   */
  @java.lang.Override
  public boolean hasUserTaskDefId() {
    return userTaskDefId_ != null;
  }
  /**
   * <pre>
   * The ID of the UserTaskDef that this UserTaskRun comes from.
   * </pre>
   *
   * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
   * @return The userTaskDefId.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.UserTaskDefId getUserTaskDefId() {
    return userTaskDefId_ == null ? io.littlehorse.sdk.common.proto.UserTaskDefId.getDefaultInstance() : userTaskDefId_;
  }
  /**
   * <pre>
   * The ID of the UserTaskDef that this UserTaskRun comes from.
   * </pre>
   *
   * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.UserTaskDefIdOrBuilder getUserTaskDefIdOrBuilder() {
    return userTaskDefId_ == null ? io.littlehorse.sdk.common.proto.UserTaskDefId.getDefaultInstance() : userTaskDefId_;
  }

  public static final int USER_GROUP_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object userGroup_ = "";
  /**
   * <pre>
   * Denotes the UserTaskRun as belonging to a specific User Group.
   *
   * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
   * is the responsibility of the application to keep track of user/group identity and ensure
   * that the user_group does indeed exist.
   *
   * Either `user_id` or `user_group` or both are set at any time.
   * </pre>
   *
   * <code>optional string user_group = 3;</code>
   * @return Whether the userGroup field is set.
   */
  @java.lang.Override
  public boolean hasUserGroup() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Denotes the UserTaskRun as belonging to a specific User Group.
   *
   * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
   * is the responsibility of the application to keep track of user/group identity and ensure
   * that the user_group does indeed exist.
   *
   * Either `user_id` or `user_group` or both are set at any time.
   * </pre>
   *
   * <code>optional string user_group = 3;</code>
   * @return The userGroup.
   */
  @java.lang.Override
  public java.lang.String getUserGroup() {
    java.lang.Object ref = userGroup_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      userGroup_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Denotes the UserTaskRun as belonging to a specific User Group.
   *
   * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
   * is the responsibility of the application to keep track of user/group identity and ensure
   * that the user_group does indeed exist.
   *
   * Either `user_id` or `user_group` or both are set at any time.
   * </pre>
   *
   * <code>optional string user_group = 3;</code>
   * @return The bytes for userGroup.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUserGroupBytes() {
    java.lang.Object ref = userGroup_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      userGroup_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int USER_ID_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile java.lang.Object userId_ = "";
  /**
   * <pre>
   * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
   * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
   *
   * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
   * is the responsibility of the application to keep track of user identity and ensure
   * that the user_id does indeed exist.
   *
   * Either `user_id` or `user_group` or both are set at any time.
   * </pre>
   *
   * <code>optional string user_id = 4;</code>
   * @return Whether the userId field is set.
   */
  @java.lang.Override
  public boolean hasUserId() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
   * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
   *
   * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
   * is the responsibility of the application to keep track of user identity and ensure
   * that the user_id does indeed exist.
   *
   * Either `user_id` or `user_group` or both are set at any time.
   * </pre>
   *
   * <code>optional string user_id = 4;</code>
   * @return The userId.
   */
  @java.lang.Override
  public java.lang.String getUserId() {
    java.lang.Object ref = userId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      userId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
   * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
   *
   * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
   * is the responsibility of the application to keep track of user identity and ensure
   * that the user_id does indeed exist.
   *
   * Either `user_id` or `user_group` or both are set at any time.
   * </pre>
   *
   * <code>optional string user_id = 4;</code>
   * @return The bytes for userId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUserIdBytes() {
    java.lang.Object ref = userId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      userId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RESULTS_FIELD_NUMBER = 6;
  private static final class ResultsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue>newDefaultInstance(
                io.littlehorse.sdk.common.proto.UserTasks.internal_static_littlehorse_UserTaskRun_ResultsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.littlehorse.sdk.common.proto.VariableValue.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> results_;
  private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue>
  internalGetResults() {
    if (results_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ResultsDefaultEntryHolder.defaultEntry);
    }
    return results_;
  }
  public int getResultsCount() {
    return internalGetResults().getMap().size();
  }
  /**
   * <pre>
   * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
   * Each key in this map is the `name` of a corresponding `UserTaskField` on the
   * UserTaskDef.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
   */
  @java.lang.Override
  public boolean containsResults(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetResults().getMap().containsKey(key);
  }
  /**
   * Use {@link #getResultsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> getResults() {
    return getResultsMap();
  }
  /**
   * <pre>
   * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
   * Each key in this map is the `name` of a corresponding `UserTaskField` on the
   * UserTaskDef.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> getResultsMap() {
    return internalGetResults().getMap();
  }
  /**
   * <pre>
   * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
   * Each key in this map is the `name` of a corresponding `UserTaskField` on the
   * UserTaskDef.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
   */
  @java.lang.Override
  public /* nullable */
io.littlehorse.sdk.common.proto.VariableValue getResultsOrDefault(
      java.lang.String key,
      /* nullable */
io.littlehorse.sdk.common.proto.VariableValue defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> map =
        internalGetResults().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
   * Each key in this map is the `name` of a corresponding `UserTaskField` on the
   * UserTaskDef.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.VariableValue getResultsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> map =
        internalGetResults().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int STATUS_FIELD_NUMBER = 7;
  private int status_ = 0;
  /**
   * <pre>
   * Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
   * </pre>
   *
   * <code>.littlehorse.UserTaskRunStatus status = 7;</code>
   * @return The enum numeric value on the wire for status.
   */
  @java.lang.Override public int getStatusValue() {
    return status_;
  }
  /**
   * <pre>
   * Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
   * </pre>
   *
   * <code>.littlehorse.UserTaskRunStatus status = 7;</code>
   * @return The status.
   */
  @java.lang.Override public io.littlehorse.sdk.common.proto.UserTaskRunStatus getStatus() {
    io.littlehorse.sdk.common.proto.UserTaskRunStatus result = io.littlehorse.sdk.common.proto.UserTaskRunStatus.forNumber(status_);
    return result == null ? io.littlehorse.sdk.common.proto.UserTaskRunStatus.UNRECOGNIZED : result;
  }

  public static final int EVENTS_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.UserTaskEvent> events_;
  /**
   * <pre>
   * A list of events that have happened. Used for auditing information.
   * </pre>
   *
   * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.UserTaskEvent> getEventsList() {
    return events_;
  }
  /**
   * <pre>
   * A list of events that have happened. Used for auditing information.
   * </pre>
   *
   * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.UserTaskEventOrBuilder> 
      getEventsOrBuilderList() {
    return events_;
  }
  /**
   * <pre>
   * A list of events that have happened. Used for auditing information.
   * </pre>
   *
   * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
   */
  @java.lang.Override
  public int getEventsCount() {
    return events_.size();
  }
  /**
   * <pre>
   * A list of events that have happened. Used for auditing information.
   * </pre>
   *
   * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.UserTaskEvent getEvents(int index) {
    return events_.get(index);
  }
  /**
   * <pre>
   * A list of events that have happened. Used for auditing information.
   * </pre>
   *
   * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.UserTaskEventOrBuilder getEventsOrBuilder(
      int index) {
    return events_.get(index);
  }

  public static final int NOTES_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private volatile java.lang.Object notes_ = "";
  /**
   * <pre>
   * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
   * are set by the WfSpec based on variables inside the specific `WfRun` and are
   * intended to be displayed on the User Task Manager application. They do not
   * affect WfRun execution.
   * </pre>
   *
   * <code>optional string notes = 9;</code>
   * @return Whether the notes field is set.
   */
  @java.lang.Override
  public boolean hasNotes() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
   * are set by the WfSpec based on variables inside the specific `WfRun` and are
   * intended to be displayed on the User Task Manager application. They do not
   * affect WfRun execution.
   * </pre>
   *
   * <code>optional string notes = 9;</code>
   * @return The notes.
   */
  @java.lang.Override
  public java.lang.String getNotes() {
    java.lang.Object ref = notes_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      notes_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
   * are set by the WfSpec based on variables inside the specific `WfRun` and are
   * intended to be displayed on the User Task Manager application. They do not
   * affect WfRun execution.
   * </pre>
   *
   * <code>optional string notes = 9;</code>
   * @return The bytes for notes.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNotesBytes() {
    java.lang.Object ref = notes_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      notes_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SCHEDULED_TIME_FIELD_NUMBER = 10;
  private com.google.protobuf.Timestamp scheduledTime_;
  /**
   * <pre>
   * The time that the UserTaskRun was created/scheduled.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
   * @return Whether the scheduledTime field is set.
   */
  @java.lang.Override
  public boolean hasScheduledTime() {
    return scheduledTime_ != null;
  }
  /**
   * <pre>
   * The time that the UserTaskRun was created/scheduled.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
   * @return The scheduledTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getScheduledTime() {
    return scheduledTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : scheduledTime_;
  }
  /**
   * <pre>
   * The time that the UserTaskRun was created/scheduled.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getScheduledTimeOrBuilder() {
    return scheduledTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : scheduledTime_;
  }

  public static final int NODE_RUN_ID_FIELD_NUMBER = 11;
  private io.littlehorse.sdk.common.proto.NodeRunId nodeRunId_;
  /**
   * <pre>
   * The NodeRun with which the UserTaskRun is associated.
   * </pre>
   *
   * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
   * @return Whether the nodeRunId field is set.
   */
  @java.lang.Override
  public boolean hasNodeRunId() {
    return nodeRunId_ != null;
  }
  /**
   * <pre>
   * The NodeRun with which the UserTaskRun is associated.
   * </pre>
   *
   * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
   * @return The nodeRunId.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.NodeRunId getNodeRunId() {
    return nodeRunId_ == null ? io.littlehorse.sdk.common.proto.NodeRunId.getDefaultInstance() : nodeRunId_;
  }
  /**
   * <pre>
   * The NodeRun with which the UserTaskRun is associated.
   * </pre>
   *
   * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.NodeRunIdOrBuilder getNodeRunIdOrBuilder() {
    return nodeRunId_ == null ? io.littlehorse.sdk.common.proto.NodeRunId.getDefaultInstance() : nodeRunId_;
  }

  public static final int EPOCH_FIELD_NUMBER = 12;
  private int epoch_ = 0;
  /**
   * <pre>
   * Current observed epoch of the UserTaskRun, related to the number of times it has been
   * updated or re-assigned. Used internally to implement automated reassignment and reminder
   * tasks.
   * </pre>
   *
   * <code>int32 epoch = 12;</code>
   * @return The epoch.
   */
  @java.lang.Override
  public int getEpoch() {
    return epoch_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != null) {
      output.writeMessage(1, getId());
    }
    if (userTaskDefId_ != null) {
      output.writeMessage(2, getUserTaskDefId());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, userGroup_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, userId_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetResults(),
        ResultsDefaultEntryHolder.defaultEntry,
        6);
    if (status_ != io.littlehorse.sdk.common.proto.UserTaskRunStatus.UNASSIGNED.getNumber()) {
      output.writeEnum(7, status_);
    }
    for (int i = 0; i < events_.size(); i++) {
      output.writeMessage(8, events_.get(i));
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, notes_);
    }
    if (scheduledTime_ != null) {
      output.writeMessage(10, getScheduledTime());
    }
    if (nodeRunId_ != null) {
      output.writeMessage(11, getNodeRunId());
    }
    if (epoch_ != 0) {
      output.writeInt32(12, epoch_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getId());
    }
    if (userTaskDefId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getUserTaskDefId());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, userGroup_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, userId_);
    }
    for (java.util.Map.Entry<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> entry
         : internalGetResults().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue>
      results__ = ResultsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, results__);
    }
    if (status_ != io.littlehorse.sdk.common.proto.UserTaskRunStatus.UNASSIGNED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, status_);
    }
    for (int i = 0; i < events_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, events_.get(i));
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, notes_);
    }
    if (scheduledTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getScheduledTime());
    }
    if (nodeRunId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getNodeRunId());
    }
    if (epoch_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(12, epoch_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.UserTaskRun)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.UserTaskRun other = (io.littlehorse.sdk.common.proto.UserTaskRun) obj;

    if (hasId() != other.hasId()) return false;
    if (hasId()) {
      if (!getId()
          .equals(other.getId())) return false;
    }
    if (hasUserTaskDefId() != other.hasUserTaskDefId()) return false;
    if (hasUserTaskDefId()) {
      if (!getUserTaskDefId()
          .equals(other.getUserTaskDefId())) return false;
    }
    if (hasUserGroup() != other.hasUserGroup()) return false;
    if (hasUserGroup()) {
      if (!getUserGroup()
          .equals(other.getUserGroup())) return false;
    }
    if (hasUserId() != other.hasUserId()) return false;
    if (hasUserId()) {
      if (!getUserId()
          .equals(other.getUserId())) return false;
    }
    if (!internalGetResults().equals(
        other.internalGetResults())) return false;
    if (status_ != other.status_) return false;
    if (!getEventsList()
        .equals(other.getEventsList())) return false;
    if (hasNotes() != other.hasNotes()) return false;
    if (hasNotes()) {
      if (!getNotes()
          .equals(other.getNotes())) return false;
    }
    if (hasScheduledTime() != other.hasScheduledTime()) return false;
    if (hasScheduledTime()) {
      if (!getScheduledTime()
          .equals(other.getScheduledTime())) return false;
    }
    if (hasNodeRunId() != other.hasNodeRunId()) return false;
    if (hasNodeRunId()) {
      if (!getNodeRunId()
          .equals(other.getNodeRunId())) return false;
    }
    if (getEpoch()
        != other.getEpoch()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasId()) {
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
    }
    if (hasUserTaskDefId()) {
      hash = (37 * hash) + USER_TASK_DEF_ID_FIELD_NUMBER;
      hash = (53 * hash) + getUserTaskDefId().hashCode();
    }
    if (hasUserGroup()) {
      hash = (37 * hash) + USER_GROUP_FIELD_NUMBER;
      hash = (53 * hash) + getUserGroup().hashCode();
    }
    if (hasUserId()) {
      hash = (37 * hash) + USER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getUserId().hashCode();
    }
    if (!internalGetResults().getMap().isEmpty()) {
      hash = (37 * hash) + RESULTS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetResults().hashCode();
    }
    hash = (37 * hash) + STATUS_FIELD_NUMBER;
    hash = (53 * hash) + status_;
    if (getEventsCount() > 0) {
      hash = (37 * hash) + EVENTS_FIELD_NUMBER;
      hash = (53 * hash) + getEventsList().hashCode();
    }
    if (hasNotes()) {
      hash = (37 * hash) + NOTES_FIELD_NUMBER;
      hash = (53 * hash) + getNotes().hashCode();
    }
    if (hasScheduledTime()) {
      hash = (37 * hash) + SCHEDULED_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getScheduledTime().hashCode();
    }
    if (hasNodeRunId()) {
      hash = (37 * hash) + NODE_RUN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getNodeRunId().hashCode();
    }
    hash = (37 * hash) + EPOCH_FIELD_NUMBER;
    hash = (53 * hash) + getEpoch();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.UserTaskRun parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.UserTaskRun parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.UserTaskRun parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.UserTaskRun prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A UserTaskRun is a running instance of a UserTaskDef. It is created when a
   * ThreadRun arrives at a Node of type `USER_TASK`.
   * </pre>
   *
   * Protobuf type {@code littlehorse.UserTaskRun}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.UserTaskRun)
      io.littlehorse.sdk.common.proto.UserTaskRunOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.UserTasks.internal_static_littlehorse_UserTaskRun_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetResults();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetMutableResults();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.UserTasks.internal_static_littlehorse_UserTaskRun_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.UserTaskRun.class, io.littlehorse.sdk.common.proto.UserTaskRun.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.UserTaskRun.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      id_ = null;
      if (idBuilder_ != null) {
        idBuilder_.dispose();
        idBuilder_ = null;
      }
      userTaskDefId_ = null;
      if (userTaskDefIdBuilder_ != null) {
        userTaskDefIdBuilder_.dispose();
        userTaskDefIdBuilder_ = null;
      }
      userGroup_ = "";
      userId_ = "";
      internalGetMutableResults().clear();
      status_ = 0;
      if (eventsBuilder_ == null) {
        events_ = java.util.Collections.emptyList();
      } else {
        events_ = null;
        eventsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000040);
      notes_ = "";
      scheduledTime_ = null;
      if (scheduledTimeBuilder_ != null) {
        scheduledTimeBuilder_.dispose();
        scheduledTimeBuilder_ = null;
      }
      nodeRunId_ = null;
      if (nodeRunIdBuilder_ != null) {
        nodeRunIdBuilder_.dispose();
        nodeRunIdBuilder_ = null;
      }
      epoch_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.UserTasks.internal_static_littlehorse_UserTaskRun_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.UserTaskRun getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.UserTaskRun.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.UserTaskRun build() {
      io.littlehorse.sdk.common.proto.UserTaskRun result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.UserTaskRun buildPartial() {
      io.littlehorse.sdk.common.proto.UserTaskRun result = new io.littlehorse.sdk.common.proto.UserTaskRun(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.littlehorse.sdk.common.proto.UserTaskRun result) {
      if (eventsBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)) {
          events_ = java.util.Collections.unmodifiableList(events_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.events_ = events_;
      } else {
        result.events_ = eventsBuilder_.build();
      }
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.UserTaskRun result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.id_ = idBuilder_ == null
            ? id_
            : idBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.userTaskDefId_ = userTaskDefIdBuilder_ == null
            ? userTaskDefId_
            : userTaskDefIdBuilder_.build();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.userGroup_ = userGroup_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.userId_ = userId_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.results_ = internalGetResults();
        result.results_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.status_ = status_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.notes_ = notes_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.scheduledTime_ = scheduledTimeBuilder_ == null
            ? scheduledTime_
            : scheduledTimeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.nodeRunId_ = nodeRunIdBuilder_ == null
            ? nodeRunId_
            : nodeRunIdBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.epoch_ = epoch_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.UserTaskRun) {
        return mergeFrom((io.littlehorse.sdk.common.proto.UserTaskRun)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.UserTaskRun other) {
      if (other == io.littlehorse.sdk.common.proto.UserTaskRun.getDefaultInstance()) return this;
      if (other.hasId()) {
        mergeId(other.getId());
      }
      if (other.hasUserTaskDefId()) {
        mergeUserTaskDefId(other.getUserTaskDefId());
      }
      if (other.hasUserGroup()) {
        userGroup_ = other.userGroup_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.hasUserId()) {
        userId_ = other.userId_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      internalGetMutableResults().mergeFrom(
          other.internalGetResults());
      bitField0_ |= 0x00000010;
      if (other.status_ != 0) {
        setStatusValue(other.getStatusValue());
      }
      if (eventsBuilder_ == null) {
        if (!other.events_.isEmpty()) {
          if (events_.isEmpty()) {
            events_ = other.events_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureEventsIsMutable();
            events_.addAll(other.events_);
          }
          onChanged();
        }
      } else {
        if (!other.events_.isEmpty()) {
          if (eventsBuilder_.isEmpty()) {
            eventsBuilder_.dispose();
            eventsBuilder_ = null;
            events_ = other.events_;
            bitField0_ = (bitField0_ & ~0x00000040);
            eventsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEventsFieldBuilder() : null;
          } else {
            eventsBuilder_.addAllMessages(other.events_);
          }
        }
      }
      if (other.hasNotes()) {
        notes_ = other.notes_;
        bitField0_ |= 0x00000080;
        onChanged();
      }
      if (other.hasScheduledTime()) {
        mergeScheduledTime(other.getScheduledTime());
      }
      if (other.hasNodeRunId()) {
        mergeNodeRunId(other.getNodeRunId());
      }
      if (other.getEpoch() != 0) {
        setEpoch(other.getEpoch());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getUserTaskDefIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              userGroup_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              userId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 50: {
              com.google.protobuf.MapEntry<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue>
              results__ = input.readMessage(
                  ResultsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableResults().getMutableMap().put(
                  results__.getKey(), results__.getValue());
              bitField0_ |= 0x00000010;
              break;
            } // case 50
            case 56: {
              status_ = input.readEnum();
              bitField0_ |= 0x00000020;
              break;
            } // case 56
            case 66: {
              io.littlehorse.sdk.common.proto.UserTaskEvent m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.UserTaskEvent.parser(),
                      extensionRegistry);
              if (eventsBuilder_ == null) {
                ensureEventsIsMutable();
                events_.add(m);
              } else {
                eventsBuilder_.addMessage(m);
              }
              break;
            } // case 66
            case 74: {
              notes_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000080;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getScheduledTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000100;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getNodeRunIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000200;
              break;
            } // case 90
            case 96: {
              epoch_ = input.readInt32();
              bitField0_ |= 0x00000400;
              break;
            } // case 96
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.littlehorse.sdk.common.proto.UserTaskRunId id_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.UserTaskRunId, io.littlehorse.sdk.common.proto.UserTaskRunId.Builder, io.littlehorse.sdk.common.proto.UserTaskRunIdOrBuilder> idBuilder_;
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     * @return Whether the id field is set.
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     * @return The id.
     */
    public io.littlehorse.sdk.common.proto.UserTaskRunId getId() {
      if (idBuilder_ == null) {
        return id_ == null ? io.littlehorse.sdk.common.proto.UserTaskRunId.getDefaultInstance() : id_;
      } else {
        return idBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     */
    public Builder setId(io.littlehorse.sdk.common.proto.UserTaskRunId value) {
      if (idBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        id_ = value;
      } else {
        idBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     */
    public Builder setId(
        io.littlehorse.sdk.common.proto.UserTaskRunId.Builder builderForValue) {
      if (idBuilder_ == null) {
        id_ = builderForValue.build();
      } else {
        idBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     */
    public Builder mergeId(io.littlehorse.sdk.common.proto.UserTaskRunId value) {
      if (idBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          id_ != null &&
          id_ != io.littlehorse.sdk.common.proto.UserTaskRunId.getDefaultInstance()) {
          getIdBuilder().mergeFrom(value);
        } else {
          id_ = value;
        }
      } else {
        idBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     */
    public Builder clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = null;
      if (idBuilder_ != null) {
        idBuilder_.dispose();
        idBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskRunId.Builder getIdBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskRunIdOrBuilder getIdOrBuilder() {
      if (idBuilder_ != null) {
        return idBuilder_.getMessageOrBuilder();
      } else {
        return id_ == null ?
            io.littlehorse.sdk.common.proto.UserTaskRunId.getDefaultInstance() : id_;
      }
    }
    /**
     * <pre>
     * The ID of the UserTaskRun.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunId id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.UserTaskRunId, io.littlehorse.sdk.common.proto.UserTaskRunId.Builder, io.littlehorse.sdk.common.proto.UserTaskRunIdOrBuilder> 
        getIdFieldBuilder() {
      if (idBuilder_ == null) {
        idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.UserTaskRunId, io.littlehorse.sdk.common.proto.UserTaskRunId.Builder, io.littlehorse.sdk.common.proto.UserTaskRunIdOrBuilder>(
                getId(),
                getParentForChildren(),
                isClean());
        id_ = null;
      }
      return idBuilder_;
    }

    private io.littlehorse.sdk.common.proto.UserTaskDefId userTaskDefId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.UserTaskDefId, io.littlehorse.sdk.common.proto.UserTaskDefId.Builder, io.littlehorse.sdk.common.proto.UserTaskDefIdOrBuilder> userTaskDefIdBuilder_;
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     * @return Whether the userTaskDefId field is set.
     */
    public boolean hasUserTaskDefId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     * @return The userTaskDefId.
     */
    public io.littlehorse.sdk.common.proto.UserTaskDefId getUserTaskDefId() {
      if (userTaskDefIdBuilder_ == null) {
        return userTaskDefId_ == null ? io.littlehorse.sdk.common.proto.UserTaskDefId.getDefaultInstance() : userTaskDefId_;
      } else {
        return userTaskDefIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     */
    public Builder setUserTaskDefId(io.littlehorse.sdk.common.proto.UserTaskDefId value) {
      if (userTaskDefIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        userTaskDefId_ = value;
      } else {
        userTaskDefIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     */
    public Builder setUserTaskDefId(
        io.littlehorse.sdk.common.proto.UserTaskDefId.Builder builderForValue) {
      if (userTaskDefIdBuilder_ == null) {
        userTaskDefId_ = builderForValue.build();
      } else {
        userTaskDefIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     */
    public Builder mergeUserTaskDefId(io.littlehorse.sdk.common.proto.UserTaskDefId value) {
      if (userTaskDefIdBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          userTaskDefId_ != null &&
          userTaskDefId_ != io.littlehorse.sdk.common.proto.UserTaskDefId.getDefaultInstance()) {
          getUserTaskDefIdBuilder().mergeFrom(value);
        } else {
          userTaskDefId_ = value;
        }
      } else {
        userTaskDefIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     */
    public Builder clearUserTaskDefId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      userTaskDefId_ = null;
      if (userTaskDefIdBuilder_ != null) {
        userTaskDefIdBuilder_.dispose();
        userTaskDefIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskDefId.Builder getUserTaskDefIdBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getUserTaskDefIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskDefIdOrBuilder getUserTaskDefIdOrBuilder() {
      if (userTaskDefIdBuilder_ != null) {
        return userTaskDefIdBuilder_.getMessageOrBuilder();
      } else {
        return userTaskDefId_ == null ?
            io.littlehorse.sdk.common.proto.UserTaskDefId.getDefaultInstance() : userTaskDefId_;
      }
    }
    /**
     * <pre>
     * The ID of the UserTaskDef that this UserTaskRun comes from.
     * </pre>
     *
     * <code>.littlehorse.UserTaskDefId user_task_def_id = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.UserTaskDefId, io.littlehorse.sdk.common.proto.UserTaskDefId.Builder, io.littlehorse.sdk.common.proto.UserTaskDefIdOrBuilder> 
        getUserTaskDefIdFieldBuilder() {
      if (userTaskDefIdBuilder_ == null) {
        userTaskDefIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.UserTaskDefId, io.littlehorse.sdk.common.proto.UserTaskDefId.Builder, io.littlehorse.sdk.common.proto.UserTaskDefIdOrBuilder>(
                getUserTaskDefId(),
                getParentForChildren(),
                isClean());
        userTaskDefId_ = null;
      }
      return userTaskDefIdBuilder_;
    }

    private java.lang.Object userGroup_ = "";
    /**
     * <pre>
     * Denotes the UserTaskRun as belonging to a specific User Group.
     *
     * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user/group identity and ensure
     * that the user_group does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_group = 3;</code>
     * @return Whether the userGroup field is set.
     */
    public boolean hasUserGroup() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as belonging to a specific User Group.
     *
     * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user/group identity and ensure
     * that the user_group does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_group = 3;</code>
     * @return The userGroup.
     */
    public java.lang.String getUserGroup() {
      java.lang.Object ref = userGroup_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        userGroup_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as belonging to a specific User Group.
     *
     * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user/group identity and ensure
     * that the user_group does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_group = 3;</code>
     * @return The bytes for userGroup.
     */
    public com.google.protobuf.ByteString
        getUserGroupBytes() {
      java.lang.Object ref = userGroup_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userGroup_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as belonging to a specific User Group.
     *
     * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user/group identity and ensure
     * that the user_group does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_group = 3;</code>
     * @param value The userGroup to set.
     * @return This builder for chaining.
     */
    public Builder setUserGroup(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      userGroup_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as belonging to a specific User Group.
     *
     * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user/group identity and ensure
     * that the user_group does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_group = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearUserGroup() {
      userGroup_ = getDefaultInstance().getUserGroup();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as belonging to a specific User Group.
     *
     * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user/group identity and ensure
     * that the user_group does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_group = 3;</code>
     * @param value The bytes for userGroup to set.
     * @return This builder for chaining.
     */
    public Builder setUserGroupBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      userGroup_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object userId_ = "";
    /**
     * <pre>
     * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
     * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
     *
     * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user identity and ensure
     * that the user_id does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_id = 4;</code>
     * @return Whether the userId field is set.
     */
    public boolean hasUserId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
     * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
     *
     * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user identity and ensure
     * that the user_id does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_id = 4;</code>
     * @return The userId.
     */
    public java.lang.String getUserId() {
      java.lang.Object ref = userId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        userId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
     * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
     *
     * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user identity and ensure
     * that the user_id does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_id = 4;</code>
     * @return The bytes for userId.
     */
    public com.google.protobuf.ByteString
        getUserIdBytes() {
      java.lang.Object ref = userId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
     * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
     *
     * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user identity and ensure
     * that the user_id does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_id = 4;</code>
     * @param value The userId to set.
     * @return This builder for chaining.
     */
    public Builder setUserId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      userId_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
     * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
     *
     * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user identity and ensure
     * that the user_id does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearUserId() {
      userId_ = getDefaultInstance().getUserId();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
     * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
     *
     * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user identity and ensure
     * that the user_id does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     * </pre>
     *
     * <code>optional string user_id = 4;</code>
     * @param value The bytes for userId to set.
     * @return This builder for chaining.
     */
    public Builder setUserIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      userId_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> results_;
    private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue>
        internalGetResults() {
      if (results_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ResultsDefaultEntryHolder.defaultEntry);
      }
      return results_;
    }
    private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue>
        internalGetMutableResults() {
      if (results_ == null) {
        results_ = com.google.protobuf.MapField.newMapField(
            ResultsDefaultEntryHolder.defaultEntry);
      }
      if (!results_.isMutable()) {
        results_ = results_.copy();
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return results_;
    }
    public int getResultsCount() {
      return internalGetResults().getMap().size();
    }
    /**
     * <pre>
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
     */
    @java.lang.Override
    public boolean containsResults(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetResults().getMap().containsKey(key);
    }
    /**
     * Use {@link #getResultsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> getResults() {
      return getResultsMap();
    }
    /**
     * <pre>
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> getResultsMap() {
      return internalGetResults().getMap();
    }
    /**
     * <pre>
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
     */
    @java.lang.Override
    public /* nullable */
io.littlehorse.sdk.common.proto.VariableValue getResultsOrDefault(
        java.lang.String key,
        /* nullable */
io.littlehorse.sdk.common.proto.VariableValue defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> map =
          internalGetResults().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.VariableValue getResultsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> map =
          internalGetResults().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearResults() {
      bitField0_ = (bitField0_ & ~0x00000010);
      internalGetMutableResults().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
     */
    public Builder removeResults(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableResults().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue>
        getMutableResults() {
      bitField0_ |= 0x00000010;
      return internalGetMutableResults().getMutableMap();
    }
    /**
     * <pre>
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
     */
    public Builder putResults(
        java.lang.String key,
        io.littlehorse.sdk.common.proto.VariableValue value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableResults().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <pre>
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableValue&gt; results = 6;</code>
     */
    public Builder putAllResults(
        java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableValue> values) {
      internalGetMutableResults().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000010;
      return this;
    }

    private int status_ = 0;
    /**
     * <pre>
     * Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunStatus status = 7;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunStatus status = 7;</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(int value) {
      status_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunStatus status = 7;</code>
     * @return The status.
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.UserTaskRunStatus getStatus() {
      io.littlehorse.sdk.common.proto.UserTaskRunStatus result = io.littlehorse.sdk.common.proto.UserTaskRunStatus.forNumber(status_);
      return result == null ? io.littlehorse.sdk.common.proto.UserTaskRunStatus.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunStatus status = 7;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(io.littlehorse.sdk.common.proto.UserTaskRunStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      status_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED.
     * </pre>
     *
     * <code>.littlehorse.UserTaskRunStatus status = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000020);
      status_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.UserTaskEvent> events_ =
      java.util.Collections.emptyList();
    private void ensureEventsIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        events_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.UserTaskEvent>(events_);
        bitField0_ |= 0x00000040;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.UserTaskEvent, io.littlehorse.sdk.common.proto.UserTaskEvent.Builder, io.littlehorse.sdk.common.proto.UserTaskEventOrBuilder> eventsBuilder_;

    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.UserTaskEvent> getEventsList() {
      if (eventsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(events_);
      } else {
        return eventsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public int getEventsCount() {
      if (eventsBuilder_ == null) {
        return events_.size();
      } else {
        return eventsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskEvent getEvents(int index) {
      if (eventsBuilder_ == null) {
        return events_.get(index);
      } else {
        return eventsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder setEvents(
        int index, io.littlehorse.sdk.common.proto.UserTaskEvent value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.set(index, value);
        onChanged();
      } else {
        eventsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder setEvents(
        int index, io.littlehorse.sdk.common.proto.UserTaskEvent.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.set(index, builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder addEvents(io.littlehorse.sdk.common.proto.UserTaskEvent value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.add(value);
        onChanged();
      } else {
        eventsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder addEvents(
        int index, io.littlehorse.sdk.common.proto.UserTaskEvent value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.add(index, value);
        onChanged();
      } else {
        eventsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder addEvents(
        io.littlehorse.sdk.common.proto.UserTaskEvent.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.add(builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder addEvents(
        int index, io.littlehorse.sdk.common.proto.UserTaskEvent.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.add(index, builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder addAllEvents(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.UserTaskEvent> values) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, events_);
        onChanged();
      } else {
        eventsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder clearEvents() {
      if (eventsBuilder_ == null) {
        events_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
      } else {
        eventsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public Builder removeEvents(int index) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.remove(index);
        onChanged();
      } else {
        eventsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskEvent.Builder getEventsBuilder(
        int index) {
      return getEventsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskEventOrBuilder getEventsOrBuilder(
        int index) {
      if (eventsBuilder_ == null) {
        return events_.get(index);  } else {
        return eventsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.UserTaskEventOrBuilder> 
         getEventsOrBuilderList() {
      if (eventsBuilder_ != null) {
        return eventsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(events_);
      }
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskEvent.Builder addEventsBuilder() {
      return getEventsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.UserTaskEvent.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.UserTaskEvent.Builder addEventsBuilder(
        int index) {
      return getEventsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.UserTaskEvent.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of events that have happened. Used for auditing information.
     * </pre>
     *
     * <code>repeated .littlehorse.UserTaskEvent events = 8;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.UserTaskEvent.Builder> 
         getEventsBuilderList() {
      return getEventsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.UserTaskEvent, io.littlehorse.sdk.common.proto.UserTaskEvent.Builder, io.littlehorse.sdk.common.proto.UserTaskEventOrBuilder> 
        getEventsFieldBuilder() {
      if (eventsBuilder_ == null) {
        eventsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.UserTaskEvent, io.littlehorse.sdk.common.proto.UserTaskEvent.Builder, io.littlehorse.sdk.common.proto.UserTaskEventOrBuilder>(
                events_,
                ((bitField0_ & 0x00000040) != 0),
                getParentForChildren(),
                isClean());
        events_ = null;
      }
      return eventsBuilder_;
    }

    private java.lang.Object notes_ = "";
    /**
     * <pre>
     * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
     * are set by the WfSpec based on variables inside the specific `WfRun` and are
     * intended to be displayed on the User Task Manager application. They do not
     * affect WfRun execution.
     * </pre>
     *
     * <code>optional string notes = 9;</code>
     * @return Whether the notes field is set.
     */
    public boolean hasNotes() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
     * are set by the WfSpec based on variables inside the specific `WfRun` and are
     * intended to be displayed on the User Task Manager application. They do not
     * affect WfRun execution.
     * </pre>
     *
     * <code>optional string notes = 9;</code>
     * @return The notes.
     */
    public java.lang.String getNotes() {
      java.lang.Object ref = notes_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        notes_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
     * are set by the WfSpec based on variables inside the specific `WfRun` and are
     * intended to be displayed on the User Task Manager application. They do not
     * affect WfRun execution.
     * </pre>
     *
     * <code>optional string notes = 9;</code>
     * @return The bytes for notes.
     */
    public com.google.protobuf.ByteString
        getNotesBytes() {
      java.lang.Object ref = notes_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        notes_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
     * are set by the WfSpec based on variables inside the specific `WfRun` and are
     * intended to be displayed on the User Task Manager application. They do not
     * affect WfRun execution.
     * </pre>
     *
     * <code>optional string notes = 9;</code>
     * @param value The notes to set.
     * @return This builder for chaining.
     */
    public Builder setNotes(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      notes_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
     * are set by the WfSpec based on variables inside the specific `WfRun` and are
     * intended to be displayed on the User Task Manager application. They do not
     * affect WfRun execution.
     * </pre>
     *
     * <code>optional string notes = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearNotes() {
      notes_ = getDefaultInstance().getNotes();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
     * are set by the WfSpec based on variables inside the specific `WfRun` and are
     * intended to be displayed on the User Task Manager application. They do not
     * affect WfRun execution.
     * </pre>
     *
     * <code>optional string notes = 9;</code>
     * @param value The bytes for notes to set.
     * @return This builder for chaining.
     */
    public Builder setNotesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      notes_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp scheduledTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> scheduledTimeBuilder_;
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     * @return Whether the scheduledTime field is set.
     */
    public boolean hasScheduledTime() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     * @return The scheduledTime.
     */
    public com.google.protobuf.Timestamp getScheduledTime() {
      if (scheduledTimeBuilder_ == null) {
        return scheduledTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : scheduledTime_;
      } else {
        return scheduledTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     */
    public Builder setScheduledTime(com.google.protobuf.Timestamp value) {
      if (scheduledTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scheduledTime_ = value;
      } else {
        scheduledTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     */
    public Builder setScheduledTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (scheduledTimeBuilder_ == null) {
        scheduledTime_ = builderForValue.build();
      } else {
        scheduledTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     */
    public Builder mergeScheduledTime(com.google.protobuf.Timestamp value) {
      if (scheduledTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0) &&
          scheduledTime_ != null &&
          scheduledTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getScheduledTimeBuilder().mergeFrom(value);
        } else {
          scheduledTime_ = value;
        }
      } else {
        scheduledTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     */
    public Builder clearScheduledTime() {
      bitField0_ = (bitField0_ & ~0x00000100);
      scheduledTime_ = null;
      if (scheduledTimeBuilder_ != null) {
        scheduledTimeBuilder_.dispose();
        scheduledTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     */
    public com.google.protobuf.Timestamp.Builder getScheduledTimeBuilder() {
      bitField0_ |= 0x00000100;
      onChanged();
      return getScheduledTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getScheduledTimeOrBuilder() {
      if (scheduledTimeBuilder_ != null) {
        return scheduledTimeBuilder_.getMessageOrBuilder();
      } else {
        return scheduledTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : scheduledTime_;
      }
    }
    /**
     * <pre>
     * The time that the UserTaskRun was created/scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_time = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getScheduledTimeFieldBuilder() {
      if (scheduledTimeBuilder_ == null) {
        scheduledTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getScheduledTime(),
                getParentForChildren(),
                isClean());
        scheduledTime_ = null;
      }
      return scheduledTimeBuilder_;
    }

    private io.littlehorse.sdk.common.proto.NodeRunId nodeRunId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.NodeRunId, io.littlehorse.sdk.common.proto.NodeRunId.Builder, io.littlehorse.sdk.common.proto.NodeRunIdOrBuilder> nodeRunIdBuilder_;
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     * @return Whether the nodeRunId field is set.
     */
    public boolean hasNodeRunId() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     * @return The nodeRunId.
     */
    public io.littlehorse.sdk.common.proto.NodeRunId getNodeRunId() {
      if (nodeRunIdBuilder_ == null) {
        return nodeRunId_ == null ? io.littlehorse.sdk.common.proto.NodeRunId.getDefaultInstance() : nodeRunId_;
      } else {
        return nodeRunIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     */
    public Builder setNodeRunId(io.littlehorse.sdk.common.proto.NodeRunId value) {
      if (nodeRunIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        nodeRunId_ = value;
      } else {
        nodeRunIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     */
    public Builder setNodeRunId(
        io.littlehorse.sdk.common.proto.NodeRunId.Builder builderForValue) {
      if (nodeRunIdBuilder_ == null) {
        nodeRunId_ = builderForValue.build();
      } else {
        nodeRunIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     */
    public Builder mergeNodeRunId(io.littlehorse.sdk.common.proto.NodeRunId value) {
      if (nodeRunIdBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0) &&
          nodeRunId_ != null &&
          nodeRunId_ != io.littlehorse.sdk.common.proto.NodeRunId.getDefaultInstance()) {
          getNodeRunIdBuilder().mergeFrom(value);
        } else {
          nodeRunId_ = value;
        }
      } else {
        nodeRunIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     */
    public Builder clearNodeRunId() {
      bitField0_ = (bitField0_ & ~0x00000200);
      nodeRunId_ = null;
      if (nodeRunIdBuilder_ != null) {
        nodeRunIdBuilder_.dispose();
        nodeRunIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     */
    public io.littlehorse.sdk.common.proto.NodeRunId.Builder getNodeRunIdBuilder() {
      bitField0_ |= 0x00000200;
      onChanged();
      return getNodeRunIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     */
    public io.littlehorse.sdk.common.proto.NodeRunIdOrBuilder getNodeRunIdOrBuilder() {
      if (nodeRunIdBuilder_ != null) {
        return nodeRunIdBuilder_.getMessageOrBuilder();
      } else {
        return nodeRunId_ == null ?
            io.littlehorse.sdk.common.proto.NodeRunId.getDefaultInstance() : nodeRunId_;
      }
    }
    /**
     * <pre>
     * The NodeRun with which the UserTaskRun is associated.
     * </pre>
     *
     * <code>.littlehorse.NodeRunId node_run_id = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.NodeRunId, io.littlehorse.sdk.common.proto.NodeRunId.Builder, io.littlehorse.sdk.common.proto.NodeRunIdOrBuilder> 
        getNodeRunIdFieldBuilder() {
      if (nodeRunIdBuilder_ == null) {
        nodeRunIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.NodeRunId, io.littlehorse.sdk.common.proto.NodeRunId.Builder, io.littlehorse.sdk.common.proto.NodeRunIdOrBuilder>(
                getNodeRunId(),
                getParentForChildren(),
                isClean());
        nodeRunId_ = null;
      }
      return nodeRunIdBuilder_;
    }

    private int epoch_ ;
    /**
     * <pre>
     * Current observed epoch of the UserTaskRun, related to the number of times it has been
     * updated or re-assigned. Used internally to implement automated reassignment and reminder
     * tasks.
     * </pre>
     *
     * <code>int32 epoch = 12;</code>
     * @return The epoch.
     */
    @java.lang.Override
    public int getEpoch() {
      return epoch_;
    }
    /**
     * <pre>
     * Current observed epoch of the UserTaskRun, related to the number of times it has been
     * updated or re-assigned. Used internally to implement automated reassignment and reminder
     * tasks.
     * </pre>
     *
     * <code>int32 epoch = 12;</code>
     * @param value The epoch to set.
     * @return This builder for chaining.
     */
    public Builder setEpoch(int value) {

      epoch_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Current observed epoch of the UserTaskRun, related to the number of times it has been
     * updated or re-assigned. Used internally to implement automated reassignment and reminder
     * tasks.
     * </pre>
     *
     * <code>int32 epoch = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearEpoch() {
      bitField0_ = (bitField0_ & ~0x00000400);
      epoch_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.UserTaskRun)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.UserTaskRun)
  private static final io.littlehorse.sdk.common.proto.UserTaskRun DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.UserTaskRun();
  }

  public static io.littlehorse.sdk.common.proto.UserTaskRun getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UserTaskRun>
      PARSER = new com.google.protobuf.AbstractParser<UserTaskRun>() {
    @java.lang.Override
    public UserTaskRun parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<UserTaskRun> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UserTaskRun> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.UserTaskRun getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

