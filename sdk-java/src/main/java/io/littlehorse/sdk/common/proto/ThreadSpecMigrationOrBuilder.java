// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wf_spec.proto

package io.littlehorse.sdk.common.proto;

public interface ThreadSpecMigrationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.ThreadSpecMigration)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the ThreadSpec in the new WfSpec that this ThreadSpec should
   * migrate to.
   * </pre>
   *
   * <code>string new_thread_spec_name = 1;</code>
   * @return The newThreadSpecName.
   */
  java.lang.String getNewThreadSpecName();
  /**
   * <pre>
   * The name of the ThreadSpec in the new WfSpec that this ThreadSpec should
   * migrate to.
   * </pre>
   *
   * <code>string new_thread_spec_name = 1;</code>
   * @return The bytes for newThreadSpecName.
   */
  com.google.protobuf.ByteString
      getNewThreadSpecNameBytes();

  /**
   * <pre>
   * Map from name of the nodes on the current ThreadSpec to the migration
   * to perform on it to move it to a new WfSpec.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.NodeMigration&gt; node_migrations = 2;</code>
   */
  int getNodeMigrationsCount();
  /**
   * <pre>
   * Map from name of the nodes on the current ThreadSpec to the migration
   * to perform on it to move it to a new WfSpec.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.NodeMigration&gt; node_migrations = 2;</code>
   */
  boolean containsNodeMigrations(
      java.lang.String key);
  /**
   * Use {@link #getNodeMigrationsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.NodeMigration>
  getNodeMigrations();
  /**
   * <pre>
   * Map from name of the nodes on the current ThreadSpec to the migration
   * to perform on it to move it to a new WfSpec.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.NodeMigration&gt; node_migrations = 2;</code>
   */
  java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.NodeMigration>
  getNodeMigrationsMap();
  /**
   * <pre>
   * Map from name of the nodes on the current ThreadSpec to the migration
   * to perform on it to move it to a new WfSpec.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.NodeMigration&gt; node_migrations = 2;</code>
   */
  /* nullable */
io.littlehorse.sdk.common.proto.NodeMigration getNodeMigrationsOrDefault(
      java.lang.String key,
      /* nullable */
io.littlehorse.sdk.common.proto.NodeMigration defaultValue);
  /**
   * <pre>
   * Map from name of the nodes on the current ThreadSpec to the migration
   * to perform on it to move it to a new WfSpec.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.NodeMigration&gt; node_migrations = 2;</code>
   */
  io.littlehorse.sdk.common.proto.NodeMigration getNodeMigrationsOrThrow(
      java.lang.String key);
}
