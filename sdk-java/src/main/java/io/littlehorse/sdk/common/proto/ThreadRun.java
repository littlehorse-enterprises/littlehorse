// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wf_run.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * A ThreadRun is a running thread of execution within a WfRun.
 * </pre>
 *
 * Protobuf type {@code littlehorse.ThreadRun}
 */
public final class ThreadRun extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.ThreadRun)
    ThreadRunOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ThreadRun.newBuilder() to construct.
  private ThreadRun(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ThreadRun() {
    status_ = 0;
    threadSpecName_ = "";
    errorMessage_ = "";
    childThreadIds_ = emptyIntList();
    haltReasons_ = java.util.Collections.emptyList();
    handledFailedChildren_ = emptyIntList();
    type_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ThreadRun();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_ThreadRun_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_ThreadRun_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.ThreadRun.class, io.littlehorse.sdk.common.proto.ThreadRun.Builder.class);
  }

  private int bitField0_;
  public static final int WF_SPEC_ID_FIELD_NUMBER = 1;
  private io.littlehorse.sdk.common.proto.WfSpecId wfSpecId_;
  /**
   * <pre>
   * The current WfSpecId of this ThreadRun. This must be set explicitly because
   * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
   * have different WfSpec versions.
   * </pre>
   *
   * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
   * @return Whether the wfSpecId field is set.
   */
  @java.lang.Override
  public boolean hasWfSpecId() {
    return wfSpecId_ != null;
  }
  /**
   * <pre>
   * The current WfSpecId of this ThreadRun. This must be set explicitly because
   * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
   * have different WfSpec versions.
   * </pre>
   *
   * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
   * @return The wfSpecId.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfSpecId getWfSpecId() {
    return wfSpecId_ == null ? io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
  }
  /**
   * <pre>
   * The current WfSpecId of this ThreadRun. This must be set explicitly because
   * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
   * have different WfSpec versions.
   * </pre>
   *
   * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder getWfSpecIdOrBuilder() {
    return wfSpecId_ == null ? io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
  }

  public static final int NUMBER_FIELD_NUMBER = 2;
  private int number_ = 0;
  /**
   * <pre>
   * The number of the ThreadRun. This is an auto-incremented integer corresponding to
   * the chronological ordering of when the ThreadRun's were created. If you have not
   * configured any retention policy for the ThreadRun's (i.e. never clean them up), then
   * this also corresponds to the position of the ThreadRun in the WfRun's `thread_runs`
   * list.
   * </pre>
   *
   * <code>int32 number = 2;</code>
   * @return The number.
   */
  @java.lang.Override
  public int getNumber() {
    return number_;
  }

  public static final int STATUS_FIELD_NUMBER = 3;
  private int status_ = 0;
  /**
   * <pre>
   * The status of the ThreadRun.
   * </pre>
   *
   * <code>.littlehorse.LHStatus status = 3;</code>
   * @return The enum numeric value on the wire for status.
   */
  @java.lang.Override public int getStatusValue() {
    return status_;
  }
  /**
   * <pre>
   * The status of the ThreadRun.
   * </pre>
   *
   * <code>.littlehorse.LHStatus status = 3;</code>
   * @return The status.
   */
  @java.lang.Override public io.littlehorse.sdk.common.proto.LHStatus getStatus() {
    io.littlehorse.sdk.common.proto.LHStatus result = io.littlehorse.sdk.common.proto.LHStatus.forNumber(status_);
    return result == null ? io.littlehorse.sdk.common.proto.LHStatus.UNRECOGNIZED : result;
  }

  public static final int THREAD_SPEC_NAME_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile java.lang.Object threadSpecName_ = "";
  /**
   * <pre>
   * The name of the ThreadSpec being run.
   * </pre>
   *
   * <code>string thread_spec_name = 4;</code>
   * @return The threadSpecName.
   */
  @java.lang.Override
  public java.lang.String getThreadSpecName() {
    java.lang.Object ref = threadSpecName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      threadSpecName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the ThreadSpec being run.
   * </pre>
   *
   * <code>string thread_spec_name = 4;</code>
   * @return The bytes for threadSpecName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getThreadSpecNameBytes() {
    java.lang.Object ref = threadSpecName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      threadSpecName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int START_TIME_FIELD_NUMBER = 5;
  private com.google.protobuf.Timestamp startTime_;
  /**
   * <pre>
   * The time the ThreadRun was started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   * @return Whether the startTime field is set.
   */
  @java.lang.Override
  public boolean hasStartTime() {
    return startTime_ != null;
  }
  /**
   * <pre>
   * The time the ThreadRun was started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   * @return The startTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getStartTime() {
    return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
  }
  /**
   * <pre>
   * The time the ThreadRun was started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
    return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
  }

  public static final int END_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp endTime_;
  /**
   * <pre>
   * The time the ThreadRun was completed or failed. Unset if still active.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
   * @return Whether the endTime field is set.
   */
  @java.lang.Override
  public boolean hasEndTime() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The time the ThreadRun was completed or failed. Unset if still active.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
   * @return The endTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getEndTime() {
    return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * The time the ThreadRun was completed or failed. Unset if still active.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder() {
    return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
  }

  public static final int ERROR_MESSAGE_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object errorMessage_ = "";
  /**
   * <pre>
   * Human-readable error message detailing what went wrong in the case of a failure.
   * </pre>
   *
   * <code>optional string error_message = 7;</code>
   * @return Whether the errorMessage field is set.
   */
  @java.lang.Override
  public boolean hasErrorMessage() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Human-readable error message detailing what went wrong in the case of a failure.
   * </pre>
   *
   * <code>optional string error_message = 7;</code>
   * @return The errorMessage.
   */
  @java.lang.Override
  public java.lang.String getErrorMessage() {
    java.lang.Object ref = errorMessage_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      errorMessage_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Human-readable error message detailing what went wrong in the case of a failure.
   * </pre>
   *
   * <code>optional string error_message = 7;</code>
   * @return The bytes for errorMessage.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getErrorMessageBytes() {
    java.lang.Object ref = errorMessage_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      errorMessage_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CHILD_THREAD_IDS_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList childThreadIds_;
  /**
   * <pre>
   * List of thread_run_number's for all child thread_runs.
   * </pre>
   *
   * <code>repeated int32 child_thread_ids = 8;</code>
   * @return A list containing the childThreadIds.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getChildThreadIdsList() {
    return childThreadIds_;
  }
  /**
   * <pre>
   * List of thread_run_number's for all child thread_runs.
   * </pre>
   *
   * <code>repeated int32 child_thread_ids = 8;</code>
   * @return The count of childThreadIds.
   */
  public int getChildThreadIdsCount() {
    return childThreadIds_.size();
  }
  /**
   * <pre>
   * List of thread_run_number's for all child thread_runs.
   * </pre>
   *
   * <code>repeated int32 child_thread_ids = 8;</code>
   * @param index The index of the element to return.
   * @return The childThreadIds at the given index.
   */
  public int getChildThreadIds(int index) {
    return childThreadIds_.getInt(index);
  }
  private int childThreadIdsMemoizedSerializedSize = -1;

  public static final int PARENT_THREAD_ID_FIELD_NUMBER = 9;
  private int parentThreadId_ = 0;
  /**
   * <pre>
   * Set for every ThreadRun except the ENTRYPOINT. This is the id of the parent thread.
   * </pre>
   *
   * <code>optional int32 parent_thread_id = 9;</code>
   * @return Whether the parentThreadId field is set.
   */
  @java.lang.Override
  public boolean hasParentThreadId() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Set for every ThreadRun except the ENTRYPOINT. This is the id of the parent thread.
   * </pre>
   *
   * <code>optional int32 parent_thread_id = 9;</code>
   * @return The parentThreadId.
   */
  @java.lang.Override
  public int getParentThreadId() {
    return parentThreadId_;
  }

  public static final int HALT_REASONS_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.ThreadHaltReason> haltReasons_;
  /**
   * <pre>
   * If the ThreadRun is HALTED, this contains a list of every reason for which the
   * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
   * then the ThreadRun will return to the RUNNING state.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.ThreadHaltReason> getHaltReasonsList() {
    return haltReasons_;
  }
  /**
   * <pre>
   * If the ThreadRun is HALTED, this contains a list of every reason for which the
   * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
   * then the ThreadRun will return to the RUNNING state.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.ThreadHaltReasonOrBuilder> 
      getHaltReasonsOrBuilderList() {
    return haltReasons_;
  }
  /**
   * <pre>
   * If the ThreadRun is HALTED, this contains a list of every reason for which the
   * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
   * then the ThreadRun will return to the RUNNING state.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
   */
  @java.lang.Override
  public int getHaltReasonsCount() {
    return haltReasons_.size();
  }
  /**
   * <pre>
   * If the ThreadRun is HALTED, this contains a list of every reason for which the
   * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
   * then the ThreadRun will return to the RUNNING state.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadHaltReason getHaltReasons(int index) {
    return haltReasons_.get(index);
  }
  /**
   * <pre>
   * If the ThreadRun is HALTED, this contains a list of every reason for which the
   * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
   * then the ThreadRun will return to the RUNNING state.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadHaltReasonOrBuilder getHaltReasonsOrBuilder(
      int index) {
    return haltReasons_.get(index);
  }

  public static final int INTERRUPT_TRIGGER_ID_FIELD_NUMBER = 11;
  private io.littlehorse.sdk.common.proto.ExternalEventId interruptTriggerId_;
  /**
   * <pre>
   * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
   * ExternalEvent that caused the Interrupt.
   * </pre>
   *
   * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
   * @return Whether the interruptTriggerId field is set.
   */
  @java.lang.Override
  public boolean hasInterruptTriggerId() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
   * ExternalEvent that caused the Interrupt.
   * </pre>
   *
   * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
   * @return The interruptTriggerId.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ExternalEventId getInterruptTriggerId() {
    return interruptTriggerId_ == null ? io.littlehorse.sdk.common.proto.ExternalEventId.getDefaultInstance() : interruptTriggerId_;
  }
  /**
   * <pre>
   * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
   * ExternalEvent that caused the Interrupt.
   * </pre>
   *
   * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ExternalEventIdOrBuilder getInterruptTriggerIdOrBuilder() {
    return interruptTriggerId_ == null ? io.littlehorse.sdk.common.proto.ExternalEventId.getDefaultInstance() : interruptTriggerId_;
  }

  public static final int FAILURE_BEING_HANDLED_FIELD_NUMBER = 12;
  private io.littlehorse.sdk.common.proto.FailureBeingHandled failureBeingHandled_;
  /**
   * <pre>
   * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
   * that is being handled by this ThreadRun.
   * </pre>
   *
   * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
   * @return Whether the failureBeingHandled field is set.
   */
  @java.lang.Override
  public boolean hasFailureBeingHandled() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
   * that is being handled by this ThreadRun.
   * </pre>
   *
   * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
   * @return The failureBeingHandled.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.FailureBeingHandled getFailureBeingHandled() {
    return failureBeingHandled_ == null ? io.littlehorse.sdk.common.proto.FailureBeingHandled.getDefaultInstance() : failureBeingHandled_;
  }
  /**
   * <pre>
   * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
   * that is being handled by this ThreadRun.
   * </pre>
   *
   * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.FailureBeingHandledOrBuilder getFailureBeingHandledOrBuilder() {
    return failureBeingHandled_ == null ? io.littlehorse.sdk.common.proto.FailureBeingHandled.getDefaultInstance() : failureBeingHandled_;
  }

  public static final int CURRENT_NODE_POSITION_FIELD_NUMBER = 13;
  private int currentNodePosition_ = 0;
  /**
   * <pre>
   * This is the current `position` of the current NodeRun being run. This is an
   * auto-incremented field that gets incremented every time we run a new NodeRun.
   * </pre>
   *
   * <code>int32 current_node_position = 13;</code>
   * @return The currentNodePosition.
   */
  @java.lang.Override
  public int getCurrentNodePosition() {
    return currentNodePosition_;
  }

  public static final int HANDLED_FAILED_CHILDREN_FIELD_NUMBER = 14;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList handledFailedChildren_;
  /**
   * <pre>
   * List of every child ThreadRun which both a) failed, and b) was properly handled by a
   * Failure Handler.
   *
   * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
   * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
   * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
   * number is appended to this list, and then the EXIT node ignores that ThreadRun.
   * </pre>
   *
   * <code>repeated int32 handled_failed_children = 14;</code>
   * @return A list containing the handledFailedChildren.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getHandledFailedChildrenList() {
    return handledFailedChildren_;
  }
  /**
   * <pre>
   * List of every child ThreadRun which both a) failed, and b) was properly handled by a
   * Failure Handler.
   *
   * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
   * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
   * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
   * number is appended to this list, and then the EXIT node ignores that ThreadRun.
   * </pre>
   *
   * <code>repeated int32 handled_failed_children = 14;</code>
   * @return The count of handledFailedChildren.
   */
  public int getHandledFailedChildrenCount() {
    return handledFailedChildren_.size();
  }
  /**
   * <pre>
   * List of every child ThreadRun which both a) failed, and b) was properly handled by a
   * Failure Handler.
   *
   * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
   * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
   * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
   * number is appended to this list, and then the EXIT node ignores that ThreadRun.
   * </pre>
   *
   * <code>repeated int32 handled_failed_children = 14;</code>
   * @param index The index of the element to return.
   * @return The handledFailedChildren at the given index.
   */
  public int getHandledFailedChildren(int index) {
    return handledFailedChildren_.getInt(index);
  }
  private int handledFailedChildrenMemoizedSerializedSize = -1;

  public static final int TYPE_FIELD_NUMBER = 15;
  private int type_ = 0;
  /**
   * <pre>
   * The Type of this ThreadRun.
   * </pre>
   *
   * <code>.littlehorse.ThreadType type = 15;</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * The Type of this ThreadRun.
   * </pre>
   *
   * <code>.littlehorse.ThreadType type = 15;</code>
   * @return The type.
   */
  @java.lang.Override public io.littlehorse.sdk.common.proto.ThreadType getType() {
    io.littlehorse.sdk.common.proto.ThreadType result = io.littlehorse.sdk.common.proto.ThreadType.forNumber(type_);
    return result == null ? io.littlehorse.sdk.common.proto.ThreadType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (wfSpecId_ != null) {
      output.writeMessage(1, getWfSpecId());
    }
    if (number_ != 0) {
      output.writeInt32(2, number_);
    }
    if (status_ != io.littlehorse.sdk.common.proto.LHStatus.STARTING.getNumber()) {
      output.writeEnum(3, status_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(threadSpecName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, threadSpecName_);
    }
    if (startTime_ != null) {
      output.writeMessage(5, getStartTime());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(6, getEndTime());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, errorMessage_);
    }
    if (getChildThreadIdsList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(childThreadIdsMemoizedSerializedSize);
    }
    for (int i = 0; i < childThreadIds_.size(); i++) {
      output.writeInt32NoTag(childThreadIds_.getInt(i));
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt32(9, parentThreadId_);
    }
    for (int i = 0; i < haltReasons_.size(); i++) {
      output.writeMessage(10, haltReasons_.get(i));
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(11, getInterruptTriggerId());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeMessage(12, getFailureBeingHandled());
    }
    if (currentNodePosition_ != 0) {
      output.writeInt32(13, currentNodePosition_);
    }
    if (getHandledFailedChildrenList().size() > 0) {
      output.writeUInt32NoTag(114);
      output.writeUInt32NoTag(handledFailedChildrenMemoizedSerializedSize);
    }
    for (int i = 0; i < handledFailedChildren_.size(); i++) {
      output.writeInt32NoTag(handledFailedChildren_.getInt(i));
    }
    if (type_ != io.littlehorse.sdk.common.proto.ThreadType.ENTRYPOINT.getNumber()) {
      output.writeEnum(15, type_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (wfSpecId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getWfSpecId());
    }
    if (number_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, number_);
    }
    if (status_ != io.littlehorse.sdk.common.proto.LHStatus.STARTING.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, status_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(threadSpecName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, threadSpecName_);
    }
    if (startTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getStartTime());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getEndTime());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, errorMessage_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < childThreadIds_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(childThreadIds_.getInt(i));
      }
      size += dataSize;
      if (!getChildThreadIdsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      childThreadIdsMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, parentThreadId_);
    }
    for (int i = 0; i < haltReasons_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, haltReasons_.get(i));
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getInterruptTriggerId());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getFailureBeingHandled());
    }
    if (currentNodePosition_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(13, currentNodePosition_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < handledFailedChildren_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(handledFailedChildren_.getInt(i));
      }
      size += dataSize;
      if (!getHandledFailedChildrenList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      handledFailedChildrenMemoizedSerializedSize = dataSize;
    }
    if (type_ != io.littlehorse.sdk.common.proto.ThreadType.ENTRYPOINT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(15, type_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.ThreadRun)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.ThreadRun other = (io.littlehorse.sdk.common.proto.ThreadRun) obj;

    if (hasWfSpecId() != other.hasWfSpecId()) return false;
    if (hasWfSpecId()) {
      if (!getWfSpecId()
          .equals(other.getWfSpecId())) return false;
    }
    if (getNumber()
        != other.getNumber()) return false;
    if (status_ != other.status_) return false;
    if (!getThreadSpecName()
        .equals(other.getThreadSpecName())) return false;
    if (hasStartTime() != other.hasStartTime()) return false;
    if (hasStartTime()) {
      if (!getStartTime()
          .equals(other.getStartTime())) return false;
    }
    if (hasEndTime() != other.hasEndTime()) return false;
    if (hasEndTime()) {
      if (!getEndTime()
          .equals(other.getEndTime())) return false;
    }
    if (hasErrorMessage() != other.hasErrorMessage()) return false;
    if (hasErrorMessage()) {
      if (!getErrorMessage()
          .equals(other.getErrorMessage())) return false;
    }
    if (!getChildThreadIdsList()
        .equals(other.getChildThreadIdsList())) return false;
    if (hasParentThreadId() != other.hasParentThreadId()) return false;
    if (hasParentThreadId()) {
      if (getParentThreadId()
          != other.getParentThreadId()) return false;
    }
    if (!getHaltReasonsList()
        .equals(other.getHaltReasonsList())) return false;
    if (hasInterruptTriggerId() != other.hasInterruptTriggerId()) return false;
    if (hasInterruptTriggerId()) {
      if (!getInterruptTriggerId()
          .equals(other.getInterruptTriggerId())) return false;
    }
    if (hasFailureBeingHandled() != other.hasFailureBeingHandled()) return false;
    if (hasFailureBeingHandled()) {
      if (!getFailureBeingHandled()
          .equals(other.getFailureBeingHandled())) return false;
    }
    if (getCurrentNodePosition()
        != other.getCurrentNodePosition()) return false;
    if (!getHandledFailedChildrenList()
        .equals(other.getHandledFailedChildrenList())) return false;
    if (type_ != other.type_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasWfSpecId()) {
      hash = (37 * hash) + WF_SPEC_ID_FIELD_NUMBER;
      hash = (53 * hash) + getWfSpecId().hashCode();
    }
    hash = (37 * hash) + NUMBER_FIELD_NUMBER;
    hash = (53 * hash) + getNumber();
    hash = (37 * hash) + STATUS_FIELD_NUMBER;
    hash = (53 * hash) + status_;
    hash = (37 * hash) + THREAD_SPEC_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getThreadSpecName().hashCode();
    if (hasStartTime()) {
      hash = (37 * hash) + START_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getStartTime().hashCode();
    }
    if (hasEndTime()) {
      hash = (37 * hash) + END_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getEndTime().hashCode();
    }
    if (hasErrorMessage()) {
      hash = (37 * hash) + ERROR_MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getErrorMessage().hashCode();
    }
    if (getChildThreadIdsCount() > 0) {
      hash = (37 * hash) + CHILD_THREAD_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getChildThreadIdsList().hashCode();
    }
    if (hasParentThreadId()) {
      hash = (37 * hash) + PARENT_THREAD_ID_FIELD_NUMBER;
      hash = (53 * hash) + getParentThreadId();
    }
    if (getHaltReasonsCount() > 0) {
      hash = (37 * hash) + HALT_REASONS_FIELD_NUMBER;
      hash = (53 * hash) + getHaltReasonsList().hashCode();
    }
    if (hasInterruptTriggerId()) {
      hash = (37 * hash) + INTERRUPT_TRIGGER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInterruptTriggerId().hashCode();
    }
    if (hasFailureBeingHandled()) {
      hash = (37 * hash) + FAILURE_BEING_HANDLED_FIELD_NUMBER;
      hash = (53 * hash) + getFailureBeingHandled().hashCode();
    }
    hash = (37 * hash) + CURRENT_NODE_POSITION_FIELD_NUMBER;
    hash = (53 * hash) + getCurrentNodePosition();
    if (getHandledFailedChildrenCount() > 0) {
      hash = (37 * hash) + HANDLED_FAILED_CHILDREN_FIELD_NUMBER;
      hash = (53 * hash) + getHandledFailedChildrenList().hashCode();
    }
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.ThreadRun parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.ThreadRun parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.ThreadRun parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.ThreadRun prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A ThreadRun is a running thread of execution within a WfRun.
   * </pre>
   *
   * Protobuf type {@code littlehorse.ThreadRun}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.ThreadRun)
      io.littlehorse.sdk.common.proto.ThreadRunOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_ThreadRun_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_ThreadRun_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.ThreadRun.class, io.littlehorse.sdk.common.proto.ThreadRun.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.ThreadRun.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getWfSpecIdFieldBuilder();
        getStartTimeFieldBuilder();
        getEndTimeFieldBuilder();
        getHaltReasonsFieldBuilder();
        getInterruptTriggerIdFieldBuilder();
        getFailureBeingHandledFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      wfSpecId_ = null;
      if (wfSpecIdBuilder_ != null) {
        wfSpecIdBuilder_.dispose();
        wfSpecIdBuilder_ = null;
      }
      number_ = 0;
      status_ = 0;
      threadSpecName_ = "";
      startTime_ = null;
      if (startTimeBuilder_ != null) {
        startTimeBuilder_.dispose();
        startTimeBuilder_ = null;
      }
      endTime_ = null;
      if (endTimeBuilder_ != null) {
        endTimeBuilder_.dispose();
        endTimeBuilder_ = null;
      }
      errorMessage_ = "";
      childThreadIds_ = emptyIntList();
      parentThreadId_ = 0;
      if (haltReasonsBuilder_ == null) {
        haltReasons_ = java.util.Collections.emptyList();
      } else {
        haltReasons_ = null;
        haltReasonsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000200);
      interruptTriggerId_ = null;
      if (interruptTriggerIdBuilder_ != null) {
        interruptTriggerIdBuilder_.dispose();
        interruptTriggerIdBuilder_ = null;
      }
      failureBeingHandled_ = null;
      if (failureBeingHandledBuilder_ != null) {
        failureBeingHandledBuilder_.dispose();
        failureBeingHandledBuilder_ = null;
      }
      currentNodePosition_ = 0;
      handledFailedChildren_ = emptyIntList();
      type_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_ThreadRun_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.ThreadRun getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.ThreadRun.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.ThreadRun build() {
      io.littlehorse.sdk.common.proto.ThreadRun result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.ThreadRun buildPartial() {
      io.littlehorse.sdk.common.proto.ThreadRun result = new io.littlehorse.sdk.common.proto.ThreadRun(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.littlehorse.sdk.common.proto.ThreadRun result) {
      if (((bitField0_ & 0x00000080) != 0)) {
        childThreadIds_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.childThreadIds_ = childThreadIds_;
      if (haltReasonsBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0)) {
          haltReasons_ = java.util.Collections.unmodifiableList(haltReasons_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.haltReasons_ = haltReasons_;
      } else {
        result.haltReasons_ = haltReasonsBuilder_.build();
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        handledFailedChildren_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00002000);
      }
      result.handledFailedChildren_ = handledFailedChildren_;
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.ThreadRun result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.wfSpecId_ = wfSpecIdBuilder_ == null
            ? wfSpecId_
            : wfSpecIdBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.number_ = number_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.status_ = status_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.threadSpecName_ = threadSpecName_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.startTime_ = startTimeBuilder_ == null
            ? startTime_
            : startTimeBuilder_.build();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.endTime_ = endTimeBuilder_ == null
            ? endTime_
            : endTimeBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.errorMessage_ = errorMessage_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.parentThreadId_ = parentThreadId_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.interruptTriggerId_ = interruptTriggerIdBuilder_ == null
            ? interruptTriggerId_
            : interruptTriggerIdBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.failureBeingHandled_ = failureBeingHandledBuilder_ == null
            ? failureBeingHandled_
            : failureBeingHandledBuilder_.build();
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.currentNodePosition_ = currentNodePosition_;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.type_ = type_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.ThreadRun) {
        return mergeFrom((io.littlehorse.sdk.common.proto.ThreadRun)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.ThreadRun other) {
      if (other == io.littlehorse.sdk.common.proto.ThreadRun.getDefaultInstance()) return this;
      if (other.hasWfSpecId()) {
        mergeWfSpecId(other.getWfSpecId());
      }
      if (other.getNumber() != 0) {
        setNumber(other.getNumber());
      }
      if (other.status_ != 0) {
        setStatusValue(other.getStatusValue());
      }
      if (!other.getThreadSpecName().isEmpty()) {
        threadSpecName_ = other.threadSpecName_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.hasStartTime()) {
        mergeStartTime(other.getStartTime());
      }
      if (other.hasEndTime()) {
        mergeEndTime(other.getEndTime());
      }
      if (other.hasErrorMessage()) {
        errorMessage_ = other.errorMessage_;
        bitField0_ |= 0x00000040;
        onChanged();
      }
      if (!other.childThreadIds_.isEmpty()) {
        if (childThreadIds_.isEmpty()) {
          childThreadIds_ = other.childThreadIds_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureChildThreadIdsIsMutable();
          childThreadIds_.addAll(other.childThreadIds_);
        }
        onChanged();
      }
      if (other.hasParentThreadId()) {
        setParentThreadId(other.getParentThreadId());
      }
      if (haltReasonsBuilder_ == null) {
        if (!other.haltReasons_.isEmpty()) {
          if (haltReasons_.isEmpty()) {
            haltReasons_ = other.haltReasons_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureHaltReasonsIsMutable();
            haltReasons_.addAll(other.haltReasons_);
          }
          onChanged();
        }
      } else {
        if (!other.haltReasons_.isEmpty()) {
          if (haltReasonsBuilder_.isEmpty()) {
            haltReasonsBuilder_.dispose();
            haltReasonsBuilder_ = null;
            haltReasons_ = other.haltReasons_;
            bitField0_ = (bitField0_ & ~0x00000200);
            haltReasonsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHaltReasonsFieldBuilder() : null;
          } else {
            haltReasonsBuilder_.addAllMessages(other.haltReasons_);
          }
        }
      }
      if (other.hasInterruptTriggerId()) {
        mergeInterruptTriggerId(other.getInterruptTriggerId());
      }
      if (other.hasFailureBeingHandled()) {
        mergeFailureBeingHandled(other.getFailureBeingHandled());
      }
      if (other.getCurrentNodePosition() != 0) {
        setCurrentNodePosition(other.getCurrentNodePosition());
      }
      if (!other.handledFailedChildren_.isEmpty()) {
        if (handledFailedChildren_.isEmpty()) {
          handledFailedChildren_ = other.handledFailedChildren_;
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          ensureHandledFailedChildrenIsMutable();
          handledFailedChildren_.addAll(other.handledFailedChildren_);
        }
        onChanged();
      }
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getWfSpecIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              number_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              status_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              threadSpecName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getStartTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getEndTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              errorMessage_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 64: {
              int v = input.readInt32();
              ensureChildThreadIdsIsMutable();
              childThreadIds_.addInt(v);
              break;
            } // case 64
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureChildThreadIdsIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                childThreadIds_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 66
            case 72: {
              parentThreadId_ = input.readInt32();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            case 82: {
              io.littlehorse.sdk.common.proto.ThreadHaltReason m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.ThreadHaltReason.parser(),
                      extensionRegistry);
              if (haltReasonsBuilder_ == null) {
                ensureHaltReasonsIsMutable();
                haltReasons_.add(m);
              } else {
                haltReasonsBuilder_.addMessage(m);
              }
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getInterruptTriggerIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000400;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getFailureBeingHandledFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000800;
              break;
            } // case 98
            case 104: {
              currentNodePosition_ = input.readInt32();
              bitField0_ |= 0x00001000;
              break;
            } // case 104
            case 112: {
              int v = input.readInt32();
              ensureHandledFailedChildrenIsMutable();
              handledFailedChildren_.addInt(v);
              break;
            } // case 112
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureHandledFailedChildrenIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                handledFailedChildren_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 114
            case 120: {
              type_ = input.readEnum();
              bitField0_ |= 0x00004000;
              break;
            } // case 120
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.littlehorse.sdk.common.proto.WfSpecId wfSpecId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> wfSpecIdBuilder_;
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     * @return Whether the wfSpecId field is set.
     */
    public boolean hasWfSpecId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     * @return The wfSpecId.
     */
    public io.littlehorse.sdk.common.proto.WfSpecId getWfSpecId() {
      if (wfSpecIdBuilder_ == null) {
        return wfSpecId_ == null ? io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
      } else {
        return wfSpecIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     */
    public Builder setWfSpecId(io.littlehorse.sdk.common.proto.WfSpecId value) {
      if (wfSpecIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        wfSpecId_ = value;
      } else {
        wfSpecIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     */
    public Builder setWfSpecId(
        io.littlehorse.sdk.common.proto.WfSpecId.Builder builderForValue) {
      if (wfSpecIdBuilder_ == null) {
        wfSpecId_ = builderForValue.build();
      } else {
        wfSpecIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     */
    public Builder mergeWfSpecId(io.littlehorse.sdk.common.proto.WfSpecId value) {
      if (wfSpecIdBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          wfSpecId_ != null &&
          wfSpecId_ != io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance()) {
          getWfSpecIdBuilder().mergeFrom(value);
        } else {
          wfSpecId_ = value;
        }
      } else {
        wfSpecIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     */
    public Builder clearWfSpecId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      wfSpecId_ = null;
      if (wfSpecIdBuilder_ != null) {
        wfSpecIdBuilder_.dispose();
        wfSpecIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecId.Builder getWfSpecIdBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getWfSpecIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder getWfSpecIdOrBuilder() {
      if (wfSpecIdBuilder_ != null) {
        return wfSpecIdBuilder_.getMessageOrBuilder();
      } else {
        return wfSpecId_ == null ?
            io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
      }
    }
    /**
     * <pre>
     * The current WfSpecId of this ThreadRun. This must be set explicitly because
     * during a WfSpec Version Migration, it is possible for different ThreadSpec's to
     * have different WfSpec versions.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> 
        getWfSpecIdFieldBuilder() {
      if (wfSpecIdBuilder_ == null) {
        wfSpecIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder>(
                getWfSpecId(),
                getParentForChildren(),
                isClean());
        wfSpecId_ = null;
      }
      return wfSpecIdBuilder_;
    }

    private int number_ ;
    /**
     * <pre>
     * The number of the ThreadRun. This is an auto-incremented integer corresponding to
     * the chronological ordering of when the ThreadRun's were created. If you have not
     * configured any retention policy for the ThreadRun's (i.e. never clean them up), then
     * this also corresponds to the position of the ThreadRun in the WfRun's `thread_runs`
     * list.
     * </pre>
     *
     * <code>int32 number = 2;</code>
     * @return The number.
     */
    @java.lang.Override
    public int getNumber() {
      return number_;
    }
    /**
     * <pre>
     * The number of the ThreadRun. This is an auto-incremented integer corresponding to
     * the chronological ordering of when the ThreadRun's were created. If you have not
     * configured any retention policy for the ThreadRun's (i.e. never clean them up), then
     * this also corresponds to the position of the ThreadRun in the WfRun's `thread_runs`
     * list.
     * </pre>
     *
     * <code>int32 number = 2;</code>
     * @param value The number to set.
     * @return This builder for chaining.
     */
    public Builder setNumber(int value) {

      number_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of the ThreadRun. This is an auto-incremented integer corresponding to
     * the chronological ordering of when the ThreadRun's were created. If you have not
     * configured any retention policy for the ThreadRun's (i.e. never clean them up), then
     * this also corresponds to the position of the ThreadRun in the WfRun's `thread_runs`
     * list.
     * </pre>
     *
     * <code>int32 number = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumber() {
      bitField0_ = (bitField0_ & ~0x00000002);
      number_ = 0;
      onChanged();
      return this;
    }

    private int status_ = 0;
    /**
     * <pre>
     * The status of the ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 3;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * The status of the ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 3;</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(int value) {
      status_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of the ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 3;</code>
     * @return The status.
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.LHStatus getStatus() {
      io.littlehorse.sdk.common.proto.LHStatus result = io.littlehorse.sdk.common.proto.LHStatus.forNumber(status_);
      return result == null ? io.littlehorse.sdk.common.proto.LHStatus.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The status of the ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 3;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(io.littlehorse.sdk.common.proto.LHStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      status_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of the ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000004);
      status_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object threadSpecName_ = "";
    /**
     * <pre>
     * The name of the ThreadSpec being run.
     * </pre>
     *
     * <code>string thread_spec_name = 4;</code>
     * @return The threadSpecName.
     */
    public java.lang.String getThreadSpecName() {
      java.lang.Object ref = threadSpecName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        threadSpecName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the ThreadSpec being run.
     * </pre>
     *
     * <code>string thread_spec_name = 4;</code>
     * @return The bytes for threadSpecName.
     */
    public com.google.protobuf.ByteString
        getThreadSpecNameBytes() {
      java.lang.Object ref = threadSpecName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        threadSpecName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the ThreadSpec being run.
     * </pre>
     *
     * <code>string thread_spec_name = 4;</code>
     * @param value The threadSpecName to set.
     * @return This builder for chaining.
     */
    public Builder setThreadSpecName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      threadSpecName_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the ThreadSpec being run.
     * </pre>
     *
     * <code>string thread_spec_name = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearThreadSpecName() {
      threadSpecName_ = getDefaultInstance().getThreadSpecName();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the ThreadSpec being run.
     * </pre>
     *
     * <code>string thread_spec_name = 4;</code>
     * @param value The bytes for threadSpecName to set.
     * @return This builder for chaining.
     */
    public Builder setThreadSpecNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      threadSpecName_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp startTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> startTimeBuilder_;
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return Whether the startTime field is set.
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return The startTime.
     */
    public com.google.protobuf.Timestamp getStartTime() {
      if (startTimeBuilder_ == null) {
        return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
      } else {
        return startTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder setStartTime(com.google.protobuf.Timestamp value) {
      if (startTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        startTime_ = value;
      } else {
        startTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder setStartTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (startTimeBuilder_ == null) {
        startTime_ = builderForValue.build();
      } else {
        startTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder mergeStartTime(com.google.protobuf.Timestamp value) {
      if (startTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          startTime_ != null &&
          startTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getStartTimeBuilder().mergeFrom(value);
        } else {
          startTime_ = value;
        }
      } else {
        startTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder clearStartTime() {
      bitField0_ = (bitField0_ & ~0x00000010);
      startTime_ = null;
      if (startTimeBuilder_ != null) {
        startTimeBuilder_.dispose();
        startTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public com.google.protobuf.Timestamp.Builder getStartTimeBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getStartTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
      if (startTimeBuilder_ != null) {
        return startTimeBuilder_.getMessageOrBuilder();
      } else {
        return startTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
      }
    }
    /**
     * <pre>
     * The time the ThreadRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getStartTimeFieldBuilder() {
      if (startTimeBuilder_ == null) {
        startTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getStartTime(),
                getParentForChildren(),
                isClean());
        startTime_ = null;
      }
      return startTimeBuilder_;
    }

    private com.google.protobuf.Timestamp endTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> endTimeBuilder_;
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     * @return Whether the endTime field is set.
     */
    public boolean hasEndTime() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     * @return The endTime.
     */
    public com.google.protobuf.Timestamp getEndTime() {
      if (endTimeBuilder_ == null) {
        return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
      } else {
        return endTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder setEndTime(com.google.protobuf.Timestamp value) {
      if (endTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        endTime_ = value;
      } else {
        endTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder setEndTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (endTimeBuilder_ == null) {
        endTime_ = builderForValue.build();
      } else {
        endTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder mergeEndTime(com.google.protobuf.Timestamp value) {
      if (endTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          endTime_ != null &&
          endTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getEndTimeBuilder().mergeFrom(value);
        } else {
          endTime_ = value;
        }
      } else {
        endTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder clearEndTime() {
      bitField0_ = (bitField0_ & ~0x00000020);
      endTime_ = null;
      if (endTimeBuilder_ != null) {
        endTimeBuilder_.dispose();
        endTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     */
    public com.google.protobuf.Timestamp.Builder getEndTimeBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getEndTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder() {
      if (endTimeBuilder_ != null) {
        return endTimeBuilder_.getMessageOrBuilder();
      } else {
        return endTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
      }
    }
    /**
     * <pre>
     * The time the ThreadRun was completed or failed. Unset if still active.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getEndTimeFieldBuilder() {
      if (endTimeBuilder_ == null) {
        endTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getEndTime(),
                getParentForChildren(),
                isClean());
        endTime_ = null;
      }
      return endTimeBuilder_;
    }

    private java.lang.Object errorMessage_ = "";
    /**
     * <pre>
     * Human-readable error message detailing what went wrong in the case of a failure.
     * </pre>
     *
     * <code>optional string error_message = 7;</code>
     * @return Whether the errorMessage field is set.
     */
    public boolean hasErrorMessage() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Human-readable error message detailing what went wrong in the case of a failure.
     * </pre>
     *
     * <code>optional string error_message = 7;</code>
     * @return The errorMessage.
     */
    public java.lang.String getErrorMessage() {
      java.lang.Object ref = errorMessage_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        errorMessage_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Human-readable error message detailing what went wrong in the case of a failure.
     * </pre>
     *
     * <code>optional string error_message = 7;</code>
     * @return The bytes for errorMessage.
     */
    public com.google.protobuf.ByteString
        getErrorMessageBytes() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        errorMessage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Human-readable error message detailing what went wrong in the case of a failure.
     * </pre>
     *
     * <code>optional string error_message = 7;</code>
     * @param value The errorMessage to set.
     * @return This builder for chaining.
     */
    public Builder setErrorMessage(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      errorMessage_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Human-readable error message detailing what went wrong in the case of a failure.
     * </pre>
     *
     * <code>optional string error_message = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearErrorMessage() {
      errorMessage_ = getDefaultInstance().getErrorMessage();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Human-readable error message detailing what went wrong in the case of a failure.
     * </pre>
     *
     * <code>optional string error_message = 7;</code>
     * @param value The bytes for errorMessage to set.
     * @return This builder for chaining.
     */
    public Builder setErrorMessageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      errorMessage_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList childThreadIds_ = emptyIntList();
    private void ensureChildThreadIdsIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        childThreadIds_ = mutableCopy(childThreadIds_);
        bitField0_ |= 0x00000080;
      }
    }
    /**
     * <pre>
     * List of thread_run_number's for all child thread_runs.
     * </pre>
     *
     * <code>repeated int32 child_thread_ids = 8;</code>
     * @return A list containing the childThreadIds.
     */
    public java.util.List<java.lang.Integer>
        getChildThreadIdsList() {
      return ((bitField0_ & 0x00000080) != 0) ?
               java.util.Collections.unmodifiableList(childThreadIds_) : childThreadIds_;
    }
    /**
     * <pre>
     * List of thread_run_number's for all child thread_runs.
     * </pre>
     *
     * <code>repeated int32 child_thread_ids = 8;</code>
     * @return The count of childThreadIds.
     */
    public int getChildThreadIdsCount() {
      return childThreadIds_.size();
    }
    /**
     * <pre>
     * List of thread_run_number's for all child thread_runs.
     * </pre>
     *
     * <code>repeated int32 child_thread_ids = 8;</code>
     * @param index The index of the element to return.
     * @return The childThreadIds at the given index.
     */
    public int getChildThreadIds(int index) {
      return childThreadIds_.getInt(index);
    }
    /**
     * <pre>
     * List of thread_run_number's for all child thread_runs.
     * </pre>
     *
     * <code>repeated int32 child_thread_ids = 8;</code>
     * @param index The index to set the value at.
     * @param value The childThreadIds to set.
     * @return This builder for chaining.
     */
    public Builder setChildThreadIds(
        int index, int value) {

      ensureChildThreadIdsIsMutable();
      childThreadIds_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of thread_run_number's for all child thread_runs.
     * </pre>
     *
     * <code>repeated int32 child_thread_ids = 8;</code>
     * @param value The childThreadIds to add.
     * @return This builder for chaining.
     */
    public Builder addChildThreadIds(int value) {

      ensureChildThreadIdsIsMutable();
      childThreadIds_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of thread_run_number's for all child thread_runs.
     * </pre>
     *
     * <code>repeated int32 child_thread_ids = 8;</code>
     * @param values The childThreadIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllChildThreadIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureChildThreadIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, childThreadIds_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of thread_run_number's for all child thread_runs.
     * </pre>
     *
     * <code>repeated int32 child_thread_ids = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearChildThreadIds() {
      childThreadIds_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private int parentThreadId_ ;
    /**
     * <pre>
     * Set for every ThreadRun except the ENTRYPOINT. This is the id of the parent thread.
     * </pre>
     *
     * <code>optional int32 parent_thread_id = 9;</code>
     * @return Whether the parentThreadId field is set.
     */
    @java.lang.Override
    public boolean hasParentThreadId() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Set for every ThreadRun except the ENTRYPOINT. This is the id of the parent thread.
     * </pre>
     *
     * <code>optional int32 parent_thread_id = 9;</code>
     * @return The parentThreadId.
     */
    @java.lang.Override
    public int getParentThreadId() {
      return parentThreadId_;
    }
    /**
     * <pre>
     * Set for every ThreadRun except the ENTRYPOINT. This is the id of the parent thread.
     * </pre>
     *
     * <code>optional int32 parent_thread_id = 9;</code>
     * @param value The parentThreadId to set.
     * @return This builder for chaining.
     */
    public Builder setParentThreadId(int value) {

      parentThreadId_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set for every ThreadRun except the ENTRYPOINT. This is the id of the parent thread.
     * </pre>
     *
     * <code>optional int32 parent_thread_id = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearParentThreadId() {
      bitField0_ = (bitField0_ & ~0x00000100);
      parentThreadId_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.ThreadHaltReason> haltReasons_ =
      java.util.Collections.emptyList();
    private void ensureHaltReasonsIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        haltReasons_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.ThreadHaltReason>(haltReasons_);
        bitField0_ |= 0x00000200;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadHaltReason, io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder, io.littlehorse.sdk.common.proto.ThreadHaltReasonOrBuilder> haltReasonsBuilder_;

    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.ThreadHaltReason> getHaltReasonsList() {
      if (haltReasonsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(haltReasons_);
      } else {
        return haltReasonsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public int getHaltReasonsCount() {
      if (haltReasonsBuilder_ == null) {
        return haltReasons_.size();
      } else {
        return haltReasonsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadHaltReason getHaltReasons(int index) {
      if (haltReasonsBuilder_ == null) {
        return haltReasons_.get(index);
      } else {
        return haltReasonsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder setHaltReasons(
        int index, io.littlehorse.sdk.common.proto.ThreadHaltReason value) {
      if (haltReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHaltReasonsIsMutable();
        haltReasons_.set(index, value);
        onChanged();
      } else {
        haltReasonsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder setHaltReasons(
        int index, io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder builderForValue) {
      if (haltReasonsBuilder_ == null) {
        ensureHaltReasonsIsMutable();
        haltReasons_.set(index, builderForValue.build());
        onChanged();
      } else {
        haltReasonsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder addHaltReasons(io.littlehorse.sdk.common.proto.ThreadHaltReason value) {
      if (haltReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHaltReasonsIsMutable();
        haltReasons_.add(value);
        onChanged();
      } else {
        haltReasonsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder addHaltReasons(
        int index, io.littlehorse.sdk.common.proto.ThreadHaltReason value) {
      if (haltReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHaltReasonsIsMutable();
        haltReasons_.add(index, value);
        onChanged();
      } else {
        haltReasonsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder addHaltReasons(
        io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder builderForValue) {
      if (haltReasonsBuilder_ == null) {
        ensureHaltReasonsIsMutable();
        haltReasons_.add(builderForValue.build());
        onChanged();
      } else {
        haltReasonsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder addHaltReasons(
        int index, io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder builderForValue) {
      if (haltReasonsBuilder_ == null) {
        ensureHaltReasonsIsMutable();
        haltReasons_.add(index, builderForValue.build());
        onChanged();
      } else {
        haltReasonsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder addAllHaltReasons(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.ThreadHaltReason> values) {
      if (haltReasonsBuilder_ == null) {
        ensureHaltReasonsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, haltReasons_);
        onChanged();
      } else {
        haltReasonsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder clearHaltReasons() {
      if (haltReasonsBuilder_ == null) {
        haltReasons_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
      } else {
        haltReasonsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public Builder removeHaltReasons(int index) {
      if (haltReasonsBuilder_ == null) {
        ensureHaltReasonsIsMutable();
        haltReasons_.remove(index);
        onChanged();
      } else {
        haltReasonsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder getHaltReasonsBuilder(
        int index) {
      return getHaltReasonsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadHaltReasonOrBuilder getHaltReasonsOrBuilder(
        int index) {
      if (haltReasonsBuilder_ == null) {
        return haltReasons_.get(index);  } else {
        return haltReasonsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.ThreadHaltReasonOrBuilder> 
         getHaltReasonsOrBuilderList() {
      if (haltReasonsBuilder_ != null) {
        return haltReasonsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(haltReasons_);
      }
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder addHaltReasonsBuilder() {
      return getHaltReasonsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.ThreadHaltReason.getDefaultInstance());
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder addHaltReasonsBuilder(
        int index) {
      return getHaltReasonsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.ThreadHaltReason.getDefaultInstance());
    }
    /**
     * <pre>
     * If the ThreadRun is HALTED, this contains a list of every reason for which the
     * ThreadRun is HALTED. Once every reason is "resolved" (and thus removed from the list),
     * then the ThreadRun will return to the RUNNING state.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadHaltReason halt_reasons = 10;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder> 
         getHaltReasonsBuilderList() {
      return getHaltReasonsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadHaltReason, io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder, io.littlehorse.sdk.common.proto.ThreadHaltReasonOrBuilder> 
        getHaltReasonsFieldBuilder() {
      if (haltReasonsBuilder_ == null) {
        haltReasonsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.ThreadHaltReason, io.littlehorse.sdk.common.proto.ThreadHaltReason.Builder, io.littlehorse.sdk.common.proto.ThreadHaltReasonOrBuilder>(
                haltReasons_,
                ((bitField0_ & 0x00000200) != 0),
                getParentForChildren(),
                isClean());
        haltReasons_ = null;
      }
      return haltReasonsBuilder_;
    }

    private io.littlehorse.sdk.common.proto.ExternalEventId interruptTriggerId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ExternalEventId, io.littlehorse.sdk.common.proto.ExternalEventId.Builder, io.littlehorse.sdk.common.proto.ExternalEventIdOrBuilder> interruptTriggerIdBuilder_;
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     * @return Whether the interruptTriggerId field is set.
     */
    public boolean hasInterruptTriggerId() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     * @return The interruptTriggerId.
     */
    public io.littlehorse.sdk.common.proto.ExternalEventId getInterruptTriggerId() {
      if (interruptTriggerIdBuilder_ == null) {
        return interruptTriggerId_ == null ? io.littlehorse.sdk.common.proto.ExternalEventId.getDefaultInstance() : interruptTriggerId_;
      } else {
        return interruptTriggerIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     */
    public Builder setInterruptTriggerId(io.littlehorse.sdk.common.proto.ExternalEventId value) {
      if (interruptTriggerIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interruptTriggerId_ = value;
      } else {
        interruptTriggerIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     */
    public Builder setInterruptTriggerId(
        io.littlehorse.sdk.common.proto.ExternalEventId.Builder builderForValue) {
      if (interruptTriggerIdBuilder_ == null) {
        interruptTriggerId_ = builderForValue.build();
      } else {
        interruptTriggerIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     */
    public Builder mergeInterruptTriggerId(io.littlehorse.sdk.common.proto.ExternalEventId value) {
      if (interruptTriggerIdBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0) &&
          interruptTriggerId_ != null &&
          interruptTriggerId_ != io.littlehorse.sdk.common.proto.ExternalEventId.getDefaultInstance()) {
          getInterruptTriggerIdBuilder().mergeFrom(value);
        } else {
          interruptTriggerId_ = value;
        }
      } else {
        interruptTriggerIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     */
    public Builder clearInterruptTriggerId() {
      bitField0_ = (bitField0_ & ~0x00000400);
      interruptTriggerId_ = null;
      if (interruptTriggerIdBuilder_ != null) {
        interruptTriggerIdBuilder_.dispose();
        interruptTriggerIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     */
    public io.littlehorse.sdk.common.proto.ExternalEventId.Builder getInterruptTriggerIdBuilder() {
      bitField0_ |= 0x00000400;
      onChanged();
      return getInterruptTriggerIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     */
    public io.littlehorse.sdk.common.proto.ExternalEventIdOrBuilder getInterruptTriggerIdOrBuilder() {
      if (interruptTriggerIdBuilder_ != null) {
        return interruptTriggerIdBuilder_.getMessageOrBuilder();
      } else {
        return interruptTriggerId_ == null ?
            io.littlehorse.sdk.common.proto.ExternalEventId.getDefaultInstance() : interruptTriggerId_;
      }
    }
    /**
     * <pre>
     * If this ThreadRun is of type INTERRUPT_HANDLER, this field is set to the ID of the
     * ExternalEvent that caused the Interrupt.
     * </pre>
     *
     * <code>optional .littlehorse.ExternalEventId interrupt_trigger_id = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ExternalEventId, io.littlehorse.sdk.common.proto.ExternalEventId.Builder, io.littlehorse.sdk.common.proto.ExternalEventIdOrBuilder> 
        getInterruptTriggerIdFieldBuilder() {
      if (interruptTriggerIdBuilder_ == null) {
        interruptTriggerIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.ExternalEventId, io.littlehorse.sdk.common.proto.ExternalEventId.Builder, io.littlehorse.sdk.common.proto.ExternalEventIdOrBuilder>(
                getInterruptTriggerId(),
                getParentForChildren(),
                isClean());
        interruptTriggerId_ = null;
      }
      return interruptTriggerIdBuilder_;
    }

    private io.littlehorse.sdk.common.proto.FailureBeingHandled failureBeingHandled_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.FailureBeingHandled, io.littlehorse.sdk.common.proto.FailureBeingHandled.Builder, io.littlehorse.sdk.common.proto.FailureBeingHandledOrBuilder> failureBeingHandledBuilder_;
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     * @return Whether the failureBeingHandled field is set.
     */
    public boolean hasFailureBeingHandled() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     * @return The failureBeingHandled.
     */
    public io.littlehorse.sdk.common.proto.FailureBeingHandled getFailureBeingHandled() {
      if (failureBeingHandledBuilder_ == null) {
        return failureBeingHandled_ == null ? io.littlehorse.sdk.common.proto.FailureBeingHandled.getDefaultInstance() : failureBeingHandled_;
      } else {
        return failureBeingHandledBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     */
    public Builder setFailureBeingHandled(io.littlehorse.sdk.common.proto.FailureBeingHandled value) {
      if (failureBeingHandledBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        failureBeingHandled_ = value;
      } else {
        failureBeingHandledBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     */
    public Builder setFailureBeingHandled(
        io.littlehorse.sdk.common.proto.FailureBeingHandled.Builder builderForValue) {
      if (failureBeingHandledBuilder_ == null) {
        failureBeingHandled_ = builderForValue.build();
      } else {
        failureBeingHandledBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     */
    public Builder mergeFailureBeingHandled(io.littlehorse.sdk.common.proto.FailureBeingHandled value) {
      if (failureBeingHandledBuilder_ == null) {
        if (((bitField0_ & 0x00000800) != 0) &&
          failureBeingHandled_ != null &&
          failureBeingHandled_ != io.littlehorse.sdk.common.proto.FailureBeingHandled.getDefaultInstance()) {
          getFailureBeingHandledBuilder().mergeFrom(value);
        } else {
          failureBeingHandled_ = value;
        }
      } else {
        failureBeingHandledBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     */
    public Builder clearFailureBeingHandled() {
      bitField0_ = (bitField0_ & ~0x00000800);
      failureBeingHandled_ = null;
      if (failureBeingHandledBuilder_ != null) {
        failureBeingHandledBuilder_.dispose();
        failureBeingHandledBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     */
    public io.littlehorse.sdk.common.proto.FailureBeingHandled.Builder getFailureBeingHandledBuilder() {
      bitField0_ |= 0x00000800;
      onChanged();
      return getFailureBeingHandledFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     */
    public io.littlehorse.sdk.common.proto.FailureBeingHandledOrBuilder getFailureBeingHandledOrBuilder() {
      if (failureBeingHandledBuilder_ != null) {
        return failureBeingHandledBuilder_.getMessageOrBuilder();
      } else {
        return failureBeingHandled_ == null ?
            io.littlehorse.sdk.common.proto.FailureBeingHandled.getDefaultInstance() : failureBeingHandled_;
      }
    }
    /**
     * <pre>
     * If this ThreadRun is of type FAILURE_HANDLER, this field is set to the exact Failure
     * that is being handled by this ThreadRun.
     * </pre>
     *
     * <code>optional .littlehorse.FailureBeingHandled failure_being_handled = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.FailureBeingHandled, io.littlehorse.sdk.common.proto.FailureBeingHandled.Builder, io.littlehorse.sdk.common.proto.FailureBeingHandledOrBuilder> 
        getFailureBeingHandledFieldBuilder() {
      if (failureBeingHandledBuilder_ == null) {
        failureBeingHandledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.FailureBeingHandled, io.littlehorse.sdk.common.proto.FailureBeingHandled.Builder, io.littlehorse.sdk.common.proto.FailureBeingHandledOrBuilder>(
                getFailureBeingHandled(),
                getParentForChildren(),
                isClean());
        failureBeingHandled_ = null;
      }
      return failureBeingHandledBuilder_;
    }

    private int currentNodePosition_ ;
    /**
     * <pre>
     * This is the current `position` of the current NodeRun being run. This is an
     * auto-incremented field that gets incremented every time we run a new NodeRun.
     * </pre>
     *
     * <code>int32 current_node_position = 13;</code>
     * @return The currentNodePosition.
     */
    @java.lang.Override
    public int getCurrentNodePosition() {
      return currentNodePosition_;
    }
    /**
     * <pre>
     * This is the current `position` of the current NodeRun being run. This is an
     * auto-incremented field that gets incremented every time we run a new NodeRun.
     * </pre>
     *
     * <code>int32 current_node_position = 13;</code>
     * @param value The currentNodePosition to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentNodePosition(int value) {

      currentNodePosition_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is the current `position` of the current NodeRun being run. This is an
     * auto-incremented field that gets incremented every time we run a new NodeRun.
     * </pre>
     *
     * <code>int32 current_node_position = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearCurrentNodePosition() {
      bitField0_ = (bitField0_ & ~0x00001000);
      currentNodePosition_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList handledFailedChildren_ = emptyIntList();
    private void ensureHandledFailedChildrenIsMutable() {
      if (!((bitField0_ & 0x00002000) != 0)) {
        handledFailedChildren_ = mutableCopy(handledFailedChildren_);
        bitField0_ |= 0x00002000;
      }
    }
    /**
     * <pre>
     * List of every child ThreadRun which both a) failed, and b) was properly handled by a
     * Failure Handler.
     *
     * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
     * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
     * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
     * number is appended to this list, and then the EXIT node ignores that ThreadRun.
     * </pre>
     *
     * <code>repeated int32 handled_failed_children = 14;</code>
     * @return A list containing the handledFailedChildren.
     */
    public java.util.List<java.lang.Integer>
        getHandledFailedChildrenList() {
      return ((bitField0_ & 0x00002000) != 0) ?
               java.util.Collections.unmodifiableList(handledFailedChildren_) : handledFailedChildren_;
    }
    /**
     * <pre>
     * List of every child ThreadRun which both a) failed, and b) was properly handled by a
     * Failure Handler.
     *
     * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
     * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
     * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
     * number is appended to this list, and then the EXIT node ignores that ThreadRun.
     * </pre>
     *
     * <code>repeated int32 handled_failed_children = 14;</code>
     * @return The count of handledFailedChildren.
     */
    public int getHandledFailedChildrenCount() {
      return handledFailedChildren_.size();
    }
    /**
     * <pre>
     * List of every child ThreadRun which both a) failed, and b) was properly handled by a
     * Failure Handler.
     *
     * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
     * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
     * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
     * number is appended to this list, and then the EXIT node ignores that ThreadRun.
     * </pre>
     *
     * <code>repeated int32 handled_failed_children = 14;</code>
     * @param index The index of the element to return.
     * @return The handledFailedChildren at the given index.
     */
    public int getHandledFailedChildren(int index) {
      return handledFailedChildren_.getInt(index);
    }
    /**
     * <pre>
     * List of every child ThreadRun which both a) failed, and b) was properly handled by a
     * Failure Handler.
     *
     * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
     * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
     * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
     * number is appended to this list, and then the EXIT node ignores that ThreadRun.
     * </pre>
     *
     * <code>repeated int32 handled_failed_children = 14;</code>
     * @param index The index to set the value at.
     * @param value The handledFailedChildren to set.
     * @return This builder for chaining.
     */
    public Builder setHandledFailedChildren(
        int index, int value) {

      ensureHandledFailedChildrenIsMutable();
      handledFailedChildren_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of every child ThreadRun which both a) failed, and b) was properly handled by a
     * Failure Handler.
     *
     * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
     * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
     * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
     * number is appended to this list, and then the EXIT node ignores that ThreadRun.
     * </pre>
     *
     * <code>repeated int32 handled_failed_children = 14;</code>
     * @param value The handledFailedChildren to add.
     * @return This builder for chaining.
     */
    public Builder addHandledFailedChildren(int value) {

      ensureHandledFailedChildrenIsMutable();
      handledFailedChildren_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of every child ThreadRun which both a) failed, and b) was properly handled by a
     * Failure Handler.
     *
     * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
     * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
     * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
     * number is appended to this list, and then the EXIT node ignores that ThreadRun.
     * </pre>
     *
     * <code>repeated int32 handled_failed_children = 14;</code>
     * @param values The handledFailedChildren to add.
     * @return This builder for chaining.
     */
    public Builder addAllHandledFailedChildren(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureHandledFailedChildrenIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, handledFailedChildren_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of every child ThreadRun which both a) failed, and b) was properly handled by a
     * Failure Handler.
     *
     * This is important because at the EXIT node, if a Child ThreadRun was discovered to have
     * failed, then this ThreadRun (the parent) also fails with the same failure as the child.
     * If, however, a Failure Handler had previously "handled" the Child Failure, that ThreadRun's
     * number is appended to this list, and then the EXIT node ignores that ThreadRun.
     * </pre>
     *
     * <code>repeated int32 handled_failed_children = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearHandledFailedChildren() {
      handledFailedChildren_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00002000);
      onChanged();
      return this;
    }

    private int type_ = 0;
    /**
     * <pre>
     * The Type of this ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.ThreadType type = 15;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The Type of this ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.ThreadType type = 15;</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Type of this ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.ThreadType type = 15;</code>
     * @return The type.
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.ThreadType getType() {
      io.littlehorse.sdk.common.proto.ThreadType result = io.littlehorse.sdk.common.proto.ThreadType.forNumber(type_);
      return result == null ? io.littlehorse.sdk.common.proto.ThreadType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The Type of this ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.ThreadType type = 15;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(io.littlehorse.sdk.common.proto.ThreadType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00004000;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Type of this ThreadRun.
     * </pre>
     *
     * <code>.littlehorse.ThreadType type = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00004000);
      type_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.ThreadRun)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.ThreadRun)
  private static final io.littlehorse.sdk.common.proto.ThreadRun DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.ThreadRun();
  }

  public static io.littlehorse.sdk.common.proto.ThreadRun getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ThreadRun>
      PARSER = new com.google.protobuf.AbstractParser<ThreadRun>() {
    @java.lang.Override
    public ThreadRun parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ThreadRun> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ThreadRun> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadRun getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

