// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wf_spec.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * Defines a blueprint for a ThreadRun, which is a thread of execution inside a
 * WfRun.
 * </pre>
 *
 * Protobuf type {@code littlehorse.ThreadSpec}
 */
public final class ThreadSpec extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.ThreadSpec)
    ThreadSpecOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ThreadSpec.newBuilder() to construct.
  private ThreadSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ThreadSpec() {
    variableDefs_ = java.util.Collections.emptyList();
    interruptDefs_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ThreadSpec();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_ThreadSpec_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetNodes();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_ThreadSpec_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.ThreadSpec.class, io.littlehorse.sdk.common.proto.ThreadSpec.Builder.class);
  }

  private int bitField0_;
  public static final int NODES_FIELD_NUMBER = 1;
  private static final class NodesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, io.littlehorse.sdk.common.proto.Node> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, io.littlehorse.sdk.common.proto.Node>newDefaultInstance(
                io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_ThreadSpec_NodesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.littlehorse.sdk.common.proto.Node.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, io.littlehorse.sdk.common.proto.Node> nodes_;
  private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.Node>
  internalGetNodes() {
    if (nodes_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          NodesDefaultEntryHolder.defaultEntry);
    }
    return nodes_;
  }
  public int getNodesCount() {
    return internalGetNodes().getMap().size();
  }
  /**
   * <pre>
   * The Nodes inside this ThreadSpec. Maps from name to Node.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
   */
  @java.lang.Override
  public boolean containsNodes(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetNodes().getMap().containsKey(key);
  }
  /**
   * Use {@link #getNodesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> getNodes() {
    return getNodesMap();
  }
  /**
   * <pre>
   * The Nodes inside this ThreadSpec. Maps from name to Node.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> getNodesMap() {
    return internalGetNodes().getMap();
  }
  /**
   * <pre>
   * The Nodes inside this ThreadSpec. Maps from name to Node.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
   */
  @java.lang.Override
  public /* nullable */
io.littlehorse.sdk.common.proto.Node getNodesOrDefault(
      java.lang.String key,
      /* nullable */
io.littlehorse.sdk.common.proto.Node defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> map =
        internalGetNodes().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * The Nodes inside this ThreadSpec. Maps from name to Node.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.Node getNodesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> map =
        internalGetNodes().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int VARIABLE_DEFS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.ThreadVarDef> variableDefs_;
  /**
   * <pre>
   * Defines Variables that are local to ThreadRun's of this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.ThreadVarDef> getVariableDefsList() {
    return variableDefs_;
  }
  /**
   * <pre>
   * Defines Variables that are local to ThreadRun's of this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder> 
      getVariableDefsOrBuilderList() {
    return variableDefs_;
  }
  /**
   * <pre>
   * Defines Variables that are local to ThreadRun's of this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
   */
  @java.lang.Override
  public int getVariableDefsCount() {
    return variableDefs_.size();
  }
  /**
   * <pre>
   * Defines Variables that are local to ThreadRun's of this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadVarDef getVariableDefs(int index) {
    return variableDefs_.get(index);
  }
  /**
   * <pre>
   * Defines Variables that are local to ThreadRun's of this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder getVariableDefsOrBuilder(
      int index) {
    return variableDefs_.get(index);
  }

  public static final int INTERRUPT_DEFS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.InterruptDef> interruptDefs_;
  /**
   * <pre>
   * Defines all interrupts for this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.InterruptDef> getInterruptDefsList() {
    return interruptDefs_;
  }
  /**
   * <pre>
   * Defines all interrupts for this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.InterruptDefOrBuilder> 
      getInterruptDefsOrBuilderList() {
    return interruptDefs_;
  }
  /**
   * <pre>
   * Defines all interrupts for this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
   */
  @java.lang.Override
  public int getInterruptDefsCount() {
    return interruptDefs_.size();
  }
  /**
   * <pre>
   * Defines all interrupts for this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.InterruptDef getInterruptDefs(int index) {
    return interruptDefs_.get(index);
  }
  /**
   * <pre>
   * Defines all interrupts for this ThreadSpec.
   * </pre>
   *
   * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.InterruptDefOrBuilder getInterruptDefsOrBuilder(
      int index) {
    return interruptDefs_.get(index);
  }

  public static final int RETENTION_POLICY_FIELD_NUMBER = 4;
  private io.littlehorse.sdk.common.proto.ThreadRetentionPolicy retentionPolicy_;
  /**
   * <pre>
   * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
   * have been completed. This is important for long-lived WfRun's that could have
   * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
   * </pre>
   *
   * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
   * @return Whether the retentionPolicy field is set.
   */
  @java.lang.Override
  public boolean hasRetentionPolicy() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
   * have been completed. This is important for long-lived WfRun's that could have
   * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
   * </pre>
   *
   * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
   * @return The retentionPolicy.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadRetentionPolicy getRetentionPolicy() {
    return retentionPolicy_ == null ? io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.getDefaultInstance() : retentionPolicy_;
  }
  /**
   * <pre>
   * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
   * have been completed. This is important for long-lived WfRun's that could have
   * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
   * </pre>
   *
   * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadRetentionPolicyOrBuilder getRetentionPolicyOrBuilder() {
    return retentionPolicy_ == null ? io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.getDefaultInstance() : retentionPolicy_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetNodes(),
        NodesDefaultEntryHolder.defaultEntry,
        1);
    for (int i = 0; i < variableDefs_.size(); i++) {
      output.writeMessage(2, variableDefs_.get(i));
    }
    for (int i = 0; i < interruptDefs_.size(); i++) {
      output.writeMessage(3, interruptDefs_.get(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(4, getRetentionPolicy());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, io.littlehorse.sdk.common.proto.Node> entry
         : internalGetNodes().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.littlehorse.sdk.common.proto.Node>
      nodes__ = NodesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, nodes__);
    }
    for (int i = 0; i < variableDefs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, variableDefs_.get(i));
    }
    for (int i = 0; i < interruptDefs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, interruptDefs_.get(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getRetentionPolicy());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.ThreadSpec)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.ThreadSpec other = (io.littlehorse.sdk.common.proto.ThreadSpec) obj;

    if (!internalGetNodes().equals(
        other.internalGetNodes())) return false;
    if (!getVariableDefsList()
        .equals(other.getVariableDefsList())) return false;
    if (!getInterruptDefsList()
        .equals(other.getInterruptDefsList())) return false;
    if (hasRetentionPolicy() != other.hasRetentionPolicy()) return false;
    if (hasRetentionPolicy()) {
      if (!getRetentionPolicy()
          .equals(other.getRetentionPolicy())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetNodes().getMap().isEmpty()) {
      hash = (37 * hash) + NODES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetNodes().hashCode();
    }
    if (getVariableDefsCount() > 0) {
      hash = (37 * hash) + VARIABLE_DEFS_FIELD_NUMBER;
      hash = (53 * hash) + getVariableDefsList().hashCode();
    }
    if (getInterruptDefsCount() > 0) {
      hash = (37 * hash) + INTERRUPT_DEFS_FIELD_NUMBER;
      hash = (53 * hash) + getInterruptDefsList().hashCode();
    }
    if (hasRetentionPolicy()) {
      hash = (37 * hash) + RETENTION_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getRetentionPolicy().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.ThreadSpec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.ThreadSpec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.ThreadSpec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.ThreadSpec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Defines a blueprint for a ThreadRun, which is a thread of execution inside a
   * WfRun.
   * </pre>
   *
   * Protobuf type {@code littlehorse.ThreadSpec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.ThreadSpec)
      io.littlehorse.sdk.common.proto.ThreadSpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_ThreadSpec_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetNodes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableNodes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_ThreadSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.ThreadSpec.class, io.littlehorse.sdk.common.proto.ThreadSpec.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.ThreadSpec.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getVariableDefsFieldBuilder();
        getInterruptDefsFieldBuilder();
        getRetentionPolicyFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableNodes().clear();
      if (variableDefsBuilder_ == null) {
        variableDefs_ = java.util.Collections.emptyList();
      } else {
        variableDefs_ = null;
        variableDefsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (interruptDefsBuilder_ == null) {
        interruptDefs_ = java.util.Collections.emptyList();
      } else {
        interruptDefs_ = null;
        interruptDefsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      retentionPolicy_ = null;
      if (retentionPolicyBuilder_ != null) {
        retentionPolicyBuilder_.dispose();
        retentionPolicyBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_ThreadSpec_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.ThreadSpec getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.ThreadSpec.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.ThreadSpec build() {
      io.littlehorse.sdk.common.proto.ThreadSpec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.ThreadSpec buildPartial() {
      io.littlehorse.sdk.common.proto.ThreadSpec result = new io.littlehorse.sdk.common.proto.ThreadSpec(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.littlehorse.sdk.common.proto.ThreadSpec result) {
      if (variableDefsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          variableDefs_ = java.util.Collections.unmodifiableList(variableDefs_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.variableDefs_ = variableDefs_;
      } else {
        result.variableDefs_ = variableDefsBuilder_.build();
      }
      if (interruptDefsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          interruptDefs_ = java.util.Collections.unmodifiableList(interruptDefs_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.interruptDefs_ = interruptDefs_;
      } else {
        result.interruptDefs_ = interruptDefsBuilder_.build();
      }
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.ThreadSpec result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.nodes_ = internalGetNodes();
        result.nodes_.makeImmutable();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.retentionPolicy_ = retentionPolicyBuilder_ == null
            ? retentionPolicy_
            : retentionPolicyBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.ThreadSpec) {
        return mergeFrom((io.littlehorse.sdk.common.proto.ThreadSpec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.ThreadSpec other) {
      if (other == io.littlehorse.sdk.common.proto.ThreadSpec.getDefaultInstance()) return this;
      internalGetMutableNodes().mergeFrom(
          other.internalGetNodes());
      bitField0_ |= 0x00000001;
      if (variableDefsBuilder_ == null) {
        if (!other.variableDefs_.isEmpty()) {
          if (variableDefs_.isEmpty()) {
            variableDefs_ = other.variableDefs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureVariableDefsIsMutable();
            variableDefs_.addAll(other.variableDefs_);
          }
          onChanged();
        }
      } else {
        if (!other.variableDefs_.isEmpty()) {
          if (variableDefsBuilder_.isEmpty()) {
            variableDefsBuilder_.dispose();
            variableDefsBuilder_ = null;
            variableDefs_ = other.variableDefs_;
            bitField0_ = (bitField0_ & ~0x00000002);
            variableDefsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getVariableDefsFieldBuilder() : null;
          } else {
            variableDefsBuilder_.addAllMessages(other.variableDefs_);
          }
        }
      }
      if (interruptDefsBuilder_ == null) {
        if (!other.interruptDefs_.isEmpty()) {
          if (interruptDefs_.isEmpty()) {
            interruptDefs_ = other.interruptDefs_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInterruptDefsIsMutable();
            interruptDefs_.addAll(other.interruptDefs_);
          }
          onChanged();
        }
      } else {
        if (!other.interruptDefs_.isEmpty()) {
          if (interruptDefsBuilder_.isEmpty()) {
            interruptDefsBuilder_.dispose();
            interruptDefsBuilder_ = null;
            interruptDefs_ = other.interruptDefs_;
            bitField0_ = (bitField0_ & ~0x00000004);
            interruptDefsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInterruptDefsFieldBuilder() : null;
          } else {
            interruptDefsBuilder_.addAllMessages(other.interruptDefs_);
          }
        }
      }
      if (other.hasRetentionPolicy()) {
        mergeRetentionPolicy(other.getRetentionPolicy());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.MapEntry<java.lang.String, io.littlehorse.sdk.common.proto.Node>
              nodes__ = input.readMessage(
                  NodesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableNodes().getMutableMap().put(
                  nodes__.getKey(), nodes__.getValue());
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              io.littlehorse.sdk.common.proto.ThreadVarDef m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.ThreadVarDef.parser(),
                      extensionRegistry);
              if (variableDefsBuilder_ == null) {
                ensureVariableDefsIsMutable();
                variableDefs_.add(m);
              } else {
                variableDefsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              io.littlehorse.sdk.common.proto.InterruptDef m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.InterruptDef.parser(),
                      extensionRegistry);
              if (interruptDefsBuilder_ == null) {
                ensureInterruptDefsIsMutable();
                interruptDefs_.add(m);
              } else {
                interruptDefsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getRetentionPolicyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, io.littlehorse.sdk.common.proto.Node> nodes_;
    private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.Node>
        internalGetNodes() {
      if (nodes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NodesDefaultEntryHolder.defaultEntry);
      }
      return nodes_;
    }
    private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.Node>
        internalGetMutableNodes() {
      if (nodes_ == null) {
        nodes_ = com.google.protobuf.MapField.newMapField(
            NodesDefaultEntryHolder.defaultEntry);
      }
      if (!nodes_.isMutable()) {
        nodes_ = nodes_.copy();
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return nodes_;
    }
    public int getNodesCount() {
      return internalGetNodes().getMap().size();
    }
    /**
     * <pre>
     * The Nodes inside this ThreadSpec. Maps from name to Node.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
     */
    @java.lang.Override
    public boolean containsNodes(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetNodes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNodesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> getNodes() {
      return getNodesMap();
    }
    /**
     * <pre>
     * The Nodes inside this ThreadSpec. Maps from name to Node.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> getNodesMap() {
      return internalGetNodes().getMap();
    }
    /**
     * <pre>
     * The Nodes inside this ThreadSpec. Maps from name to Node.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
     */
    @java.lang.Override
    public /* nullable */
io.littlehorse.sdk.common.proto.Node getNodesOrDefault(
        java.lang.String key,
        /* nullable */
io.littlehorse.sdk.common.proto.Node defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> map =
          internalGetNodes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The Nodes inside this ThreadSpec. Maps from name to Node.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.Node getNodesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> map =
          internalGetNodes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearNodes() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableNodes().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * The Nodes inside this ThreadSpec. Maps from name to Node.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
     */
    public Builder removeNodes(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableNodes().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node>
        getMutableNodes() {
      bitField0_ |= 0x00000001;
      return internalGetMutableNodes().getMutableMap();
    }
    /**
     * <pre>
     * The Nodes inside this ThreadSpec. Maps from name to Node.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
     */
    public Builder putNodes(
        java.lang.String key,
        io.littlehorse.sdk.common.proto.Node value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableNodes().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * The Nodes inside this ThreadSpec. Maps from name to Node.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.Node&gt; nodes = 1;</code>
     */
    public Builder putAllNodes(
        java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.Node> values) {
      internalGetMutableNodes().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.ThreadVarDef> variableDefs_ =
      java.util.Collections.emptyList();
    private void ensureVariableDefsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        variableDefs_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.ThreadVarDef>(variableDefs_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadVarDef, io.littlehorse.sdk.common.proto.ThreadVarDef.Builder, io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder> variableDefsBuilder_;

    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.ThreadVarDef> getVariableDefsList() {
      if (variableDefsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(variableDefs_);
      } else {
        return variableDefsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public int getVariableDefsCount() {
      if (variableDefsBuilder_ == null) {
        return variableDefs_.size();
      } else {
        return variableDefsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadVarDef getVariableDefs(int index) {
      if (variableDefsBuilder_ == null) {
        return variableDefs_.get(index);
      } else {
        return variableDefsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder setVariableDefs(
        int index, io.littlehorse.sdk.common.proto.ThreadVarDef value) {
      if (variableDefsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVariableDefsIsMutable();
        variableDefs_.set(index, value);
        onChanged();
      } else {
        variableDefsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder setVariableDefs(
        int index, io.littlehorse.sdk.common.proto.ThreadVarDef.Builder builderForValue) {
      if (variableDefsBuilder_ == null) {
        ensureVariableDefsIsMutable();
        variableDefs_.set(index, builderForValue.build());
        onChanged();
      } else {
        variableDefsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder addVariableDefs(io.littlehorse.sdk.common.proto.ThreadVarDef value) {
      if (variableDefsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVariableDefsIsMutable();
        variableDefs_.add(value);
        onChanged();
      } else {
        variableDefsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder addVariableDefs(
        int index, io.littlehorse.sdk.common.proto.ThreadVarDef value) {
      if (variableDefsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVariableDefsIsMutable();
        variableDefs_.add(index, value);
        onChanged();
      } else {
        variableDefsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder addVariableDefs(
        io.littlehorse.sdk.common.proto.ThreadVarDef.Builder builderForValue) {
      if (variableDefsBuilder_ == null) {
        ensureVariableDefsIsMutable();
        variableDefs_.add(builderForValue.build());
        onChanged();
      } else {
        variableDefsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder addVariableDefs(
        int index, io.littlehorse.sdk.common.proto.ThreadVarDef.Builder builderForValue) {
      if (variableDefsBuilder_ == null) {
        ensureVariableDefsIsMutable();
        variableDefs_.add(index, builderForValue.build());
        onChanged();
      } else {
        variableDefsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder addAllVariableDefs(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.ThreadVarDef> values) {
      if (variableDefsBuilder_ == null) {
        ensureVariableDefsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, variableDefs_);
        onChanged();
      } else {
        variableDefsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder clearVariableDefs() {
      if (variableDefsBuilder_ == null) {
        variableDefs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        variableDefsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public Builder removeVariableDefs(int index) {
      if (variableDefsBuilder_ == null) {
        ensureVariableDefsIsMutable();
        variableDefs_.remove(index);
        onChanged();
      } else {
        variableDefsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadVarDef.Builder getVariableDefsBuilder(
        int index) {
      return getVariableDefsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder getVariableDefsOrBuilder(
        int index) {
      if (variableDefsBuilder_ == null) {
        return variableDefs_.get(index);  } else {
        return variableDefsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder> 
         getVariableDefsOrBuilderList() {
      if (variableDefsBuilder_ != null) {
        return variableDefsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(variableDefs_);
      }
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadVarDef.Builder addVariableDefsBuilder() {
      return getVariableDefsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.ThreadVarDef.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadVarDef.Builder addVariableDefsBuilder(
        int index) {
      return getVariableDefsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.ThreadVarDef.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines Variables that are local to ThreadRun's of this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadVarDef variable_defs = 2;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.ThreadVarDef.Builder> 
         getVariableDefsBuilderList() {
      return getVariableDefsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadVarDef, io.littlehorse.sdk.common.proto.ThreadVarDef.Builder, io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder> 
        getVariableDefsFieldBuilder() {
      if (variableDefsBuilder_ == null) {
        variableDefsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.ThreadVarDef, io.littlehorse.sdk.common.proto.ThreadVarDef.Builder, io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder>(
                variableDefs_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        variableDefs_ = null;
      }
      return variableDefsBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.InterruptDef> interruptDefs_ =
      java.util.Collections.emptyList();
    private void ensureInterruptDefsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        interruptDefs_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.InterruptDef>(interruptDefs_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.InterruptDef, io.littlehorse.sdk.common.proto.InterruptDef.Builder, io.littlehorse.sdk.common.proto.InterruptDefOrBuilder> interruptDefsBuilder_;

    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.InterruptDef> getInterruptDefsList() {
      if (interruptDefsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(interruptDefs_);
      } else {
        return interruptDefsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public int getInterruptDefsCount() {
      if (interruptDefsBuilder_ == null) {
        return interruptDefs_.size();
      } else {
        return interruptDefsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.InterruptDef getInterruptDefs(int index) {
      if (interruptDefsBuilder_ == null) {
        return interruptDefs_.get(index);
      } else {
        return interruptDefsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder setInterruptDefs(
        int index, io.littlehorse.sdk.common.proto.InterruptDef value) {
      if (interruptDefsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterruptDefsIsMutable();
        interruptDefs_.set(index, value);
        onChanged();
      } else {
        interruptDefsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder setInterruptDefs(
        int index, io.littlehorse.sdk.common.proto.InterruptDef.Builder builderForValue) {
      if (interruptDefsBuilder_ == null) {
        ensureInterruptDefsIsMutable();
        interruptDefs_.set(index, builderForValue.build());
        onChanged();
      } else {
        interruptDefsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder addInterruptDefs(io.littlehorse.sdk.common.proto.InterruptDef value) {
      if (interruptDefsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterruptDefsIsMutable();
        interruptDefs_.add(value);
        onChanged();
      } else {
        interruptDefsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder addInterruptDefs(
        int index, io.littlehorse.sdk.common.proto.InterruptDef value) {
      if (interruptDefsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInterruptDefsIsMutable();
        interruptDefs_.add(index, value);
        onChanged();
      } else {
        interruptDefsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder addInterruptDefs(
        io.littlehorse.sdk.common.proto.InterruptDef.Builder builderForValue) {
      if (interruptDefsBuilder_ == null) {
        ensureInterruptDefsIsMutable();
        interruptDefs_.add(builderForValue.build());
        onChanged();
      } else {
        interruptDefsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder addInterruptDefs(
        int index, io.littlehorse.sdk.common.proto.InterruptDef.Builder builderForValue) {
      if (interruptDefsBuilder_ == null) {
        ensureInterruptDefsIsMutable();
        interruptDefs_.add(index, builderForValue.build());
        onChanged();
      } else {
        interruptDefsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder addAllInterruptDefs(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.InterruptDef> values) {
      if (interruptDefsBuilder_ == null) {
        ensureInterruptDefsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, interruptDefs_);
        onChanged();
      } else {
        interruptDefsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder clearInterruptDefs() {
      if (interruptDefsBuilder_ == null) {
        interruptDefs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        interruptDefsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public Builder removeInterruptDefs(int index) {
      if (interruptDefsBuilder_ == null) {
        ensureInterruptDefsIsMutable();
        interruptDefs_.remove(index);
        onChanged();
      } else {
        interruptDefsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.InterruptDef.Builder getInterruptDefsBuilder(
        int index) {
      return getInterruptDefsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.InterruptDefOrBuilder getInterruptDefsOrBuilder(
        int index) {
      if (interruptDefsBuilder_ == null) {
        return interruptDefs_.get(index);  } else {
        return interruptDefsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.InterruptDefOrBuilder> 
         getInterruptDefsOrBuilderList() {
      if (interruptDefsBuilder_ != null) {
        return interruptDefsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(interruptDefs_);
      }
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.InterruptDef.Builder addInterruptDefsBuilder() {
      return getInterruptDefsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.InterruptDef.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.InterruptDef.Builder addInterruptDefsBuilder(
        int index) {
      return getInterruptDefsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.InterruptDef.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines all interrupts for this ThreadSpec.
     * </pre>
     *
     * <code>repeated .littlehorse.InterruptDef interrupt_defs = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.InterruptDef.Builder> 
         getInterruptDefsBuilderList() {
      return getInterruptDefsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.InterruptDef, io.littlehorse.sdk.common.proto.InterruptDef.Builder, io.littlehorse.sdk.common.proto.InterruptDefOrBuilder> 
        getInterruptDefsFieldBuilder() {
      if (interruptDefsBuilder_ == null) {
        interruptDefsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.InterruptDef, io.littlehorse.sdk.common.proto.InterruptDef.Builder, io.littlehorse.sdk.common.proto.InterruptDefOrBuilder>(
                interruptDefs_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        interruptDefs_ = null;
      }
      return interruptDefsBuilder_;
    }

    private io.littlehorse.sdk.common.proto.ThreadRetentionPolicy retentionPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadRetentionPolicy, io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.Builder, io.littlehorse.sdk.common.proto.ThreadRetentionPolicyOrBuilder> retentionPolicyBuilder_;
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     * @return Whether the retentionPolicy field is set.
     */
    public boolean hasRetentionPolicy() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     * @return The retentionPolicy.
     */
    public io.littlehorse.sdk.common.proto.ThreadRetentionPolicy getRetentionPolicy() {
      if (retentionPolicyBuilder_ == null) {
        return retentionPolicy_ == null ? io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.getDefaultInstance() : retentionPolicy_;
      } else {
        return retentionPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     */
    public Builder setRetentionPolicy(io.littlehorse.sdk.common.proto.ThreadRetentionPolicy value) {
      if (retentionPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        retentionPolicy_ = value;
      } else {
        retentionPolicyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     */
    public Builder setRetentionPolicy(
        io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.Builder builderForValue) {
      if (retentionPolicyBuilder_ == null) {
        retentionPolicy_ = builderForValue.build();
      } else {
        retentionPolicyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     */
    public Builder mergeRetentionPolicy(io.littlehorse.sdk.common.proto.ThreadRetentionPolicy value) {
      if (retentionPolicyBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          retentionPolicy_ != null &&
          retentionPolicy_ != io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.getDefaultInstance()) {
          getRetentionPolicyBuilder().mergeFrom(value);
        } else {
          retentionPolicy_ = value;
        }
      } else {
        retentionPolicyBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     */
    public Builder clearRetentionPolicy() {
      bitField0_ = (bitField0_ & ~0x00000008);
      retentionPolicy_ = null;
      if (retentionPolicyBuilder_ != null) {
        retentionPolicyBuilder_.dispose();
        retentionPolicyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.Builder getRetentionPolicyBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getRetentionPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadRetentionPolicyOrBuilder getRetentionPolicyOrBuilder() {
      if (retentionPolicyBuilder_ != null) {
        return retentionPolicyBuilder_.getMessageOrBuilder();
      } else {
        return retentionPolicy_ == null ?
            io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.getDefaultInstance() : retentionPolicy_;
      }
    }
    /**
     * <pre>
     * Optional retention policy to clean up ThreadRun's of this ThreadSpec after they
     * have been completed. This is important for long-lived WfRun's that could have
     * hundreds of ThreadRun's, because a ThreadRun has a record inside the WfRun itself.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadRetentionPolicy retention_policy = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadRetentionPolicy, io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.Builder, io.littlehorse.sdk.common.proto.ThreadRetentionPolicyOrBuilder> 
        getRetentionPolicyFieldBuilder() {
      if (retentionPolicyBuilder_ == null) {
        retentionPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.ThreadRetentionPolicy, io.littlehorse.sdk.common.proto.ThreadRetentionPolicy.Builder, io.littlehorse.sdk.common.proto.ThreadRetentionPolicyOrBuilder>(
                getRetentionPolicy(),
                getParentForChildren(),
                isClean());
        retentionPolicy_ = null;
      }
      return retentionPolicyBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.ThreadSpec)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.ThreadSpec)
  private static final io.littlehorse.sdk.common.proto.ThreadSpec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.ThreadSpec();
  }

  public static io.littlehorse.sdk.common.proto.ThreadSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ThreadSpec>
      PARSER = new com.google.protobuf.AbstractParser<ThreadSpec>() {
    @java.lang.Override
    public ThreadSpec parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ThreadSpec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ThreadSpec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadSpec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

