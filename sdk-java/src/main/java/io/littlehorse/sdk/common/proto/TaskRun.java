// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_run.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * A TaskRun resents a single instance of a TaskDef being executed.
 * </pre>
 *
 * Protobuf type {@code littlehorse.TaskRun}
 */
public final class TaskRun extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.TaskRun)
    TaskRunOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TaskRun.newBuilder() to construct.
  private TaskRun(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TaskRun() {
    attempts_ = java.util.Collections.emptyList();
    inputVariables_ = java.util.Collections.emptyList();
    status_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TaskRun();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.TaskRunOuterClass.internal_static_littlehorse_TaskRun_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.TaskRunOuterClass.internal_static_littlehorse_TaskRun_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.TaskRun.class, io.littlehorse.sdk.common.proto.TaskRun.Builder.class);
  }

  private int bitField0_;
  public static final int ID_FIELD_NUMBER = 1;
  private io.littlehorse.sdk.common.proto.TaskRunId id_;
  /**
   * <pre>
   * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
   * </pre>
   *
   * <code>.littlehorse.TaskRunId id = 1;</code>
   * @return Whether the id field is set.
   */
  @java.lang.Override
  public boolean hasId() {
    return id_ != null;
  }
  /**
   * <pre>
   * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
   * </pre>
   *
   * <code>.littlehorse.TaskRunId id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskRunId getId() {
    return id_ == null ? io.littlehorse.sdk.common.proto.TaskRunId.getDefaultInstance() : id_;
  }
  /**
   * <pre>
   * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
   * </pre>
   *
   * <code>.littlehorse.TaskRunId id = 1;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskRunIdOrBuilder getIdOrBuilder() {
    return id_ == null ? io.littlehorse.sdk.common.proto.TaskRunId.getDefaultInstance() : id_;
  }

  public static final int TASK_DEF_ID_FIELD_NUMBER = 2;
  private io.littlehorse.sdk.common.proto.TaskDefId taskDefId_;
  /**
   * <pre>
   * The ID of the TaskDef being executed.
   * </pre>
   *
   * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
   * @return Whether the taskDefId field is set.
   */
  @java.lang.Override
  public boolean hasTaskDefId() {
    return taskDefId_ != null;
  }
  /**
   * <pre>
   * The ID of the TaskDef being executed.
   * </pre>
   *
   * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
   * @return The taskDefId.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskDefId getTaskDefId() {
    return taskDefId_ == null ? io.littlehorse.sdk.common.proto.TaskDefId.getDefaultInstance() : taskDefId_;
  }
  /**
   * <pre>
   * The ID of the TaskDef being executed.
   * </pre>
   *
   * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskDefIdOrBuilder getTaskDefIdOrBuilder() {
    return taskDefId_ == null ? io.littlehorse.sdk.common.proto.TaskDefId.getDefaultInstance() : taskDefId_;
  }

  public static final int ATTEMPTS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.TaskAttempt> attempts_;
  /**
   * <pre>
   * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
   * the TaskRun being put on a Task Queue to be executed by the Task Workers.
   * </pre>
   *
   * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.TaskAttempt> getAttemptsList() {
    return attempts_;
  }
  /**
   * <pre>
   * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
   * the TaskRun being put on a Task Queue to be executed by the Task Workers.
   * </pre>
   *
   * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.TaskAttemptOrBuilder> 
      getAttemptsOrBuilderList() {
    return attempts_;
  }
  /**
   * <pre>
   * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
   * the TaskRun being put on a Task Queue to be executed by the Task Workers.
   * </pre>
   *
   * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
   */
  @java.lang.Override
  public int getAttemptsCount() {
    return attempts_.size();
  }
  /**
   * <pre>
   * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
   * the TaskRun being put on a Task Queue to be executed by the Task Workers.
   * </pre>
   *
   * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskAttempt getAttempts(int index) {
    return attempts_.get(index);
  }
  /**
   * <pre>
   * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
   * the TaskRun being put on a Task Queue to be executed by the Task Workers.
   * </pre>
   *
   * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskAttemptOrBuilder getAttemptsOrBuilder(
      int index) {
    return attempts_.get(index);
  }

  public static final int INPUT_VARIABLES_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.VarNameAndVal> inputVariables_;
  /**
   * <pre>
   * The input variables to pass into this TaskRun. Note that this is a list and not
   * a map, because ordering matters. Depending on the language implementation, not
   * every LittleHorse Task Worker SDK has the ability to determine the names of the
   * variables from the method signature, so we provide both names and ordering.
   * </pre>
   *
   * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.VarNameAndVal> getInputVariablesList() {
    return inputVariables_;
  }
  /**
   * <pre>
   * The input variables to pass into this TaskRun. Note that this is a list and not
   * a map, because ordering matters. Depending on the language implementation, not
   * every LittleHorse Task Worker SDK has the ability to determine the names of the
   * variables from the method signature, so we provide both names and ordering.
   * </pre>
   *
   * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.VarNameAndValOrBuilder> 
      getInputVariablesOrBuilderList() {
    return inputVariables_;
  }
  /**
   * <pre>
   * The input variables to pass into this TaskRun. Note that this is a list and not
   * a map, because ordering matters. Depending on the language implementation, not
   * every LittleHorse Task Worker SDK has the ability to determine the names of the
   * variables from the method signature, so we provide both names and ordering.
   * </pre>
   *
   * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
   */
  @java.lang.Override
  public int getInputVariablesCount() {
    return inputVariables_.size();
  }
  /**
   * <pre>
   * The input variables to pass into this TaskRun. Note that this is a list and not
   * a map, because ordering matters. Depending on the language implementation, not
   * every LittleHorse Task Worker SDK has the ability to determine the names of the
   * variables from the method signature, so we provide both names and ordering.
   * </pre>
   *
   * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.VarNameAndVal getInputVariables(int index) {
    return inputVariables_.get(index);
  }
  /**
   * <pre>
   * The input variables to pass into this TaskRun. Note that this is a list and not
   * a map, because ordering matters. Depending on the language implementation, not
   * every LittleHorse Task Worker SDK has the ability to determine the names of the
   * variables from the method signature, so we provide both names and ordering.
   * </pre>
   *
   * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.VarNameAndValOrBuilder getInputVariablesOrBuilder(
      int index) {
    return inputVariables_.get(index);
  }

  public static final int SOURCE_FIELD_NUMBER = 6;
  private io.littlehorse.sdk.common.proto.TaskRunSource source_;
  /**
   * <pre>
   * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
   * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
   * as a task used to send reminders).
   * </pre>
   *
   * <code>.littlehorse.TaskRunSource source = 6;</code>
   * @return Whether the source field is set.
   */
  @java.lang.Override
  public boolean hasSource() {
    return source_ != null;
  }
  /**
   * <pre>
   * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
   * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
   * as a task used to send reminders).
   * </pre>
   *
   * <code>.littlehorse.TaskRunSource source = 6;</code>
   * @return The source.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskRunSource getSource() {
    return source_ == null ? io.littlehorse.sdk.common.proto.TaskRunSource.getDefaultInstance() : source_;
  }
  /**
   * <pre>
   * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
   * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
   * as a task used to send reminders).
   * </pre>
   *
   * <code>.littlehorse.TaskRunSource source = 6;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskRunSourceOrBuilder getSourceOrBuilder() {
    return source_ == null ? io.littlehorse.sdk.common.proto.TaskRunSource.getDefaultInstance() : source_;
  }

  public static final int SCHEDULED_AT_FIELD_NUMBER = 7;
  private com.google.protobuf.Timestamp scheduledAt_;
  /**
   * <pre>
   * When the TaskRun was scheduled.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
   * @return Whether the scheduledAt field is set.
   */
  @java.lang.Override
  public boolean hasScheduledAt() {
    return scheduledAt_ != null;
  }
  /**
   * <pre>
   * When the TaskRun was scheduled.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
   * @return The scheduledAt.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getScheduledAt() {
    return scheduledAt_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : scheduledAt_;
  }
  /**
   * <pre>
   * When the TaskRun was scheduled.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getScheduledAtOrBuilder() {
    return scheduledAt_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : scheduledAt_;
  }

  public static final int STATUS_FIELD_NUMBER = 8;
  private int status_ = 0;
  /**
   * <pre>
   * The status of the TaskRun.
   * </pre>
   *
   * <code>.littlehorse.TaskStatus status = 8;</code>
   * @return The enum numeric value on the wire for status.
   */
  @java.lang.Override public int getStatusValue() {
    return status_;
  }
  /**
   * <pre>
   * The status of the TaskRun.
   * </pre>
   *
   * <code>.littlehorse.TaskStatus status = 8;</code>
   * @return The status.
   */
  @java.lang.Override public io.littlehorse.sdk.common.proto.TaskStatus getStatus() {
    io.littlehorse.sdk.common.proto.TaskStatus result = io.littlehorse.sdk.common.proto.TaskStatus.forNumber(status_);
    return result == null ? io.littlehorse.sdk.common.proto.TaskStatus.UNRECOGNIZED : result;
  }

  public static final int TIMEOUT_SECONDS_FIELD_NUMBER = 9;
  private int timeoutSeconds_ = 0;
  /**
   * <pre>
   * The timeout before LH considers a TaskAttempt to be timed out.
   * </pre>
   *
   * <code>int32 timeout_seconds = 9;</code>
   * @return The timeoutSeconds.
   */
  @java.lang.Override
  public int getTimeoutSeconds() {
    return timeoutSeconds_;
  }

  public static final int TOTAL_ATTEMPTS_FIELD_NUMBER = 4;
  private int totalAttempts_ = 0;
  /**
   * <pre>
   * The maximum number of attempts that may be scheduled for this TaskRun. NOTE: setting
   * total_attempts to 1 means that there are no retries.
   * </pre>
   *
   * <code>int32 total_attempts = 4;</code>
   * @return The totalAttempts.
   */
  @java.lang.Override
  public int getTotalAttempts() {
    return totalAttempts_;
  }

  public static final int EXPONENTIAL_BACKOFF_FIELD_NUMBER = 10;
  private io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy exponentialBackoff_;
  /**
   * <pre>
   * Optional backoff policy .
   * </pre>
   *
   * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
   * @return Whether the exponentialBackoff field is set.
   */
  @java.lang.Override
  public boolean hasExponentialBackoff() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Optional backoff policy .
   * </pre>
   *
   * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
   * @return The exponentialBackoff.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy getExponentialBackoff() {
    return exponentialBackoff_ == null ? io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.getDefaultInstance() : exponentialBackoff_;
  }
  /**
   * <pre>
   * Optional backoff policy .
   * </pre>
   *
   * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicyOrBuilder getExponentialBackoffOrBuilder() {
    return exponentialBackoff_ == null ? io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.getDefaultInstance() : exponentialBackoff_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != null) {
      output.writeMessage(1, getId());
    }
    if (taskDefId_ != null) {
      output.writeMessage(2, getTaskDefId());
    }
    for (int i = 0; i < attempts_.size(); i++) {
      output.writeMessage(3, attempts_.get(i));
    }
    if (totalAttempts_ != 0) {
      output.writeInt32(4, totalAttempts_);
    }
    for (int i = 0; i < inputVariables_.size(); i++) {
      output.writeMessage(5, inputVariables_.get(i));
    }
    if (source_ != null) {
      output.writeMessage(6, getSource());
    }
    if (scheduledAt_ != null) {
      output.writeMessage(7, getScheduledAt());
    }
    if (status_ != io.littlehorse.sdk.common.proto.TaskStatus.TASK_SCHEDULED.getNumber()) {
      output.writeEnum(8, status_);
    }
    if (timeoutSeconds_ != 0) {
      output.writeInt32(9, timeoutSeconds_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(10, getExponentialBackoff());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getId());
    }
    if (taskDefId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getTaskDefId());
    }
    for (int i = 0; i < attempts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, attempts_.get(i));
    }
    if (totalAttempts_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, totalAttempts_);
    }
    for (int i = 0; i < inputVariables_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, inputVariables_.get(i));
    }
    if (source_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getSource());
    }
    if (scheduledAt_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getScheduledAt());
    }
    if (status_ != io.littlehorse.sdk.common.proto.TaskStatus.TASK_SCHEDULED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, status_);
    }
    if (timeoutSeconds_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, timeoutSeconds_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getExponentialBackoff());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.TaskRun)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.TaskRun other = (io.littlehorse.sdk.common.proto.TaskRun) obj;

    if (hasId() != other.hasId()) return false;
    if (hasId()) {
      if (!getId()
          .equals(other.getId())) return false;
    }
    if (hasTaskDefId() != other.hasTaskDefId()) return false;
    if (hasTaskDefId()) {
      if (!getTaskDefId()
          .equals(other.getTaskDefId())) return false;
    }
    if (!getAttemptsList()
        .equals(other.getAttemptsList())) return false;
    if (!getInputVariablesList()
        .equals(other.getInputVariablesList())) return false;
    if (hasSource() != other.hasSource()) return false;
    if (hasSource()) {
      if (!getSource()
          .equals(other.getSource())) return false;
    }
    if (hasScheduledAt() != other.hasScheduledAt()) return false;
    if (hasScheduledAt()) {
      if (!getScheduledAt()
          .equals(other.getScheduledAt())) return false;
    }
    if (status_ != other.status_) return false;
    if (getTimeoutSeconds()
        != other.getTimeoutSeconds()) return false;
    if (getTotalAttempts()
        != other.getTotalAttempts()) return false;
    if (hasExponentialBackoff() != other.hasExponentialBackoff()) return false;
    if (hasExponentialBackoff()) {
      if (!getExponentialBackoff()
          .equals(other.getExponentialBackoff())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasId()) {
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
    }
    if (hasTaskDefId()) {
      hash = (37 * hash) + TASK_DEF_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTaskDefId().hashCode();
    }
    if (getAttemptsCount() > 0) {
      hash = (37 * hash) + ATTEMPTS_FIELD_NUMBER;
      hash = (53 * hash) + getAttemptsList().hashCode();
    }
    if (getInputVariablesCount() > 0) {
      hash = (37 * hash) + INPUT_VARIABLES_FIELD_NUMBER;
      hash = (53 * hash) + getInputVariablesList().hashCode();
    }
    if (hasSource()) {
      hash = (37 * hash) + SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getSource().hashCode();
    }
    if (hasScheduledAt()) {
      hash = (37 * hash) + SCHEDULED_AT_FIELD_NUMBER;
      hash = (53 * hash) + getScheduledAt().hashCode();
    }
    hash = (37 * hash) + STATUS_FIELD_NUMBER;
    hash = (53 * hash) + status_;
    hash = (37 * hash) + TIMEOUT_SECONDS_FIELD_NUMBER;
    hash = (53 * hash) + getTimeoutSeconds();
    hash = (37 * hash) + TOTAL_ATTEMPTS_FIELD_NUMBER;
    hash = (53 * hash) + getTotalAttempts();
    if (hasExponentialBackoff()) {
      hash = (37 * hash) + EXPONENTIAL_BACKOFF_FIELD_NUMBER;
      hash = (53 * hash) + getExponentialBackoff().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.TaskRun parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.TaskRun parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.TaskRun parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.TaskRun prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A TaskRun resents a single instance of a TaskDef being executed.
   * </pre>
   *
   * Protobuf type {@code littlehorse.TaskRun}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.TaskRun)
      io.littlehorse.sdk.common.proto.TaskRunOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.TaskRunOuterClass.internal_static_littlehorse_TaskRun_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.TaskRunOuterClass.internal_static_littlehorse_TaskRun_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.TaskRun.class, io.littlehorse.sdk.common.proto.TaskRun.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.TaskRun.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getIdFieldBuilder();
        getTaskDefIdFieldBuilder();
        getAttemptsFieldBuilder();
        getInputVariablesFieldBuilder();
        getSourceFieldBuilder();
        getScheduledAtFieldBuilder();
        getExponentialBackoffFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      id_ = null;
      if (idBuilder_ != null) {
        idBuilder_.dispose();
        idBuilder_ = null;
      }
      taskDefId_ = null;
      if (taskDefIdBuilder_ != null) {
        taskDefIdBuilder_.dispose();
        taskDefIdBuilder_ = null;
      }
      if (attemptsBuilder_ == null) {
        attempts_ = java.util.Collections.emptyList();
      } else {
        attempts_ = null;
        attemptsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (inputVariablesBuilder_ == null) {
        inputVariables_ = java.util.Collections.emptyList();
      } else {
        inputVariables_ = null;
        inputVariablesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      source_ = null;
      if (sourceBuilder_ != null) {
        sourceBuilder_.dispose();
        sourceBuilder_ = null;
      }
      scheduledAt_ = null;
      if (scheduledAtBuilder_ != null) {
        scheduledAtBuilder_.dispose();
        scheduledAtBuilder_ = null;
      }
      status_ = 0;
      timeoutSeconds_ = 0;
      totalAttempts_ = 0;
      exponentialBackoff_ = null;
      if (exponentialBackoffBuilder_ != null) {
        exponentialBackoffBuilder_.dispose();
        exponentialBackoffBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.TaskRunOuterClass.internal_static_littlehorse_TaskRun_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.TaskRun getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.TaskRun.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.TaskRun build() {
      io.littlehorse.sdk.common.proto.TaskRun result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.TaskRun buildPartial() {
      io.littlehorse.sdk.common.proto.TaskRun result = new io.littlehorse.sdk.common.proto.TaskRun(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.littlehorse.sdk.common.proto.TaskRun result) {
      if (attemptsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          attempts_ = java.util.Collections.unmodifiableList(attempts_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.attempts_ = attempts_;
      } else {
        result.attempts_ = attemptsBuilder_.build();
      }
      if (inputVariablesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          inputVariables_ = java.util.Collections.unmodifiableList(inputVariables_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.inputVariables_ = inputVariables_;
      } else {
        result.inputVariables_ = inputVariablesBuilder_.build();
      }
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.TaskRun result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.id_ = idBuilder_ == null
            ? id_
            : idBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.taskDefId_ = taskDefIdBuilder_ == null
            ? taskDefId_
            : taskDefIdBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.source_ = sourceBuilder_ == null
            ? source_
            : sourceBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.scheduledAt_ = scheduledAtBuilder_ == null
            ? scheduledAt_
            : scheduledAtBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.status_ = status_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.timeoutSeconds_ = timeoutSeconds_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.totalAttempts_ = totalAttempts_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.exponentialBackoff_ = exponentialBackoffBuilder_ == null
            ? exponentialBackoff_
            : exponentialBackoffBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.TaskRun) {
        return mergeFrom((io.littlehorse.sdk.common.proto.TaskRun)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.TaskRun other) {
      if (other == io.littlehorse.sdk.common.proto.TaskRun.getDefaultInstance()) return this;
      if (other.hasId()) {
        mergeId(other.getId());
      }
      if (other.hasTaskDefId()) {
        mergeTaskDefId(other.getTaskDefId());
      }
      if (attemptsBuilder_ == null) {
        if (!other.attempts_.isEmpty()) {
          if (attempts_.isEmpty()) {
            attempts_ = other.attempts_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureAttemptsIsMutable();
            attempts_.addAll(other.attempts_);
          }
          onChanged();
        }
      } else {
        if (!other.attempts_.isEmpty()) {
          if (attemptsBuilder_.isEmpty()) {
            attemptsBuilder_.dispose();
            attemptsBuilder_ = null;
            attempts_ = other.attempts_;
            bitField0_ = (bitField0_ & ~0x00000004);
            attemptsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAttemptsFieldBuilder() : null;
          } else {
            attemptsBuilder_.addAllMessages(other.attempts_);
          }
        }
      }
      if (inputVariablesBuilder_ == null) {
        if (!other.inputVariables_.isEmpty()) {
          if (inputVariables_.isEmpty()) {
            inputVariables_ = other.inputVariables_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInputVariablesIsMutable();
            inputVariables_.addAll(other.inputVariables_);
          }
          onChanged();
        }
      } else {
        if (!other.inputVariables_.isEmpty()) {
          if (inputVariablesBuilder_.isEmpty()) {
            inputVariablesBuilder_.dispose();
            inputVariablesBuilder_ = null;
            inputVariables_ = other.inputVariables_;
            bitField0_ = (bitField0_ & ~0x00000008);
            inputVariablesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInputVariablesFieldBuilder() : null;
          } else {
            inputVariablesBuilder_.addAllMessages(other.inputVariables_);
          }
        }
      }
      if (other.hasSource()) {
        mergeSource(other.getSource());
      }
      if (other.hasScheduledAt()) {
        mergeScheduledAt(other.getScheduledAt());
      }
      if (other.status_ != 0) {
        setStatusValue(other.getStatusValue());
      }
      if (other.getTimeoutSeconds() != 0) {
        setTimeoutSeconds(other.getTimeoutSeconds());
      }
      if (other.getTotalAttempts() != 0) {
        setTotalAttempts(other.getTotalAttempts());
      }
      if (other.hasExponentialBackoff()) {
        mergeExponentialBackoff(other.getExponentialBackoff());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getTaskDefIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              io.littlehorse.sdk.common.proto.TaskAttempt m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.TaskAttempt.parser(),
                      extensionRegistry);
              if (attemptsBuilder_ == null) {
                ensureAttemptsIsMutable();
                attempts_.add(m);
              } else {
                attemptsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 32: {
              totalAttempts_ = input.readInt32();
              bitField0_ |= 0x00000100;
              break;
            } // case 32
            case 42: {
              io.littlehorse.sdk.common.proto.VarNameAndVal m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.VarNameAndVal.parser(),
                      extensionRegistry);
              if (inputVariablesBuilder_ == null) {
                ensureInputVariablesIsMutable();
                inputVariables_.add(m);
              } else {
                inputVariablesBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getSourceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getScheduledAtFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 58
            case 64: {
              status_ = input.readEnum();
              bitField0_ |= 0x00000040;
              break;
            } // case 64
            case 72: {
              timeoutSeconds_ = input.readInt32();
              bitField0_ |= 0x00000080;
              break;
            } // case 72
            case 82: {
              input.readMessage(
                  getExponentialBackoffFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000200;
              break;
            } // case 82
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.littlehorse.sdk.common.proto.TaskRunId id_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskRunId, io.littlehorse.sdk.common.proto.TaskRunId.Builder, io.littlehorse.sdk.common.proto.TaskRunIdOrBuilder> idBuilder_;
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     * @return Whether the id field is set.
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     * @return The id.
     */
    public io.littlehorse.sdk.common.proto.TaskRunId getId() {
      if (idBuilder_ == null) {
        return id_ == null ? io.littlehorse.sdk.common.proto.TaskRunId.getDefaultInstance() : id_;
      } else {
        return idBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     */
    public Builder setId(io.littlehorse.sdk.common.proto.TaskRunId value) {
      if (idBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        id_ = value;
      } else {
        idBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     */
    public Builder setId(
        io.littlehorse.sdk.common.proto.TaskRunId.Builder builderForValue) {
      if (idBuilder_ == null) {
        id_ = builderForValue.build();
      } else {
        idBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     */
    public Builder mergeId(io.littlehorse.sdk.common.proto.TaskRunId value) {
      if (idBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          id_ != null &&
          id_ != io.littlehorse.sdk.common.proto.TaskRunId.getDefaultInstance()) {
          getIdBuilder().mergeFrom(value);
        } else {
          id_ = value;
        }
      } else {
        idBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     */
    public Builder clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = null;
      if (idBuilder_ != null) {
        idBuilder_.dispose();
        idBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskRunId.Builder getIdBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskRunIdOrBuilder getIdOrBuilder() {
      if (idBuilder_ != null) {
        return idBuilder_.getMessageOrBuilder();
      } else {
        return id_ == null ?
            io.littlehorse.sdk.common.proto.TaskRunId.getDefaultInstance() : id_;
      }
    }
    /**
     * <pre>
     * The ID of the TaskRun. Note that the TaskRunId contains the WfRunId.
     * </pre>
     *
     * <code>.littlehorse.TaskRunId id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskRunId, io.littlehorse.sdk.common.proto.TaskRunId.Builder, io.littlehorse.sdk.common.proto.TaskRunIdOrBuilder> 
        getIdFieldBuilder() {
      if (idBuilder_ == null) {
        idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.TaskRunId, io.littlehorse.sdk.common.proto.TaskRunId.Builder, io.littlehorse.sdk.common.proto.TaskRunIdOrBuilder>(
                getId(),
                getParentForChildren(),
                isClean());
        id_ = null;
      }
      return idBuilder_;
    }

    private io.littlehorse.sdk.common.proto.TaskDefId taskDefId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskDefId, io.littlehorse.sdk.common.proto.TaskDefId.Builder, io.littlehorse.sdk.common.proto.TaskDefIdOrBuilder> taskDefIdBuilder_;
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     * @return Whether the taskDefId field is set.
     */
    public boolean hasTaskDefId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     * @return The taskDefId.
     */
    public io.littlehorse.sdk.common.proto.TaskDefId getTaskDefId() {
      if (taskDefIdBuilder_ == null) {
        return taskDefId_ == null ? io.littlehorse.sdk.common.proto.TaskDefId.getDefaultInstance() : taskDefId_;
      } else {
        return taskDefIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     */
    public Builder setTaskDefId(io.littlehorse.sdk.common.proto.TaskDefId value) {
      if (taskDefIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        taskDefId_ = value;
      } else {
        taskDefIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     */
    public Builder setTaskDefId(
        io.littlehorse.sdk.common.proto.TaskDefId.Builder builderForValue) {
      if (taskDefIdBuilder_ == null) {
        taskDefId_ = builderForValue.build();
      } else {
        taskDefIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     */
    public Builder mergeTaskDefId(io.littlehorse.sdk.common.proto.TaskDefId value) {
      if (taskDefIdBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          taskDefId_ != null &&
          taskDefId_ != io.littlehorse.sdk.common.proto.TaskDefId.getDefaultInstance()) {
          getTaskDefIdBuilder().mergeFrom(value);
        } else {
          taskDefId_ = value;
        }
      } else {
        taskDefIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     */
    public Builder clearTaskDefId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      taskDefId_ = null;
      if (taskDefIdBuilder_ != null) {
        taskDefIdBuilder_.dispose();
        taskDefIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskDefId.Builder getTaskDefIdBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getTaskDefIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskDefIdOrBuilder getTaskDefIdOrBuilder() {
      if (taskDefIdBuilder_ != null) {
        return taskDefIdBuilder_.getMessageOrBuilder();
      } else {
        return taskDefId_ == null ?
            io.littlehorse.sdk.common.proto.TaskDefId.getDefaultInstance() : taskDefId_;
      }
    }
    /**
     * <pre>
     * The ID of the TaskDef being executed.
     * </pre>
     *
     * <code>.littlehorse.TaskDefId task_def_id = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskDefId, io.littlehorse.sdk.common.proto.TaskDefId.Builder, io.littlehorse.sdk.common.proto.TaskDefIdOrBuilder> 
        getTaskDefIdFieldBuilder() {
      if (taskDefIdBuilder_ == null) {
        taskDefIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.TaskDefId, io.littlehorse.sdk.common.proto.TaskDefId.Builder, io.littlehorse.sdk.common.proto.TaskDefIdOrBuilder>(
                getTaskDefId(),
                getParentForChildren(),
                isClean());
        taskDefId_ = null;
      }
      return taskDefIdBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.TaskAttempt> attempts_ =
      java.util.Collections.emptyList();
    private void ensureAttemptsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        attempts_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.TaskAttempt>(attempts_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskAttempt, io.littlehorse.sdk.common.proto.TaskAttempt.Builder, io.littlehorse.sdk.common.proto.TaskAttemptOrBuilder> attemptsBuilder_;

    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.TaskAttempt> getAttemptsList() {
      if (attemptsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(attempts_);
      } else {
        return attemptsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public int getAttemptsCount() {
      if (attemptsBuilder_ == null) {
        return attempts_.size();
      } else {
        return attemptsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskAttempt getAttempts(int index) {
      if (attemptsBuilder_ == null) {
        return attempts_.get(index);
      } else {
        return attemptsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder setAttempts(
        int index, io.littlehorse.sdk.common.proto.TaskAttempt value) {
      if (attemptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttemptsIsMutable();
        attempts_.set(index, value);
        onChanged();
      } else {
        attemptsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder setAttempts(
        int index, io.littlehorse.sdk.common.proto.TaskAttempt.Builder builderForValue) {
      if (attemptsBuilder_ == null) {
        ensureAttemptsIsMutable();
        attempts_.set(index, builderForValue.build());
        onChanged();
      } else {
        attemptsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder addAttempts(io.littlehorse.sdk.common.proto.TaskAttempt value) {
      if (attemptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttemptsIsMutable();
        attempts_.add(value);
        onChanged();
      } else {
        attemptsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder addAttempts(
        int index, io.littlehorse.sdk.common.proto.TaskAttempt value) {
      if (attemptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttemptsIsMutable();
        attempts_.add(index, value);
        onChanged();
      } else {
        attemptsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder addAttempts(
        io.littlehorse.sdk.common.proto.TaskAttempt.Builder builderForValue) {
      if (attemptsBuilder_ == null) {
        ensureAttemptsIsMutable();
        attempts_.add(builderForValue.build());
        onChanged();
      } else {
        attemptsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder addAttempts(
        int index, io.littlehorse.sdk.common.proto.TaskAttempt.Builder builderForValue) {
      if (attemptsBuilder_ == null) {
        ensureAttemptsIsMutable();
        attempts_.add(index, builderForValue.build());
        onChanged();
      } else {
        attemptsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder addAllAttempts(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.TaskAttempt> values) {
      if (attemptsBuilder_ == null) {
        ensureAttemptsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, attempts_);
        onChanged();
      } else {
        attemptsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder clearAttempts() {
      if (attemptsBuilder_ == null) {
        attempts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        attemptsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public Builder removeAttempts(int index) {
      if (attemptsBuilder_ == null) {
        ensureAttemptsIsMutable();
        attempts_.remove(index);
        onChanged();
      } else {
        attemptsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskAttempt.Builder getAttemptsBuilder(
        int index) {
      return getAttemptsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskAttemptOrBuilder getAttemptsOrBuilder(
        int index) {
      if (attemptsBuilder_ == null) {
        return attempts_.get(index);  } else {
        return attemptsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.TaskAttemptOrBuilder> 
         getAttemptsOrBuilderList() {
      if (attemptsBuilder_ != null) {
        return attemptsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(attempts_);
      }
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskAttempt.Builder addAttemptsBuilder() {
      return getAttemptsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.TaskAttempt.getDefaultInstance());
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskAttempt.Builder addAttemptsBuilder(
        int index) {
      return getAttemptsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.TaskAttempt.getDefaultInstance());
    }
    /**
     * <pre>
     * All attempts scheduled for this TaskRun. A TaskAttempt represents an occurrence of
     * the TaskRun being put on a Task Queue to be executed by the Task Workers.
     * </pre>
     *
     * <code>repeated .littlehorse.TaskAttempt attempts = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.TaskAttempt.Builder> 
         getAttemptsBuilderList() {
      return getAttemptsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskAttempt, io.littlehorse.sdk.common.proto.TaskAttempt.Builder, io.littlehorse.sdk.common.proto.TaskAttemptOrBuilder> 
        getAttemptsFieldBuilder() {
      if (attemptsBuilder_ == null) {
        attemptsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.TaskAttempt, io.littlehorse.sdk.common.proto.TaskAttempt.Builder, io.littlehorse.sdk.common.proto.TaskAttemptOrBuilder>(
                attempts_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        attempts_ = null;
      }
      return attemptsBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.VarNameAndVal> inputVariables_ =
      java.util.Collections.emptyList();
    private void ensureInputVariablesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        inputVariables_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.VarNameAndVal>(inputVariables_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.VarNameAndVal, io.littlehorse.sdk.common.proto.VarNameAndVal.Builder, io.littlehorse.sdk.common.proto.VarNameAndValOrBuilder> inputVariablesBuilder_;

    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.VarNameAndVal> getInputVariablesList() {
      if (inputVariablesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(inputVariables_);
      } else {
        return inputVariablesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public int getInputVariablesCount() {
      if (inputVariablesBuilder_ == null) {
        return inputVariables_.size();
      } else {
        return inputVariablesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public io.littlehorse.sdk.common.proto.VarNameAndVal getInputVariables(int index) {
      if (inputVariablesBuilder_ == null) {
        return inputVariables_.get(index);
      } else {
        return inputVariablesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder setInputVariables(
        int index, io.littlehorse.sdk.common.proto.VarNameAndVal value) {
      if (inputVariablesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputVariablesIsMutable();
        inputVariables_.set(index, value);
        onChanged();
      } else {
        inputVariablesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder setInputVariables(
        int index, io.littlehorse.sdk.common.proto.VarNameAndVal.Builder builderForValue) {
      if (inputVariablesBuilder_ == null) {
        ensureInputVariablesIsMutable();
        inputVariables_.set(index, builderForValue.build());
        onChanged();
      } else {
        inputVariablesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder addInputVariables(io.littlehorse.sdk.common.proto.VarNameAndVal value) {
      if (inputVariablesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputVariablesIsMutable();
        inputVariables_.add(value);
        onChanged();
      } else {
        inputVariablesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder addInputVariables(
        int index, io.littlehorse.sdk.common.proto.VarNameAndVal value) {
      if (inputVariablesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputVariablesIsMutable();
        inputVariables_.add(index, value);
        onChanged();
      } else {
        inputVariablesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder addInputVariables(
        io.littlehorse.sdk.common.proto.VarNameAndVal.Builder builderForValue) {
      if (inputVariablesBuilder_ == null) {
        ensureInputVariablesIsMutable();
        inputVariables_.add(builderForValue.build());
        onChanged();
      } else {
        inputVariablesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder addInputVariables(
        int index, io.littlehorse.sdk.common.proto.VarNameAndVal.Builder builderForValue) {
      if (inputVariablesBuilder_ == null) {
        ensureInputVariablesIsMutable();
        inputVariables_.add(index, builderForValue.build());
        onChanged();
      } else {
        inputVariablesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder addAllInputVariables(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.VarNameAndVal> values) {
      if (inputVariablesBuilder_ == null) {
        ensureInputVariablesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, inputVariables_);
        onChanged();
      } else {
        inputVariablesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder clearInputVariables() {
      if (inputVariablesBuilder_ == null) {
        inputVariables_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        inputVariablesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public Builder removeInputVariables(int index) {
      if (inputVariablesBuilder_ == null) {
        ensureInputVariablesIsMutable();
        inputVariables_.remove(index);
        onChanged();
      } else {
        inputVariablesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public io.littlehorse.sdk.common.proto.VarNameAndVal.Builder getInputVariablesBuilder(
        int index) {
      return getInputVariablesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public io.littlehorse.sdk.common.proto.VarNameAndValOrBuilder getInputVariablesOrBuilder(
        int index) {
      if (inputVariablesBuilder_ == null) {
        return inputVariables_.get(index);  } else {
        return inputVariablesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.VarNameAndValOrBuilder> 
         getInputVariablesOrBuilderList() {
      if (inputVariablesBuilder_ != null) {
        return inputVariablesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(inputVariables_);
      }
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public io.littlehorse.sdk.common.proto.VarNameAndVal.Builder addInputVariablesBuilder() {
      return getInputVariablesFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.VarNameAndVal.getDefaultInstance());
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public io.littlehorse.sdk.common.proto.VarNameAndVal.Builder addInputVariablesBuilder(
        int index) {
      return getInputVariablesFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.VarNameAndVal.getDefaultInstance());
    }
    /**
     * <pre>
     * The input variables to pass into this TaskRun. Note that this is a list and not
     * a map, because ordering matters. Depending on the language implementation, not
     * every LittleHorse Task Worker SDK has the ability to determine the names of the
     * variables from the method signature, so we provide both names and ordering.
     * </pre>
     *
     * <code>repeated .littlehorse.VarNameAndVal input_variables = 5;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.VarNameAndVal.Builder> 
         getInputVariablesBuilderList() {
      return getInputVariablesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.VarNameAndVal, io.littlehorse.sdk.common.proto.VarNameAndVal.Builder, io.littlehorse.sdk.common.proto.VarNameAndValOrBuilder> 
        getInputVariablesFieldBuilder() {
      if (inputVariablesBuilder_ == null) {
        inputVariablesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.VarNameAndVal, io.littlehorse.sdk.common.proto.VarNameAndVal.Builder, io.littlehorse.sdk.common.proto.VarNameAndValOrBuilder>(
                inputVariables_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        inputVariables_ = null;
      }
      return inputVariablesBuilder_;
    }

    private io.littlehorse.sdk.common.proto.TaskRunSource source_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskRunSource, io.littlehorse.sdk.common.proto.TaskRunSource.Builder, io.littlehorse.sdk.common.proto.TaskRunSourceOrBuilder> sourceBuilder_;
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     * @return Whether the source field is set.
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     * @return The source.
     */
    public io.littlehorse.sdk.common.proto.TaskRunSource getSource() {
      if (sourceBuilder_ == null) {
        return source_ == null ? io.littlehorse.sdk.common.proto.TaskRunSource.getDefaultInstance() : source_;
      } else {
        return sourceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     */
    public Builder setSource(io.littlehorse.sdk.common.proto.TaskRunSource value) {
      if (sourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        source_ = value;
      } else {
        sourceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     */
    public Builder setSource(
        io.littlehorse.sdk.common.proto.TaskRunSource.Builder builderForValue) {
      if (sourceBuilder_ == null) {
        source_ = builderForValue.build();
      } else {
        sourceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     */
    public Builder mergeSource(io.littlehorse.sdk.common.proto.TaskRunSource value) {
      if (sourceBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          source_ != null &&
          source_ != io.littlehorse.sdk.common.proto.TaskRunSource.getDefaultInstance()) {
          getSourceBuilder().mergeFrom(value);
        } else {
          source_ = value;
        }
      } else {
        sourceBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     */
    public Builder clearSource() {
      bitField0_ = (bitField0_ & ~0x00000010);
      source_ = null;
      if (sourceBuilder_ != null) {
        sourceBuilder_.dispose();
        sourceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskRunSource.Builder getSourceBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getSourceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     */
    public io.littlehorse.sdk.common.proto.TaskRunSourceOrBuilder getSourceOrBuilder() {
      if (sourceBuilder_ != null) {
        return sourceBuilder_.getMessageOrBuilder();
      } else {
        return source_ == null ?
            io.littlehorse.sdk.common.proto.TaskRunSource.getDefaultInstance() : source_;
      }
    }
    /**
     * <pre>
     * The source (in the WfRun) that caused this TaskRun to be created. Currently, this
     * can be either a TASK node, or a User Task Action Task Trigger in a USER_TASK node (such
     * as a task used to send reminders).
     * </pre>
     *
     * <code>.littlehorse.TaskRunSource source = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.TaskRunSource, io.littlehorse.sdk.common.proto.TaskRunSource.Builder, io.littlehorse.sdk.common.proto.TaskRunSourceOrBuilder> 
        getSourceFieldBuilder() {
      if (sourceBuilder_ == null) {
        sourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.TaskRunSource, io.littlehorse.sdk.common.proto.TaskRunSource.Builder, io.littlehorse.sdk.common.proto.TaskRunSourceOrBuilder>(
                getSource(),
                getParentForChildren(),
                isClean());
        source_ = null;
      }
      return sourceBuilder_;
    }

    private com.google.protobuf.Timestamp scheduledAt_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> scheduledAtBuilder_;
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     * @return Whether the scheduledAt field is set.
     */
    public boolean hasScheduledAt() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     * @return The scheduledAt.
     */
    public com.google.protobuf.Timestamp getScheduledAt() {
      if (scheduledAtBuilder_ == null) {
        return scheduledAt_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : scheduledAt_;
      } else {
        return scheduledAtBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     */
    public Builder setScheduledAt(com.google.protobuf.Timestamp value) {
      if (scheduledAtBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scheduledAt_ = value;
      } else {
        scheduledAtBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     */
    public Builder setScheduledAt(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (scheduledAtBuilder_ == null) {
        scheduledAt_ = builderForValue.build();
      } else {
        scheduledAtBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     */
    public Builder mergeScheduledAt(com.google.protobuf.Timestamp value) {
      if (scheduledAtBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          scheduledAt_ != null &&
          scheduledAt_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getScheduledAtBuilder().mergeFrom(value);
        } else {
          scheduledAt_ = value;
        }
      } else {
        scheduledAtBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     */
    public Builder clearScheduledAt() {
      bitField0_ = (bitField0_ & ~0x00000020);
      scheduledAt_ = null;
      if (scheduledAtBuilder_ != null) {
        scheduledAtBuilder_.dispose();
        scheduledAtBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     */
    public com.google.protobuf.Timestamp.Builder getScheduledAtBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getScheduledAtFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getScheduledAtOrBuilder() {
      if (scheduledAtBuilder_ != null) {
        return scheduledAtBuilder_.getMessageOrBuilder();
      } else {
        return scheduledAt_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : scheduledAt_;
      }
    }
    /**
     * <pre>
     * When the TaskRun was scheduled.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp scheduled_at = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getScheduledAtFieldBuilder() {
      if (scheduledAtBuilder_ == null) {
        scheduledAtBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getScheduledAt(),
                getParentForChildren(),
                isClean());
        scheduledAt_ = null;
      }
      return scheduledAtBuilder_;
    }

    private int status_ = 0;
    /**
     * <pre>
     * The status of the TaskRun.
     * </pre>
     *
     * <code>.littlehorse.TaskStatus status = 8;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * The status of the TaskRun.
     * </pre>
     *
     * <code>.littlehorse.TaskStatus status = 8;</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(int value) {
      status_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of the TaskRun.
     * </pre>
     *
     * <code>.littlehorse.TaskStatus status = 8;</code>
     * @return The status.
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.TaskStatus getStatus() {
      io.littlehorse.sdk.common.proto.TaskStatus result = io.littlehorse.sdk.common.proto.TaskStatus.forNumber(status_);
      return result == null ? io.littlehorse.sdk.common.proto.TaskStatus.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The status of the TaskRun.
     * </pre>
     *
     * <code>.littlehorse.TaskStatus status = 8;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(io.littlehorse.sdk.common.proto.TaskStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000040;
      status_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of the TaskRun.
     * </pre>
     *
     * <code>.littlehorse.TaskStatus status = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000040);
      status_ = 0;
      onChanged();
      return this;
    }

    private int timeoutSeconds_ ;
    /**
     * <pre>
     * The timeout before LH considers a TaskAttempt to be timed out.
     * </pre>
     *
     * <code>int32 timeout_seconds = 9;</code>
     * @return The timeoutSeconds.
     */
    @java.lang.Override
    public int getTimeoutSeconds() {
      return timeoutSeconds_;
    }
    /**
     * <pre>
     * The timeout before LH considers a TaskAttempt to be timed out.
     * </pre>
     *
     * <code>int32 timeout_seconds = 9;</code>
     * @param value The timeoutSeconds to set.
     * @return This builder for chaining.
     */
    public Builder setTimeoutSeconds(int value) {

      timeoutSeconds_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The timeout before LH considers a TaskAttempt to be timed out.
     * </pre>
     *
     * <code>int32 timeout_seconds = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimeoutSeconds() {
      bitField0_ = (bitField0_ & ~0x00000080);
      timeoutSeconds_ = 0;
      onChanged();
      return this;
    }

    private int totalAttempts_ ;
    /**
     * <pre>
     * The maximum number of attempts that may be scheduled for this TaskRun. NOTE: setting
     * total_attempts to 1 means that there are no retries.
     * </pre>
     *
     * <code>int32 total_attempts = 4;</code>
     * @return The totalAttempts.
     */
    @java.lang.Override
    public int getTotalAttempts() {
      return totalAttempts_;
    }
    /**
     * <pre>
     * The maximum number of attempts that may be scheduled for this TaskRun. NOTE: setting
     * total_attempts to 1 means that there are no retries.
     * </pre>
     *
     * <code>int32 total_attempts = 4;</code>
     * @param value The totalAttempts to set.
     * @return This builder for chaining.
     */
    public Builder setTotalAttempts(int value) {

      totalAttempts_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of attempts that may be scheduled for this TaskRun. NOTE: setting
     * total_attempts to 1 means that there are no retries.
     * </pre>
     *
     * <code>int32 total_attempts = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearTotalAttempts() {
      bitField0_ = (bitField0_ & ~0x00000100);
      totalAttempts_ = 0;
      onChanged();
      return this;
    }

    private io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy exponentialBackoff_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy, io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.Builder, io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicyOrBuilder> exponentialBackoffBuilder_;
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     * @return Whether the exponentialBackoff field is set.
     */
    public boolean hasExponentialBackoff() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     * @return The exponentialBackoff.
     */
    public io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy getExponentialBackoff() {
      if (exponentialBackoffBuilder_ == null) {
        return exponentialBackoff_ == null ? io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.getDefaultInstance() : exponentialBackoff_;
      } else {
        return exponentialBackoffBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     */
    public Builder setExponentialBackoff(io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy value) {
      if (exponentialBackoffBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exponentialBackoff_ = value;
      } else {
        exponentialBackoffBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     */
    public Builder setExponentialBackoff(
        io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.Builder builderForValue) {
      if (exponentialBackoffBuilder_ == null) {
        exponentialBackoff_ = builderForValue.build();
      } else {
        exponentialBackoffBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     */
    public Builder mergeExponentialBackoff(io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy value) {
      if (exponentialBackoffBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0) &&
          exponentialBackoff_ != null &&
          exponentialBackoff_ != io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.getDefaultInstance()) {
          getExponentialBackoffBuilder().mergeFrom(value);
        } else {
          exponentialBackoff_ = value;
        }
      } else {
        exponentialBackoffBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     */
    public Builder clearExponentialBackoff() {
      bitField0_ = (bitField0_ & ~0x00000200);
      exponentialBackoff_ = null;
      if (exponentialBackoffBuilder_ != null) {
        exponentialBackoffBuilder_.dispose();
        exponentialBackoffBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.Builder getExponentialBackoffBuilder() {
      bitField0_ |= 0x00000200;
      onChanged();
      return getExponentialBackoffFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicyOrBuilder getExponentialBackoffOrBuilder() {
      if (exponentialBackoffBuilder_ != null) {
        return exponentialBackoffBuilder_.getMessageOrBuilder();
      } else {
        return exponentialBackoff_ == null ?
            io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.getDefaultInstance() : exponentialBackoff_;
      }
    }
    /**
     * <pre>
     * Optional backoff policy .
     * </pre>
     *
     * <code>optional .littlehorse.ExponentialBackoffRetryPolicy exponential_backoff = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy, io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.Builder, io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicyOrBuilder> 
        getExponentialBackoffFieldBuilder() {
      if (exponentialBackoffBuilder_ == null) {
        exponentialBackoffBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy, io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicy.Builder, io.littlehorse.sdk.common.proto.ExponentialBackoffRetryPolicyOrBuilder>(
                getExponentialBackoff(),
                getParentForChildren(),
                isClean());
        exponentialBackoff_ = null;
      }
      return exponentialBackoffBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.TaskRun)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.TaskRun)
  private static final io.littlehorse.sdk.common.proto.TaskRun DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.TaskRun();
  }

  public static io.littlehorse.sdk.common.proto.TaskRun getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TaskRun>
      PARSER = new com.google.protobuf.AbstractParser<TaskRun>() {
    @java.lang.Override
    public TaskRun parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TaskRun> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TaskRun> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.TaskRun getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

