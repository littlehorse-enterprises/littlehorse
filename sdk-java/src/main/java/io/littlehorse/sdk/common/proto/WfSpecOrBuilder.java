// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wf_spec.proto

package io.littlehorse.sdk.common.proto;

public interface WfSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.WfSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.littlehorse.WfSpecId id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <code>.littlehorse.WfSpecId id = 1;</code>
   * @return The id.
   */
  io.littlehorse.sdk.common.proto.WfSpecId getId();
  /**
   * <code>.littlehorse.WfSpecId id = 1;</code>
   */
  io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder getIdOrBuilder();

  /**
   * <code>.google.protobuf.Timestamp created_at = 2;</code>
   * @return Whether the createdAt field is set.
   */
  boolean hasCreatedAt();
  /**
   * <code>.google.protobuf.Timestamp created_at = 2;</code>
   * @return The createdAt.
   */
  com.google.protobuf.Timestamp getCreatedAt();
  /**
   * <code>.google.protobuf.Timestamp created_at = 2;</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreatedAtOrBuilder();

  /**
   * <code>repeated .littlehorse.ThreadVarDef frozen_variables = 3;</code>
   */
  java.util.List<io.littlehorse.sdk.common.proto.ThreadVarDef> 
      getFrozenVariablesList();
  /**
   * <code>repeated .littlehorse.ThreadVarDef frozen_variables = 3;</code>
   */
  io.littlehorse.sdk.common.proto.ThreadVarDef getFrozenVariables(int index);
  /**
   * <code>repeated .littlehorse.ThreadVarDef frozen_variables = 3;</code>
   */
  int getFrozenVariablesCount();
  /**
   * <code>repeated .littlehorse.ThreadVarDef frozen_variables = 3;</code>
   */
  java.util.List<? extends io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder> 
      getFrozenVariablesOrBuilderList();
  /**
   * <code>repeated .littlehorse.ThreadVarDef frozen_variables = 3;</code>
   */
  io.littlehorse.sdk.common.proto.ThreadVarDefOrBuilder getFrozenVariablesOrBuilder(
      int index);

  /**
   * <pre>
   * to be used for WfSpec Status, i.e. ACTIVE/TERMINATING/ARCHIVED
   * </pre>
   *
   * <code>.littlehorse.MetadataStatus status = 4;</code>
   * @return The enum numeric value on the wire for status.
   */
  int getStatusValue();
  /**
   * <pre>
   * to be used for WfSpec Status, i.e. ACTIVE/TERMINATING/ARCHIVED
   * </pre>
   *
   * <code>.littlehorse.MetadataStatus status = 4;</code>
   * @return The status.
   */
  io.littlehorse.sdk.common.proto.MetadataStatus getStatus();

  /**
   * <code>map&lt;string, .littlehorse.ThreadSpec&gt; thread_specs = 5;</code>
   */
  int getThreadSpecsCount();
  /**
   * <code>map&lt;string, .littlehorse.ThreadSpec&gt; thread_specs = 5;</code>
   */
  boolean containsThreadSpecs(
      java.lang.String key);
  /**
   * Use {@link #getThreadSpecsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.ThreadSpec>
  getThreadSpecs();
  /**
   * <code>map&lt;string, .littlehorse.ThreadSpec&gt; thread_specs = 5;</code>
   */
  java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.ThreadSpec>
  getThreadSpecsMap();
  /**
   * <code>map&lt;string, .littlehorse.ThreadSpec&gt; thread_specs = 5;</code>
   */
  /* nullable */
io.littlehorse.sdk.common.proto.ThreadSpec getThreadSpecsOrDefault(
      java.lang.String key,
      /* nullable */
io.littlehorse.sdk.common.proto.ThreadSpec defaultValue);
  /**
   * <code>map&lt;string, .littlehorse.ThreadSpec&gt; thread_specs = 5;</code>
   */
  io.littlehorse.sdk.common.proto.ThreadSpec getThreadSpecsOrThrow(
      java.lang.String key);

  /**
   * <code>string entrypoint_thread_name = 6;</code>
   * @return The entrypointThreadName.
   */
  java.lang.String getEntrypointThreadName();
  /**
   * <code>string entrypoint_thread_name = 6;</code>
   * @return The bytes for entrypointThreadName.
   */
  com.google.protobuf.ByteString
      getEntrypointThreadNameBytes();

  /**
   * <code>optional .littlehorse.WorkflowRetentionPolicy retention_policy = 7;</code>
   * @return Whether the retentionPolicy field is set.
   */
  boolean hasRetentionPolicy();
  /**
   * <code>optional .littlehorse.WorkflowRetentionPolicy retention_policy = 7;</code>
   * @return The retentionPolicy.
   */
  io.littlehorse.sdk.common.proto.WorkflowRetentionPolicy getRetentionPolicy();
  /**
   * <code>optional .littlehorse.WorkflowRetentionPolicy retention_policy = 7;</code>
   */
  io.littlehorse.sdk.common.proto.WorkflowRetentionPolicyOrBuilder getRetentionPolicyOrBuilder();

  /**
   * <code>optional .littlehorse.WfSpecVersionMigration migration = 8;</code>
   * @return Whether the migration field is set.
   */
  boolean hasMigration();
  /**
   * <code>optional .littlehorse.WfSpecVersionMigration migration = 8;</code>
   * @return The migration.
   */
  io.littlehorse.sdk.common.proto.WfSpecVersionMigration getMigration();
  /**
   * <code>optional .littlehorse.WfSpecVersionMigration migration = 8;</code>
   */
  io.littlehorse.sdk.common.proto.WfSpecVersionMigrationOrBuilder getMigrationOrBuilder();

  /**
   * <pre>
   * Reference to the parent WfSpec. If this is set, all WfRun's for this WfSpec must be the
   * child of a WfRun belonging to the referenced WfSpec.
   * </pre>
   *
   * <code>optional .littlehorse.WfSpec.ParentWfSpecReference parent_wf_spec = 9;</code>
   * @return Whether the parentWfSpec field is set.
   */
  boolean hasParentWfSpec();
  /**
   * <pre>
   * Reference to the parent WfSpec. If this is set, all WfRun's for this WfSpec must be the
   * child of a WfRun belonging to the referenced WfSpec.
   * </pre>
   *
   * <code>optional .littlehorse.WfSpec.ParentWfSpecReference parent_wf_spec = 9;</code>
   * @return The parentWfSpec.
   */
  io.littlehorse.sdk.common.proto.WfSpec.ParentWfSpecReference getParentWfSpec();
  /**
   * <pre>
   * Reference to the parent WfSpec. If this is set, all WfRun's for this WfSpec must be the
   * child of a WfRun belonging to the referenced WfSpec.
   * </pre>
   *
   * <code>optional .littlehorse.WfSpec.ParentWfSpecReference parent_wf_spec = 9;</code>
   */
  io.littlehorse.sdk.common.proto.WfSpec.ParentWfSpecReferenceOrBuilder getParentWfSpecOrBuilder();
}
