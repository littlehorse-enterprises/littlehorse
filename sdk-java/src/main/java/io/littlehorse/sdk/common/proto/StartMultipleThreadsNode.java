// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wf_spec.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * Iterates over a JSON_ARR and starts a Child ThreadRun for each element in the
 * list.
 *
 * Returns a JSON_ARR containing the thread_run_number of each spawned child.
 * </pre>
 *
 * Protobuf type {@code littlehorse.StartMultipleThreadsNode}
 */
public final class StartMultipleThreadsNode extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.StartMultipleThreadsNode)
    StartMultipleThreadsNodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StartMultipleThreadsNode.newBuilder() to construct.
  private StartMultipleThreadsNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StartMultipleThreadsNode() {
    threadSpecName_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new StartMultipleThreadsNode();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_StartMultipleThreadsNode_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetVariables();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_StartMultipleThreadsNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.StartMultipleThreadsNode.class, io.littlehorse.sdk.common.proto.StartMultipleThreadsNode.Builder.class);
  }

  public static final int THREAD_SPEC_NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object threadSpecName_ = "";
  /**
   * <pre>
   * The name of the ThreadSpec to spawn.
   * </pre>
   *
   * <code>string thread_spec_name = 1;</code>
   * @return The threadSpecName.
   */
  @java.lang.Override
  public java.lang.String getThreadSpecName() {
    java.lang.Object ref = threadSpecName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      threadSpecName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the ThreadSpec to spawn.
   * </pre>
   *
   * <code>string thread_spec_name = 1;</code>
   * @return The bytes for threadSpecName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getThreadSpecNameBytes() {
    java.lang.Object ref = threadSpecName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      threadSpecName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VARIABLES_FIELD_NUMBER = 2;
  private static final class VariablesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment>newDefaultInstance(
                io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_StartMultipleThreadsNode_VariablesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.littlehorse.sdk.common.proto.VariableAssignment.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> variables_;
  private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment>
  internalGetVariables() {
    if (variables_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          VariablesDefaultEntryHolder.defaultEntry);
    }
    return variables_;
  }
  public int getVariablesCount() {
    return internalGetVariables().getMap().size();
  }
  /**
   * <pre>
   * Variables which are passed into the child ThreadRuns. These assignments are
   * the same for all spawned threads.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
   */
  @java.lang.Override
  public boolean containsVariables(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetVariables().getMap().containsKey(key);
  }
  /**
   * Use {@link #getVariablesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> getVariables() {
    return getVariablesMap();
  }
  /**
   * <pre>
   * Variables which are passed into the child ThreadRuns. These assignments are
   * the same for all spawned threads.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> getVariablesMap() {
    return internalGetVariables().getMap();
  }
  /**
   * <pre>
   * Variables which are passed into the child ThreadRuns. These assignments are
   * the same for all spawned threads.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
   */
  @java.lang.Override
  public /* nullable */
io.littlehorse.sdk.common.proto.VariableAssignment getVariablesOrDefault(
      java.lang.String key,
      /* nullable */
io.littlehorse.sdk.common.proto.VariableAssignment defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> map =
        internalGetVariables().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Variables which are passed into the child ThreadRuns. These assignments are
   * the same for all spawned threads.
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.VariableAssignment getVariablesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> map =
        internalGetVariables().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int ITERABLE_FIELD_NUMBER = 3;
  private io.littlehorse.sdk.common.proto.VariableAssignment iterable_;
  /**
   * <pre>
   * Assignment that resolves to a JSON_ARR. For each element in the list, a child
   * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
   * corresponding item in the list.
   * </pre>
   *
   * <code>.littlehorse.VariableAssignment iterable = 3;</code>
   * @return Whether the iterable field is set.
   */
  @java.lang.Override
  public boolean hasIterable() {
    return iterable_ != null;
  }
  /**
   * <pre>
   * Assignment that resolves to a JSON_ARR. For each element in the list, a child
   * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
   * corresponding item in the list.
   * </pre>
   *
   * <code>.littlehorse.VariableAssignment iterable = 3;</code>
   * @return The iterable.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.VariableAssignment getIterable() {
    return iterable_ == null ? io.littlehorse.sdk.common.proto.VariableAssignment.getDefaultInstance() : iterable_;
  }
  /**
   * <pre>
   * Assignment that resolves to a JSON_ARR. For each element in the list, a child
   * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
   * corresponding item in the list.
   * </pre>
   *
   * <code>.littlehorse.VariableAssignment iterable = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.VariableAssignmentOrBuilder getIterableOrBuilder() {
    return iterable_ == null ? io.littlehorse.sdk.common.proto.VariableAssignment.getDefaultInstance() : iterable_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(threadSpecName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, threadSpecName_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetVariables(),
        VariablesDefaultEntryHolder.defaultEntry,
        2);
    if (iterable_ != null) {
      output.writeMessage(3, getIterable());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(threadSpecName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, threadSpecName_);
    }
    for (java.util.Map.Entry<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> entry
         : internalGetVariables().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment>
      variables__ = VariablesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, variables__);
    }
    if (iterable_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getIterable());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.StartMultipleThreadsNode)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.StartMultipleThreadsNode other = (io.littlehorse.sdk.common.proto.StartMultipleThreadsNode) obj;

    if (!getThreadSpecName()
        .equals(other.getThreadSpecName())) return false;
    if (!internalGetVariables().equals(
        other.internalGetVariables())) return false;
    if (hasIterable() != other.hasIterable()) return false;
    if (hasIterable()) {
      if (!getIterable()
          .equals(other.getIterable())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + THREAD_SPEC_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getThreadSpecName().hashCode();
    if (!internalGetVariables().getMap().isEmpty()) {
      hash = (37 * hash) + VARIABLES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetVariables().hashCode();
    }
    if (hasIterable()) {
      hash = (37 * hash) + ITERABLE_FIELD_NUMBER;
      hash = (53 * hash) + getIterable().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.StartMultipleThreadsNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Iterates over a JSON_ARR and starts a Child ThreadRun for each element in the
   * list.
   *
   * Returns a JSON_ARR containing the thread_run_number of each spawned child.
   * </pre>
   *
   * Protobuf type {@code littlehorse.StartMultipleThreadsNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.StartMultipleThreadsNode)
      io.littlehorse.sdk.common.proto.StartMultipleThreadsNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_StartMultipleThreadsNode_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetVariables();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableVariables();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_StartMultipleThreadsNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.StartMultipleThreadsNode.class, io.littlehorse.sdk.common.proto.StartMultipleThreadsNode.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.StartMultipleThreadsNode.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      threadSpecName_ = "";
      internalGetMutableVariables().clear();
      iterable_ = null;
      if (iterableBuilder_ != null) {
        iterableBuilder_.dispose();
        iterableBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.WfSpecOuterClass.internal_static_littlehorse_StartMultipleThreadsNode_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.StartMultipleThreadsNode getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.StartMultipleThreadsNode.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.StartMultipleThreadsNode build() {
      io.littlehorse.sdk.common.proto.StartMultipleThreadsNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.StartMultipleThreadsNode buildPartial() {
      io.littlehorse.sdk.common.proto.StartMultipleThreadsNode result = new io.littlehorse.sdk.common.proto.StartMultipleThreadsNode(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.StartMultipleThreadsNode result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.threadSpecName_ = threadSpecName_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.variables_ = internalGetVariables();
        result.variables_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.iterable_ = iterableBuilder_ == null
            ? iterable_
            : iterableBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.StartMultipleThreadsNode) {
        return mergeFrom((io.littlehorse.sdk.common.proto.StartMultipleThreadsNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.StartMultipleThreadsNode other) {
      if (other == io.littlehorse.sdk.common.proto.StartMultipleThreadsNode.getDefaultInstance()) return this;
      if (!other.getThreadSpecName().isEmpty()) {
        threadSpecName_ = other.threadSpecName_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      internalGetMutableVariables().mergeFrom(
          other.internalGetVariables());
      bitField0_ |= 0x00000002;
      if (other.hasIterable()) {
        mergeIterable(other.getIterable());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              threadSpecName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.protobuf.MapEntry<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment>
              variables__ = input.readMessage(
                  VariablesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableVariables().getMutableMap().put(
                  variables__.getKey(), variables__.getValue());
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getIterableFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object threadSpecName_ = "";
    /**
     * <pre>
     * The name of the ThreadSpec to spawn.
     * </pre>
     *
     * <code>string thread_spec_name = 1;</code>
     * @return The threadSpecName.
     */
    public java.lang.String getThreadSpecName() {
      java.lang.Object ref = threadSpecName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        threadSpecName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the ThreadSpec to spawn.
     * </pre>
     *
     * <code>string thread_spec_name = 1;</code>
     * @return The bytes for threadSpecName.
     */
    public com.google.protobuf.ByteString
        getThreadSpecNameBytes() {
      java.lang.Object ref = threadSpecName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        threadSpecName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the ThreadSpec to spawn.
     * </pre>
     *
     * <code>string thread_spec_name = 1;</code>
     * @param value The threadSpecName to set.
     * @return This builder for chaining.
     */
    public Builder setThreadSpecName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      threadSpecName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the ThreadSpec to spawn.
     * </pre>
     *
     * <code>string thread_spec_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearThreadSpecName() {
      threadSpecName_ = getDefaultInstance().getThreadSpecName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the ThreadSpec to spawn.
     * </pre>
     *
     * <code>string thread_spec_name = 1;</code>
     * @param value The bytes for threadSpecName to set.
     * @return This builder for chaining.
     */
    public Builder setThreadSpecNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      threadSpecName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> variables_;
    private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment>
        internalGetVariables() {
      if (variables_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            VariablesDefaultEntryHolder.defaultEntry);
      }
      return variables_;
    }
    private com.google.protobuf.MapField<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment>
        internalGetMutableVariables() {
      if (variables_ == null) {
        variables_ = com.google.protobuf.MapField.newMapField(
            VariablesDefaultEntryHolder.defaultEntry);
      }
      if (!variables_.isMutable()) {
        variables_ = variables_.copy();
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return variables_;
    }
    public int getVariablesCount() {
      return internalGetVariables().getMap().size();
    }
    /**
     * <pre>
     * Variables which are passed into the child ThreadRuns. These assignments are
     * the same for all spawned threads.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
     */
    @java.lang.Override
    public boolean containsVariables(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetVariables().getMap().containsKey(key);
    }
    /**
     * Use {@link #getVariablesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> getVariables() {
      return getVariablesMap();
    }
    /**
     * <pre>
     * Variables which are passed into the child ThreadRuns. These assignments are
     * the same for all spawned threads.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> getVariablesMap() {
      return internalGetVariables().getMap();
    }
    /**
     * <pre>
     * Variables which are passed into the child ThreadRuns. These assignments are
     * the same for all spawned threads.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
     */
    @java.lang.Override
    public /* nullable */
io.littlehorse.sdk.common.proto.VariableAssignment getVariablesOrDefault(
        java.lang.String key,
        /* nullable */
io.littlehorse.sdk.common.proto.VariableAssignment defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> map =
          internalGetVariables().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Variables which are passed into the child ThreadRuns. These assignments are
     * the same for all spawned threads.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.VariableAssignment getVariablesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> map =
          internalGetVariables().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearVariables() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableVariables().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Variables which are passed into the child ThreadRuns. These assignments are
     * the same for all spawned threads.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
     */
    public Builder removeVariables(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableVariables().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment>
        getMutableVariables() {
      bitField0_ |= 0x00000002;
      return internalGetMutableVariables().getMutableMap();
    }
    /**
     * <pre>
     * Variables which are passed into the child ThreadRuns. These assignments are
     * the same for all spawned threads.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
     */
    public Builder putVariables(
        java.lang.String key,
        io.littlehorse.sdk.common.proto.VariableAssignment value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableVariables().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * Variables which are passed into the child ThreadRuns. These assignments are
     * the same for all spawned threads.
     * </pre>
     *
     * <code>map&lt;string, .littlehorse.VariableAssignment&gt; variables = 2;</code>
     */
    public Builder putAllVariables(
        java.util.Map<java.lang.String, io.littlehorse.sdk.common.proto.VariableAssignment> values) {
      internalGetMutableVariables().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000002;
      return this;
    }

    private io.littlehorse.sdk.common.proto.VariableAssignment iterable_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.VariableAssignment, io.littlehorse.sdk.common.proto.VariableAssignment.Builder, io.littlehorse.sdk.common.proto.VariableAssignmentOrBuilder> iterableBuilder_;
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     * @return Whether the iterable field is set.
     */
    public boolean hasIterable() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     * @return The iterable.
     */
    public io.littlehorse.sdk.common.proto.VariableAssignment getIterable() {
      if (iterableBuilder_ == null) {
        return iterable_ == null ? io.littlehorse.sdk.common.proto.VariableAssignment.getDefaultInstance() : iterable_;
      } else {
        return iterableBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     */
    public Builder setIterable(io.littlehorse.sdk.common.proto.VariableAssignment value) {
      if (iterableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        iterable_ = value;
      } else {
        iterableBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     */
    public Builder setIterable(
        io.littlehorse.sdk.common.proto.VariableAssignment.Builder builderForValue) {
      if (iterableBuilder_ == null) {
        iterable_ = builderForValue.build();
      } else {
        iterableBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     */
    public Builder mergeIterable(io.littlehorse.sdk.common.proto.VariableAssignment value) {
      if (iterableBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          iterable_ != null &&
          iterable_ != io.littlehorse.sdk.common.proto.VariableAssignment.getDefaultInstance()) {
          getIterableBuilder().mergeFrom(value);
        } else {
          iterable_ = value;
        }
      } else {
        iterableBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     */
    public Builder clearIterable() {
      bitField0_ = (bitField0_ & ~0x00000004);
      iterable_ = null;
      if (iterableBuilder_ != null) {
        iterableBuilder_.dispose();
        iterableBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.VariableAssignment.Builder getIterableBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getIterableFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.VariableAssignmentOrBuilder getIterableOrBuilder() {
      if (iterableBuilder_ != null) {
        return iterableBuilder_.getMessageOrBuilder();
      } else {
        return iterable_ == null ?
            io.littlehorse.sdk.common.proto.VariableAssignment.getDefaultInstance() : iterable_;
      }
    }
    /**
     * <pre>
     * Assignment that resolves to a JSON_ARR. For each element in the list, a child
     * ThreadRun is started. The reserved `INPUT` variable for each Child is set to the
     * corresponding item in the list.
     * </pre>
     *
     * <code>.littlehorse.VariableAssignment iterable = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.VariableAssignment, io.littlehorse.sdk.common.proto.VariableAssignment.Builder, io.littlehorse.sdk.common.proto.VariableAssignmentOrBuilder> 
        getIterableFieldBuilder() {
      if (iterableBuilder_ == null) {
        iterableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.VariableAssignment, io.littlehorse.sdk.common.proto.VariableAssignment.Builder, io.littlehorse.sdk.common.proto.VariableAssignmentOrBuilder>(
                getIterable(),
                getParentForChildren(),
                isClean());
        iterable_ = null;
      }
      return iterableBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.StartMultipleThreadsNode)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.StartMultipleThreadsNode)
  private static final io.littlehorse.sdk.common.proto.StartMultipleThreadsNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.StartMultipleThreadsNode();
  }

  public static io.littlehorse.sdk.common.proto.StartMultipleThreadsNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StartMultipleThreadsNode>
      PARSER = new com.google.protobuf.AbstractParser<StartMultipleThreadsNode>() {
    @java.lang.Override
    public StartMultipleThreadsNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<StartMultipleThreadsNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StartMultipleThreadsNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.StartMultipleThreadsNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

