// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_id.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * Reference to a `NodeSpec` which can be measured for metrics collection. It contains
 * fields to specify the reference at various levels of granularity, such as by ThreadSpec
 * Node type, or node position
 * </pre>
 *
 * Protobuf type {@code littlehorse.NodeReference}
 */
public final class NodeReference extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.NodeReference)
    NodeReferenceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NodeReference.newBuilder() to construct.
  private NodeReference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NodeReference() {
    nodeType_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new NodeReference();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.ObjectId.internal_static_littlehorse_NodeReference_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.ObjectId.internal_static_littlehorse_NodeReference_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.NodeReference.class, io.littlehorse.sdk.common.proto.NodeReference.Builder.class);
  }

  private int bitField0_;
  public static final int THREAD_SPEC_FIELD_NUMBER = 1;
  private io.littlehorse.sdk.common.proto.ThreadSpecReference threadSpec_;
  /**
   * <pre>
   * References to the ThreadSpec where the node belongs.
   * </pre>
   *
   * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
   * @return Whether the threadSpec field is set.
   */
  @java.lang.Override
  public boolean hasThreadSpec() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * References to the ThreadSpec where the node belongs.
   * </pre>
   *
   * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
   * @return The threadSpec.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadSpecReference getThreadSpec() {
    return threadSpec_ == null ? io.littlehorse.sdk.common.proto.ThreadSpecReference.getDefaultInstance() : threadSpec_;
  }
  /**
   * <pre>
   * References to the ThreadSpec where the node belongs.
   * </pre>
   *
   * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadSpecReferenceOrBuilder getThreadSpecOrBuilder() {
    return threadSpec_ == null ? io.littlehorse.sdk.common.proto.ThreadSpecReference.getDefaultInstance() : threadSpec_;
  }

  public static final int NODE_TYPE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object nodeType_ = "";
  /**
   * <pre>
   * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
   * any node type is implied
   * </pre>
   *
   * <code>optional string node_type = 2;</code>
   * @return Whether the nodeType field is set.
   */
  @java.lang.Override
  public boolean hasNodeType() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
   * any node type is implied
   * </pre>
   *
   * <code>optional string node_type = 2;</code>
   * @return The nodeType.
   */
  @java.lang.Override
  public java.lang.String getNodeType() {
    java.lang.Object ref = nodeType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      nodeType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
   * any node type is implied
   * </pre>
   *
   * <code>optional string node_type = 2;</code>
   * @return The bytes for nodeType.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNodeTypeBytes() {
    java.lang.Object ref = nodeType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      nodeType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NODE_POSITION_FIELD_NUMBER = 3;
  private int nodePosition_ = 0;
  /**
   * <pre>
   * Indicates the position of the node within the specific thread. If set to null,
   * any node within the thread is implied
   * </pre>
   *
   * <code>optional int32 node_position = 3;</code>
   * @return Whether the nodePosition field is set.
   */
  @java.lang.Override
  public boolean hasNodePosition() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Indicates the position of the node within the specific thread. If set to null,
   * any node within the thread is implied
   * </pre>
   *
   * <code>optional int32 node_position = 3;</code>
   * @return The nodePosition.
   */
  @java.lang.Override
  public int getNodePosition() {
    return nodePosition_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getThreadSpec());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, nodeType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt32(3, nodePosition_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getThreadSpec());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, nodeType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, nodePosition_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.NodeReference)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.NodeReference other = (io.littlehorse.sdk.common.proto.NodeReference) obj;

    if (hasThreadSpec() != other.hasThreadSpec()) return false;
    if (hasThreadSpec()) {
      if (!getThreadSpec()
          .equals(other.getThreadSpec())) return false;
    }
    if (hasNodeType() != other.hasNodeType()) return false;
    if (hasNodeType()) {
      if (!getNodeType()
          .equals(other.getNodeType())) return false;
    }
    if (hasNodePosition() != other.hasNodePosition()) return false;
    if (hasNodePosition()) {
      if (getNodePosition()
          != other.getNodePosition()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasThreadSpec()) {
      hash = (37 * hash) + THREAD_SPEC_FIELD_NUMBER;
      hash = (53 * hash) + getThreadSpec().hashCode();
    }
    if (hasNodeType()) {
      hash = (37 * hash) + NODE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getNodeType().hashCode();
    }
    if (hasNodePosition()) {
      hash = (37 * hash) + NODE_POSITION_FIELD_NUMBER;
      hash = (53 * hash) + getNodePosition();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.NodeReference parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.NodeReference parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.NodeReference parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.NodeReference prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Reference to a `NodeSpec` which can be measured for metrics collection. It contains
   * fields to specify the reference at various levels of granularity, such as by ThreadSpec
   * Node type, or node position
   * </pre>
   *
   * Protobuf type {@code littlehorse.NodeReference}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.NodeReference)
      io.littlehorse.sdk.common.proto.NodeReferenceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.ObjectId.internal_static_littlehorse_NodeReference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.ObjectId.internal_static_littlehorse_NodeReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.NodeReference.class, io.littlehorse.sdk.common.proto.NodeReference.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.NodeReference.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getThreadSpecFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      threadSpec_ = null;
      if (threadSpecBuilder_ != null) {
        threadSpecBuilder_.dispose();
        threadSpecBuilder_ = null;
      }
      nodeType_ = "";
      nodePosition_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.ObjectId.internal_static_littlehorse_NodeReference_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.NodeReference getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.NodeReference.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.NodeReference build() {
      io.littlehorse.sdk.common.proto.NodeReference result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.NodeReference buildPartial() {
      io.littlehorse.sdk.common.proto.NodeReference result = new io.littlehorse.sdk.common.proto.NodeReference(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.NodeReference result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.threadSpec_ = threadSpecBuilder_ == null
            ? threadSpec_
            : threadSpecBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.nodeType_ = nodeType_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.nodePosition_ = nodePosition_;
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.NodeReference) {
        return mergeFrom((io.littlehorse.sdk.common.proto.NodeReference)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.NodeReference other) {
      if (other == io.littlehorse.sdk.common.proto.NodeReference.getDefaultInstance()) return this;
      if (other.hasThreadSpec()) {
        mergeThreadSpec(other.getThreadSpec());
      }
      if (other.hasNodeType()) {
        nodeType_ = other.nodeType_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasNodePosition()) {
        setNodePosition(other.getNodePosition());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getThreadSpecFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              nodeType_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              nodePosition_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.littlehorse.sdk.common.proto.ThreadSpecReference threadSpec_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadSpecReference, io.littlehorse.sdk.common.proto.ThreadSpecReference.Builder, io.littlehorse.sdk.common.proto.ThreadSpecReferenceOrBuilder> threadSpecBuilder_;
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     * @return Whether the threadSpec field is set.
     */
    public boolean hasThreadSpec() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     * @return The threadSpec.
     */
    public io.littlehorse.sdk.common.proto.ThreadSpecReference getThreadSpec() {
      if (threadSpecBuilder_ == null) {
        return threadSpec_ == null ? io.littlehorse.sdk.common.proto.ThreadSpecReference.getDefaultInstance() : threadSpec_;
      } else {
        return threadSpecBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     */
    public Builder setThreadSpec(io.littlehorse.sdk.common.proto.ThreadSpecReference value) {
      if (threadSpecBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        threadSpec_ = value;
      } else {
        threadSpecBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     */
    public Builder setThreadSpec(
        io.littlehorse.sdk.common.proto.ThreadSpecReference.Builder builderForValue) {
      if (threadSpecBuilder_ == null) {
        threadSpec_ = builderForValue.build();
      } else {
        threadSpecBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     */
    public Builder mergeThreadSpec(io.littlehorse.sdk.common.proto.ThreadSpecReference value) {
      if (threadSpecBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          threadSpec_ != null &&
          threadSpec_ != io.littlehorse.sdk.common.proto.ThreadSpecReference.getDefaultInstance()) {
          getThreadSpecBuilder().mergeFrom(value);
        } else {
          threadSpec_ = value;
        }
      } else {
        threadSpecBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     */
    public Builder clearThreadSpec() {
      bitField0_ = (bitField0_ & ~0x00000001);
      threadSpec_ = null;
      if (threadSpecBuilder_ != null) {
        threadSpecBuilder_.dispose();
        threadSpecBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadSpecReference.Builder getThreadSpecBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getThreadSpecFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadSpecReferenceOrBuilder getThreadSpecOrBuilder() {
      if (threadSpecBuilder_ != null) {
        return threadSpecBuilder_.getMessageOrBuilder();
      } else {
        return threadSpec_ == null ?
            io.littlehorse.sdk.common.proto.ThreadSpecReference.getDefaultInstance() : threadSpec_;
      }
    }
    /**
     * <pre>
     * References to the ThreadSpec where the node belongs.
     * </pre>
     *
     * <code>optional .littlehorse.ThreadSpecReference thread_spec = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadSpecReference, io.littlehorse.sdk.common.proto.ThreadSpecReference.Builder, io.littlehorse.sdk.common.proto.ThreadSpecReferenceOrBuilder> 
        getThreadSpecFieldBuilder() {
      if (threadSpecBuilder_ == null) {
        threadSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.ThreadSpecReference, io.littlehorse.sdk.common.proto.ThreadSpecReference.Builder, io.littlehorse.sdk.common.proto.ThreadSpecReferenceOrBuilder>(
                getThreadSpec(),
                getParentForChildren(),
                isClean());
        threadSpec_ = null;
      }
      return threadSpecBuilder_;
    }

    private java.lang.Object nodeType_ = "";
    /**
     * <pre>
     * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
     * any node type is implied
     * </pre>
     *
     * <code>optional string node_type = 2;</code>
     * @return Whether the nodeType field is set.
     */
    public boolean hasNodeType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
     * any node type is implied
     * </pre>
     *
     * <code>optional string node_type = 2;</code>
     * @return The nodeType.
     */
    public java.lang.String getNodeType() {
      java.lang.Object ref = nodeType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodeType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
     * any node type is implied
     * </pre>
     *
     * <code>optional string node_type = 2;</code>
     * @return The bytes for nodeType.
     */
    public com.google.protobuf.ByteString
        getNodeTypeBytes() {
      java.lang.Object ref = nodeType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nodeType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
     * any node type is implied
     * </pre>
     *
     * <code>optional string node_type = 2;</code>
     * @param value The nodeType to set.
     * @return This builder for chaining.
     */
    public Builder setNodeType(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      nodeType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
     * any node type is implied
     * </pre>
     *
     * <code>optional string node_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearNodeType() {
      nodeType_ = getDefaultInstance().getNodeType();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the type of node (e.g UserTaskNode, TaskNode, etc.). If set to null,
     * any node type is implied
     * </pre>
     *
     * <code>optional string node_type = 2;</code>
     * @param value The bytes for nodeType to set.
     * @return This builder for chaining.
     */
    public Builder setNodeTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      nodeType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private int nodePosition_ ;
    /**
     * <pre>
     * Indicates the position of the node within the specific thread. If set to null,
     * any node within the thread is implied
     * </pre>
     *
     * <code>optional int32 node_position = 3;</code>
     * @return Whether the nodePosition field is set.
     */
    @java.lang.Override
    public boolean hasNodePosition() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Indicates the position of the node within the specific thread. If set to null,
     * any node within the thread is implied
     * </pre>
     *
     * <code>optional int32 node_position = 3;</code>
     * @return The nodePosition.
     */
    @java.lang.Override
    public int getNodePosition() {
      return nodePosition_;
    }
    /**
     * <pre>
     * Indicates the position of the node within the specific thread. If set to null,
     * any node within the thread is implied
     * </pre>
     *
     * <code>optional int32 node_position = 3;</code>
     * @param value The nodePosition to set.
     * @return This builder for chaining.
     */
    public Builder setNodePosition(int value) {

      nodePosition_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates the position of the node within the specific thread. If set to null,
     * any node within the thread is implied
     * </pre>
     *
     * <code>optional int32 node_position = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearNodePosition() {
      bitField0_ = (bitField0_ & ~0x00000004);
      nodePosition_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.NodeReference)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.NodeReference)
  private static final io.littlehorse.sdk.common.proto.NodeReference DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.NodeReference();
  }

  public static io.littlehorse.sdk.common.proto.NodeReference getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NodeReference>
      PARSER = new com.google.protobuf.AbstractParser<NodeReference>() {
    @java.lang.Override
    public NodeReference parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<NodeReference> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NodeReference> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.NodeReference getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

