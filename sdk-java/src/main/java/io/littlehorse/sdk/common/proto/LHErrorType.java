// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_enums.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * This enum is all of the types of technical failure that can occur in a WfRun.
 * </pre>
 *
 * Protobuf enum {@code littlehorse.LHErrorType}
 */
public enum LHErrorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * A child ThreadRun failed with a technical ERROR.
   * </pre>
   *
   * <code>CHILD_FAILURE = 0;</code>
   */
  CHILD_FAILURE(0),
  /**
   * <pre>
   * Failed substituting input variables into a NodeRun.
   * </pre>
   *
   * <code>VAR_SUB_ERROR = 1;</code>
   */
  VAR_SUB_ERROR(1),
  /**
   * <pre>
   * Failed mutating variables after a NodeRun successfully completed.
   * </pre>
   *
   * <code>VAR_MUTATION_ERROR = 2;</code>
   */
  VAR_MUTATION_ERROR(2),
  /**
   * <pre>
   * A UserTaskRun was cancelled (EVOLVING: this will become a Business EXCEPTION)
   * </pre>
   *
   * <code>USER_TASK_CANCELLED = 3;</code>
   */
  USER_TASK_CANCELLED(3),
  /**
   * <pre>
   * A NodeRun failed due to a timeout.
   * </pre>
   *
   * <code>TIMEOUT = 4;</code>
   */
  TIMEOUT(4),
  /**
   * <pre>
   * A TaskRun failed due to an unexpected error.
   * </pre>
   *
   * <code>TASK_FAILURE = 5;</code>
   */
  TASK_FAILURE(5),
  /**
   * <pre>
   * Wrapper for VAR_SUB_ERROR and VAR_MUTATION_ERROR
   * </pre>
   *
   * <code>VAR_ERROR = 6;</code>
   */
  VAR_ERROR(6),
  /**
   * <pre>
   * Wrapper for TASK_FALIURE and TIMEOUT
   * </pre>
   *
   * <code>TASK_ERROR = 7;</code>
   */
  TASK_ERROR(7),
  /**
   * <pre>
   * An unexpected LittleHorse Internal error occurred. This is not expected to happen.
   * </pre>
   *
   * <code>INTERNAL_ERROR = 8;</code>
   */
  INTERNAL_ERROR(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * A child ThreadRun failed with a technical ERROR.
   * </pre>
   *
   * <code>CHILD_FAILURE = 0;</code>
   */
  public static final int CHILD_FAILURE_VALUE = 0;
  /**
   * <pre>
   * Failed substituting input variables into a NodeRun.
   * </pre>
   *
   * <code>VAR_SUB_ERROR = 1;</code>
   */
  public static final int VAR_SUB_ERROR_VALUE = 1;
  /**
   * <pre>
   * Failed mutating variables after a NodeRun successfully completed.
   * </pre>
   *
   * <code>VAR_MUTATION_ERROR = 2;</code>
   */
  public static final int VAR_MUTATION_ERROR_VALUE = 2;
  /**
   * <pre>
   * A UserTaskRun was cancelled (EVOLVING: this will become a Business EXCEPTION)
   * </pre>
   *
   * <code>USER_TASK_CANCELLED = 3;</code>
   */
  public static final int USER_TASK_CANCELLED_VALUE = 3;
  /**
   * <pre>
   * A NodeRun failed due to a timeout.
   * </pre>
   *
   * <code>TIMEOUT = 4;</code>
   */
  public static final int TIMEOUT_VALUE = 4;
  /**
   * <pre>
   * A TaskRun failed due to an unexpected error.
   * </pre>
   *
   * <code>TASK_FAILURE = 5;</code>
   */
  public static final int TASK_FAILURE_VALUE = 5;
  /**
   * <pre>
   * Wrapper for VAR_SUB_ERROR and VAR_MUTATION_ERROR
   * </pre>
   *
   * <code>VAR_ERROR = 6;</code>
   */
  public static final int VAR_ERROR_VALUE = 6;
  /**
   * <pre>
   * Wrapper for TASK_FALIURE and TIMEOUT
   * </pre>
   *
   * <code>TASK_ERROR = 7;</code>
   */
  public static final int TASK_ERROR_VALUE = 7;
  /**
   * <pre>
   * An unexpected LittleHorse Internal error occurred. This is not expected to happen.
   * </pre>
   *
   * <code>INTERNAL_ERROR = 8;</code>
   */
  public static final int INTERNAL_ERROR_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static LHErrorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static LHErrorType forNumber(int value) {
    switch (value) {
      case 0: return CHILD_FAILURE;
      case 1: return VAR_SUB_ERROR;
      case 2: return VAR_MUTATION_ERROR;
      case 3: return USER_TASK_CANCELLED;
      case 4: return TIMEOUT;
      case 5: return TASK_FAILURE;
      case 6: return VAR_ERROR;
      case 7: return TASK_ERROR;
      case 8: return INTERNAL_ERROR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<LHErrorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      LHErrorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<LHErrorType>() {
          public LHErrorType findValueByNumber(int number) {
            return LHErrorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.CommonEnums.getDescriptor().getEnumTypes().get(5);
  }

  private static final LHErrorType[] VALUES = values();

  public static LHErrorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private LHErrorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:littlehorse.LHErrorType)
}

