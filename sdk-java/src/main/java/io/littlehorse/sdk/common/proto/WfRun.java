// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wf_run.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * A WfRun is a running instance of a WfSpec.
 * </pre>
 *
 * Protobuf type {@code littlehorse.WfRun}
 */
public final class WfRun extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.WfRun)
    WfRunOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WfRun.newBuilder() to construct.
  private WfRun(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WfRun() {
    oldWfSpecVersions_ = java.util.Collections.emptyList();
    status_ = 0;
    threadRuns_ = java.util.Collections.emptyList();
    pendingInterrupts_ = java.util.Collections.emptyList();
    pendingFailures_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new WfRun();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_WfRun_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_WfRun_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.WfRun.class, io.littlehorse.sdk.common.proto.WfRun.Builder.class);
  }

  private int bitField0_;
  public static final int ID_FIELD_NUMBER = 1;
  private io.littlehorse.sdk.common.proto.WfRunId id_;
  /**
   * <pre>
   * The ID of the WfRun.
   * </pre>
   *
   * <code>.littlehorse.WfRunId id = 1;</code>
   * @return Whether the id field is set.
   */
  @java.lang.Override
  public boolean hasId() {
    return id_ != null;
  }
  /**
   * <pre>
   * The ID of the WfRun.
   * </pre>
   *
   * <code>.littlehorse.WfRunId id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfRunId getId() {
    return id_ == null ? io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : id_;
  }
  /**
   * <pre>
   * The ID of the WfRun.
   * </pre>
   *
   * <code>.littlehorse.WfRunId id = 1;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfRunIdOrBuilder getIdOrBuilder() {
    return id_ == null ? io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : id_;
  }

  public static final int WF_SPEC_ID_FIELD_NUMBER = 2;
  private io.littlehorse.sdk.common.proto.WfSpecId wfSpecId_;
  /**
   * <pre>
   * The ID of the WfSpec that this WfRun belongs to.
   * </pre>
   *
   * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
   * @return Whether the wfSpecId field is set.
   */
  @java.lang.Override
  public boolean hasWfSpecId() {
    return wfSpecId_ != null;
  }
  /**
   * <pre>
   * The ID of the WfSpec that this WfRun belongs to.
   * </pre>
   *
   * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
   * @return The wfSpecId.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfSpecId getWfSpecId() {
    return wfSpecId_ == null ? io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
  }
  /**
   * <pre>
   * The ID of the WfSpec that this WfRun belongs to.
   * </pre>
   *
   * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder getWfSpecIdOrBuilder() {
    return wfSpecId_ == null ? io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
  }

  public static final int OLD_WF_SPEC_VERSIONS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.WfSpecId> oldWfSpecVersions_;
  /**
   * <pre>
   * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
   * old WfSpecId to this list for historical auditing and debugging purposes.
   * </pre>
   *
   * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.WfSpecId> getOldWfSpecVersionsList() {
    return oldWfSpecVersions_;
  }
  /**
   * <pre>
   * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
   * old WfSpecId to this list for historical auditing and debugging purposes.
   * </pre>
   *
   * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> 
      getOldWfSpecVersionsOrBuilderList() {
    return oldWfSpecVersions_;
  }
  /**
   * <pre>
   * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
   * old WfSpecId to this list for historical auditing and debugging purposes.
   * </pre>
   *
   * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
   */
  @java.lang.Override
  public int getOldWfSpecVersionsCount() {
    return oldWfSpecVersions_.size();
  }
  /**
   * <pre>
   * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
   * old WfSpecId to this list for historical auditing and debugging purposes.
   * </pre>
   *
   * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfSpecId getOldWfSpecVersions(int index) {
    return oldWfSpecVersions_.get(index);
  }
  /**
   * <pre>
   * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
   * old WfSpecId to this list for historical auditing and debugging purposes.
   * </pre>
   *
   * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder getOldWfSpecVersionsOrBuilder(
      int index) {
    return oldWfSpecVersions_.get(index);
  }

  public static final int STATUS_FIELD_NUMBER = 4;
  private int status_ = 0;
  /**
   * <pre>
   * The status of this WfRun.
   * </pre>
   *
   * <code>.littlehorse.LHStatus status = 4;</code>
   * @return The enum numeric value on the wire for status.
   */
  @java.lang.Override public int getStatusValue() {
    return status_;
  }
  /**
   * <pre>
   * The status of this WfRun.
   * </pre>
   *
   * <code>.littlehorse.LHStatus status = 4;</code>
   * @return The status.
   */
  @java.lang.Override public io.littlehorse.sdk.common.proto.LHStatus getStatus() {
    io.littlehorse.sdk.common.proto.LHStatus result = io.littlehorse.sdk.common.proto.LHStatus.forNumber(status_);
    return result == null ? io.littlehorse.sdk.common.proto.LHStatus.UNRECOGNIZED : result;
  }

  public static final int GREATEST_THREADRUN_NUMBER_FIELD_NUMBER = 5;
  private int greatestThreadrunNumber_ = 0;
  /**
   * <pre>
   * The ID number of the greatest ThreadRUn in this WfRun. The total number of ThreadRuns
   * is given by greatest_thread_run_number + 1.
   *
   * Introduced now since with ThreadRun-level retention, we can't rely upon
   * thread_runs.size() to determine the number of ThreadRuns, as a ThreadRun is removed
   * from the thread_runs list once its retention period expires.
   * </pre>
   *
   * <code>int32 greatest_threadrun_number = 5;</code>
   * @return The greatestThreadrunNumber.
   */
  @java.lang.Override
  public int getGreatestThreadrunNumber() {
    return greatestThreadrunNumber_;
  }

  public static final int START_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp startTime_;
  /**
   * <pre>
   * The time the WfRun was started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 6;</code>
   * @return Whether the startTime field is set.
   */
  @java.lang.Override
  public boolean hasStartTime() {
    return startTime_ != null;
  }
  /**
   * <pre>
   * The time the WfRun was started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 6;</code>
   * @return The startTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getStartTime() {
    return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
  }
  /**
   * <pre>
   * The time the WfRun was started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
    return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
  }

  public static final int END_TIME_FIELD_NUMBER = 7;
  private com.google.protobuf.Timestamp endTime_;
  /**
   * <pre>
   * The time the WfRun failed or completed.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
   * @return Whether the endTime field is set.
   */
  @java.lang.Override
  public boolean hasEndTime() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The time the WfRun failed or completed.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
   * @return The endTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getEndTime() {
    return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * The time the WfRun failed or completed.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder() {
    return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
  }

  public static final int THREAD_RUNS_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.ThreadRun> threadRuns_;
  /**
   * <pre>
   * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
   * have not yet expired.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.ThreadRun> getThreadRunsList() {
    return threadRuns_;
  }
  /**
   * <pre>
   * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
   * have not yet expired.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.ThreadRunOrBuilder> 
      getThreadRunsOrBuilderList() {
    return threadRuns_;
  }
  /**
   * <pre>
   * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
   * have not yet expired.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
   */
  @java.lang.Override
  public int getThreadRunsCount() {
    return threadRuns_.size();
  }
  /**
   * <pre>
   * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
   * have not yet expired.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadRun getThreadRuns(int index) {
    return threadRuns_.get(index);
  }
  /**
   * <pre>
   * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
   * have not yet expired.
   * </pre>
   *
   * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.ThreadRunOrBuilder getThreadRunsOrBuilder(
      int index) {
    return threadRuns_.get(index);
  }

  public static final int PENDING_INTERRUPTS_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.PendingInterrupt> pendingInterrupts_;
  /**
   * <pre>
   * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
   * halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.PendingInterrupt> getPendingInterruptsList() {
    return pendingInterrupts_;
  }
  /**
   * <pre>
   * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
   * halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.PendingInterruptOrBuilder> 
      getPendingInterruptsOrBuilderList() {
    return pendingInterrupts_;
  }
  /**
   * <pre>
   * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
   * halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
   */
  @java.lang.Override
  public int getPendingInterruptsCount() {
    return pendingInterrupts_.size();
  }
  /**
   * <pre>
   * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
   * halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.PendingInterrupt getPendingInterrupts(int index) {
    return pendingInterrupts_.get(index);
  }
  /**
   * <pre>
   * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
   * halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.PendingInterruptOrBuilder getPendingInterruptsOrBuilder(
      int index) {
    return pendingInterrupts_.get(index);
  }

  public static final int PENDING_FAILURES_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.PendingFailureHandler> pendingFailures_;
  /**
   * <pre>
   * A list of pending failure handlers which will fire once their appropriate ThreadRun's
   * finish halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.PendingFailureHandler> getPendingFailuresList() {
    return pendingFailures_;
  }
  /**
   * <pre>
   * A list of pending failure handlers which will fire once their appropriate ThreadRun's
   * finish halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.PendingFailureHandlerOrBuilder> 
      getPendingFailuresOrBuilderList() {
    return pendingFailures_;
  }
  /**
   * <pre>
   * A list of pending failure handlers which will fire once their appropriate ThreadRun's
   * finish halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
   */
  @java.lang.Override
  public int getPendingFailuresCount() {
    return pendingFailures_.size();
  }
  /**
   * <pre>
   * A list of pending failure handlers which will fire once their appropriate ThreadRun's
   * finish halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.PendingFailureHandler getPendingFailures(int index) {
    return pendingFailures_.get(index);
  }
  /**
   * <pre>
   * A list of pending failure handlers which will fire once their appropriate ThreadRun's
   * finish halting.
   * </pre>
   *
   * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.PendingFailureHandlerOrBuilder getPendingFailuresOrBuilder(
      int index) {
    return pendingFailures_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != null) {
      output.writeMessage(1, getId());
    }
    if (wfSpecId_ != null) {
      output.writeMessage(2, getWfSpecId());
    }
    for (int i = 0; i < oldWfSpecVersions_.size(); i++) {
      output.writeMessage(3, oldWfSpecVersions_.get(i));
    }
    if (status_ != io.littlehorse.sdk.common.proto.LHStatus.STARTING.getNumber()) {
      output.writeEnum(4, status_);
    }
    if (greatestThreadrunNumber_ != 0) {
      output.writeInt32(5, greatestThreadrunNumber_);
    }
    if (startTime_ != null) {
      output.writeMessage(6, getStartTime());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(7, getEndTime());
    }
    for (int i = 0; i < threadRuns_.size(); i++) {
      output.writeMessage(8, threadRuns_.get(i));
    }
    for (int i = 0; i < pendingInterrupts_.size(); i++) {
      output.writeMessage(9, pendingInterrupts_.get(i));
    }
    for (int i = 0; i < pendingFailures_.size(); i++) {
      output.writeMessage(10, pendingFailures_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getId());
    }
    if (wfSpecId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getWfSpecId());
    }
    for (int i = 0; i < oldWfSpecVersions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, oldWfSpecVersions_.get(i));
    }
    if (status_ != io.littlehorse.sdk.common.proto.LHStatus.STARTING.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, status_);
    }
    if (greatestThreadrunNumber_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, greatestThreadrunNumber_);
    }
    if (startTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getStartTime());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getEndTime());
    }
    for (int i = 0; i < threadRuns_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, threadRuns_.get(i));
    }
    for (int i = 0; i < pendingInterrupts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, pendingInterrupts_.get(i));
    }
    for (int i = 0; i < pendingFailures_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, pendingFailures_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.WfRun)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.WfRun other = (io.littlehorse.sdk.common.proto.WfRun) obj;

    if (hasId() != other.hasId()) return false;
    if (hasId()) {
      if (!getId()
          .equals(other.getId())) return false;
    }
    if (hasWfSpecId() != other.hasWfSpecId()) return false;
    if (hasWfSpecId()) {
      if (!getWfSpecId()
          .equals(other.getWfSpecId())) return false;
    }
    if (!getOldWfSpecVersionsList()
        .equals(other.getOldWfSpecVersionsList())) return false;
    if (status_ != other.status_) return false;
    if (getGreatestThreadrunNumber()
        != other.getGreatestThreadrunNumber()) return false;
    if (hasStartTime() != other.hasStartTime()) return false;
    if (hasStartTime()) {
      if (!getStartTime()
          .equals(other.getStartTime())) return false;
    }
    if (hasEndTime() != other.hasEndTime()) return false;
    if (hasEndTime()) {
      if (!getEndTime()
          .equals(other.getEndTime())) return false;
    }
    if (!getThreadRunsList()
        .equals(other.getThreadRunsList())) return false;
    if (!getPendingInterruptsList()
        .equals(other.getPendingInterruptsList())) return false;
    if (!getPendingFailuresList()
        .equals(other.getPendingFailuresList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasId()) {
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
    }
    if (hasWfSpecId()) {
      hash = (37 * hash) + WF_SPEC_ID_FIELD_NUMBER;
      hash = (53 * hash) + getWfSpecId().hashCode();
    }
    if (getOldWfSpecVersionsCount() > 0) {
      hash = (37 * hash) + OLD_WF_SPEC_VERSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getOldWfSpecVersionsList().hashCode();
    }
    hash = (37 * hash) + STATUS_FIELD_NUMBER;
    hash = (53 * hash) + status_;
    hash = (37 * hash) + GREATEST_THREADRUN_NUMBER_FIELD_NUMBER;
    hash = (53 * hash) + getGreatestThreadrunNumber();
    if (hasStartTime()) {
      hash = (37 * hash) + START_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getStartTime().hashCode();
    }
    if (hasEndTime()) {
      hash = (37 * hash) + END_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getEndTime().hashCode();
    }
    if (getThreadRunsCount() > 0) {
      hash = (37 * hash) + THREAD_RUNS_FIELD_NUMBER;
      hash = (53 * hash) + getThreadRunsList().hashCode();
    }
    if (getPendingInterruptsCount() > 0) {
      hash = (37 * hash) + PENDING_INTERRUPTS_FIELD_NUMBER;
      hash = (53 * hash) + getPendingInterruptsList().hashCode();
    }
    if (getPendingFailuresCount() > 0) {
      hash = (37 * hash) + PENDING_FAILURES_FIELD_NUMBER;
      hash = (53 * hash) + getPendingFailuresList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.WfRun parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.WfRun parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.WfRun parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.WfRun prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A WfRun is a running instance of a WfSpec.
   * </pre>
   *
   * Protobuf type {@code littlehorse.WfRun}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.WfRun)
      io.littlehorse.sdk.common.proto.WfRunOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_WfRun_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_WfRun_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.WfRun.class, io.littlehorse.sdk.common.proto.WfRun.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.WfRun.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getIdFieldBuilder();
        getWfSpecIdFieldBuilder();
        getOldWfSpecVersionsFieldBuilder();
        getStartTimeFieldBuilder();
        getEndTimeFieldBuilder();
        getThreadRunsFieldBuilder();
        getPendingInterruptsFieldBuilder();
        getPendingFailuresFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      id_ = null;
      if (idBuilder_ != null) {
        idBuilder_.dispose();
        idBuilder_ = null;
      }
      wfSpecId_ = null;
      if (wfSpecIdBuilder_ != null) {
        wfSpecIdBuilder_.dispose();
        wfSpecIdBuilder_ = null;
      }
      if (oldWfSpecVersionsBuilder_ == null) {
        oldWfSpecVersions_ = java.util.Collections.emptyList();
      } else {
        oldWfSpecVersions_ = null;
        oldWfSpecVersionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      status_ = 0;
      greatestThreadrunNumber_ = 0;
      startTime_ = null;
      if (startTimeBuilder_ != null) {
        startTimeBuilder_.dispose();
        startTimeBuilder_ = null;
      }
      endTime_ = null;
      if (endTimeBuilder_ != null) {
        endTimeBuilder_.dispose();
        endTimeBuilder_ = null;
      }
      if (threadRunsBuilder_ == null) {
        threadRuns_ = java.util.Collections.emptyList();
      } else {
        threadRuns_ = null;
        threadRunsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000080);
      if (pendingInterruptsBuilder_ == null) {
        pendingInterrupts_ = java.util.Collections.emptyList();
      } else {
        pendingInterrupts_ = null;
        pendingInterruptsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000100);
      if (pendingFailuresBuilder_ == null) {
        pendingFailures_ = java.util.Collections.emptyList();
      } else {
        pendingFailures_ = null;
        pendingFailuresBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000200);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.WfRunOuterClass.internal_static_littlehorse_WfRun_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.WfRun getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.WfRun.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.WfRun build() {
      io.littlehorse.sdk.common.proto.WfRun result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.WfRun buildPartial() {
      io.littlehorse.sdk.common.proto.WfRun result = new io.littlehorse.sdk.common.proto.WfRun(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.littlehorse.sdk.common.proto.WfRun result) {
      if (oldWfSpecVersionsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          oldWfSpecVersions_ = java.util.Collections.unmodifiableList(oldWfSpecVersions_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.oldWfSpecVersions_ = oldWfSpecVersions_;
      } else {
        result.oldWfSpecVersions_ = oldWfSpecVersionsBuilder_.build();
      }
      if (threadRunsBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0)) {
          threadRuns_ = java.util.Collections.unmodifiableList(threadRuns_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.threadRuns_ = threadRuns_;
      } else {
        result.threadRuns_ = threadRunsBuilder_.build();
      }
      if (pendingInterruptsBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0)) {
          pendingInterrupts_ = java.util.Collections.unmodifiableList(pendingInterrupts_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.pendingInterrupts_ = pendingInterrupts_;
      } else {
        result.pendingInterrupts_ = pendingInterruptsBuilder_.build();
      }
      if (pendingFailuresBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0)) {
          pendingFailures_ = java.util.Collections.unmodifiableList(pendingFailures_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.pendingFailures_ = pendingFailures_;
      } else {
        result.pendingFailures_ = pendingFailuresBuilder_.build();
      }
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.WfRun result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.id_ = idBuilder_ == null
            ? id_
            : idBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.wfSpecId_ = wfSpecIdBuilder_ == null
            ? wfSpecId_
            : wfSpecIdBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.status_ = status_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.greatestThreadrunNumber_ = greatestThreadrunNumber_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.startTime_ = startTimeBuilder_ == null
            ? startTime_
            : startTimeBuilder_.build();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.endTime_ = endTimeBuilder_ == null
            ? endTime_
            : endTimeBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.WfRun) {
        return mergeFrom((io.littlehorse.sdk.common.proto.WfRun)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.WfRun other) {
      if (other == io.littlehorse.sdk.common.proto.WfRun.getDefaultInstance()) return this;
      if (other.hasId()) {
        mergeId(other.getId());
      }
      if (other.hasWfSpecId()) {
        mergeWfSpecId(other.getWfSpecId());
      }
      if (oldWfSpecVersionsBuilder_ == null) {
        if (!other.oldWfSpecVersions_.isEmpty()) {
          if (oldWfSpecVersions_.isEmpty()) {
            oldWfSpecVersions_ = other.oldWfSpecVersions_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureOldWfSpecVersionsIsMutable();
            oldWfSpecVersions_.addAll(other.oldWfSpecVersions_);
          }
          onChanged();
        }
      } else {
        if (!other.oldWfSpecVersions_.isEmpty()) {
          if (oldWfSpecVersionsBuilder_.isEmpty()) {
            oldWfSpecVersionsBuilder_.dispose();
            oldWfSpecVersionsBuilder_ = null;
            oldWfSpecVersions_ = other.oldWfSpecVersions_;
            bitField0_ = (bitField0_ & ~0x00000004);
            oldWfSpecVersionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getOldWfSpecVersionsFieldBuilder() : null;
          } else {
            oldWfSpecVersionsBuilder_.addAllMessages(other.oldWfSpecVersions_);
          }
        }
      }
      if (other.status_ != 0) {
        setStatusValue(other.getStatusValue());
      }
      if (other.getGreatestThreadrunNumber() != 0) {
        setGreatestThreadrunNumber(other.getGreatestThreadrunNumber());
      }
      if (other.hasStartTime()) {
        mergeStartTime(other.getStartTime());
      }
      if (other.hasEndTime()) {
        mergeEndTime(other.getEndTime());
      }
      if (threadRunsBuilder_ == null) {
        if (!other.threadRuns_.isEmpty()) {
          if (threadRuns_.isEmpty()) {
            threadRuns_ = other.threadRuns_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureThreadRunsIsMutable();
            threadRuns_.addAll(other.threadRuns_);
          }
          onChanged();
        }
      } else {
        if (!other.threadRuns_.isEmpty()) {
          if (threadRunsBuilder_.isEmpty()) {
            threadRunsBuilder_.dispose();
            threadRunsBuilder_ = null;
            threadRuns_ = other.threadRuns_;
            bitField0_ = (bitField0_ & ~0x00000080);
            threadRunsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getThreadRunsFieldBuilder() : null;
          } else {
            threadRunsBuilder_.addAllMessages(other.threadRuns_);
          }
        }
      }
      if (pendingInterruptsBuilder_ == null) {
        if (!other.pendingInterrupts_.isEmpty()) {
          if (pendingInterrupts_.isEmpty()) {
            pendingInterrupts_ = other.pendingInterrupts_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePendingInterruptsIsMutable();
            pendingInterrupts_.addAll(other.pendingInterrupts_);
          }
          onChanged();
        }
      } else {
        if (!other.pendingInterrupts_.isEmpty()) {
          if (pendingInterruptsBuilder_.isEmpty()) {
            pendingInterruptsBuilder_.dispose();
            pendingInterruptsBuilder_ = null;
            pendingInterrupts_ = other.pendingInterrupts_;
            bitField0_ = (bitField0_ & ~0x00000100);
            pendingInterruptsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPendingInterruptsFieldBuilder() : null;
          } else {
            pendingInterruptsBuilder_.addAllMessages(other.pendingInterrupts_);
          }
        }
      }
      if (pendingFailuresBuilder_ == null) {
        if (!other.pendingFailures_.isEmpty()) {
          if (pendingFailures_.isEmpty()) {
            pendingFailures_ = other.pendingFailures_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensurePendingFailuresIsMutable();
            pendingFailures_.addAll(other.pendingFailures_);
          }
          onChanged();
        }
      } else {
        if (!other.pendingFailures_.isEmpty()) {
          if (pendingFailuresBuilder_.isEmpty()) {
            pendingFailuresBuilder_.dispose();
            pendingFailuresBuilder_ = null;
            pendingFailures_ = other.pendingFailures_;
            bitField0_ = (bitField0_ & ~0x00000200);
            pendingFailuresBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPendingFailuresFieldBuilder() : null;
          } else {
            pendingFailuresBuilder_.addAllMessages(other.pendingFailures_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getWfSpecIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              io.littlehorse.sdk.common.proto.WfSpecId m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.WfSpecId.parser(),
                      extensionRegistry);
              if (oldWfSpecVersionsBuilder_ == null) {
                ensureOldWfSpecVersionsIsMutable();
                oldWfSpecVersions_.add(m);
              } else {
                oldWfSpecVersionsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 32: {
              status_ = input.readEnum();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              greatestThreadrunNumber_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 50: {
              input.readMessage(
                  getStartTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getEndTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 66: {
              io.littlehorse.sdk.common.proto.ThreadRun m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.ThreadRun.parser(),
                      extensionRegistry);
              if (threadRunsBuilder_ == null) {
                ensureThreadRunsIsMutable();
                threadRuns_.add(m);
              } else {
                threadRunsBuilder_.addMessage(m);
              }
              break;
            } // case 66
            case 74: {
              io.littlehorse.sdk.common.proto.PendingInterrupt m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.PendingInterrupt.parser(),
                      extensionRegistry);
              if (pendingInterruptsBuilder_ == null) {
                ensurePendingInterruptsIsMutable();
                pendingInterrupts_.add(m);
              } else {
                pendingInterruptsBuilder_.addMessage(m);
              }
              break;
            } // case 74
            case 82: {
              io.littlehorse.sdk.common.proto.PendingFailureHandler m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.PendingFailureHandler.parser(),
                      extensionRegistry);
              if (pendingFailuresBuilder_ == null) {
                ensurePendingFailuresIsMutable();
                pendingFailures_.add(m);
              } else {
                pendingFailuresBuilder_.addMessage(m);
              }
              break;
            } // case 82
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.littlehorse.sdk.common.proto.WfRunId id_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfRunId, io.littlehorse.sdk.common.proto.WfRunId.Builder, io.littlehorse.sdk.common.proto.WfRunIdOrBuilder> idBuilder_;
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     * @return Whether the id field is set.
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     * @return The id.
     */
    public io.littlehorse.sdk.common.proto.WfRunId getId() {
      if (idBuilder_ == null) {
        return id_ == null ? io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : id_;
      } else {
        return idBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     */
    public Builder setId(io.littlehorse.sdk.common.proto.WfRunId value) {
      if (idBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        id_ = value;
      } else {
        idBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     */
    public Builder setId(
        io.littlehorse.sdk.common.proto.WfRunId.Builder builderForValue) {
      if (idBuilder_ == null) {
        id_ = builderForValue.build();
      } else {
        idBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     */
    public Builder mergeId(io.littlehorse.sdk.common.proto.WfRunId value) {
      if (idBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          id_ != null &&
          id_ != io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance()) {
          getIdBuilder().mergeFrom(value);
        } else {
          id_ = value;
        }
      } else {
        idBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     */
    public Builder clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = null;
      if (idBuilder_ != null) {
        idBuilder_.dispose();
        idBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.WfRunId.Builder getIdBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.WfRunIdOrBuilder getIdOrBuilder() {
      if (idBuilder_ != null) {
        return idBuilder_.getMessageOrBuilder();
      } else {
        return id_ == null ?
            io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : id_;
      }
    }
    /**
     * <pre>
     * The ID of the WfRun.
     * </pre>
     *
     * <code>.littlehorse.WfRunId id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfRunId, io.littlehorse.sdk.common.proto.WfRunId.Builder, io.littlehorse.sdk.common.proto.WfRunIdOrBuilder> 
        getIdFieldBuilder() {
      if (idBuilder_ == null) {
        idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.WfRunId, io.littlehorse.sdk.common.proto.WfRunId.Builder, io.littlehorse.sdk.common.proto.WfRunIdOrBuilder>(
                getId(),
                getParentForChildren(),
                isClean());
        id_ = null;
      }
      return idBuilder_;
    }

    private io.littlehorse.sdk.common.proto.WfSpecId wfSpecId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> wfSpecIdBuilder_;
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     * @return Whether the wfSpecId field is set.
     */
    public boolean hasWfSpecId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     * @return The wfSpecId.
     */
    public io.littlehorse.sdk.common.proto.WfSpecId getWfSpecId() {
      if (wfSpecIdBuilder_ == null) {
        return wfSpecId_ == null ? io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
      } else {
        return wfSpecIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     */
    public Builder setWfSpecId(io.littlehorse.sdk.common.proto.WfSpecId value) {
      if (wfSpecIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        wfSpecId_ = value;
      } else {
        wfSpecIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     */
    public Builder setWfSpecId(
        io.littlehorse.sdk.common.proto.WfSpecId.Builder builderForValue) {
      if (wfSpecIdBuilder_ == null) {
        wfSpecId_ = builderForValue.build();
      } else {
        wfSpecIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     */
    public Builder mergeWfSpecId(io.littlehorse.sdk.common.proto.WfSpecId value) {
      if (wfSpecIdBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          wfSpecId_ != null &&
          wfSpecId_ != io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance()) {
          getWfSpecIdBuilder().mergeFrom(value);
        } else {
          wfSpecId_ = value;
        }
      } else {
        wfSpecIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     */
    public Builder clearWfSpecId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      wfSpecId_ = null;
      if (wfSpecIdBuilder_ != null) {
        wfSpecIdBuilder_.dispose();
        wfSpecIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecId.Builder getWfSpecIdBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getWfSpecIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder getWfSpecIdOrBuilder() {
      if (wfSpecIdBuilder_ != null) {
        return wfSpecIdBuilder_.getMessageOrBuilder();
      } else {
        return wfSpecId_ == null ?
            io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance() : wfSpecId_;
      }
    }
    /**
     * <pre>
     * The ID of the WfSpec that this WfRun belongs to.
     * </pre>
     *
     * <code>.littlehorse.WfSpecId wf_spec_id = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> 
        getWfSpecIdFieldBuilder() {
      if (wfSpecIdBuilder_ == null) {
        wfSpecIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder>(
                getWfSpecId(),
                getParentForChildren(),
                isClean());
        wfSpecId_ = null;
      }
      return wfSpecIdBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.WfSpecId> oldWfSpecVersions_ =
      java.util.Collections.emptyList();
    private void ensureOldWfSpecVersionsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        oldWfSpecVersions_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.WfSpecId>(oldWfSpecVersions_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> oldWfSpecVersionsBuilder_;

    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.WfSpecId> getOldWfSpecVersionsList() {
      if (oldWfSpecVersionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(oldWfSpecVersions_);
      } else {
        return oldWfSpecVersionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public int getOldWfSpecVersionsCount() {
      if (oldWfSpecVersionsBuilder_ == null) {
        return oldWfSpecVersions_.size();
      } else {
        return oldWfSpecVersionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecId getOldWfSpecVersions(int index) {
      if (oldWfSpecVersionsBuilder_ == null) {
        return oldWfSpecVersions_.get(index);
      } else {
        return oldWfSpecVersionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder setOldWfSpecVersions(
        int index, io.littlehorse.sdk.common.proto.WfSpecId value) {
      if (oldWfSpecVersionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOldWfSpecVersionsIsMutable();
        oldWfSpecVersions_.set(index, value);
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder setOldWfSpecVersions(
        int index, io.littlehorse.sdk.common.proto.WfSpecId.Builder builderForValue) {
      if (oldWfSpecVersionsBuilder_ == null) {
        ensureOldWfSpecVersionsIsMutable();
        oldWfSpecVersions_.set(index, builderForValue.build());
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder addOldWfSpecVersions(io.littlehorse.sdk.common.proto.WfSpecId value) {
      if (oldWfSpecVersionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOldWfSpecVersionsIsMutable();
        oldWfSpecVersions_.add(value);
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder addOldWfSpecVersions(
        int index, io.littlehorse.sdk.common.proto.WfSpecId value) {
      if (oldWfSpecVersionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOldWfSpecVersionsIsMutable();
        oldWfSpecVersions_.add(index, value);
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder addOldWfSpecVersions(
        io.littlehorse.sdk.common.proto.WfSpecId.Builder builderForValue) {
      if (oldWfSpecVersionsBuilder_ == null) {
        ensureOldWfSpecVersionsIsMutable();
        oldWfSpecVersions_.add(builderForValue.build());
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder addOldWfSpecVersions(
        int index, io.littlehorse.sdk.common.proto.WfSpecId.Builder builderForValue) {
      if (oldWfSpecVersionsBuilder_ == null) {
        ensureOldWfSpecVersionsIsMutable();
        oldWfSpecVersions_.add(index, builderForValue.build());
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder addAllOldWfSpecVersions(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.WfSpecId> values) {
      if (oldWfSpecVersionsBuilder_ == null) {
        ensureOldWfSpecVersionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, oldWfSpecVersions_);
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder clearOldWfSpecVersions() {
      if (oldWfSpecVersionsBuilder_ == null) {
        oldWfSpecVersions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public Builder removeOldWfSpecVersions(int index) {
      if (oldWfSpecVersionsBuilder_ == null) {
        ensureOldWfSpecVersionsIsMutable();
        oldWfSpecVersions_.remove(index);
        onChanged();
      } else {
        oldWfSpecVersionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecId.Builder getOldWfSpecVersionsBuilder(
        int index) {
      return getOldWfSpecVersionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder getOldWfSpecVersionsOrBuilder(
        int index) {
      if (oldWfSpecVersionsBuilder_ == null) {
        return oldWfSpecVersions_.get(index);  } else {
        return oldWfSpecVersionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> 
         getOldWfSpecVersionsOrBuilderList() {
      if (oldWfSpecVersionsBuilder_ != null) {
        return oldWfSpecVersionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(oldWfSpecVersions_);
      }
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecId.Builder addOldWfSpecVersionsBuilder() {
      return getOldWfSpecVersionsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance());
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WfSpecId.Builder addOldWfSpecVersionsBuilder(
        int index) {
      return getOldWfSpecVersionsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.WfSpecId.getDefaultInstance());
    }
    /**
     * <pre>
     * When a WfRun is migrated from an old verison of a WfSpec to a newer one, we add the
     * old WfSpecId to this list for historical auditing and debugging purposes.
     * </pre>
     *
     * <code>repeated .littlehorse.WfSpecId old_wf_spec_versions = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.WfSpecId.Builder> 
         getOldWfSpecVersionsBuilderList() {
      return getOldWfSpecVersionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder> 
        getOldWfSpecVersionsFieldBuilder() {
      if (oldWfSpecVersionsBuilder_ == null) {
        oldWfSpecVersionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.WfSpecId, io.littlehorse.sdk.common.proto.WfSpecId.Builder, io.littlehorse.sdk.common.proto.WfSpecIdOrBuilder>(
                oldWfSpecVersions_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        oldWfSpecVersions_ = null;
      }
      return oldWfSpecVersionsBuilder_;
    }

    private int status_ = 0;
    /**
     * <pre>
     * The status of this WfRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 4;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * The status of this WfRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 4;</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(int value) {
      status_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of this WfRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 4;</code>
     * @return The status.
     */
    @java.lang.Override
    public io.littlehorse.sdk.common.proto.LHStatus getStatus() {
      io.littlehorse.sdk.common.proto.LHStatus result = io.littlehorse.sdk.common.proto.LHStatus.forNumber(status_);
      return result == null ? io.littlehorse.sdk.common.proto.LHStatus.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The status of this WfRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 4;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(io.littlehorse.sdk.common.proto.LHStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      status_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of this WfRun.
     * </pre>
     *
     * <code>.littlehorse.LHStatus status = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000008);
      status_ = 0;
      onChanged();
      return this;
    }

    private int greatestThreadrunNumber_ ;
    /**
     * <pre>
     * The ID number of the greatest ThreadRUn in this WfRun. The total number of ThreadRuns
     * is given by greatest_thread_run_number + 1.
     *
     * Introduced now since with ThreadRun-level retention, we can't rely upon
     * thread_runs.size() to determine the number of ThreadRuns, as a ThreadRun is removed
     * from the thread_runs list once its retention period expires.
     * </pre>
     *
     * <code>int32 greatest_threadrun_number = 5;</code>
     * @return The greatestThreadrunNumber.
     */
    @java.lang.Override
    public int getGreatestThreadrunNumber() {
      return greatestThreadrunNumber_;
    }
    /**
     * <pre>
     * The ID number of the greatest ThreadRUn in this WfRun. The total number of ThreadRuns
     * is given by greatest_thread_run_number + 1.
     *
     * Introduced now since with ThreadRun-level retention, we can't rely upon
     * thread_runs.size() to determine the number of ThreadRuns, as a ThreadRun is removed
     * from the thread_runs list once its retention period expires.
     * </pre>
     *
     * <code>int32 greatest_threadrun_number = 5;</code>
     * @param value The greatestThreadrunNumber to set.
     * @return This builder for chaining.
     */
    public Builder setGreatestThreadrunNumber(int value) {

      greatestThreadrunNumber_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID number of the greatest ThreadRUn in this WfRun. The total number of ThreadRuns
     * is given by greatest_thread_run_number + 1.
     *
     * Introduced now since with ThreadRun-level retention, we can't rely upon
     * thread_runs.size() to determine the number of ThreadRuns, as a ThreadRun is removed
     * from the thread_runs list once its retention period expires.
     * </pre>
     *
     * <code>int32 greatest_threadrun_number = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearGreatestThreadrunNumber() {
      bitField0_ = (bitField0_ & ~0x00000010);
      greatestThreadrunNumber_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp startTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> startTimeBuilder_;
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     * @return Whether the startTime field is set.
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     * @return The startTime.
     */
    public com.google.protobuf.Timestamp getStartTime() {
      if (startTimeBuilder_ == null) {
        return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
      } else {
        return startTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     */
    public Builder setStartTime(com.google.protobuf.Timestamp value) {
      if (startTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        startTime_ = value;
      } else {
        startTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     */
    public Builder setStartTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (startTimeBuilder_ == null) {
        startTime_ = builderForValue.build();
      } else {
        startTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     */
    public Builder mergeStartTime(com.google.protobuf.Timestamp value) {
      if (startTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          startTime_ != null &&
          startTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getStartTimeBuilder().mergeFrom(value);
        } else {
          startTime_ = value;
        }
      } else {
        startTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     */
    public Builder clearStartTime() {
      bitField0_ = (bitField0_ & ~0x00000020);
      startTime_ = null;
      if (startTimeBuilder_ != null) {
        startTimeBuilder_.dispose();
        startTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     */
    public com.google.protobuf.Timestamp.Builder getStartTimeBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getStartTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
      if (startTimeBuilder_ != null) {
        return startTimeBuilder_.getMessageOrBuilder();
      } else {
        return startTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
      }
    }
    /**
     * <pre>
     * The time the WfRun was started.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getStartTimeFieldBuilder() {
      if (startTimeBuilder_ == null) {
        startTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getStartTime(),
                getParentForChildren(),
                isClean());
        startTime_ = null;
      }
      return startTimeBuilder_;
    }

    private com.google.protobuf.Timestamp endTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> endTimeBuilder_;
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     * @return Whether the endTime field is set.
     */
    public boolean hasEndTime() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     * @return The endTime.
     */
    public com.google.protobuf.Timestamp getEndTime() {
      if (endTimeBuilder_ == null) {
        return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
      } else {
        return endTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     */
    public Builder setEndTime(com.google.protobuf.Timestamp value) {
      if (endTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        endTime_ = value;
      } else {
        endTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     */
    public Builder setEndTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (endTimeBuilder_ == null) {
        endTime_ = builderForValue.build();
      } else {
        endTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     */
    public Builder mergeEndTime(com.google.protobuf.Timestamp value) {
      if (endTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          endTime_ != null &&
          endTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getEndTimeBuilder().mergeFrom(value);
        } else {
          endTime_ = value;
        }
      } else {
        endTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     */
    public Builder clearEndTime() {
      bitField0_ = (bitField0_ & ~0x00000040);
      endTime_ = null;
      if (endTimeBuilder_ != null) {
        endTimeBuilder_.dispose();
        endTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     */
    public com.google.protobuf.Timestamp.Builder getEndTimeBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getEndTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder() {
      if (endTimeBuilder_ != null) {
        return endTimeBuilder_.getMessageOrBuilder();
      } else {
        return endTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
      }
    }
    /**
     * <pre>
     * The time the WfRun failed or completed.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp end_time = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getEndTimeFieldBuilder() {
      if (endTimeBuilder_ == null) {
        endTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getEndTime(),
                getParentForChildren(),
                isClean());
        endTime_ = null;
      }
      return endTimeBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.ThreadRun> threadRuns_ =
      java.util.Collections.emptyList();
    private void ensureThreadRunsIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        threadRuns_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.ThreadRun>(threadRuns_);
        bitField0_ |= 0x00000080;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadRun, io.littlehorse.sdk.common.proto.ThreadRun.Builder, io.littlehorse.sdk.common.proto.ThreadRunOrBuilder> threadRunsBuilder_;

    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.ThreadRun> getThreadRunsList() {
      if (threadRunsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(threadRuns_);
      } else {
        return threadRunsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public int getThreadRunsCount() {
      if (threadRunsBuilder_ == null) {
        return threadRuns_.size();
      } else {
        return threadRunsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadRun getThreadRuns(int index) {
      if (threadRunsBuilder_ == null) {
        return threadRuns_.get(index);
      } else {
        return threadRunsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder setThreadRuns(
        int index, io.littlehorse.sdk.common.proto.ThreadRun value) {
      if (threadRunsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureThreadRunsIsMutable();
        threadRuns_.set(index, value);
        onChanged();
      } else {
        threadRunsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder setThreadRuns(
        int index, io.littlehorse.sdk.common.proto.ThreadRun.Builder builderForValue) {
      if (threadRunsBuilder_ == null) {
        ensureThreadRunsIsMutable();
        threadRuns_.set(index, builderForValue.build());
        onChanged();
      } else {
        threadRunsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder addThreadRuns(io.littlehorse.sdk.common.proto.ThreadRun value) {
      if (threadRunsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureThreadRunsIsMutable();
        threadRuns_.add(value);
        onChanged();
      } else {
        threadRunsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder addThreadRuns(
        int index, io.littlehorse.sdk.common.proto.ThreadRun value) {
      if (threadRunsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureThreadRunsIsMutable();
        threadRuns_.add(index, value);
        onChanged();
      } else {
        threadRunsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder addThreadRuns(
        io.littlehorse.sdk.common.proto.ThreadRun.Builder builderForValue) {
      if (threadRunsBuilder_ == null) {
        ensureThreadRunsIsMutable();
        threadRuns_.add(builderForValue.build());
        onChanged();
      } else {
        threadRunsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder addThreadRuns(
        int index, io.littlehorse.sdk.common.proto.ThreadRun.Builder builderForValue) {
      if (threadRunsBuilder_ == null) {
        ensureThreadRunsIsMutable();
        threadRuns_.add(index, builderForValue.build());
        onChanged();
      } else {
        threadRunsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder addAllThreadRuns(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.ThreadRun> values) {
      if (threadRunsBuilder_ == null) {
        ensureThreadRunsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, threadRuns_);
        onChanged();
      } else {
        threadRunsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder clearThreadRuns() {
      if (threadRunsBuilder_ == null) {
        threadRuns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
      } else {
        threadRunsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public Builder removeThreadRuns(int index) {
      if (threadRunsBuilder_ == null) {
        ensureThreadRunsIsMutable();
        threadRuns_.remove(index);
        onChanged();
      } else {
        threadRunsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadRun.Builder getThreadRunsBuilder(
        int index) {
      return getThreadRunsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadRunOrBuilder getThreadRunsOrBuilder(
        int index) {
      if (threadRunsBuilder_ == null) {
        return threadRuns_.get(index);  } else {
        return threadRunsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.ThreadRunOrBuilder> 
         getThreadRunsOrBuilderList() {
      if (threadRunsBuilder_ != null) {
        return threadRunsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(threadRuns_);
      }
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadRun.Builder addThreadRunsBuilder() {
      return getThreadRunsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.ThreadRun.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public io.littlehorse.sdk.common.proto.ThreadRun.Builder addThreadRunsBuilder(
        int index) {
      return getThreadRunsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.ThreadRun.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of all active ThreadRun's and terminated ThreadRun's whose retention periods
     * have not yet expired.
     * </pre>
     *
     * <code>repeated .littlehorse.ThreadRun thread_runs = 8;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.ThreadRun.Builder> 
         getThreadRunsBuilderList() {
      return getThreadRunsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.ThreadRun, io.littlehorse.sdk.common.proto.ThreadRun.Builder, io.littlehorse.sdk.common.proto.ThreadRunOrBuilder> 
        getThreadRunsFieldBuilder() {
      if (threadRunsBuilder_ == null) {
        threadRunsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.ThreadRun, io.littlehorse.sdk.common.proto.ThreadRun.Builder, io.littlehorse.sdk.common.proto.ThreadRunOrBuilder>(
                threadRuns_,
                ((bitField0_ & 0x00000080) != 0),
                getParentForChildren(),
                isClean());
        threadRuns_ = null;
      }
      return threadRunsBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.PendingInterrupt> pendingInterrupts_ =
      java.util.Collections.emptyList();
    private void ensurePendingInterruptsIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        pendingInterrupts_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.PendingInterrupt>(pendingInterrupts_);
        bitField0_ |= 0x00000100;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.PendingInterrupt, io.littlehorse.sdk.common.proto.PendingInterrupt.Builder, io.littlehorse.sdk.common.proto.PendingInterruptOrBuilder> pendingInterruptsBuilder_;

    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.PendingInterrupt> getPendingInterruptsList() {
      if (pendingInterruptsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(pendingInterrupts_);
      } else {
        return pendingInterruptsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public int getPendingInterruptsCount() {
      if (pendingInterruptsBuilder_ == null) {
        return pendingInterrupts_.size();
      } else {
        return pendingInterruptsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingInterrupt getPendingInterrupts(int index) {
      if (pendingInterruptsBuilder_ == null) {
        return pendingInterrupts_.get(index);
      } else {
        return pendingInterruptsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder setPendingInterrupts(
        int index, io.littlehorse.sdk.common.proto.PendingInterrupt value) {
      if (pendingInterruptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingInterruptsIsMutable();
        pendingInterrupts_.set(index, value);
        onChanged();
      } else {
        pendingInterruptsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder setPendingInterrupts(
        int index, io.littlehorse.sdk.common.proto.PendingInterrupt.Builder builderForValue) {
      if (pendingInterruptsBuilder_ == null) {
        ensurePendingInterruptsIsMutable();
        pendingInterrupts_.set(index, builderForValue.build());
        onChanged();
      } else {
        pendingInterruptsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder addPendingInterrupts(io.littlehorse.sdk.common.proto.PendingInterrupt value) {
      if (pendingInterruptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingInterruptsIsMutable();
        pendingInterrupts_.add(value);
        onChanged();
      } else {
        pendingInterruptsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder addPendingInterrupts(
        int index, io.littlehorse.sdk.common.proto.PendingInterrupt value) {
      if (pendingInterruptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingInterruptsIsMutable();
        pendingInterrupts_.add(index, value);
        onChanged();
      } else {
        pendingInterruptsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder addPendingInterrupts(
        io.littlehorse.sdk.common.proto.PendingInterrupt.Builder builderForValue) {
      if (pendingInterruptsBuilder_ == null) {
        ensurePendingInterruptsIsMutable();
        pendingInterrupts_.add(builderForValue.build());
        onChanged();
      } else {
        pendingInterruptsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder addPendingInterrupts(
        int index, io.littlehorse.sdk.common.proto.PendingInterrupt.Builder builderForValue) {
      if (pendingInterruptsBuilder_ == null) {
        ensurePendingInterruptsIsMutable();
        pendingInterrupts_.add(index, builderForValue.build());
        onChanged();
      } else {
        pendingInterruptsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder addAllPendingInterrupts(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.PendingInterrupt> values) {
      if (pendingInterruptsBuilder_ == null) {
        ensurePendingInterruptsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pendingInterrupts_);
        onChanged();
      } else {
        pendingInterruptsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder clearPendingInterrupts() {
      if (pendingInterruptsBuilder_ == null) {
        pendingInterrupts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
      } else {
        pendingInterruptsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public Builder removePendingInterrupts(int index) {
      if (pendingInterruptsBuilder_ == null) {
        ensurePendingInterruptsIsMutable();
        pendingInterrupts_.remove(index);
        onChanged();
      } else {
        pendingInterruptsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingInterrupt.Builder getPendingInterruptsBuilder(
        int index) {
      return getPendingInterruptsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingInterruptOrBuilder getPendingInterruptsOrBuilder(
        int index) {
      if (pendingInterruptsBuilder_ == null) {
        return pendingInterrupts_.get(index);  } else {
        return pendingInterruptsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.PendingInterruptOrBuilder> 
         getPendingInterruptsOrBuilderList() {
      if (pendingInterruptsBuilder_ != null) {
        return pendingInterruptsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(pendingInterrupts_);
      }
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingInterrupt.Builder addPendingInterruptsBuilder() {
      return getPendingInterruptsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.PendingInterrupt.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingInterrupt.Builder addPendingInterruptsBuilder(
        int index) {
      return getPendingInterruptsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.PendingInterrupt.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of Interrupt events that will fire once their appropriate ThreadRun's finish
     * halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingInterrupt pending_interrupts = 9;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.PendingInterrupt.Builder> 
         getPendingInterruptsBuilderList() {
      return getPendingInterruptsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.PendingInterrupt, io.littlehorse.sdk.common.proto.PendingInterrupt.Builder, io.littlehorse.sdk.common.proto.PendingInterruptOrBuilder> 
        getPendingInterruptsFieldBuilder() {
      if (pendingInterruptsBuilder_ == null) {
        pendingInterruptsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.PendingInterrupt, io.littlehorse.sdk.common.proto.PendingInterrupt.Builder, io.littlehorse.sdk.common.proto.PendingInterruptOrBuilder>(
                pendingInterrupts_,
                ((bitField0_ & 0x00000100) != 0),
                getParentForChildren(),
                isClean());
        pendingInterrupts_ = null;
      }
      return pendingInterruptsBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.PendingFailureHandler> pendingFailures_ =
      java.util.Collections.emptyList();
    private void ensurePendingFailuresIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        pendingFailures_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.PendingFailureHandler>(pendingFailures_);
        bitField0_ |= 0x00000200;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.PendingFailureHandler, io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder, io.littlehorse.sdk.common.proto.PendingFailureHandlerOrBuilder> pendingFailuresBuilder_;

    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.PendingFailureHandler> getPendingFailuresList() {
      if (pendingFailuresBuilder_ == null) {
        return java.util.Collections.unmodifiableList(pendingFailures_);
      } else {
        return pendingFailuresBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public int getPendingFailuresCount() {
      if (pendingFailuresBuilder_ == null) {
        return pendingFailures_.size();
      } else {
        return pendingFailuresBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingFailureHandler getPendingFailures(int index) {
      if (pendingFailuresBuilder_ == null) {
        return pendingFailures_.get(index);
      } else {
        return pendingFailuresBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder setPendingFailures(
        int index, io.littlehorse.sdk.common.proto.PendingFailureHandler value) {
      if (pendingFailuresBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingFailuresIsMutable();
        pendingFailures_.set(index, value);
        onChanged();
      } else {
        pendingFailuresBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder setPendingFailures(
        int index, io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder builderForValue) {
      if (pendingFailuresBuilder_ == null) {
        ensurePendingFailuresIsMutable();
        pendingFailures_.set(index, builderForValue.build());
        onChanged();
      } else {
        pendingFailuresBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder addPendingFailures(io.littlehorse.sdk.common.proto.PendingFailureHandler value) {
      if (pendingFailuresBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingFailuresIsMutable();
        pendingFailures_.add(value);
        onChanged();
      } else {
        pendingFailuresBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder addPendingFailures(
        int index, io.littlehorse.sdk.common.proto.PendingFailureHandler value) {
      if (pendingFailuresBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingFailuresIsMutable();
        pendingFailures_.add(index, value);
        onChanged();
      } else {
        pendingFailuresBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder addPendingFailures(
        io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder builderForValue) {
      if (pendingFailuresBuilder_ == null) {
        ensurePendingFailuresIsMutable();
        pendingFailures_.add(builderForValue.build());
        onChanged();
      } else {
        pendingFailuresBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder addPendingFailures(
        int index, io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder builderForValue) {
      if (pendingFailuresBuilder_ == null) {
        ensurePendingFailuresIsMutable();
        pendingFailures_.add(index, builderForValue.build());
        onChanged();
      } else {
        pendingFailuresBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder addAllPendingFailures(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.PendingFailureHandler> values) {
      if (pendingFailuresBuilder_ == null) {
        ensurePendingFailuresIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pendingFailures_);
        onChanged();
      } else {
        pendingFailuresBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder clearPendingFailures() {
      if (pendingFailuresBuilder_ == null) {
        pendingFailures_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
      } else {
        pendingFailuresBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public Builder removePendingFailures(int index) {
      if (pendingFailuresBuilder_ == null) {
        ensurePendingFailuresIsMutable();
        pendingFailures_.remove(index);
        onChanged();
      } else {
        pendingFailuresBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder getPendingFailuresBuilder(
        int index) {
      return getPendingFailuresFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingFailureHandlerOrBuilder getPendingFailuresOrBuilder(
        int index) {
      if (pendingFailuresBuilder_ == null) {
        return pendingFailures_.get(index);  } else {
        return pendingFailuresBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.PendingFailureHandlerOrBuilder> 
         getPendingFailuresOrBuilderList() {
      if (pendingFailuresBuilder_ != null) {
        return pendingFailuresBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(pendingFailures_);
      }
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder addPendingFailuresBuilder() {
      return getPendingFailuresFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.PendingFailureHandler.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder addPendingFailuresBuilder(
        int index) {
      return getPendingFailuresFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.PendingFailureHandler.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of pending failure handlers which will fire once their appropriate ThreadRun's
     * finish halting.
     * </pre>
     *
     * <code>repeated .littlehorse.PendingFailureHandler pending_failures = 10;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder> 
         getPendingFailuresBuilderList() {
      return getPendingFailuresFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.PendingFailureHandler, io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder, io.littlehorse.sdk.common.proto.PendingFailureHandlerOrBuilder> 
        getPendingFailuresFieldBuilder() {
      if (pendingFailuresBuilder_ == null) {
        pendingFailuresBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.PendingFailureHandler, io.littlehorse.sdk.common.proto.PendingFailureHandler.Builder, io.littlehorse.sdk.common.proto.PendingFailureHandlerOrBuilder>(
                pendingFailures_,
                ((bitField0_ & 0x00000200) != 0),
                getParentForChildren(),
                isClean());
        pendingFailures_ = null;
      }
      return pendingFailuresBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.WfRun)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.WfRun)
  private static final io.littlehorse.sdk.common.proto.WfRun DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.WfRun();
  }

  public static io.littlehorse.sdk.common.proto.WfRun getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WfRun>
      PARSER = new com.google.protobuf.AbstractParser<WfRun>() {
    @java.lang.Override
    public WfRun parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<WfRun> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WfRun> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfRun getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

