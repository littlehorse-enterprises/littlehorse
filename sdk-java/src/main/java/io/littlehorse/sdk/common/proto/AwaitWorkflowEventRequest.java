// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * Request to await until a WorkflowEvent of a certain WorkflowEventDef on a certain WfRun
 * is thrown. Relies upon native GRPC deadlines to configure timeouts.
 * </pre>
 *
 * Protobuf type {@code littlehorse.AwaitWorkflowEventRequest}
 */
public final class AwaitWorkflowEventRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:littlehorse.AwaitWorkflowEventRequest)
    AwaitWorkflowEventRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AwaitWorkflowEventRequest.newBuilder() to construct.
  private AwaitWorkflowEventRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AwaitWorkflowEventRequest() {
    eventDefIds_ = java.util.Collections.emptyList();
    workflowEventsToIgnore_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AwaitWorkflowEventRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.Service.internal_static_littlehorse_AwaitWorkflowEventRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.littlehorse.sdk.common.proto.Service.internal_static_littlehorse_AwaitWorkflowEventRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest.class, io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest.Builder.class);
  }

  public static final int WF_RUN_ID_FIELD_NUMBER = 1;
  private io.littlehorse.sdk.common.proto.WfRunId wfRunId_;
  /**
   * <pre>
   * The ID of the WfRun which must throw the WorkflowEvent.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   * @return Whether the wfRunId field is set.
   */
  @java.lang.Override
  public boolean hasWfRunId() {
    return wfRunId_ != null;
  }
  /**
   * <pre>
   * The ID of the WfRun which must throw the WorkflowEvent.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   * @return The wfRunId.
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfRunId getWfRunId() {
    return wfRunId_ == null ? io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : wfRunId_;
  }
  /**
   * <pre>
   * The ID of the WfRun which must throw the WorkflowEvent.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WfRunIdOrBuilder getWfRunIdOrBuilder() {
    return wfRunId_ == null ? io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : wfRunId_;
  }

  public static final int EVENT_DEF_IDS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventDefId> eventDefIds_;
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventDefId> getEventDefIdsList() {
    return eventDefIds_;
  }
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder> 
      getEventDefIdsOrBuilderList() {
    return eventDefIds_;
  }
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  @java.lang.Override
  public int getEventDefIdsCount() {
    return eventDefIds_.size();
  }
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WorkflowEventDefId getEventDefIds(int index) {
    return eventDefIds_.get(index);
  }
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder getEventDefIdsOrBuilder(
      int index) {
    return eventDefIds_.get(index);
  }

  public static final int WORKFLOW_EVENTS_TO_IGNORE_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventId> workflowEventsToIgnore_;
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventId> getWorkflowEventsToIgnoreList() {
    return workflowEventsToIgnore_;
  }
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder> 
      getWorkflowEventsToIgnoreOrBuilderList() {
    return workflowEventsToIgnore_;
  }
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  @java.lang.Override
  public int getWorkflowEventsToIgnoreCount() {
    return workflowEventsToIgnore_.size();
  }
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WorkflowEventId getWorkflowEventsToIgnore(int index) {
    return workflowEventsToIgnore_.get(index);
  }
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  @java.lang.Override
  public io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder getWorkflowEventsToIgnoreOrBuilder(
      int index) {
    return workflowEventsToIgnore_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (wfRunId_ != null) {
      output.writeMessage(1, getWfRunId());
    }
    for (int i = 0; i < eventDefIds_.size(); i++) {
      output.writeMessage(2, eventDefIds_.get(i));
    }
    for (int i = 0; i < workflowEventsToIgnore_.size(); i++) {
      output.writeMessage(3, workflowEventsToIgnore_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (wfRunId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getWfRunId());
    }
    for (int i = 0; i < eventDefIds_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, eventDefIds_.get(i));
    }
    for (int i = 0; i < workflowEventsToIgnore_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, workflowEventsToIgnore_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest)) {
      return super.equals(obj);
    }
    io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest other = (io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest) obj;

    if (hasWfRunId() != other.hasWfRunId()) return false;
    if (hasWfRunId()) {
      if (!getWfRunId()
          .equals(other.getWfRunId())) return false;
    }
    if (!getEventDefIdsList()
        .equals(other.getEventDefIdsList())) return false;
    if (!getWorkflowEventsToIgnoreList()
        .equals(other.getWorkflowEventsToIgnoreList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasWfRunId()) {
      hash = (37 * hash) + WF_RUN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getWfRunId().hashCode();
    }
    if (getEventDefIdsCount() > 0) {
      hash = (37 * hash) + EVENT_DEF_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getEventDefIdsList().hashCode();
    }
    if (getWorkflowEventsToIgnoreCount() > 0) {
      hash = (37 * hash) + WORKFLOW_EVENTS_TO_IGNORE_FIELD_NUMBER;
      hash = (53 * hash) + getWorkflowEventsToIgnoreList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Request to await until a WorkflowEvent of a certain WorkflowEventDef on a certain WfRun
   * is thrown. Relies upon native GRPC deadlines to configure timeouts.
   * </pre>
   *
   * Protobuf type {@code littlehorse.AwaitWorkflowEventRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:littlehorse.AwaitWorkflowEventRequest)
      io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.littlehorse.sdk.common.proto.Service.internal_static_littlehorse_AwaitWorkflowEventRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.littlehorse.sdk.common.proto.Service.internal_static_littlehorse_AwaitWorkflowEventRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest.class, io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest.Builder.class);
    }

    // Construct using io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      wfRunId_ = null;
      if (wfRunIdBuilder_ != null) {
        wfRunIdBuilder_.dispose();
        wfRunIdBuilder_ = null;
      }
      if (eventDefIdsBuilder_ == null) {
        eventDefIds_ = java.util.Collections.emptyList();
      } else {
        eventDefIds_ = null;
        eventDefIdsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (workflowEventsToIgnoreBuilder_ == null) {
        workflowEventsToIgnore_ = java.util.Collections.emptyList();
      } else {
        workflowEventsToIgnore_ = null;
        workflowEventsToIgnoreBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.littlehorse.sdk.common.proto.Service.internal_static_littlehorse_AwaitWorkflowEventRequest_descriptor;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest getDefaultInstanceForType() {
      return io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest.getDefaultInstance();
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest build() {
      io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest buildPartial() {
      io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest result = new io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest result) {
      if (eventDefIdsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          eventDefIds_ = java.util.Collections.unmodifiableList(eventDefIds_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.eventDefIds_ = eventDefIds_;
      } else {
        result.eventDefIds_ = eventDefIdsBuilder_.build();
      }
      if (workflowEventsToIgnoreBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          workflowEventsToIgnore_ = java.util.Collections.unmodifiableList(workflowEventsToIgnore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.workflowEventsToIgnore_ = workflowEventsToIgnore_;
      } else {
        result.workflowEventsToIgnore_ = workflowEventsToIgnoreBuilder_.build();
      }
    }

    private void buildPartial0(io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.wfRunId_ = wfRunIdBuilder_ == null
            ? wfRunId_
            : wfRunIdBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest) {
        return mergeFrom((io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest other) {
      if (other == io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest.getDefaultInstance()) return this;
      if (other.hasWfRunId()) {
        mergeWfRunId(other.getWfRunId());
      }
      if (eventDefIdsBuilder_ == null) {
        if (!other.eventDefIds_.isEmpty()) {
          if (eventDefIds_.isEmpty()) {
            eventDefIds_ = other.eventDefIds_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureEventDefIdsIsMutable();
            eventDefIds_.addAll(other.eventDefIds_);
          }
          onChanged();
        }
      } else {
        if (!other.eventDefIds_.isEmpty()) {
          if (eventDefIdsBuilder_.isEmpty()) {
            eventDefIdsBuilder_.dispose();
            eventDefIdsBuilder_ = null;
            eventDefIds_ = other.eventDefIds_;
            bitField0_ = (bitField0_ & ~0x00000002);
            eventDefIdsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEventDefIdsFieldBuilder() : null;
          } else {
            eventDefIdsBuilder_.addAllMessages(other.eventDefIds_);
          }
        }
      }
      if (workflowEventsToIgnoreBuilder_ == null) {
        if (!other.workflowEventsToIgnore_.isEmpty()) {
          if (workflowEventsToIgnore_.isEmpty()) {
            workflowEventsToIgnore_ = other.workflowEventsToIgnore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureWorkflowEventsToIgnoreIsMutable();
            workflowEventsToIgnore_.addAll(other.workflowEventsToIgnore_);
          }
          onChanged();
        }
      } else {
        if (!other.workflowEventsToIgnore_.isEmpty()) {
          if (workflowEventsToIgnoreBuilder_.isEmpty()) {
            workflowEventsToIgnoreBuilder_.dispose();
            workflowEventsToIgnoreBuilder_ = null;
            workflowEventsToIgnore_ = other.workflowEventsToIgnore_;
            bitField0_ = (bitField0_ & ~0x00000004);
            workflowEventsToIgnoreBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getWorkflowEventsToIgnoreFieldBuilder() : null;
          } else {
            workflowEventsToIgnoreBuilder_.addAllMessages(other.workflowEventsToIgnore_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getWfRunIdFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              io.littlehorse.sdk.common.proto.WorkflowEventDefId m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.WorkflowEventDefId.parser(),
                      extensionRegistry);
              if (eventDefIdsBuilder_ == null) {
                ensureEventDefIdsIsMutable();
                eventDefIds_.add(m);
              } else {
                eventDefIdsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              io.littlehorse.sdk.common.proto.WorkflowEventId m =
                  input.readMessage(
                      io.littlehorse.sdk.common.proto.WorkflowEventId.parser(),
                      extensionRegistry);
              if (workflowEventsToIgnoreBuilder_ == null) {
                ensureWorkflowEventsToIgnoreIsMutable();
                workflowEventsToIgnore_.add(m);
              } else {
                workflowEventsToIgnoreBuilder_.addMessage(m);
              }
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.littlehorse.sdk.common.proto.WfRunId wfRunId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfRunId, io.littlehorse.sdk.common.proto.WfRunId.Builder, io.littlehorse.sdk.common.proto.WfRunIdOrBuilder> wfRunIdBuilder_;
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     * @return Whether the wfRunId field is set.
     */
    public boolean hasWfRunId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     * @return The wfRunId.
     */
    public io.littlehorse.sdk.common.proto.WfRunId getWfRunId() {
      if (wfRunIdBuilder_ == null) {
        return wfRunId_ == null ? io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : wfRunId_;
      } else {
        return wfRunIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     */
    public Builder setWfRunId(io.littlehorse.sdk.common.proto.WfRunId value) {
      if (wfRunIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        wfRunId_ = value;
      } else {
        wfRunIdBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     */
    public Builder setWfRunId(
        io.littlehorse.sdk.common.proto.WfRunId.Builder builderForValue) {
      if (wfRunIdBuilder_ == null) {
        wfRunId_ = builderForValue.build();
      } else {
        wfRunIdBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     */
    public Builder mergeWfRunId(io.littlehorse.sdk.common.proto.WfRunId value) {
      if (wfRunIdBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          wfRunId_ != null &&
          wfRunId_ != io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance()) {
          getWfRunIdBuilder().mergeFrom(value);
        } else {
          wfRunId_ = value;
        }
      } else {
        wfRunIdBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     */
    public Builder clearWfRunId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      wfRunId_ = null;
      if (wfRunIdBuilder_ != null) {
        wfRunIdBuilder_.dispose();
        wfRunIdBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.WfRunId.Builder getWfRunIdBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getWfRunIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     */
    public io.littlehorse.sdk.common.proto.WfRunIdOrBuilder getWfRunIdOrBuilder() {
      if (wfRunIdBuilder_ != null) {
        return wfRunIdBuilder_.getMessageOrBuilder();
      } else {
        return wfRunId_ == null ?
            io.littlehorse.sdk.common.proto.WfRunId.getDefaultInstance() : wfRunId_;
      }
    }
    /**
     * <pre>
     * The ID of the WfRun which must throw the WorkflowEvent.
     * </pre>
     *
     * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WfRunId, io.littlehorse.sdk.common.proto.WfRunId.Builder, io.littlehorse.sdk.common.proto.WfRunIdOrBuilder> 
        getWfRunIdFieldBuilder() {
      if (wfRunIdBuilder_ == null) {
        wfRunIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.littlehorse.sdk.common.proto.WfRunId, io.littlehorse.sdk.common.proto.WfRunId.Builder, io.littlehorse.sdk.common.proto.WfRunIdOrBuilder>(
                getWfRunId(),
                getParentForChildren(),
                isClean());
        wfRunId_ = null;
      }
      return wfRunIdBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventDefId> eventDefIds_ =
      java.util.Collections.emptyList();
    private void ensureEventDefIdsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        eventDefIds_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.WorkflowEventDefId>(eventDefIds_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WorkflowEventDefId, io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder, io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder> eventDefIdsBuilder_;

    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventDefId> getEventDefIdsList() {
      if (eventDefIdsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(eventDefIds_);
      } else {
        return eventDefIdsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public int getEventDefIdsCount() {
      if (eventDefIdsBuilder_ == null) {
        return eventDefIds_.size();
      } else {
        return eventDefIdsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventDefId getEventDefIds(int index) {
      if (eventDefIdsBuilder_ == null) {
        return eventDefIds_.get(index);
      } else {
        return eventDefIdsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder setEventDefIds(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventDefId value) {
      if (eventDefIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventDefIdsIsMutable();
        eventDefIds_.set(index, value);
        onChanged();
      } else {
        eventDefIdsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder setEventDefIds(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder builderForValue) {
      if (eventDefIdsBuilder_ == null) {
        ensureEventDefIdsIsMutable();
        eventDefIds_.set(index, builderForValue.build());
        onChanged();
      } else {
        eventDefIdsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder addEventDefIds(io.littlehorse.sdk.common.proto.WorkflowEventDefId value) {
      if (eventDefIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventDefIdsIsMutable();
        eventDefIds_.add(value);
        onChanged();
      } else {
        eventDefIdsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder addEventDefIds(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventDefId value) {
      if (eventDefIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventDefIdsIsMutable();
        eventDefIds_.add(index, value);
        onChanged();
      } else {
        eventDefIdsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder addEventDefIds(
        io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder builderForValue) {
      if (eventDefIdsBuilder_ == null) {
        ensureEventDefIdsIsMutable();
        eventDefIds_.add(builderForValue.build());
        onChanged();
      } else {
        eventDefIdsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder addEventDefIds(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder builderForValue) {
      if (eventDefIdsBuilder_ == null) {
        ensureEventDefIdsIsMutable();
        eventDefIds_.add(index, builderForValue.build());
        onChanged();
      } else {
        eventDefIdsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder addAllEventDefIds(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.WorkflowEventDefId> values) {
      if (eventDefIdsBuilder_ == null) {
        ensureEventDefIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, eventDefIds_);
        onChanged();
      } else {
        eventDefIdsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder clearEventDefIds() {
      if (eventDefIdsBuilder_ == null) {
        eventDefIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        eventDefIdsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public Builder removeEventDefIds(int index) {
      if (eventDefIdsBuilder_ == null) {
        ensureEventDefIdsIsMutable();
        eventDefIds_.remove(index);
        onChanged();
      } else {
        eventDefIdsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder getEventDefIdsBuilder(
        int index) {
      return getEventDefIdsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder getEventDefIdsOrBuilder(
        int index) {
      if (eventDefIdsBuilder_ == null) {
        return eventDefIds_.get(index);  } else {
        return eventDefIdsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder> 
         getEventDefIdsOrBuilderList() {
      if (eventDefIdsBuilder_ != null) {
        return eventDefIdsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(eventDefIds_);
      }
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder addEventDefIdsBuilder() {
      return getEventDefIdsFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.WorkflowEventDefId.getDefaultInstance());
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder addEventDefIdsBuilder(
        int index) {
      return getEventDefIdsFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.WorkflowEventDefId.getDefaultInstance());
    }
    /**
     * <pre>
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder> 
         getEventDefIdsBuilderList() {
      return getEventDefIdsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WorkflowEventDefId, io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder, io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder> 
        getEventDefIdsFieldBuilder() {
      if (eventDefIdsBuilder_ == null) {
        eventDefIdsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.WorkflowEventDefId, io.littlehorse.sdk.common.proto.WorkflowEventDefId.Builder, io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder>(
                eventDefIds_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        eventDefIds_ = null;
      }
      return eventDefIdsBuilder_;
    }

    private java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventId> workflowEventsToIgnore_ =
      java.util.Collections.emptyList();
    private void ensureWorkflowEventsToIgnoreIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        workflowEventsToIgnore_ = new java.util.ArrayList<io.littlehorse.sdk.common.proto.WorkflowEventId>(workflowEventsToIgnore_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WorkflowEventId, io.littlehorse.sdk.common.proto.WorkflowEventId.Builder, io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder> workflowEventsToIgnoreBuilder_;

    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventId> getWorkflowEventsToIgnoreList() {
      if (workflowEventsToIgnoreBuilder_ == null) {
        return java.util.Collections.unmodifiableList(workflowEventsToIgnore_);
      } else {
        return workflowEventsToIgnoreBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public int getWorkflowEventsToIgnoreCount() {
      if (workflowEventsToIgnoreBuilder_ == null) {
        return workflowEventsToIgnore_.size();
      } else {
        return workflowEventsToIgnoreBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventId getWorkflowEventsToIgnore(int index) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        return workflowEventsToIgnore_.get(index);
      } else {
        return workflowEventsToIgnoreBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder setWorkflowEventsToIgnore(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventId value) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorkflowEventsToIgnoreIsMutable();
        workflowEventsToIgnore_.set(index, value);
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder setWorkflowEventsToIgnore(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventId.Builder builderForValue) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        ensureWorkflowEventsToIgnoreIsMutable();
        workflowEventsToIgnore_.set(index, builderForValue.build());
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder addWorkflowEventsToIgnore(io.littlehorse.sdk.common.proto.WorkflowEventId value) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorkflowEventsToIgnoreIsMutable();
        workflowEventsToIgnore_.add(value);
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder addWorkflowEventsToIgnore(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventId value) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorkflowEventsToIgnoreIsMutable();
        workflowEventsToIgnore_.add(index, value);
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder addWorkflowEventsToIgnore(
        io.littlehorse.sdk.common.proto.WorkflowEventId.Builder builderForValue) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        ensureWorkflowEventsToIgnoreIsMutable();
        workflowEventsToIgnore_.add(builderForValue.build());
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder addWorkflowEventsToIgnore(
        int index, io.littlehorse.sdk.common.proto.WorkflowEventId.Builder builderForValue) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        ensureWorkflowEventsToIgnoreIsMutable();
        workflowEventsToIgnore_.add(index, builderForValue.build());
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder addAllWorkflowEventsToIgnore(
        java.lang.Iterable<? extends io.littlehorse.sdk.common.proto.WorkflowEventId> values) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        ensureWorkflowEventsToIgnoreIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, workflowEventsToIgnore_);
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder clearWorkflowEventsToIgnore() {
      if (workflowEventsToIgnoreBuilder_ == null) {
        workflowEventsToIgnore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public Builder removeWorkflowEventsToIgnore(int index) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        ensureWorkflowEventsToIgnoreIsMutable();
        workflowEventsToIgnore_.remove(index);
        onChanged();
      } else {
        workflowEventsToIgnoreBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventId.Builder getWorkflowEventsToIgnoreBuilder(
        int index) {
      return getWorkflowEventsToIgnoreFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder getWorkflowEventsToIgnoreOrBuilder(
        int index) {
      if (workflowEventsToIgnoreBuilder_ == null) {
        return workflowEventsToIgnore_.get(index);  } else {
        return workflowEventsToIgnoreBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public java.util.List<? extends io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder> 
         getWorkflowEventsToIgnoreOrBuilderList() {
      if (workflowEventsToIgnoreBuilder_ != null) {
        return workflowEventsToIgnoreBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(workflowEventsToIgnore_);
      }
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventId.Builder addWorkflowEventsToIgnoreBuilder() {
      return getWorkflowEventsToIgnoreFieldBuilder().addBuilder(
          io.littlehorse.sdk.common.proto.WorkflowEventId.getDefaultInstance());
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public io.littlehorse.sdk.common.proto.WorkflowEventId.Builder addWorkflowEventsToIgnoreBuilder(
        int index) {
      return getWorkflowEventsToIgnoreFieldBuilder().addBuilder(
          index, io.littlehorse.sdk.common.proto.WorkflowEventId.getDefaultInstance());
    }
    /**
     * <pre>
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     * </pre>
     *
     * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
     */
    public java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventId.Builder> 
         getWorkflowEventsToIgnoreBuilderList() {
      return getWorkflowEventsToIgnoreFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.littlehorse.sdk.common.proto.WorkflowEventId, io.littlehorse.sdk.common.proto.WorkflowEventId.Builder, io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder> 
        getWorkflowEventsToIgnoreFieldBuilder() {
      if (workflowEventsToIgnoreBuilder_ == null) {
        workflowEventsToIgnoreBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.littlehorse.sdk.common.proto.WorkflowEventId, io.littlehorse.sdk.common.proto.WorkflowEventId.Builder, io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder>(
                workflowEventsToIgnore_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        workflowEventsToIgnore_ = null;
      }
      return workflowEventsToIgnoreBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:littlehorse.AwaitWorkflowEventRequest)
  }

  // @@protoc_insertion_point(class_scope:littlehorse.AwaitWorkflowEventRequest)
  private static final io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest();
  }

  public static io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AwaitWorkflowEventRequest>
      PARSER = new com.google.protobuf.AbstractParser<AwaitWorkflowEventRequest>() {
    @java.lang.Override
    public AwaitWorkflowEventRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AwaitWorkflowEventRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AwaitWorkflowEventRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.littlehorse.sdk.common.proto.AwaitWorkflowEventRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

