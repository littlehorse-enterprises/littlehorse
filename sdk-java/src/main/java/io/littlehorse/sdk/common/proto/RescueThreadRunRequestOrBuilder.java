// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package io.littlehorse.sdk.common.proto;

public interface RescueThreadRunRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.RescueThreadRunRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The id of the `WfRun` which we are going to rescue.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   * @return Whether the wfRunId field is set.
   */
  boolean hasWfRunId();
  /**
   * <pre>
   * The id of the `WfRun` which we are going to rescue.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   * @return The wfRunId.
   */
  io.littlehorse.sdk.common.proto.WfRunId getWfRunId();
  /**
   * <pre>
   * The id of the `WfRun` which we are going to rescue.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   */
  io.littlehorse.sdk.common.proto.WfRunIdOrBuilder getWfRunIdOrBuilder();

  /**
   * <pre>
   * The number of the failed `ThreadRun` that we will rescue. The specified
   * `ThreadRun` must be in a state where it's latest `NodeRun` is: &lt;br/&gt;
   * - In the `ERROR` state.&lt;br/&gt;
   * - Has no `FailureHandler` `ThreadRun`s &lt;br/&gt;
   * - The parent `ThreadRun`, or any parent of the parent, has not handled the `Failure`
   * yet.
   *
   * If that is not true, then the `ThreadRun` cannot be rescued and the request
   * will return `FAILED_PRECONDITION`.
   * </pre>
   *
   * <code>int32 thread_run_number = 2;</code>
   * @return The threadRunNumber.
   */
  int getThreadRunNumber();

  /**
   * <pre>
   * If set to `true`, then the ThreadRun will skip past the `Node` of the
   * current failed `NodeRun` and advance according to the outgoing edges.
   * If set to `false`, then the `ThreadRun` will schedule another `NodeRun` for
   * the current `Node`
   * </pre>
   *
   * <code>bool skip_current_node = 3;</code>
   * @return The skipCurrentNode.
   */
  boolean getSkipCurrentNode();
}
