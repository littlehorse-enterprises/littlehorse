// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package io.littlehorse.sdk.common.proto;

public interface AwaitWorkflowEventRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.AwaitWorkflowEventRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The ID of the WfRun which must throw the WorkflowEvent.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   * @return Whether the wfRunId field is set.
   */
  boolean hasWfRunId();
  /**
   * <pre>
   * The ID of the WfRun which must throw the WorkflowEvent.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   * @return The wfRunId.
   */
  io.littlehorse.sdk.common.proto.WfRunId getWfRunId();
  /**
   * <pre>
   * The ID of the WfRun which must throw the WorkflowEvent.
   * </pre>
   *
   * <code>.littlehorse.WfRunId wf_run_id = 1;</code>
   */
  io.littlehorse.sdk.common.proto.WfRunIdOrBuilder getWfRunIdOrBuilder();

  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventDefId> 
      getEventDefIdsList();
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  io.littlehorse.sdk.common.proto.WorkflowEventDefId getEventDefIds(int index);
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  int getEventDefIdsCount();
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  java.util.List<? extends io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder> 
      getEventDefIdsOrBuilderList();
  /**
   * <pre>
   * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
   * WorkflowEvent thrown. If event_def_ids is empty, then the request will return the first
   * WorkflowEvent thrown by the WfRun.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventDefId event_def_ids = 2;</code>
   */
  io.littlehorse.sdk.common.proto.WorkflowEventDefIdOrBuilder getEventDefIdsOrBuilder(
      int index);

  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  java.util.List<io.littlehorse.sdk.common.proto.WorkflowEventId> 
      getWorkflowEventsToIgnoreList();
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  io.littlehorse.sdk.common.proto.WorkflowEventId getWorkflowEventsToIgnore(int index);
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  int getWorkflowEventsToIgnoreCount();
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  java.util.List<? extends io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder> 
      getWorkflowEventsToIgnoreOrBuilderList();
  /**
   * <pre>
   * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
   * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
   * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
   * </pre>
   *
   * <code>repeated .littlehorse.WorkflowEventId workflow_events_to_ignore = 3;</code>
   */
  io.littlehorse.sdk.common.proto.WorkflowEventIdOrBuilder getWorkflowEventsToIgnoreOrBuilder(
      int index);
}
