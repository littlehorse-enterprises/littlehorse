// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_wfspec.proto

package io.littlehorse.sdk.common.proto;

public interface VariableDefOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.VariableDef)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * DEPRECATED: The Type of the variable.
   *
   * After 0.13.2, this has been replaced by the nested `TypeDefinition` field.
   * We retain this field for compatibility purposes but clients should not use
   * it going forward. To be removed in a future release.
   * </pre>
   *
   * <code>optional .littlehorse.VariableType type = 1;</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <pre>
   * DEPRECATED: The Type of the variable.
   *
   * After 0.13.2, this has been replaced by the nested `TypeDefinition` field.
   * We retain this field for compatibility purposes but clients should not use
   * it going forward. To be removed in a future release.
   * </pre>
   *
   * <code>optional .littlehorse.VariableType type = 1;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * DEPRECATED: The Type of the variable.
   *
   * After 0.13.2, this has been replaced by the nested `TypeDefinition` field.
   * We retain this field for compatibility purposes but clients should not use
   * it going forward. To be removed in a future release.
   * </pre>
   *
   * <code>optional .littlehorse.VariableType type = 1;</code>
   * @return The type.
   */
  io.littlehorse.sdk.common.proto.VariableType getType();

  /**
   * <pre>
   * The name of the variable.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the variable.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Optional default value if the variable isn't set; for example, in a ThreadRun
   * if you start a ThreadRun or WfRun without passing a variable in, then this is
   * used.
   * </pre>
   *
   * <code>optional .littlehorse.VariableValue default_value = 3;</code>
   * @return Whether the defaultValue field is set.
   */
  boolean hasDefaultValue();
  /**
   * <pre>
   * Optional default value if the variable isn't set; for example, in a ThreadRun
   * if you start a ThreadRun or WfRun without passing a variable in, then this is
   * used.
   * </pre>
   *
   * <code>optional .littlehorse.VariableValue default_value = 3;</code>
   * @return The defaultValue.
   */
  io.littlehorse.sdk.common.proto.VariableValue getDefaultValue();
  /**
   * <pre>
   * Optional default value if the variable isn't set; for example, in a ThreadRun
   * if you start a ThreadRun or WfRun without passing a variable in, then this is
   * used.
   * </pre>
   *
   * <code>optional .littlehorse.VariableValue default_value = 3;</code>
   */
  io.littlehorse.sdk.common.proto.VariableValueOrBuilder getDefaultValueOrBuilder();

  /**
   * <pre>
   * DEPRECATED: If true, the variable value will show as a masked string.
   *
   * After 0.13.2, this has been replaced by the nested `TypeDefinition` field.
   * We retain this field for compatibility purposes but clients should not use
   * it going forward. To be removed in a future release.
   * </pre>
   *
   * <code>optional bool masked_value = 4;</code>
   * @return Whether the maskedValue field is set.
   */
  boolean hasMaskedValue();
  /**
   * <pre>
   * DEPRECATED: If true, the variable value will show as a masked string.
   *
   * After 0.13.2, this has been replaced by the nested `TypeDefinition` field.
   * We retain this field for compatibility purposes but clients should not use
   * it going forward. To be removed in a future release.
   * </pre>
   *
   * <code>optional bool masked_value = 4;</code>
   * @return The maskedValue.
   */
  boolean getMaskedValue();

  /**
   * <pre>
   * Type Information for this variable.
   *
   * This is the default as of 0.13.2 and will become the only supported way
   * (i.e. it will be no longer `optional`).
   * </pre>
   *
   * <code>optional .littlehorse.TypeDefinition type_def = 5;</code>
   * @return Whether the typeDef field is set.
   */
  boolean hasTypeDef();
  /**
   * <pre>
   * Type Information for this variable.
   *
   * This is the default as of 0.13.2 and will become the only supported way
   * (i.e. it will be no longer `optional`).
   * </pre>
   *
   * <code>optional .littlehorse.TypeDefinition type_def = 5;</code>
   * @return The typeDef.
   */
  io.littlehorse.sdk.common.proto.TypeDefinition getTypeDef();
  /**
   * <pre>
   * Type Information for this variable.
   *
   * This is the default as of 0.13.2 and will become the only supported way
   * (i.e. it will be no longer `optional`).
   * </pre>
   *
   * <code>optional .littlehorse.TypeDefinition type_def = 5;</code>
   */
  io.littlehorse.sdk.common.proto.TypeDefinitionOrBuilder getTypeDefOrBuilder();
}
