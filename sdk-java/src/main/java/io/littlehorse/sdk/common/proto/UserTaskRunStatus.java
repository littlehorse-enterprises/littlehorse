// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_tasks.proto

package io.littlehorse.sdk.common.proto;

/**
 * <pre>
 * The status that a UserTaskRun can be in.
 * </pre>
 *
 * Protobuf enum {@code littlehorse.UserTaskRunStatus}
 */
public enum UserTaskRunStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Not assigned to a specific user yet.
   * </pre>
   *
   * <code>UNASSIGNED = 0;</code>
   */
  UNASSIGNED(0),
  /**
   * <pre>
   * Assigned to a specific user, but not completed or cancelled yet.
   * </pre>
   *
   * <code>ASSIGNED = 1;</code>
   */
  ASSIGNED(1),
  /**
   * <pre>
   * Done.
   * </pre>
   *
   * <code>DONE = 3;</code>
   */
  DONE(3),
  /**
   * <pre>
   * Cancelled.
   * </pre>
   *
   * <code>CANCELLED = 4;</code>
   */
  CANCELLED(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Not assigned to a specific user yet.
   * </pre>
   *
   * <code>UNASSIGNED = 0;</code>
   */
  public static final int UNASSIGNED_VALUE = 0;
  /**
   * <pre>
   * Assigned to a specific user, but not completed or cancelled yet.
   * </pre>
   *
   * <code>ASSIGNED = 1;</code>
   */
  public static final int ASSIGNED_VALUE = 1;
  /**
   * <pre>
   * Done.
   * </pre>
   *
   * <code>DONE = 3;</code>
   */
  public static final int DONE_VALUE = 3;
  /**
   * <pre>
   * Cancelled.
   * </pre>
   *
   * <code>CANCELLED = 4;</code>
   */
  public static final int CANCELLED_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static UserTaskRunStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static UserTaskRunStatus forNumber(int value) {
    switch (value) {
      case 0: return UNASSIGNED;
      case 1: return ASSIGNED;
      case 3: return DONE;
      case 4: return CANCELLED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<UserTaskRunStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      UserTaskRunStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<UserTaskRunStatus>() {
          public UserTaskRunStatus findValueByNumber(int number) {
            return UserTaskRunStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.littlehorse.sdk.common.proto.UserTasks.getDescriptor().getEnumTypes().get(0);
  }

  private static final UserTaskRunStatus[] VALUES = values();

  public static UserTaskRunStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private UserTaskRunStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:littlehorse.UserTaskRunStatus)
}

