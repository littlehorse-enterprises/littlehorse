// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package io.littlehorse.sdk.common.proto;

public interface ValidateStructDefEvolutionRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.ValidateStructDefEvolutionRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The ID of the StructDef you want to compare against that already exists on the server.
   * </pre>
   *
   * <code>.littlehorse.StructDefId struct_def_id = 1;</code>
   * @return Whether the structDefId field is set.
   */
  boolean hasStructDefId();
  /**
   * <pre>
   * The ID of the StructDef you want to compare against that already exists on the server.
   * </pre>
   *
   * <code>.littlehorse.StructDefId struct_def_id = 1;</code>
   * @return The structDefId.
   */
  io.littlehorse.sdk.common.proto.StructDefId getStructDefId();
  /**
   * <pre>
   * The ID of the StructDef you want to compare against that already exists on the server.
   * </pre>
   *
   * <code>.littlehorse.StructDefId struct_def_id = 1;</code>
   */
  io.littlehorse.sdk.common.proto.StructDefIdOrBuilder getStructDefIdOrBuilder();

  /**
   * <pre>
   * The new StructDef schema.
   * </pre>
   *
   * <code>.littlehorse.InlineStructDef struct_def = 2;</code>
   * @return Whether the structDef field is set.
   */
  boolean hasStructDef();
  /**
   * <pre>
   * The new StructDef schema.
   * </pre>
   *
   * <code>.littlehorse.InlineStructDef struct_def = 2;</code>
   * @return The structDef.
   */
  io.littlehorse.sdk.common.proto.InlineStructDef getStructDef();
  /**
   * <pre>
   * The new StructDef schema.
   * </pre>
   *
   * <code>.littlehorse.InlineStructDef struct_def = 2;</code>
   */
  io.littlehorse.sdk.common.proto.InlineStructDefOrBuilder getStructDefOrBuilder();

  /**
   * <pre>
   * The server will validate the new StructDef schema against
   * the existing StructDef schema based on this compatibility type.
   * </pre>
   *
   * <code>.littlehorse.StructDefCompatibilityType compatibility_type = 3;</code>
   * @return The enum numeric value on the wire for compatibilityType.
   */
  int getCompatibilityTypeValue();
  /**
   * <pre>
   * The server will validate the new StructDef schema against
   * the existing StructDef schema based on this compatibility type.
   * </pre>
   *
   * <code>.littlehorse.StructDefCompatibilityType compatibility_type = 3;</code>
   * @return The compatibilityType.
   */
  io.littlehorse.sdk.common.proto.StructDefCompatibilityType getCompatibilityType();
}
