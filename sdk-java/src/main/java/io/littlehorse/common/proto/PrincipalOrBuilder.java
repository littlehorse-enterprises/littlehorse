// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acls.proto

package io.littlehorse.common.proto;

public interface PrincipalOrBuilder extends
    // @@protoc_insertion_point(interface_extends:littlehorse.Principal)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Principals are agnostic of the Authentication protocol that you use. In OAuth,
   * the id is retrieved by looking at the claims on the request. In mTLS, the
   * id is retrived by looking at the Subject Name of the client certificate.
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * Principals are agnostic of the Authentication protocol that you use. In OAuth,
   * the id is retrieved by looking at the claims on the request. In mTLS, the
   * id is retrived by looking at the Subject Name of the client certificate.
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * Maps a Tenant ID to a list of ACL's that the Principal has permission to
   * execute *within that Tenant*
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.ServerACL&gt; tenant_acl_map = 2;</code>
   */
  int getTenantAclMapCount();
  /**
   * <pre>
   * Maps a Tenant ID to a list of ACL's that the Principal has permission to
   * execute *within that Tenant*
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.ServerACL&gt; tenant_acl_map = 2;</code>
   */
  boolean containsTenantAclMap(
      java.lang.String key);
  /**
   * Use {@link #getTenantAclMapMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.littlehorse.common.proto.ServerACL>
  getTenantAclMap();
  /**
   * <pre>
   * Maps a Tenant ID to a list of ACL's that the Principal has permission to
   * execute *within that Tenant*
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.ServerACL&gt; tenant_acl_map = 2;</code>
   */
  java.util.Map<java.lang.String, io.littlehorse.common.proto.ServerACL>
  getTenantAclMapMap();
  /**
   * <pre>
   * Maps a Tenant ID to a list of ACL's that the Principal has permission to
   * execute *within that Tenant*
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.ServerACL&gt; tenant_acl_map = 2;</code>
   */
  /* nullable */
io.littlehorse.common.proto.ServerACL getTenantAclMapOrDefault(
      java.lang.String key,
      /* nullable */
io.littlehorse.common.proto.ServerACL defaultValue);
  /**
   * <pre>
   * Maps a Tenant ID to a list of ACL's that the Principal has permission to
   * execute *within that Tenant*
   * </pre>
   *
   * <code>map&lt;string, .littlehorse.ServerACL&gt; tenant_acl_map = 2;</code>
   */
  io.littlehorse.common.proto.ServerACL getTenantAclMapOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Sets permissions that this Principal has *for any Tenant* in the LH Cluster.
   * </pre>
   *
   * <code>.littlehorse.ServerACLs global_acls = 3;</code>
   * @return Whether the globalAcls field is set.
   */
  boolean hasGlobalAcls();
  /**
   * <pre>
   * Sets permissions that this Principal has *for any Tenant* in the LH Cluster.
   * </pre>
   *
   * <code>.littlehorse.ServerACLs global_acls = 3;</code>
   * @return The globalAcls.
   */
  io.littlehorse.common.proto.ServerACLs getGlobalAcls();
  /**
   * <pre>
   * Sets permissions that this Principal has *for any Tenant* in the LH Cluster.
   * </pre>
   *
   * <code>.littlehorse.ServerACLs global_acls = 3;</code>
   */
  io.littlehorse.common.proto.ServerACLsOrBuilder getGlobalAclsOrBuilder();
}
