plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.diffplug.spotless' version '6.20.0'
}

sourceCompatibility=11
targetCompatibility=11

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    repositories {
        maven {
            name = "ossrh"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = 'littlehorse-client'
            version = version
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'LittleHorse Client'
                description = 'LittleHorse is a high-performance microservice orchestration engine that allows developers to build scalable, maintainable, and observable applications'
                url = 'https://github.com/littlehorse-enterprises/littlehorse'
                licenses {
                    license {
                        name = 'Server Side Public License, Version 1'
                        url = 'https://spdx.org/licenses/SSPL-1.0.html'
                    }
                }
                developers {
                    developer {
                        name = 'LittleHorse Engineering'
                        email = 'engineering@littlehorse.io'
                    }
                }
                scm {
                    url = 'https://github.com/littlehorse-enterprises/littlehorse'
                    connection = 'scm:git://github.com/littlehorse-enterprises/littlehorse.git'
                    developerConnection = 'scm:git:ssh://github.com/littlehorse-enterprises/littlehorse.git'
                }
                packaging = 'jar'
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.0.0'
    testImplementation 'net.datafaker:datafaker:1.9.0'
    testImplementation 'org.slf4j:slf4j-log4j12:2.0.7'
    testImplementation 'org.mockito:mockito-core:5.2.0'

    // Logging interface
    implementation 'org.slf4j:slf4j-api:2.0.7'

    // Utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.awaitility:awaitility:4.2.0'

    // OAuth
    implementation 'com.nimbusds:oauth2-oidc-sdk:10.9.2'

    // Lombok stuffs
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // JSONPath
    api 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'
    api 'com.jayway.jsonpath:json-path:2.8.0'

    // Protobuf
    api "io.grpc:grpc-netty-shaded:${grpcVersion}"
    api "io.grpc:grpc-protobuf:${grpcVersion}"
    api "io.grpc:grpc-services:${grpcVersion}"
    api "io.grpc:grpc-stub:${grpcVersion}"
    api 'com.google.protobuf:protobuf-java:3.23.4'
    api 'com.google.protobuf:protobuf-java-util:3.23.4'
    api 'org.apache.tomcat:annotations-api:6.0.53'

    // Mocking
    testImplementation 'org.mockito:mockito-core:5.5.0'
}

// This is required so that we can use the Reflection API to determine the names
// of parameters for Task Functions and match them to the TaskDef param names.
compileJava {
    options.compilerArgs << '-parameters'
}

javadoc {
    excludes = [
        'io/littlehorse/sdk/common/proto/**',
        'io/littlehorse/sdk/wfsdk/internal/**',
        'io/littlehorse/sdk/worker/internal/**',
        'io/littlehorse/sdk/common/util/**',
        'io/littlehorse/sdk/common/LHLibUtil.java',
        '**/ConfigBase.java',
        'io/littlehorse/sdk/common/exception/**'
    ]
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    jvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '--add-opens', 'java.base/java.util=ALL-UNNAMED']
}
spotless {
    java {
        target('**/*.java')
        targetExclude('**/proto/*.java')
        palantirJavaFormat()
    }
}
